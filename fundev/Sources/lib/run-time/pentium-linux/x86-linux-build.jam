#
# Configuration variables
#

CC ?= gcc ;

MKF ?= dylanmakefile.mkf ;

SUFOBJ ?= .o ;			# object files suffix
SUFASM ?= .s ;			# assembly source files suffix
SUFDLL ?= .so ;			# shared library suffix

# SYSTEM_ROOT is set by the build-system
SYSTEM_LIBDIR ?= $(SYSTEM_ROOT)/lib ;
SYSTEM_BINDIR ?= $(SYSTEM_ROOT)/bin ;

# PERSONAL_ROOT is set by the build-system
PERSONAL_LIBDIR ?= $(PERSONAL_ROOT)/lib ;
PERSONAL_BINDIR ?= $(PERSONAL_ROOT)/bin ;

LINKFLAGS ?= -L$(PERSONAL_LIBDIR) -L$(SYSTEM_LIBDIR) ;
RPATH ?= $(PERSONAL_LIBDIR):$(SYSTEM_LIBDIR) ;

LINKSCRIPTDLL ?= $(SYSTEM_LIBDIR)/dylan-elf-dll.script ;
LINKSCRIPTEXE ?= $(SYSTEM_LIBDIR)/dylan-elf-exe.script ;

#
# Runtime
#

RTOBJS ?= runtime.o
	  x86-linux-collector.o
	  x86-linux-threads-primitives.o
	  linux-spy-interfaces.o
	  linux-support.o ;

rtlibs ?= $(PERSONAL_LIBDIR)/runtime/$(RTOBJS)
	  -lmmdw -lmpsplan -lpthread -ldl ;

guilflags ?= ;

#
# Jambase
#
include $(SYSTEM_LIBDIR)/mini-jambase.jam ;

#
# Pseudo-targets
#

NotFile all lib dll exe unify-dll unify-exe release dirs clean clean-all ;
Always clean clean-all ;

#
# Rules called from jam-build
#

# In each of the following rules, $(image[1]) contains the name from
# the Library: header, and $(image[2]) contains the name from
# the Executable: header (if present).

rule DylanLibrary image : version {
  # DylanLibrary image : version ;
  #Echo DylanLibrary $(image) ":" $(version) ;

  # Link a Dylan library as a shared library or executable image.

  # We'll use the library name as the grist to identify referenced
  # source and object files.
  
  SOURCE_GRIST = $(image[1]) ;

  local _dll = [ FDLLName $(image) ] ;
  local _exe = [ FEXEName $(image) ] ;

  # Here we save the name of the DLL for this library.
  
  _dll_$(image[1]) = $(_dll) ;

  # Shared libraries and executable images

  MakeLocate $(_dll) : $(PERSONAL_LIBDIR) ;
  MakeLocate $(_exe) : $(PERSONAL_BINDIR) ;

  # The executable depends only on _main.o and the DLL.

  local _obj = [ FGristFiles _main$(SUFOBJ) ] ;
  local _asm = [ FGristFiles _main$(SUFASM) ] ;
  SEARCH on $(_obj) $(_asm) = $(SEARCH_SOURCE) ;

  Depends $(_exe) : $(_dll) ;
  LINKLIBS on $(_exe) += -l$(image[1]) ;
  LinkEXE $(_exe) : $(_obj) ;

  # If this is the top-level project, make the dll, exe, and clean
  # targets depend on its build products.
  
  if ! $(PARENT) {
    Depends dll : $(_dll) ;
    Depends exe : $(_exe) ;

    Clean clean : $(_dll) $(_exe) $(_obj) $(_asm) ;
  }
  Clean clean-all : $(_dll) $(_exe) $(_obj) $(_asm) ;

  # Mark the library version

  VERSION on $(_dll) ?= $(version:J=.) ;
  VERSION on $(_exe) ?= $(version:J=.) ;
}

rule DylanLibraryFiles image : files {
  # DylanLibraryFiles image : files ;
  #Echo DylanLibraryFiles $(image) ":" $(files) ;

  # Link Dylan-derived object files into the resulting shared library.
  
  local _dll = [ FDLLName $(image) ] ;

  local _obj = [ FGristFiles _glue$(SUFOBJ) $(files:S=$(SUFOBJ)) ] ;
  local _asm = [ FGristFiles _glue$(SUFASM) $(files:S=$(SUFASM)) ] ;
  local _el  = [ FGristFiles $(files:S=.el) ] ;
  SEARCH on $(_obj) $(_asm) $(_el) = $(SEARCH_SOURCE) ;

  if ! $(PARENT) {
    Clean clean : $(_obj) $(_asm) $(_el) ;
  }
  Clean clean-all : $(_obj) $(_asm) $(_el) ;

  LinkDLL $(_dll) : $(_obj) ;
}

rule DylanLibraryLinkerOptions image : options {
  # DylanLibraryLinkerOptions image : options ;
  #Echo DylanLibraryLinkerOptions $(image) ":" $(options) ;

  # Add the given options to the link command line of the shared library
  # and executable images.

  local _dll = [ FDLLName $(image) ] ;
  local _exe = [ FEXEName $(image) ] ;

  LINKLIBS on $(_dll) += $(options) ;
  LINKLIBS on $(_exe) += $(options) ;
}

rule DylanLibraryBaseAddress image : address {
  # DylanLibraryBaseAddress image : address ;
  #Echo DylanLibraryBaseAddress $(image) ":" $(address) ;

  # Set the base address of the shared library.
  
  local _dll = [ FDLLName $(image) ] ;
  BASE on $(_dll) ?= $(address) ;
}

rule DylanLibraryCLibraries image : libraries {
  # DylanLibraryCLibraries image : libraries ;
  #Echo DylanLibraryCLibraries $(image) ":" $(libraries) ;

  # Link C (or other externally-derived) libraries into the shared library.
  
  local _dll = [ FDLLName $(image) ] ;

  for lib in $(libraries) {
    switch $(lib) {
      case -L* : LINKLIBS on $(_dll) += $(lib) ;
      case -l* : LINKLIBS on $(_dll) += $(lib) ;
      case *.a : lib = [ FGristFiles $(lib) ] ;
		 SEARCH on $(lib) = $(SEARCH_SOURCE) ;
		 Depends $(_dll) : $(lib) ;
		 NEEDLIBS on $(_dll) += $(lib) ;
      case * :   Exit Unknown C library $(lib) ;
    }
  }
}

rule DylanLibraryCObjects image : objects {
  # DylanLibraryCObjects image : objects ;
  #Echo DylanLibraryCObjects $(image) ":" $(objects) ;

  # Link C (or other externally-derived) object files into the shared library.
  
  local _dll = [ FDLLName $(image) ] ;
  SEARCH on $(objects) = $(SEARCH_SOURCE) ;
  LinkDLL $(_dll) : $(objects) ;
}

rule DylanLibraryCSources image : sources {
  # DylanLibraryCSources image : sources ;
  #Echo DylanLibraryCSources $(image) ":" $(sources) ;

  # Link C source files into the shared library.

  Exit DylanLibraryCSources $(image) is not yet implemented ;
}

rule DylanLibraryCHeaders image : headers {
  # DylanLibraryCHeaders image : headers ;
  #Echo DylanLibraryCHeaders $(image) ":" $(headers) ;

  # Mark the shared library as depending on the given header files.
  # TODO: The original build-system didn't do anything with this either.

  Echo Ignoring DylanLibraryCHeaders $(image) ":" $(headers) ;
}

rule DylanLibraryRCFiles image : rcfiles {
  # DylanLibraryRCFiles image : rcfiles ;
  #Echo DylanLibraryRCFiles $(image) ":" $(rcfiles) ;
  
  # Link Win32 resource files into the shared library and executable.
  
  Echo Ignoring RC file(s) $(rcfiles) ;
}

rule DylanLibraryJamIncludes image : includes {
  # DylanLibraryJamIncludes image : includes ;
  
  Echo Ignoring Jam include file(s) $(includes) ;
}

rule DylanLibraryUses image : library : dir {
  # DylanLibraryUses image : library : dir ;
  #Echo DylanLibraryUses $(image) ":" $(library) ":" $(dir) ;

  # Link other Dylan libraries into the shared library.
  
  local _dll = [ FDLLName $(image) ] ;

  LINKLIBS on $(_dll) += -l$(library) ;

  if $(_dll_$(library)) {
    # We already know the DLL name; add the dependency.
    
    Depends $(_dll) : $(_dll_$(library)) ;
  } else if $(dir) = system {
    # This is a system library; guess at the DLL name.
    # TODO: read $(SYSTEM_LIBDIR)/$(library).mkf
    
    local _system_dll = [ FDLLName $(library) ] ;
    MakeLocate $(_system_dll) : $(SYSTEM_LIBDIR) ;
    Depends $(_dll) : $(_system_dll) ;
  } else {
    # Another personal library; read its mkf.
    
    local PARENT = $(image[1]) ;

    local SEARCH_SOURCE LOCATE_SOURCE LOCATE_TARGET = $(dir) ;
    local SOURCE_GRIST ;

    local _mkf = $(MKF:G=$(library)) ;
    SEARCH on $(_mkf) ?= $(SEARCH_SOURCE) ;
    IncludeMKF $(_mkf) ;

    # Now that we know the DLL name of $(library), add the dependency.

    Depends $(_dll) : $(_dll_$(library)) ;
  }
}

#
# Build rules and actions
#

rule LinkDLL {
  Depends $(<) : $(>) ;
}

actions together LinkDLL bind NEEDLIBS {
  $(CC) -shared -o $(<) -T $(LINKSCRIPTDLL) $(LINKFLAGS) $(>) $(NEEDLIBS) $(LINKLIBS)
}

rule LinkEXE {
  Depends $(<) : $(>) ;
}

actions LinkEXE bind NEEDLIBS {
  $(CC) -o $(<) -T $(LINKSCRIPTEXE) -Wl,-rpath,$(RPATH) $(LINKFLAGS) $(>) $(NEEDLIBS) $(LINKLIBS)
}

#
# Utility rules
#

rule FDLLName {
  return lib$(<[1]:S=$(SUFDLL)) ;
}

rule FEXEName {
  return $(<[1]) ;
}
