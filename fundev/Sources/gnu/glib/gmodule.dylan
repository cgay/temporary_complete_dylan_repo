Module:    glib
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "gmodule.h"; do not edit.

// enum GModuleFlags:
define C-pointer-type <GModuleFlags*> => <GModuleFlags>;
define C-pointer-type <GModuleFlags**> => <GModuleFlags*>;
define inline-only constant $G-MODULE-BIND-LAZY = ash(1,0);
define inline-only constant $G-MODULE-BIND-MASK = #x01;

define C-pointer-type <GModuleCheckInit*> => <GModuleCheckInit>;
define C-pointer-type <GModuleCheckInit**> => <GModuleCheckInit*>;
define C-pointer-type <GModuleUnload*> => <GModuleUnload>;
define C-pointer-type <GModuleUnload**> => <GModuleUnload*>;

define inline-only C-function g-module-supported
  result value :: <gboolean>;
  c-name: "g_module_supported";
end;

define inline-only C-function g-module-open
  parameter file_name1 ::  /* const */ <gchar*>;
  parameter flags2     :: <C-int>;
  result value :: <GModule*>;
  c-name: "g_module_open";
end;

define inline-only C-function g-module-close
  parameter module1    :: <GModule*>;
  result value :: <gboolean>;
  c-name: "g_module_close";
end;

define inline-only C-function g-module-make-resident
  parameter module1    :: <GModule*>;
  c-name: "g_module_make_resident";
end;

define inline-only C-function g-module-error
  result value :: <gchar*>;
  c-name: "g_module_error";
end;

define inline-only C-function g-module-symbol
  parameter module1    :: <GModule*>;
  parameter symbol_name2 ::  /* const */ <gchar*>;
  parameter symbol3    :: <gpointer*>;
  result value :: <gboolean>;
  c-name: "g_module_symbol";
end;

define inline-only C-function g-module-name
  parameter module1    :: <GModule*>;
  result value :: <gchar*>;
  c-name: "g_module_name";
end;

define inline-only C-function g-module-build-path
  parameter directory1 ::  /* const */ <gchar*>;
  parameter module_name2 ::  /* const */ <gchar*>;
  result value :: <gchar*>;
  c-name: "g_module_build_path";
end;

define inline constant <GModuleFlags> = <c-signed-int>;
define inline constant <GModuleCheckInit> = <C-function-pointer>;
define inline constant <GModuleUnload> = <C-function-pointer>;
