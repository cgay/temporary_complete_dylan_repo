Module: dfmc-reader
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// Notes: No right arrow for a single component production means just
// return that.

`
(begin (define-lambda |parser-ACTION0| ($1) (declare (ignore $1)) $1)
       (define-lambda |parser-ACTION1| ($1) (declare (ignore $1)) #f)
       (define-lambda |parser-ACTION2| ($1 $2) (declare (ignore $1 $2))
        $1)
       (define-lambda |parser-ACTION3| ($1 $2 $3)
        (declare (ignore $1 $2 $3)) $2)
       (define-lambda |parser-ACTION43| nil (declare (ignore)) #f)
       (define-lambda |parser-ACTION71| nil (declare (ignore))
        (empty-body-fragment))
       (define-lambda |parser-ACTION72| ($1 $2)
        (declare (ignore $1 $2)) (body-fragment (elements $1)))
       (define-lambda |parser-ACTION74| nil (declare (ignore))
        (quote nil))
       (define-lambda |parser-ACTION75| ($1 $2 $3)
        (declare (ignore $1 $2 $3)) (append-element! $1 $3))
       (define-lambda |parser-ACTION76| ($1) (declare (ignore $1))
        (append-sequence $1))
       (define-lambda |parser-ACTION82| ($1 $2 $3)
        (declare (ignore $1 $2 $3)) (concatenate $1 (pair $2 $3)))
       (define-lambda |parser-ACTION84| ($1 $2)
        (declare (ignore $1 $2)) (pair $1 $2))
       (define-lambda |parser-ACTION135| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (make <braces-fragment> :source-location (between $1 $3)
         :left-delimiter $1 :nested-fragments $2 :right-delimiter $3))
       (define-lambda |parser-ACTION136| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (make <brackets-fragment> :source-location (between $1 $3)
         :left-delimiter $1 :nested-fragments $2 :right-delimiter $3))
       (define-lambda |parser-ACTION137| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (make <parens-fragment> :source-location (between $1 $3)
         :left-delimiter $1 :nested-fragments $2 :right-delimiter $3))
       (define-lambda |parser-ACTION144| ($1 $2)
        (declare (ignore $1 $2))
        (make <local-declaration-fragment> :source-location
         (between $1 $2) :macro $1 :list-fragment $2))
       (define-lambda |parser-ACTION146| ($1 $2 $3 $4 $5 $6)
        (declare (ignore $1 $2 $3 $4 $5 $6))
        (make <macro-body-definition-fragment> :source-location
         (between $1 $4) :modifiers $2 :define-word $3
         :macro-body-fragment (pair $4 $5)))
       (define-lambda |parser-ACTION147| ($1 $2 $3 $4)
        (declare (ignore $1 $2 $3 $4))
        (make <list-definition-fragment> :source-location
         (between $1 $4) :modifiers $2 :define-word $3 :list-fragment
         $4))
       (define-lambda |parser-ACTION148| ($1 $2 $3 $4 $5)
        (declare (ignore $1 $2 $3 $4 $5))
        (make <body-definition-fragment> :source-location
         (between $1 $5) :modifiers $2 :define-word $3 :body-fragment
         $4))
       (define-lambda |parser-ACTION153| ($1) (declare (ignore $1))
        (list $1))
       (define-lambda |parser-ACTION154| ($1 $2 $3)
        (declare (ignore $1 $2 $3)) $1)
       (define-lambda |parser-ACTION158| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (make <dot-call-fragment> :source-location (between $1 $3)
         :function $3 :arguments (list $1)))
       (define-lambda |parser-ACTION159| ($1 $2 $3 $4)
        (declare (ignore $1 $2 $3 $4))
        (begin
         (bind
          ((getter-name
            (cond ((= (size $3) 1)
                   (begin 'element))
                  (:else
                   (begin 'aref)))))
          (make <array-call-fragment> :source-location (between $1 $4)
           :function
           (make-variable-name-like $2 :source-location (between $2 $4)
            :name getter-name :kind
            (syntax-for-name *current-module* getter-name))
           :arguments (pair $1 $3)))))
       (define-lambda |parser-ACTION160| ($1 $2 $3 $4)
        (declare (ignore $1 $2 $3 $4))
        (make <prefix-call-fragment> :source-location (between $1 $4)
         :function $1 :arguments $3))
       (define-lambda |parser-ACTION161| ($1) (declare (ignore $1))
        (elements $1))
       (define-lambda |parser-ACTION166| ($1 $2)
        (declare (ignore $1 $2)) (list $1 $2))
       (define-lambda |parser-ACTION167| ($1 $2 $3 $4)
        (declare (ignore $1 $2 $3 $4))
        (make <function-macro-fragment> :source-location
         (between $1 $4) :macro $1 :body-fragment $3))
       (define-lambda |parser-ACTION181| ($1 $2)
        (declare (ignore $1 $2))
        (make <string-fragment> :source-location (between $1 $2) :value
         (concatenate (fragment-value $1) (fragment-value $2))))
       (define-lambda |parser-ACTION185| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (make <vector-fragment> :source-location (between $1 $3)
         :elements $2))
       (define-lambda |parser-ACTION186| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (make <proper-list-fragment> :source-location (between $1 $3)
         :elements $2))
       (define-lambda |parser-ACTION187| ($1 $2 $3 $4 $5)
        (declare (ignore $1 $2 $3 $4 $5))
        (make <improper-list-fragment> :source-location (between $1 $5)
         :elements $2 :improper-tail $4))
       (define-lambda |parser-ACTION199| ($1 $2 $3)
        (declare (ignore $1 $2 $3)) (list $1 $2 $3))
       (define-lambda |parser-ACTION201| ($1) (declare (ignore $1))
        (make-variable-name-like $1 :name '|...|))
       (define-lambda |parser-ACTION204| ($1 $2 $3)
        (declare (ignore $1 $2 $3)) (pair $1 (pair $2 $3)))
       (define-lambda |parser-ACTION206| ($1) (declare (ignore $1))
        (binop-fragment $1))
       (define-lambda |parser-ACTION207| ($1 $2 $3)
        (declare (ignore $1 $2 $3)) (append-binop! $1 $2 $3))
       (define-lambda |parser-ACTION214| ($1 $2)
        (declare (ignore $1 $2))
        (make <unary-operator-call-fragment> :source-location
         (between $1 $2) :function $1 :arguments (list $2)))
       (define-lambda |parser-ACTION216| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (make <statement-fragment> :source-location (between $1 $3)
         :macro
         (make-variable-name-like $1 :source-location $1 :name
          'macro-template)
         :body-fragment $2))
       (define-lambda |parser-ACTION217| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (make <statement-fragment> :source-location (between $1 $3)
         :macro $1 :body-fragment $2))
       (define-lambda |parser-ACTION220| ($1 $2)
        (declare (ignore $1 $2)) (or $2 $1))
       (define-lambda |parser-ACTION224| ($1 $2)
        (declare (ignore $1 $2)) (concatenate $1 $2))
       (define-lambda |parser-ACTION225| ($1 $2 $3 $4)
        (declare (ignore $1 $2 $3 $4))
        (concatenate $1 (list (body-fragment (elements $2))) (list $3)
                     $4))
       (define-lambda |parser-ACTION226| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (concatenate $1 (list (empty-body-fragment)) (list $2) $3))
       (define-lambda |parser-ACTION228| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (pair (body-fragment (elements $1)) (pair $2 $3)))
       (define-lambda |parser-ACTION229| ($1 $2)
        (declare (ignore $1 $2))
        (pair (empty-body-fragment) (pair $1 $2)))
       (define-lambda |parser-ACTION230| ($1 $2)
        (declare (ignore $1 $2)) (concatenate $1 (list $2)))
       (define-lambda |parser-ACTION231| ($1) (declare (ignore $1))
        (empty-body-fragment))
       (define-lambda |parser-ACTION234| ($1 $2 $3 $4 $5 $6)
        (declare (ignore $1 $2 $3 $4 $5 $6))
        (pair
         (make <parens-fragment> :source-location (between $1 $5)
          :left-delimiter $1 :nested-fragments (pair $2 (pair $3 $4))
          :right-delimiter $5)
         (list $6)))
       (define-lambda |parser-ACTION250| ($1) (declare (ignore $1))
        (quote nil))
       (define-lambda |parser-ACTION287| ($1 $2 $3)
        (declare (ignore $1 $2 $3))
        (pair $1 (concatenate $2 (list $3))))
       (define-lambda |parser-ACTION317| ($1 $2)
        (declare (ignore $1 $2))
        (make <unhygienic-name-fragment> :source-location
         (between $1 $2) :name $2))
       (define-lambda |parser-ACTION319| ($1 $2)
        (declare (ignore $1 $2))
        (make <sequence-pattern-variable-fragment> :source-location
         (between $1 $2) :name $2 :separator #f))
       (define-lambda |parser-ACTION321| ($1 $2 $3 $4)
        (declare (ignore $1 $2 $3 $4))
        (make <spliced-pattern-variable-fragment> :source-location
         (between $1 $4) :prefix (and $1 (fragment-value $1)) :suffix
         (and $4 (fragment-value $4)) :pattern-variable $3))
       (define-lambda |parser-ACTION327| ($1 $2)
        (declare (ignore $1 $2)) $2)
       (define parsergen::parser
               (make <parser> :action-table
                '#(((eof . -56) (fragment-constraint . -27)
                    (property-list-constraint . -2)
                    (case-body-constraint . -4) (body-constraint . -42)
                    (variable-constraint . -24)
                    (expression-constraint . -14)
                    (name-constraint . -6) (token-constraint . -13)
                    (define-list-word-only . -22)
                    (define-body-word-only . -54)
                    (unreserved-name . -10)
                    (begin-and-define-list-word . -30)
                    (begin-and-define-body-word . -18)
                    (begin-word-only . -9)
                    (macro-case-begin-word-only . -40)
                    (local-declaration-word-only . -57)
                    (function-word-only . -32)
                    (unary-and-binary-operator . -60)
                    (unary-operator-only . -11)
                    (parsed-local-declaration . -44) (define . -29)
                    (parsed-macro-call . -16)
                    (parsed-function-call . -7) (lparen . -48)
                    (hash-f . -33) (hash-t . -39)
                    (character-literal . -20) (number . -52)
                    (string . -19) (parsed-vector-constant . -46)
                    (parsed-list-constant . -38) (hash-lbracket . -23)
                    (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                    (hash-lbrace . -34))
                 ((end-constraint . 81) (symbol . -409))
                 ((dot . 202) (lbracket . 202) (lparen . 202)
                  (comma . 202) (equal-greater . 202)
                  (equal-equal . 202) (equal . 202)
                  (unary-and-binary-operator . 202)
                  (binary-operator-only . 202) (semicolon . 202)
                  (rparen . 202) (end-constraint . 202)
                  (colon-colon . 202) (rbracket . 202))
                 ((end-constraint . 222) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -375)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34) (otherwise . -372))
                 ((lparen . -224))
                 ((ellipsis . -37) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10))
                 ((dot . 169) (lbracket . 169) (lparen . 169)
                  (comma . 169) (equal-greater . 169)
                  (equal-equal . 169) (equal . 169)
                  (unary-and-binary-operator . 169)
                  (binary-operator-only . 169) (semicolon . 169)
                  (rparen . 169) (end-constraint . 169)
                  (rbracket . 169))
                 ((dot . 170) (lbracket . 170) (lparen . 170)
                  (comma . 170) (equal-greater . 170)
                  (equal-equal . 170) (equal . 170)
                  (unary-and-binary-operator . 170)
                  (binary-operator-only . 170) (semicolon . 170)
                  (rparen . 170) (end-constraint . 170)
                  (rbracket . 170))
                 ((end . 46) (define . 46)
                  (local-declaration-word-only . 46)
                  (parsed-local-declaration . 46)
                  (unreserved-name . 46) (define-body-word-only . 46)
                  (define-list-word-only . 46) (number . 46)
                  (character-literal . 46) (string . 46) (symbol . 46)
                  (hash-lparen . 46) (hash-lbracket . 46)
                  (parsed-list-constant . 46)
                  (parsed-vector-constant . 46)
                  (unary-operator-only . 46)
                  (binary-operator-only . 46)
                  (unary-and-binary-operator . 46) (equal . 46)
                  (equal-equal . 46) (lparen . 46) (lbracket . 46)
                  (lbrace . 46) (function-word-only . 46) (hash-t . 46)
                  (hash-f . 46) (hash-next . 46) (hash-rest . 46)
                  (hash-key . 46) (hash-all-keys . 46) (dot . 46)
                  (colon-colon . 46) (equal-greater . 46) (query . 46)
                  (query-query . 46) (query-equal . 46) (ellipsis . 46)
                  (hash-hash . 46) (otherwise . 46)
                  (parsed-function-call . 46) (parsed-macro-call . 46)
                  (escaped-substitution . 46) (constrained-name . 46)
                  (comma . 46) (semicolon . 46) (begin-word-only . 46)
                  (begin-and-define-body-word . 46)
                  (begin-and-define-list-word . 46)
                  (macro-case-begin-word-only . 46) (hash-lbrace . 46)
                  (rbrace . 46) (rbracket . 46) (end-constraint . 46)
                  (rparen . 46))
                 ((unreserved-name . 34) (define-body-word-only . 34)
                  (define-list-word-only . 34) (number . 34)
                  (character-literal . 34) (string . 34) (symbol . 34)
                  (hash-lparen . 34) (hash-lbracket . 34)
                  (parsed-list-constant . 34)
                  (parsed-vector-constant . 34)
                  (unary-operator-only . 34)
                  (binary-operator-only . 34)
                  (unary-and-binary-operator . 34) (equal . 34)
                  (equal-equal . 34) (lparen . 34) (lbracket . 34)
                  (lbrace . 34) (function-word-only . 34) (hash-t . 34)
                  (hash-f . 34) (hash-next . 34) (hash-rest . 34)
                  (hash-key . 34) (hash-all-keys . 34) (dot . 34)
                  (colon-colon . 34) (equal-greater . 34) (query . 34)
                  (query-query . 34) (query-equal . 34) (ellipsis . 34)
                  (hash-hash . 34) (otherwise . 34)
                  (parsed-function-call . 34) (parsed-macro-call . 34)
                  (escaped-substitution . 34) (constrained-name . 34)
                  (begin-word-only . 34)
                  (begin-and-define-body-word . 34)
                  (begin-and-define-list-word . 34)
                  (macro-case-begin-word-only . 34) (hash-lbrace . 34)
                  (comma . 34) (semicolon . 34) (rparen . 34)
                  (end-constraint . 34) (define . 34)
                  (local-declaration-word-only . 34)
                  (parsed-local-declaration . 34) (end . 34)
                  (rbracket . 34) (rbrace . 34))
                 ((parsed-macro-call . 59) (parsed-function-call . 59)
                  (hash-lbrace . 59) (macro-case-begin-word-only . 59)
                  (begin-and-define-list-word . 59)
                  (begin-and-define-body-word . 59)
                  (begin-word-only . 59) (function-word-only . 59)
                  (lparen . 59) (ellipsis . 59)
                  (define-list-word-only . 59)
                  (define-body-word-only . 59) (unreserved-name . 59)
                  (parsed-vector-constant . 59)
                  (parsed-list-constant . 59) (hash-lbracket . 59)
                  (hash-lparen . 59) (hash-f . 59) (hash-t . 59)
                  (string . 59) (character-literal . 59) (number . 59))
                 ((dot . 174) (lbracket . 174) (lparen . 174)
                  (comma . 174) (equal-greater . 174)
                  (equal-equal . 174) (equal . 174)
                  (unary-and-binary-operator . 174)
                  (binary-operator-only . 174) (semicolon . 174)
                  (rparen . 174) (end-constraint . 174)
                  (rbracket . 174))
                 ((token . -367))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((comma . 213) (equal-greater . 213)
                  (equal-equal . 213) (equal . 213)
                  (unary-and-binary-operator . 213)
                  (binary-operator-only . 213) (semicolon . 213)
                  (rparen . 213) (end-constraint . 213)
                  (rbracket . 213))
                 ((dot . 168) (lbracket . 168) (lparen . 168)
                  (comma . 168) (equal-greater . 168)
                  (equal-equal . 168) (equal . 168)
                  (unary-and-binary-operator . 168)
                  (binary-operator-only . 168) (semicolon . 168)
                  (rparen . 168) (end-constraint . 168)
                  (rbracket . 168))
                 ((end . 87) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((end . 45) (define . 45)
                  (local-declaration-word-only . 45)
                  (parsed-local-declaration . 45)
                  (unreserved-name . 45) (define-body-word-only . 45)
                  (define-list-word-only . 45) (number . 45)
                  (character-literal . 45) (string . 45) (symbol . 45)
                  (hash-lparen . 45) (hash-lbracket . 45)
                  (parsed-list-constant . 45)
                  (parsed-vector-constant . 45)
                  (unary-operator-only . 45)
                  (binary-operator-only . 45)
                  (unary-and-binary-operator . 45) (equal . 45)
                  (equal-equal . 45) (lparen . 45) (lbracket . 45)
                  (lbrace . 45) (function-word-only . 45) (hash-t . 45)
                  (hash-f . 45) (hash-next . 45) (hash-rest . 45)
                  (hash-key . 45) (hash-all-keys . 45) (dot . 45)
                  (colon-colon . 45) (equal-greater . 45) (query . 45)
                  (query-query . 45) (query-equal . 45) (ellipsis . 45)
                  (hash-hash . 45) (otherwise . 45)
                  (parsed-function-call . 45) (parsed-macro-call . 45)
                  (escaped-substitution . 45) (constrained-name . 45)
                  (comma . 45) (semicolon . 45) (begin-word-only . 45)
                  (begin-and-define-body-word . 45)
                  (begin-and-define-list-word . 45)
                  (macro-case-begin-word-only . 45) (hash-lbrace . 45)
                  (rbrace . 45) (rbracket . 45) (end-constraint . 45)
                  (rparen . 45))
                 ((dot . 182) (lbracket . 182) (lparen . 182)
                  (comma . 182) (equal-greater . 182)
                  (equal-equal . 182) (equal . 182)
                  (unary-and-binary-operator . 182)
                  (binary-operator-only . 182) (semicolon . 182)
                  (rparen . 182) (end-constraint . 182)
                  (rbracket . 182) (string . -19))
                 ((dot . 179) (lbracket . 179) (lparen . 179)
                  (comma . 179) (equal-greater . 179)
                  (equal-equal . 179) (equal . 179)
                  (unary-and-binary-operator . 179)
                  (binary-operator-only . 179) (semicolon . 179)
                  (rparen . 179) (end-constraint . 179)
                  (rbracket . 179))
                 ((semicolon . 79) (end-constraint . 79))
                 ((unreserved-name . 31) (define-body-word-only . 31)
                  (define-list-word-only . 31) (number . 31)
                  (character-literal . 31) (string . 31) (symbol . 31)
                  (hash-lparen . 31) (hash-lbracket . 31)
                  (parsed-list-constant . 31)
                  (parsed-vector-constant . 31)
                  (unary-operator-only . 31)
                  (binary-operator-only . 31)
                  (unary-and-binary-operator . 31) (equal . 31)
                  (equal-equal . 31) (lparen . 31) (lbracket . 31)
                  (lbrace . 31) (function-word-only . 31) (hash-t . 31)
                  (hash-f . 31) (hash-next . 31) (hash-rest . 31)
                  (hash-key . 31) (hash-all-keys . 31) (dot . 31)
                  (colon-colon . 31) (equal-greater . 31) (query . 31)
                  (query-query . 31) (query-equal . 31) (ellipsis . 31)
                  (hash-hash . 31) (otherwise . 31)
                  (parsed-function-call . 31) (parsed-macro-call . 31)
                  (escaped-substitution . 31) (constrained-name . 31)
                  (begin-word-only . 31)
                  (begin-and-define-body-word . 31)
                  (begin-and-define-list-word . 31)
                  (macro-case-begin-word-only . 31) (hash-lbrace . 31)
                  (comma . 31) (semicolon . 31) (rparen . 31)
                  (end-constraint . 31) (define . 31)
                  (local-declaration-word-only . 31)
                  (parsed-local-declaration . 31) (end . 31)
                  (rbracket . 31) (rbrace . 31))
                 ((rbracket . 189) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (symbol . -212))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (ellipsis . -37))
                 ((semicolon . 77) (end-constraint . 77))
                 ((end . 239) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34)
                  (semicolon . -252) (comma . -255)
                  (constrained-name . -261)
                  (escaped-substitution . -265)
                  (parsed-macro-call . -251)
                  (parsed-function-call . -245) (lbrace . -264)
                  (lbracket . -247) (lparen . -258))
                 ((end-constraint . 87) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((rparen . 189) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (symbol . -212))
                 ((begin-and-define-body-word . 151)
                  (function-and-define-body-word . 151)
                  (define-body-word-only . 151)
                  (define-list-word-only . 151)
                  (define-macro-body-word-only . 151)
                  (unreserved-name . -231))
                 ((end . 44) (define . 44)
                  (local-declaration-word-only . 44)
                  (parsed-local-declaration . 44)
                  (unreserved-name . 44) (define-body-word-only . 44)
                  (define-list-word-only . 44) (number . 44)
                  (character-literal . 44) (string . 44) (symbol . 44)
                  (hash-lparen . 44) (hash-lbracket . 44)
                  (parsed-list-constant . 44)
                  (parsed-vector-constant . 44)
                  (unary-operator-only . 44)
                  (binary-operator-only . 44)
                  (unary-and-binary-operator . 44) (equal . 44)
                  (equal-equal . 44) (lparen . 44) (lbracket . 44)
                  (lbrace . 44) (function-word-only . 44) (hash-t . 44)
                  (hash-f . 44) (hash-next . 44) (hash-rest . 44)
                  (hash-key . 44) (hash-all-keys . 44) (dot . 44)
                  (colon-colon . 44) (equal-greater . 44) (query . 44)
                  (query-query . 44) (query-equal . 44) (ellipsis . 44)
                  (hash-hash . 44) (otherwise . 44)
                  (parsed-function-call . 44) (parsed-macro-call . 44)
                  (escaped-substitution . 44) (constrained-name . 44)
                  (comma . 44) (semicolon . 44) (begin-word-only . 44)
                  (begin-and-define-body-word . 44)
                  (begin-and-define-list-word . 44)
                  (macro-case-begin-word-only . 44) (hash-lbrace . 44)
                  (rbrace . 44) (rbracket . 44) (end-constraint . 44)
                  (rparen . 44))
                 ((semicolon . 145) (end-constraint . 145) (end . 145)
                  (rbracket . 145) (rparen . 145) (rbrace . 145))
                 ((lparen . 57))
                 ((dot . 176) (lbracket . 176) (lparen . 176)
                  (comma . 176) (equal-greater . 176)
                  (equal-equal . 176) (equal . 176)
                  (unary-and-binary-operator . 176)
                  (binary-operator-only . 176) (semicolon . 176)
                  (rparen . 176) (end-constraint . 176)
                  (rbracket . 176))
                 ((rbrace . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((dot . 173) (lbracket . 173) (lparen . 173)
                  (comma . 173) (equal-greater . 173)
                  (equal-equal . 173) (equal . 173)
                  (unary-and-binary-operator . 173)
                  (binary-operator-only . 173) (semicolon . 173)
                  (rparen . 173) (end-constraint . 173)
                  (rbracket . 173))
                 ((comma . 208) (equal-greater . 208)
                  (equal-equal . 208) (equal . 208)
                  (unary-and-binary-operator . 208)
                  (binary-operator-only . 208) (semicolon . 208)
                  (rparen . 208) (end-constraint . 208)
                  (rbracket . 208))
                 ((dot . 201) (lbracket . 201) (lparen . 201)
                  (comma . 201) (equal-greater . 201)
                  (equal-equal . 201) (equal . 201)
                  (unary-and-binary-operator . 201)
                  (binary-operator-only . 201) (semicolon . 201)
                  (rparen . 201) (end-constraint . 201)
                  (colon-colon . 201) (rbracket . 201))
                 ((unreserved-name . 184) (define-body-word-only . 184)
                  (define-list-word-only . 184) (number . 184)
                  (character-literal . 184) (string . 184)
                  (symbol . 184) (hash-lparen . 184)
                  (hash-lbracket . 184) (parsed-list-constant . 184)
                  (parsed-vector-constant . 184)
                  (unary-operator-only . 184)
                  (binary-operator-only . 184)
                  (unary-and-binary-operator . 184) (equal . 184)
                  (equal-equal . 184) (lparen . 184) (lbracket . 184)
                  (lbrace . 184) (function-word-only . 184)
                  (hash-t . 184) (hash-f . 184) (hash-next . 184)
                  (hash-rest . 184) (hash-key . 184)
                  (hash-all-keys . 184) (dot . 184) (colon-colon . 184)
                  (equal-greater . 184) (query . 184)
                  (query-query . 184) (query-equal . 184)
                  (ellipsis . 184) (hash-hash . 184) (otherwise . 184)
                  (parsed-function-call . 184)
                  (parsed-macro-call . 184)
                  (escaped-substitution . 184) (constrained-name . 184)
                  (begin-word-only . 184)
                  (begin-and-define-body-word . 184)
                  (begin-and-define-list-word . 184)
                  (macro-case-begin-word-only . 184)
                  (hash-lbrace . 184) (comma . 184) (semicolon . 184)
                  (rparen . 184) (end-constraint . 184) (define . 184)
                  (local-declaration-word-only . 184)
                  (parsed-local-declaration . 184) (end . 184)
                  (rbracket . 184) (rbrace . 184))
                 ((dot . 177) (lbracket . 177) (lparen . 177)
                  (comma . 177) (equal-greater . 177)
                  (equal-equal . 177) (equal . 177)
                  (unary-and-binary-operator . 177)
                  (binary-operator-only . 177) (semicolon . 177)
                  (rparen . 177) (end-constraint . 177)
                  (rbracket . 177))
                 ((end . 49) (define . 49)
                  (local-declaration-word-only . 49)
                  (parsed-local-declaration . 49)
                  (unreserved-name . 49) (define-body-word-only . 49)
                  (define-list-word-only . 49) (number . 49)
                  (character-literal . 49) (string . 49) (symbol . 49)
                  (hash-lparen . 49) (hash-lbracket . 49)
                  (parsed-list-constant . 49)
                  (parsed-vector-constant . 49)
                  (unary-operator-only . 49)
                  (binary-operator-only . 49)
                  (unary-and-binary-operator . 49) (equal . 49)
                  (equal-equal . 49) (lparen . 49) (lbracket . 49)
                  (lbrace . 49) (function-word-only . 49) (hash-t . 49)
                  (hash-f . 49) (hash-next . 49) (hash-rest . 49)
                  (hash-key . 49) (hash-all-keys . 49) (dot . 49)
                  (colon-colon . 49) (equal-greater . 49) (query . 49)
                  (query-query . 49) (query-equal . 49) (ellipsis . 49)
                  (hash-hash . 49) (otherwise . 49)
                  (parsed-function-call . 49) (parsed-macro-call . 49)
                  (escaped-substitution . 49) (constrained-name . 49)
                  (comma . 49) (semicolon . 49) (begin-word-only . 49)
                  (begin-and-define-body-word . 49)
                  (begin-and-define-list-word . 49)
                  (macro-case-begin-word-only . 49) (hash-lbrace . 49)
                  (rbrace . 49) (rbracket . 49) (end-constraint . 49)
                  (rparen . 49))
                 ((equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (comma . 206)
                  (equal-greater . 206) (semicolon . 206)
                  (rparen . 206) (end-constraint . 206)
                  (rbracket . 206))
                 ((end-constraint . 71) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-macro-call . -16) (parsed-function-call . -7)
                  (lparen . -48) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((dot . 171) (lbracket . 171) (lparen . 171)
                  (comma . 171) (equal-greater . 171)
                  (equal-equal . 171) (equal . 171)
                  (unary-and-binary-operator . 171)
                  (binary-operator-only . 171) (semicolon . 171)
                  (rparen . 171) (end-constraint . 171)
                  (rbracket . 171))
                 ((semicolon . 143) (end-constraint . 143) (end . 143)
                  (rbracket . 143) (rparen . 143) (rbrace . 143))
                 ((comma . 212) (equal-greater . 212)
                  (equal-equal . 212) (equal . 212)
                  (unary-and-binary-operator . 212)
                  (binary-operator-only . 212) (semicolon . 212)
                  (rparen . 212) (end-constraint . 212)
                  (rbracket . 212))
                 ((unreserved-name . 183) (define-body-word-only . 183)
                  (define-list-word-only . 183) (number . 183)
                  (character-literal . 183) (string . 183)
                  (symbol . 183) (hash-lparen . 183)
                  (hash-lbracket . 183) (parsed-list-constant . 183)
                  (parsed-vector-constant . 183)
                  (unary-operator-only . 183)
                  (binary-operator-only . 183)
                  (unary-and-binary-operator . 183) (equal . 183)
                  (equal-equal . 183) (lparen . 183) (lbracket . 183)
                  (lbrace . 183) (function-word-only . 183)
                  (hash-t . 183) (hash-f . 183) (hash-next . 183)
                  (hash-rest . 183) (hash-key . 183)
                  (hash-all-keys . 183) (dot . 183) (colon-colon . 183)
                  (equal-greater . 183) (query . 183)
                  (query-query . 183) (query-equal . 183)
                  (ellipsis . 183) (hash-hash . 183) (otherwise . 183)
                  (parsed-function-call . 183)
                  (parsed-macro-call . 183)
                  (escaped-substitution . 183) (constrained-name . 183)
                  (begin-word-only . 183)
                  (begin-and-define-body-word . 183)
                  (begin-and-define-list-word . 183)
                  (macro-case-begin-word-only . 183)
                  (hash-lbrace . 183) (comma . 183) (semicolon . 183)
                  (rparen . 183) (end-constraint . 183) (define . 183)
                  (local-declaration-word-only . 183)
                  (parsed-local-declaration . 183) (end . 183)
                  (rbracket . 183) (rbrace . 183))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37)
                  (hash-lbrace . -34))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((:eoi . :accept))
                 ((semicolon . 78) (end-constraint . 78))
                 ((dot . 157) (lbracket . 157) (lparen . 157)
                  (comma . 157) (equal-greater . 157)
                  (equal-equal . 157) (equal . 157)
                  (unary-and-binary-operator . 157)
                  (binary-operator-only . 157) (semicolon . 157)
                  (rparen . 157) (end-constraint . 157)
                  (rbracket . 157))
                 ((dot . 180) (lbracket . 180) (lparen . 180)
                  (comma . 180) (equal-greater . 180)
                  (equal-equal . 180) (equal . 180)
                  (unary-and-binary-operator . 180)
                  (binary-operator-only . 180) (semicolon . 180)
                  (rparen . 180) (end-constraint . 180)
                  (rbracket . 180))
                 ((comma . 215) (equal-greater . 215)
                  (equal-equal . 215) (equal . 215)
                  (unary-and-binary-operator . 215)
                  (binary-operator-only . 215) (semicolon . 215)
                  (rparen . 215) (end-constraint . 215)
                  (rbracket . 215) (lparen . -193) (lbracket . -194)
                  (dot . -195))
                 ((unreserved-name . 32) (define-body-word-only . 32)
                  (define-list-word-only . 32) (number . 32)
                  (character-literal . 32) (string . 32) (symbol . 32)
                  (hash-lparen . 32) (hash-lbracket . 32)
                  (parsed-list-constant . 32)
                  (parsed-vector-constant . 32)
                  (unary-operator-only . 32)
                  (binary-operator-only . 32)
                  (unary-and-binary-operator . 32) (equal . 32)
                  (equal-equal . 32) (lparen . 32) (lbracket . 32)
                  (lbrace . 32) (function-word-only . 32) (hash-t . 32)
                  (hash-f . 32) (hash-next . 32) (hash-rest . 32)
                  (hash-key . 32) (hash-all-keys . 32) (dot . 32)
                  (colon-colon . 32) (equal-greater . 32) (query . 32)
                  (query-query . 32) (query-equal . 32) (ellipsis . 32)
                  (hash-hash . 32) (otherwise . 32)
                  (parsed-function-call . 32) (parsed-macro-call . 32)
                  (escaped-substitution . 32) (constrained-name . 32)
                  (begin-word-only . 32)
                  (begin-and-define-body-word . 32)
                  (begin-and-define-list-word . 32)
                  (macro-case-begin-word-only . 32) (hash-lbrace . 32)
                  (comma . 32) (semicolon . 32) (rparen . 32)
                  (end-constraint . 32) (define . 32)
                  (local-declaration-word-only . 32)
                  (parsed-local-declaration . 32) (end . 32)
                  (rbracket . 32) (rbrace . 32))
                 ((unreserved-name . 33) (define-body-word-only . 33)
                  (define-list-word-only . 33) (number . 33)
                  (character-literal . 33) (string . 33) (symbol . 33)
                  (hash-lparen . 33) (hash-lbracket . 33)
                  (parsed-list-constant . 33)
                  (parsed-vector-constant . 33)
                  (unary-operator-only . 33)
                  (binary-operator-only . 33)
                  (unary-and-binary-operator . 33) (equal . 33)
                  (equal-equal . 33) (lparen . 33) (lbracket . 33)
                  (lbrace . 33) (function-word-only . 33) (hash-t . 33)
                  (hash-f . 33) (hash-next . 33) (hash-rest . 33)
                  (hash-key . 33) (hash-all-keys . 33) (dot . 33)
                  (colon-colon . 33) (equal-greater . 33) (query . 33)
                  (query-query . 33) (query-equal . 33) (ellipsis . 33)
                  (hash-hash . 33) (otherwise . 33)
                  (parsed-function-call . 33) (parsed-macro-call . 33)
                  (escaped-substitution . 33) (constrained-name . 33)
                  (begin-word-only . 33)
                  (begin-and-define-body-word . 33)
                  (begin-and-define-list-word . 33)
                  (macro-case-begin-word-only . 33) (hash-lbrace . 33)
                  (comma . 33) (semicolon . 33) (rparen . 33)
                  (end-constraint . 33) (define . 33)
                  (local-declaration-word-only . 33)
                  (parsed-local-declaration . 33) (end . 33)
                  (rbracket . 33) (rbrace . 33))
                 ((:eoi . 1))
                 ((unreserved-name . 56) (define-body-word-only . 56)
                  (define-list-word-only . 56) (number . 56)
                  (character-literal . 56) (string . 56) (symbol . 56)
                  (hash-lparen . 56) (hash-lbracket . 56)
                  (parsed-list-constant . 56)
                  (parsed-vector-constant . 56)
                  (unary-operator-only . 56)
                  (binary-operator-only . 56)
                  (unary-and-binary-operator . 56) (equal . 56)
                  (equal-equal . 56) (lparen . 56) (lbracket . 56)
                  (lbrace . 56) (function-word-only . 56) (hash-t . 56)
                  (hash-f . 56) (hash-next . 56) (hash-rest . 56)
                  (hash-key . 56) (hash-all-keys . 56) (dot . 56)
                  (colon-colon . 56) (equal-greater . 56) (query . 56)
                  (query-query . 56) (query-equal . 56) (ellipsis . 56)
                  (hash-hash . 56) (otherwise . 56)
                  (parsed-function-call . 56) (parsed-macro-call . 56)
                  (escaped-substitution . 56) (constrained-name . 56)
                  (comma . 56) (begin-word-only . 56)
                  (begin-and-define-body-word . 56)
                  (begin-and-define-list-word . 56)
                  (macro-case-begin-word-only . 56) (hash-lbrace . 56)
                  (semicolon . 56) (end-constraint . 56) (end . 56)
                  (rbracket . 56) (rparen . 56) (rbrace . 56))
                 ((semicolon . 91) (end-constraint . 91) (end . 91)
                  (rbracket . 91) (rparen . 91) (rbrace . 91)
                  (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (comma . -85)
                  (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((semicolon . -63))
                 ((parsed-macro-call . 58) (parsed-function-call . 58)
                  (hash-lbrace . 58) (macro-case-begin-word-only . 58)
                  (begin-and-define-list-word . 58)
                  (begin-and-define-body-word . 58)
                  (begin-word-only . 58) (function-word-only . 58)
                  (lparen . 58) (ellipsis . 58)
                  (define-list-word-only . 58)
                  (define-body-word-only . 58) (unreserved-name . 58)
                  (parsed-vector-constant . 58)
                  (parsed-list-constant . 58) (hash-lbracket . 58)
                  (hash-lparen . 58) (hash-f . 58) (hash-t . 58)
                  (string . 58) (character-literal . 58) (number . 58))
                 ((dot . 175) (lbracket . 175) (lparen . 175)
                  (comma . 175) (equal-greater . 175)
                  (equal-equal . 175) (equal . 175)
                  (unary-and-binary-operator . 175)
                  (binary-operator-only . 175) (semicolon . 175)
                  (rparen . 175) (end-constraint . 175)
                  (rbracket . 175))
                 ((dot . 178) (lbracket . 178) (lparen . 178)
                  (comma . 178) (equal-greater . 178)
                  (equal-equal . 178) (equal . 178)
                  (unary-and-binary-operator . 178)
                  (binary-operator-only . 178) (semicolon . 178)
                  (rparen . 178) (end-constraint . 178)
                  (rbracket . 178))
                 ((:eoi . 2))
                 ((unreserved-name . 125) (define-body-word-only . 125)
                  (define-list-word-only . 125) (number . 125)
                  (character-literal . 125) (string . 125)
                  (symbol . 125) (hash-lparen . 125)
                  (hash-lbracket . 125) (parsed-list-constant . 125)
                  (parsed-vector-constant . 125)
                  (unary-operator-only . 125)
                  (binary-operator-only . 125)
                  (unary-and-binary-operator . 125) (equal . 125)
                  (equal-equal . 125) (lparen . 125) (lbracket . 125)
                  (lbrace . 125) (function-word-only . 125)
                  (hash-t . 125) (hash-f . 125) (hash-next . 125)
                  (hash-rest . 125) (hash-key . 125)
                  (hash-all-keys . 125) (dot . 125) (colon-colon . 125)
                  (equal-greater . 125) (query . 125)
                  (query-query . 125) (query-equal . 125)
                  (ellipsis . 125) (hash-hash . 125) (otherwise . 125)
                  (parsed-function-call . 125)
                  (parsed-macro-call . 125)
                  (escaped-substitution . 125) (constrained-name . 125)
                  (begin-word-only . 125)
                  (begin-and-define-body-word . 125)
                  (begin-and-define-list-word . 125)
                  (macro-case-begin-word-only . 125)
                  (hash-lbrace . 125) (define . 125)
                  (local-declaration-word-only . 125)
                  (parsed-local-declaration . 125) (comma . 125)
                  (semicolon . 125) (end-constraint . 125) (end . 125)
                  (rbracket . 125) (rparen . 125) (rbrace . 125))
                 ((rbrace . 109) (rparen . 109) (rbracket . 109)
                  (end . 109) (end-constraint . 109) (semicolon . 109)
                  (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (comma . -85)
                  (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28))
                 ((unreserved-name . 124) (define-body-word-only . 124)
                  (define-list-word-only . 124) (number . 124)
                  (character-literal . 124) (string . 124)
                  (symbol . 124) (hash-lparen . 124)
                  (hash-lbracket . 124) (parsed-list-constant . 124)
                  (parsed-vector-constant . 124)
                  (unary-operator-only . 124)
                  (binary-operator-only . 124)
                  (unary-and-binary-operator . 124) (equal . 124)
                  (equal-equal . 124) (lparen . 124) (lbracket . 124)
                  (lbrace . 124) (function-word-only . 124)
                  (hash-t . 124) (hash-f . 124) (hash-next . 124)
                  (hash-rest . 124) (hash-key . 124)
                  (hash-all-keys . 124) (dot . 124) (colon-colon . 124)
                  (equal-greater . 124) (query . 124)
                  (query-query . 124) (query-equal . 124)
                  (ellipsis . 124) (hash-hash . 124) (otherwise . 124)
                  (parsed-function-call . 124)
                  (parsed-macro-call . 124)
                  (escaped-substitution . 124) (constrained-name . 124)
                  (begin-word-only . 124)
                  (begin-and-define-body-word . 124)
                  (begin-and-define-list-word . 124)
                  (macro-case-begin-word-only . 124)
                  (hash-lbrace . 124) (define . 124)
                  (local-declaration-word-only . 124)
                  (parsed-local-declaration . 124) (comma . 124)
                  (semicolon . 124) (end-constraint . 124) (end . 124)
                  (rbracket . 124) (rparen . 124) (rbrace . 124))
                 ((unreserved-name . 118) (define-body-word-only . 118)
                  (define-list-word-only . 118) (number . 118)
                  (character-literal . 118) (string . 118)
                  (symbol . 118) (hash-lparen . 118)
                  (hash-lbracket . 118) (parsed-list-constant . 118)
                  (parsed-vector-constant . 118)
                  (unary-operator-only . 118)
                  (binary-operator-only . 118)
                  (unary-and-binary-operator . 118) (equal . 118)
                  (equal-equal . 118) (lparen . 118) (lbracket . 118)
                  (lbrace . 118) (function-word-only . 118)
                  (hash-t . 118) (hash-f . 118) (hash-next . 118)
                  (hash-rest . 118) (hash-key . 118)
                  (hash-all-keys . 118) (dot . 118) (colon-colon . 118)
                  (equal-greater . 118) (query . 118)
                  (query-query . 118) (query-equal . 118)
                  (ellipsis . 118) (hash-hash . 118) (otherwise . 118)
                  (parsed-function-call . 118)
                  (parsed-macro-call . 118)
                  (escaped-substitution . 118) (constrained-name . 118)
                  (begin-word-only . 118)
                  (begin-and-define-body-word . 118)
                  (begin-and-define-list-word . 118)
                  (macro-case-begin-word-only . 118)
                  (hash-lbrace . 118) (define . 118)
                  (local-declaration-word-only . 118)
                  (parsed-local-declaration . 118) (comma . 118)
                  (semicolon . 118) (end-constraint . 118) (end . 118)
                  (rbracket . 118) (rparen . 118) (rbrace . 118))
                 ((rbracket . 87) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((unreserved-name . 68) (define-body-word-only . 68)
                  (define-list-word-only . 68) (number . 68)
                  (character-literal . 68) (string . 68) (symbol . 68)
                  (hash-lparen . 68) (hash-lbracket . 68)
                  (parsed-list-constant . 68)
                  (parsed-vector-constant . 68)
                  (unary-operator-only . 68)
                  (binary-operator-only . 68)
                  (unary-and-binary-operator . 68) (equal . 68)
                  (equal-equal . 68) (lparen . 68) (lbracket . 68)
                  (lbrace . 68) (function-word-only . 68) (hash-t . 68)
                  (hash-f . 68) (hash-next . 68) (hash-rest . 68)
                  (hash-key . 68) (hash-all-keys . 68) (dot . 68)
                  (colon-colon . 68) (equal-greater . 68) (query . 68)
                  (query-query . 68) (query-equal . 68) (ellipsis . 68)
                  (hash-hash . 68) (otherwise . 68)
                  (parsed-function-call . 68) (parsed-macro-call . 68)
                  (escaped-substitution . 68) (constrained-name . 68)
                  (begin-word-only . 68)
                  (begin-and-define-body-word . 68)
                  (begin-and-define-list-word . 68)
                  (macro-case-begin-word-only . 68) (hash-lbrace . 68)
                  (define . 68) (local-declaration-word-only . 68)
                  (parsed-local-declaration . 68) (comma . 68)
                  (semicolon . 68) (end-constraint . 68) (end . 68)
                  (rbracket . 68) (rparen . 68) (rbrace . 68))
                 ((unreserved-name . 123) (define-body-word-only . 123)
                  (define-list-word-only . 123) (number . 123)
                  (character-literal . 123) (string . 123)
                  (symbol . 123) (hash-lparen . 123)
                  (hash-lbracket . 123) (parsed-list-constant . 123)
                  (parsed-vector-constant . 123)
                  (unary-operator-only . 123)
                  (binary-operator-only . 123)
                  (unary-and-binary-operator . 123) (equal . 123)
                  (equal-equal . 123) (lparen . 123) (lbracket . 123)
                  (lbrace . 123) (function-word-only . 123)
                  (hash-t . 123) (hash-f . 123) (hash-next . 123)
                  (hash-rest . 123) (hash-key . 123)
                  (hash-all-keys . 123) (dot . 123) (colon-colon . 123)
                  (equal-greater . 123) (query . 123)
                  (query-query . 123) (query-equal . 123)
                  (ellipsis . 123) (hash-hash . 123) (otherwise . 123)
                  (parsed-function-call . 123)
                  (parsed-macro-call . 123)
                  (escaped-substitution . 123) (constrained-name . 123)
                  (begin-word-only . 123)
                  (begin-and-define-body-word . 123)
                  (begin-and-define-list-word . 123)
                  (macro-case-begin-word-only . 123)
                  (hash-lbrace . 123) (define . 123)
                  (local-declaration-word-only . 123)
                  (parsed-local-declaration . 123) (comma . 123)
                  (semicolon . 123) (end-constraint . 123) (end . 123)
                  (rbracket . 123) (rparen . 123) (rbrace . 123))
                 ((unreserved-name . 129) (define-body-word-only . 129)
                  (define-list-word-only . 129) (number . 129)
                  (character-literal . 129) (string . 129)
                  (symbol . 129) (hash-lparen . 129)
                  (hash-lbracket . 129) (parsed-list-constant . 129)
                  (parsed-vector-constant . 129)
                  (unary-operator-only . 129)
                  (binary-operator-only . 129)
                  (unary-and-binary-operator . 129) (equal . 129)
                  (equal-equal . 129) (lparen . 129) (lbracket . 129)
                  (lbrace . 129) (function-word-only . 129)
                  (hash-t . 129) (hash-f . 129) (hash-next . 129)
                  (hash-rest . 129) (hash-key . 129)
                  (hash-all-keys . 129) (dot . 129) (colon-colon . 129)
                  (equal-greater . 129) (query . 129)
                  (query-query . 129) (query-equal . 129)
                  (ellipsis . 129) (hash-hash . 129) (otherwise . 129)
                  (parsed-function-call . 129)
                  (parsed-macro-call . 129)
                  (escaped-substitution . 129) (constrained-name . 129)
                  (begin-word-only . 129)
                  (begin-and-define-body-word . 129)
                  (begin-and-define-list-word . 129)
                  (macro-case-begin-word-only . 129)
                  (hash-lbrace . 129) (define . 129)
                  (local-declaration-word-only . 129)
                  (parsed-local-declaration . 129) (comma . 129)
                  (semicolon . 129) (end-constraint . 129) (end . 129)
                  (rbracket . 129) (rparen . 129) (rbrace . 129))
                 ((rbrace . 91) (rparen . 91) (rbracket . 91)
                  (end . 91) (end-constraint . 91) (semicolon . 91)
                  (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (comma . -85)
                  (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((unreserved-name . 139) (define-body-word-only . 139)
                  (define-list-word-only . 139) (number . 139)
                  (character-literal . 139) (string . 139)
                  (symbol . 139) (hash-lparen . 139)
                  (hash-lbracket . 139) (parsed-list-constant . 139)
                  (parsed-vector-constant . 139)
                  (unary-operator-only . 139)
                  (binary-operator-only . 139)
                  (unary-and-binary-operator . 139) (equal . 139)
                  (equal-equal . 139) (lparen . 139) (lbracket . 139)
                  (lbrace . 139) (function-word-only . 139)
                  (hash-t . 139) (hash-f . 139) (hash-next . 139)
                  (hash-rest . 139) (hash-key . 139)
                  (hash-all-keys . 139) (dot . 139) (colon-colon . 139)
                  (equal-greater . 139) (query . 139)
                  (query-query . 139) (query-equal . 139)
                  (ellipsis . 139) (hash-hash . 139) (otherwise . 139)
                  (parsed-function-call . 139)
                  (parsed-macro-call . 139)
                  (escaped-substitution . 139) (constrained-name . 139)
                  (begin-word-only . 139)
                  (begin-and-define-body-word . 139)
                  (begin-and-define-list-word . 139)
                  (macro-case-begin-word-only . 139)
                  (hash-lbrace . 139) (define . 139)
                  (local-declaration-word-only . 139)
                  (parsed-local-declaration . 139) (comma . 139)
                  (semicolon . 139) (end-constraint . 139) (end . 139)
                  (rbracket . 139) (rparen . 139) (rbrace . 139))
                 ((unreserved-name . 132) (define-body-word-only . 132)
                  (define-list-word-only . 132) (number . 132)
                  (character-literal . 132) (string . 132)
                  (symbol . 132) (hash-lparen . 132)
                  (hash-lbracket . 132) (parsed-list-constant . 132)
                  (parsed-vector-constant . 132)
                  (unary-operator-only . 132)
                  (binary-operator-only . 132)
                  (unary-and-binary-operator . 132) (equal . 132)
                  (equal-equal . 132) (lparen . 132) (lbracket . 132)
                  (lbrace . 132) (function-word-only . 132)
                  (hash-t . 132) (hash-f . 132) (hash-next . 132)
                  (hash-rest . 132) (hash-key . 132)
                  (hash-all-keys . 132) (dot . 132) (colon-colon . 132)
                  (equal-greater . 132) (query . 132)
                  (query-query . 132) (query-equal . 132)
                  (ellipsis . 132) (hash-hash . 132) (otherwise . 132)
                  (parsed-function-call . 132)
                  (parsed-macro-call . 132)
                  (escaped-substitution . 132) (constrained-name . 132)
                  (begin-word-only . 132)
                  (begin-and-define-body-word . 132)
                  (begin-and-define-list-word . 132)
                  (macro-case-begin-word-only . 132)
                  (hash-lbrace . 132) (define . 132)
                  (local-declaration-word-only . 132)
                  (parsed-local-declaration . 132) (comma . 132)
                  (semicolon . 132) (end-constraint . 132) (end . 132)
                  (rbracket . 132) (rparen . 132) (rbrace . 132))
                 ((unreserved-name . 133) (define-body-word-only . 133)
                  (define-list-word-only . 133) (number . 133)
                  (character-literal . 133) (string . 133)
                  (symbol . 133) (hash-lparen . 133)
                  (hash-lbracket . 133) (parsed-list-constant . 133)
                  (parsed-vector-constant . 133)
                  (unary-operator-only . 133)
                  (binary-operator-only . 133)
                  (unary-and-binary-operator . 133) (equal . 133)
                  (equal-equal . 133) (lparen . 133) (lbracket . 133)
                  (lbrace . 133) (function-word-only . 133)
                  (hash-t . 133) (hash-f . 133) (hash-next . 133)
                  (hash-rest . 133) (hash-key . 133)
                  (hash-all-keys . 133) (dot . 133) (colon-colon . 133)
                  (equal-greater . 133) (query . 133)
                  (query-query . 133) (query-equal . 133)
                  (ellipsis . 133) (hash-hash . 133) (otherwise . 133)
                  (parsed-function-call . 133)
                  (parsed-macro-call . 133)
                  (escaped-substitution . 133) (constrained-name . 133)
                  (begin-word-only . 133)
                  (begin-and-define-body-word . 133)
                  (begin-and-define-list-word . 133)
                  (macro-case-begin-word-only . 133)
                  (hash-lbrace . 133) (define . 133)
                  (local-declaration-word-only . 133)
                  (parsed-local-declaration . 133) (comma . 133)
                  (semicolon . 133) (end-constraint . 133) (end . 133)
                  (rbracket . 133) (rparen . 133) (rbrace . 133))
                 ((unreserved-name . 117) (define-body-word-only . 117)
                  (define-list-word-only . 117) (number . 117)
                  (character-literal . 117) (string . 117)
                  (symbol . 117) (hash-lparen . 117)
                  (hash-lbracket . 117) (parsed-list-constant . 117)
                  (parsed-vector-constant . 117)
                  (unary-operator-only . 117)
                  (binary-operator-only . 117)
                  (unary-and-binary-operator . 117) (equal . 117)
                  (equal-equal . 117) (lparen . 117) (lbracket . 117)
                  (lbrace . 117) (function-word-only . 117)
                  (hash-t . 117) (hash-f . 117) (hash-next . 117)
                  (hash-rest . 117) (hash-key . 117)
                  (hash-all-keys . 117) (dot . 117) (colon-colon . 117)
                  (equal-greater . 117) (query . 117)
                  (query-query . 117) (query-equal . 117)
                  (ellipsis . 117) (hash-hash . 117) (otherwise . 117)
                  (parsed-function-call . 117)
                  (parsed-macro-call . 117)
                  (escaped-substitution . 117) (constrained-name . 117)
                  (begin-word-only . 117)
                  (begin-and-define-body-word . 117)
                  (begin-and-define-list-word . 117)
                  (macro-case-begin-word-only . 117)
                  (hash-lbrace . 117) (define . 117)
                  (local-declaration-word-only . 117)
                  (parsed-local-declaration . 117) (comma . 117)
                  (semicolon . 117) (end-constraint . 117) (end . 117)
                  (rbracket . 117) (rparen . 117) (rbrace . 117))
                 ((unreserved-name . 12) (define-body-word-only . 12)
                  (define-list-word-only . 12) (number . 12)
                  (character-literal . 12) (string . 12) (symbol . 12)
                  (hash-lparen . 12) (hash-lbracket . 12)
                  (parsed-list-constant . 12)
                  (parsed-vector-constant . 12)
                  (unary-operator-only . 12)
                  (binary-operator-only . 12)
                  (unary-and-binary-operator . 12) (equal . 12)
                  (equal-equal . 12) (lparen . 12) (lbracket . 12)
                  (lbrace . 12) (function-word-only . 12) (hash-t . 12)
                  (hash-f . 12) (hash-next . 12) (hash-rest . 12)
                  (hash-key . 12) (hash-all-keys . 12) (dot . 12)
                  (colon-colon . 12) (equal-greater . 12) (query . 12)
                  (query-query . 12) (query-equal . 12) (ellipsis . 12)
                  (hash-hash . 12) (otherwise . 12)
                  (parsed-function-call . 12) (parsed-macro-call . 12)
                  (escaped-substitution . 12) (constrained-name . 12)
                  (begin-word-only . 12)
                  (begin-and-define-body-word . 12)
                  (begin-and-define-list-word . 12)
                  (macro-case-begin-word-only . 12) (hash-lbrace . 12)
                  (define . 12) (local-declaration-word-only . 12)
                  (parsed-local-declaration . 12) (comma . 12)
                  (semicolon . 12) (end-constraint . 12) (end . 12)
                  (define-macro-body-word-only . 12)
                  (function-and-define-list-word . 12)
                  (function-and-define-body-word . 12) (rbracket . 12)
                  (rparen . 12) (rbrace . 12))
                 ((unreserved-name . 140) (define-body-word-only . 140)
                  (define-list-word-only . 140) (number . 140)
                  (character-literal . 140) (string . 140)
                  (symbol . 140) (hash-lparen . 140)
                  (hash-lbracket . 140) (parsed-list-constant . 140)
                  (parsed-vector-constant . 140)
                  (unary-operator-only . 140)
                  (binary-operator-only . 140)
                  (unary-and-binary-operator . 140) (equal . 140)
                  (equal-equal . 140) (lparen . 140) (lbracket . 140)
                  (lbrace . 140) (function-word-only . 140)
                  (hash-t . 140) (hash-f . 140) (hash-next . 140)
                  (hash-rest . 140) (hash-key . 140)
                  (hash-all-keys . 140) (dot . 140) (colon-colon . 140)
                  (equal-greater . 140) (query . 140)
                  (query-query . 140) (query-equal . 140)
                  (ellipsis . 140) (hash-hash . 140) (otherwise . 140)
                  (parsed-function-call . 140)
                  (parsed-macro-call . 140)
                  (escaped-substitution . 140) (constrained-name . 140)
                  (begin-word-only . 140)
                  (begin-and-define-body-word . 140)
                  (begin-and-define-list-word . 140)
                  (macro-case-begin-word-only . 140)
                  (hash-lbrace . 140) (define . 140)
                  (local-declaration-word-only . 140)
                  (parsed-local-declaration . 140) (comma . 140)
                  (semicolon . 140) (end-constraint . 140) (end . 140)
                  (rbracket . 140) (rparen . 140) (rbrace . 140))
                 ((unreserved-name . 141) (define-body-word-only . 141)
                  (define-list-word-only . 141) (number . 141)
                  (character-literal . 141) (string . 141)
                  (symbol . 141) (hash-lparen . 141)
                  (hash-lbracket . 141) (parsed-list-constant . 141)
                  (parsed-vector-constant . 141)
                  (unary-operator-only . 141)
                  (binary-operator-only . 141)
                  (unary-and-binary-operator . 141) (equal . 141)
                  (equal-equal . 141) (lparen . 141) (lbracket . 141)
                  (lbrace . 141) (function-word-only . 141)
                  (hash-t . 141) (hash-f . 141) (hash-next . 141)
                  (hash-rest . 141) (hash-key . 141)
                  (hash-all-keys . 141) (dot . 141) (colon-colon . 141)
                  (equal-greater . 141) (query . 141)
                  (query-query . 141) (query-equal . 141)
                  (ellipsis . 141) (hash-hash . 141) (otherwise . 141)
                  (parsed-function-call . 141)
                  (parsed-macro-call . 141)
                  (escaped-substitution . 141) (constrained-name . 141)
                  (begin-word-only . 141)
                  (begin-and-define-body-word . 141)
                  (begin-and-define-list-word . 141)
                  (macro-case-begin-word-only . 141)
                  (hash-lbrace . 141) (define . 141)
                  (local-declaration-word-only . 141)
                  (parsed-local-declaration . 141) (comma . 141)
                  (semicolon . 141) (end-constraint . 141) (end . 141)
                  (rbracket . 141) (rparen . 141) (rbrace . 141))
                 ((unreserved-name . 13) (define-body-word-only . 13)
                  (define-list-word-only . 13) (number . 13)
                  (character-literal . 13) (string . 13) (symbol . 13)
                  (hash-lparen . 13) (hash-lbracket . 13)
                  (parsed-list-constant . 13)
                  (parsed-vector-constant . 13)
                  (unary-operator-only . 13)
                  (binary-operator-only . 13)
                  (unary-and-binary-operator . 13) (equal . 13)
                  (equal-equal . 13) (lparen . 13) (lbracket . 13)
                  (lbrace . 13) (function-word-only . 13) (hash-t . 13)
                  (hash-f . 13) (hash-next . 13) (hash-rest . 13)
                  (hash-key . 13) (hash-all-keys . 13) (dot . 13)
                  (colon-colon . 13) (equal-greater . 13) (query . 13)
                  (query-query . 13) (query-equal . 13) (ellipsis . 13)
                  (hash-hash . 13) (otherwise . 13)
                  (parsed-function-call . 13) (parsed-macro-call . 13)
                  (escaped-substitution . 13) (constrained-name . 13)
                  (begin-word-only . 13)
                  (begin-and-define-body-word . 13)
                  (begin-and-define-list-word . 13)
                  (macro-case-begin-word-only . 13) (hash-lbrace . 13)
                  (define . 13) (local-declaration-word-only . 13)
                  (parsed-local-declaration . 13) (comma . 13)
                  (semicolon . 13) (end-constraint . 13) (end . 13)
                  (define-macro-body-word-only . 13)
                  (function-and-define-list-word . 13)
                  (function-and-define-body-word . 13) (rbracket . 13)
                  (rparen . 13) (rbrace . 13))
                 ((rbrace . 93) (rparen . 93) (rbracket . 93)
                  (end . 93) (end-constraint . 93) (semicolon . 93))
                 ((unreserved-name . 14) (define-body-word-only . 14)
                  (define-list-word-only . 14) (number . 14)
                  (character-literal . 14) (string . 14) (symbol . 14)
                  (hash-lparen . 14) (hash-lbracket . 14)
                  (parsed-list-constant . 14)
                  (parsed-vector-constant . 14)
                  (unary-operator-only . 14)
                  (binary-operator-only . 14)
                  (unary-and-binary-operator . 14) (equal . 14)
                  (equal-equal . 14) (lparen . 14) (lbracket . 14)
                  (lbrace . 14) (function-word-only . 14) (hash-t . 14)
                  (hash-f . 14) (hash-next . 14) (hash-rest . 14)
                  (hash-key . 14) (hash-all-keys . 14) (dot . 14)
                  (colon-colon . 14) (equal-greater . 14) (query . 14)
                  (query-query . 14) (query-equal . 14) (ellipsis . 14)
                  (hash-hash . 14) (otherwise . 14)
                  (parsed-function-call . 14) (parsed-macro-call . 14)
                  (escaped-substitution . 14) (constrained-name . 14)
                  (begin-word-only . 14)
                  (begin-and-define-body-word . 14)
                  (begin-and-define-list-word . 14)
                  (macro-case-begin-word-only . 14) (hash-lbrace . 14)
                  (define . 14) (local-declaration-word-only . 14)
                  (parsed-local-declaration . 14) (comma . 14)
                  (semicolon . 14) (end-constraint . 14) (end . 14)
                  (define-macro-body-word-only . 14)
                  (function-and-define-list-word . 14)
                  (function-and-define-body-word . 14) (rbracket . 14)
                  (rparen . 14) (rbrace . 14))
                 ((unreserved-name . 131) (define-body-word-only . 131)
                  (define-list-word-only . 131) (number . 131)
                  (character-literal . 131) (string . 131)
                  (symbol . 131) (hash-lparen . 131)
                  (hash-lbracket . 131) (parsed-list-constant . 131)
                  (parsed-vector-constant . 131)
                  (unary-operator-only . 131)
                  (binary-operator-only . 131)
                  (unary-and-binary-operator . 131) (equal . 131)
                  (equal-equal . 131) (lparen . 131) (lbracket . 131)
                  (lbrace . 131) (function-word-only . 131)
                  (hash-t . 131) (hash-f . 131) (hash-next . 131)
                  (hash-rest . 131) (hash-key . 131)
                  (hash-all-keys . 131) (dot . 131) (colon-colon . 131)
                  (equal-greater . 131) (query . 131)
                  (query-query . 131) (query-equal . 131)
                  (ellipsis . 131) (hash-hash . 131) (otherwise . 131)
                  (parsed-function-call . 131)
                  (parsed-macro-call . 131)
                  (escaped-substitution . 131) (constrained-name . 131)
                  (begin-word-only . 131)
                  (begin-and-define-body-word . 131)
                  (begin-and-define-list-word . 131)
                  (macro-case-begin-word-only . 131)
                  (hash-lbrace . 131) (define . 131)
                  (local-declaration-word-only . 131)
                  (parsed-local-declaration . 131) (comma . 131)
                  (semicolon . 131) (end-constraint . 131) (end . 131)
                  (rbracket . 131) (rparen . 131) (rbrace . 131))
                 ((unreserved-name . 122) (define-body-word-only . 122)
                  (define-list-word-only . 122) (number . 122)
                  (character-literal . 122) (string . 122)
                  (symbol . 122) (hash-lparen . 122)
                  (hash-lbracket . 122) (parsed-list-constant . 122)
                  (parsed-vector-constant . 122)
                  (unary-operator-only . 122)
                  (binary-operator-only . 122)
                  (unary-and-binary-operator . 122) (equal . 122)
                  (equal-equal . 122) (lparen . 122) (lbracket . 122)
                  (lbrace . 122) (function-word-only . 122)
                  (hash-t . 122) (hash-f . 122) (hash-next . 122)
                  (hash-rest . 122) (hash-key . 122)
                  (hash-all-keys . 122) (dot . 122) (colon-colon . 122)
                  (equal-greater . 122) (query . 122)
                  (query-query . 122) (query-equal . 122)
                  (ellipsis . 122) (hash-hash . 122) (otherwise . 122)
                  (parsed-function-call . 122)
                  (parsed-macro-call . 122)
                  (escaped-substitution . 122) (constrained-name . 122)
                  (begin-word-only . 122)
                  (begin-and-define-body-word . 122)
                  (begin-and-define-list-word . 122)
                  (macro-case-begin-word-only . 122)
                  (hash-lbrace . 122) (define . 122)
                  (local-declaration-word-only . 122)
                  (parsed-local-declaration . 122) (comma . 122)
                  (semicolon . 122) (end-constraint . 122) (end . 122)
                  (rbracket . 122) (rparen . 122) (rbrace . 122))
                 ((rbrace . 91) (rparen . 91) (rbracket . 91)
                  (end . 91) (end-constraint . 91) (semicolon . 91)
                  (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (comma . -85)
                  (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((unreserved-name . 67) (define-body-word-only . 67)
                  (define-list-word-only . 67) (number . 67)
                  (character-literal . 67) (string . 67) (symbol . 67)
                  (hash-lparen . 67) (hash-lbracket . 67)
                  (parsed-list-constant . 67)
                  (parsed-vector-constant . 67)
                  (unary-operator-only . 67)
                  (binary-operator-only . 67)
                  (unary-and-binary-operator . 67) (equal . 67)
                  (equal-equal . 67) (lparen . 67) (lbracket . 67)
                  (lbrace . 67) (function-word-only . 67) (hash-t . 67)
                  (hash-f . 67) (hash-next . 67) (hash-rest . 67)
                  (hash-key . 67) (hash-all-keys . 67) (dot . 67)
                  (colon-colon . 67) (equal-greater . 67) (query . 67)
                  (query-query . 67) (query-equal . 67) (ellipsis . 67)
                  (hash-hash . 67) (otherwise . 67)
                  (parsed-function-call . 67) (parsed-macro-call . 67)
                  (escaped-substitution . 67) (constrained-name . 67)
                  (begin-word-only . 67)
                  (begin-and-define-body-word . 67)
                  (begin-and-define-list-word . 67)
                  (macro-case-begin-word-only . 67) (hash-lbrace . 67)
                  (define . 67) (local-declaration-word-only . 67)
                  (parsed-local-declaration . 67) (comma . 67)
                  (semicolon . 67) (end-constraint . 67) (end . 67)
                  (rbracket . 67) (rparen . 67) (rbrace . 67))
                 ((unreserved-name . 126) (define-body-word-only . 126)
                  (define-list-word-only . 126) (number . 126)
                  (character-literal . 126) (string . 126)
                  (symbol . 126) (hash-lparen . 126)
                  (hash-lbracket . 126) (parsed-list-constant . 126)
                  (parsed-vector-constant . 126)
                  (unary-operator-only . 126)
                  (binary-operator-only . 126)
                  (unary-and-binary-operator . 126) (equal . 126)
                  (equal-equal . 126) (lparen . 126) (lbracket . 126)
                  (lbrace . 126) (function-word-only . 126)
                  (hash-t . 126) (hash-f . 126) (hash-next . 126)
                  (hash-rest . 126) (hash-key . 126)
                  (hash-all-keys . 126) (dot . 126) (colon-colon . 126)
                  (equal-greater . 126) (query . 126)
                  (query-query . 126) (query-equal . 126)
                  (ellipsis . 126) (hash-hash . 126) (otherwise . 126)
                  (parsed-function-call . 126)
                  (parsed-macro-call . 126)
                  (escaped-substitution . 126) (constrained-name . 126)
                  (begin-word-only . 126)
                  (begin-and-define-body-word . 126)
                  (begin-and-define-list-word . 126)
                  (macro-case-begin-word-only . 126)
                  (hash-lbrace . 126) (define . 126)
                  (local-declaration-word-only . 126)
                  (parsed-local-declaration . 126) (comma . 126)
                  (semicolon . 126) (end-constraint . 126) (end . 126)
                  (rbracket . 126) (rparen . 126) (rbrace . 126))
                 ((unreserved-name . 15) (define-body-word-only . 15)
                  (define-list-word-only . 15) (number . 15)
                  (character-literal . 15) (string . 15) (symbol . 15)
                  (hash-lparen . 15) (hash-lbracket . 15)
                  (parsed-list-constant . 15)
                  (parsed-vector-constant . 15)
                  (unary-operator-only . 15)
                  (binary-operator-only . 15)
                  (unary-and-binary-operator . 15) (equal . 15)
                  (equal-equal . 15) (lparen . 15) (lbracket . 15)
                  (lbrace . 15) (function-word-only . 15) (hash-t . 15)
                  (hash-f . 15) (hash-next . 15) (hash-rest . 15)
                  (hash-key . 15) (hash-all-keys . 15) (dot . 15)
                  (colon-colon . 15) (equal-greater . 15) (query . 15)
                  (query-query . 15) (query-equal . 15) (ellipsis . 15)
                  (hash-hash . 15) (otherwise . 15)
                  (parsed-function-call . 15) (parsed-macro-call . 15)
                  (escaped-substitution . 15) (constrained-name . 15)
                  (begin-word-only . 15)
                  (begin-and-define-body-word . 15)
                  (begin-and-define-list-word . 15)
                  (macro-case-begin-word-only . 15) (hash-lbrace . 15)
                  (define . 15) (local-declaration-word-only . 15)
                  (parsed-local-declaration . 15) (comma . 15)
                  (semicolon . 15) (end-constraint . 15) (end . 15)
                  (define-macro-body-word-only . 15)
                  (function-and-define-list-word . 15)
                  (function-and-define-body-word . 15) (rbracket . 15)
                  (rparen . 15) (rbrace . 15))
                 ((rbrace . 144) (rparen . 144) (rbracket . 144)
                  (end . 144) (end-constraint . 144) (semicolon . 144))
                 ((unreserved-name . 65) (define-body-word-only . 65)
                  (define-list-word-only . 65) (number . 65)
                  (character-literal . 65) (string . 65) (symbol . 65)
                  (hash-lparen . 65) (hash-lbracket . 65)
                  (parsed-list-constant . 65)
                  (parsed-vector-constant . 65)
                  (unary-operator-only . 65)
                  (binary-operator-only . 65)
                  (unary-and-binary-operator . 65) (equal . 65)
                  (equal-equal . 65) (lparen . 65) (lbracket . 65)
                  (lbrace . 65) (function-word-only . 65) (hash-t . 65)
                  (hash-f . 65) (hash-next . 65) (hash-rest . 65)
                  (hash-key . 65) (hash-all-keys . 65) (dot . 65)
                  (colon-colon . 65) (equal-greater . 65) (query . 65)
                  (query-query . 65) (query-equal . 65) (ellipsis . 65)
                  (hash-hash . 65) (otherwise . 65)
                  (parsed-function-call . 65) (parsed-macro-call . 65)
                  (escaped-substitution . 65) (constrained-name . 65)
                  (begin-word-only . 65)
                  (begin-and-define-body-word . 65)
                  (begin-and-define-list-word . 65)
                  (macro-case-begin-word-only . 65) (hash-lbrace . 65)
                  (define . 65) (local-declaration-word-only . 65)
                  (parsed-local-declaration . 65) (comma . 65)
                  (semicolon . 65) (end-constraint . 65) (end . 65)
                  (rbracket . 65) (rparen . 65) (rbrace . 65))
                 ((unreserved-name . 128) (define-body-word-only . 128)
                  (define-list-word-only . 128) (number . 128)
                  (character-literal . 128) (string . 128)
                  (symbol . 128) (hash-lparen . 128)
                  (hash-lbracket . 128) (parsed-list-constant . 128)
                  (parsed-vector-constant . 128)
                  (unary-operator-only . 128)
                  (binary-operator-only . 128)
                  (unary-and-binary-operator . 128) (equal . 128)
                  (equal-equal . 128) (lparen . 128) (lbracket . 128)
                  (lbrace . 128) (function-word-only . 128)
                  (hash-t . 128) (hash-f . 128) (hash-next . 128)
                  (hash-rest . 128) (hash-key . 128)
                  (hash-all-keys . 128) (dot . 128) (colon-colon . 128)
                  (equal-greater . 128) (query . 128)
                  (query-query . 128) (query-equal . 128)
                  (ellipsis . 128) (hash-hash . 128) (otherwise . 128)
                  (parsed-function-call . 128)
                  (parsed-macro-call . 128)
                  (escaped-substitution . 128) (constrained-name . 128)
                  (begin-word-only . 128)
                  (begin-and-define-body-word . 128)
                  (begin-and-define-list-word . 128)
                  (macro-case-begin-word-only . 128)
                  (hash-lbrace . 128) (define . 128)
                  (local-declaration-word-only . 128)
                  (parsed-local-declaration . 128) (comma . 128)
                  (semicolon . 128) (end-constraint . 128) (end . 128)
                  (rbracket . 128) (rparen . 128) (rbrace . 128))
                 ((unreserved-name . 130) (define-body-word-only . 130)
                  (define-list-word-only . 130) (number . 130)
                  (character-literal . 130) (string . 130)
                  (symbol . 130) (hash-lparen . 130)
                  (hash-lbracket . 130) (parsed-list-constant . 130)
                  (parsed-vector-constant . 130)
                  (unary-operator-only . 130)
                  (binary-operator-only . 130)
                  (unary-and-binary-operator . 130) (equal . 130)
                  (equal-equal . 130) (lparen . 130) (lbracket . 130)
                  (lbrace . 130) (function-word-only . 130)
                  (hash-t . 130) (hash-f . 130) (hash-next . 130)
                  (hash-rest . 130) (hash-key . 130)
                  (hash-all-keys . 130) (dot . 130) (colon-colon . 130)
                  (equal-greater . 130) (query . 130)
                  (query-query . 130) (query-equal . 130)
                  (ellipsis . 130) (hash-hash . 130) (otherwise . 130)
                  (parsed-function-call . 130)
                  (parsed-macro-call . 130)
                  (escaped-substitution . 130) (constrained-name . 130)
                  (begin-word-only . 130)
                  (begin-and-define-body-word . 130)
                  (begin-and-define-list-word . 130)
                  (macro-case-begin-word-only . 130)
                  (hash-lbrace . 130) (define . 130)
                  (local-declaration-word-only . 130)
                  (parsed-local-declaration . 130) (comma . 130)
                  (semicolon . 130) (end-constraint . 130) (end . 130)
                  (rbracket . 130) (rparen . 130) (rbrace . 130))
                 ((unreserved-name . 119) (define-body-word-only . 119)
                  (define-list-word-only . 119) (number . 119)
                  (character-literal . 119) (string . 119)
                  (symbol . 119) (hash-lparen . 119)
                  (hash-lbracket . 119) (parsed-list-constant . 119)
                  (parsed-vector-constant . 119)
                  (unary-operator-only . 119)
                  (binary-operator-only . 119)
                  (unary-and-binary-operator . 119) (equal . 119)
                  (equal-equal . 119) (lparen . 119) (lbracket . 119)
                  (lbrace . 119) (function-word-only . 119)
                  (hash-t . 119) (hash-f . 119) (hash-next . 119)
                  (hash-rest . 119) (hash-key . 119)
                  (hash-all-keys . 119) (dot . 119) (colon-colon . 119)
                  (equal-greater . 119) (query . 119)
                  (query-query . 119) (query-equal . 119)
                  (ellipsis . 119) (hash-hash . 119) (otherwise . 119)
                  (parsed-function-call . 119)
                  (parsed-macro-call . 119)
                  (escaped-substitution . 119) (constrained-name . 119)
                  (begin-word-only . 119)
                  (begin-and-define-body-word . 119)
                  (begin-and-define-list-word . 119)
                  (macro-case-begin-word-only . 119)
                  (hash-lbrace . 119) (define . 119)
                  (local-declaration-word-only . 119)
                  (parsed-local-declaration . 119) (comma . 119)
                  (semicolon . 119) (end-constraint . 119) (end . 119)
                  (rbracket . 119) (rparen . 119) (rbrace . 119))
                 ((unreserved-name . 11) (define-body-word-only . 11)
                  (define-list-word-only . 11) (number . 11)
                  (character-literal . 11) (string . 11) (symbol . 11)
                  (hash-lparen . 11) (hash-lbracket . 11)
                  (parsed-list-constant . 11)
                  (parsed-vector-constant . 11)
                  (unary-operator-only . 11)
                  (binary-operator-only . 11)
                  (unary-and-binary-operator . 11) (equal . 11)
                  (equal-equal . 11) (lparen . 11) (lbracket . 11)
                  (lbrace . 11) (function-word-only . 11) (hash-t . 11)
                  (hash-f . 11) (hash-next . 11) (hash-rest . 11)
                  (hash-key . 11) (hash-all-keys . 11) (dot . 11)
                  (colon-colon . 11) (equal-greater . 11) (query . 11)
                  (query-query . 11) (query-equal . 11) (ellipsis . 11)
                  (hash-hash . 11) (otherwise . 11)
                  (parsed-function-call . 11) (parsed-macro-call . 11)
                  (escaped-substitution . 11) (constrained-name . 11)
                  (begin-word-only . 11)
                  (begin-and-define-body-word . 11)
                  (begin-and-define-list-word . 11)
                  (macro-case-begin-word-only . 11) (hash-lbrace . 11)
                  (define . 11) (local-declaration-word-only . 11)
                  (parsed-local-declaration . 11) (comma . 11)
                  (semicolon . 11) (end-constraint . 11) (end . 11)
                  (define-macro-body-word-only . 11)
                  (function-and-define-list-word . 11)
                  (function-and-define-body-word . 11) (rbracket . 11)
                  (rparen . 11) (rbrace . 11))
                 ((unreserved-name . 16) (define-body-word-only . 16)
                  (define-list-word-only . 16) (number . 16)
                  (character-literal . 16) (string . 16) (symbol . 16)
                  (hash-lparen . 16) (hash-lbracket . 16)
                  (parsed-list-constant . 16)
                  (parsed-vector-constant . 16)
                  (unary-operator-only . 16)
                  (binary-operator-only . 16)
                  (unary-and-binary-operator . 16) (equal . 16)
                  (equal-equal . 16) (lparen . 16) (lbracket . 16)
                  (lbrace . 16) (function-word-only . 16) (hash-t . 16)
                  (hash-f . 16) (hash-next . 16) (hash-rest . 16)
                  (hash-key . 16) (hash-all-keys . 16) (dot . 16)
                  (colon-colon . 16) (equal-greater . 16) (query . 16)
                  (query-query . 16) (query-equal . 16) (ellipsis . 16)
                  (hash-hash . 16) (otherwise . 16)
                  (parsed-function-call . 16) (parsed-macro-call . 16)
                  (escaped-substitution . 16) (constrained-name . 16)
                  (begin-word-only . 16)
                  (begin-and-define-body-word . 16)
                  (begin-and-define-list-word . 16)
                  (macro-case-begin-word-only . 16) (hash-lbrace . 16)
                  (define . 16) (local-declaration-word-only . 16)
                  (parsed-local-declaration . 16) (comma . 16)
                  (semicolon . 16) (end-constraint . 16) (end . 16)
                  (define-macro-body-word-only . 16)
                  (function-and-define-list-word . 16)
                  (function-and-define-body-word . 16) (rbracket . 16)
                  (rparen . 16) (rbrace . 16))
                 ((unreserved-name . 121) (define-body-word-only . 121)
                  (define-list-word-only . 121) (number . 121)
                  (character-literal . 121) (string . 121)
                  (symbol . 121) (hash-lparen . 121)
                  (hash-lbracket . 121) (parsed-list-constant . 121)
                  (parsed-vector-constant . 121)
                  (unary-operator-only . 121)
                  (binary-operator-only . 121)
                  (unary-and-binary-operator . 121) (equal . 121)
                  (equal-equal . 121) (lparen . 121) (lbracket . 121)
                  (lbrace . 121) (function-word-only . 121)
                  (hash-t . 121) (hash-f . 121) (hash-next . 121)
                  (hash-rest . 121) (hash-key . 121)
                  (hash-all-keys . 121) (dot . 121) (colon-colon . 121)
                  (equal-greater . 121) (query . 121)
                  (query-query . 121) (query-equal . 121)
                  (ellipsis . 121) (hash-hash . 121) (otherwise . 121)
                  (parsed-function-call . 121)
                  (parsed-macro-call . 121)
                  (escaped-substitution . 121) (constrained-name . 121)
                  (begin-word-only . 121)
                  (begin-and-define-body-word . 121)
                  (begin-and-define-list-word . 121)
                  (macro-case-begin-word-only . 121)
                  (hash-lbrace . 121) (define . 121)
                  (local-declaration-word-only . 121)
                  (parsed-local-declaration . 121) (comma . 121)
                  (semicolon . 121) (end-constraint . 121) (end . 121)
                  (rbracket . 121) (rparen . 121) (rbrace . 121))
                 ((unreserved-name . 64) (define-body-word-only . 64)
                  (define-list-word-only . 64) (number . 64)
                  (character-literal . 64) (string . 64) (symbol . 64)
                  (hash-lparen . 64) (hash-lbracket . 64)
                  (parsed-list-constant . 64)
                  (parsed-vector-constant . 64)
                  (unary-operator-only . 64)
                  (binary-operator-only . 64)
                  (unary-and-binary-operator . 64) (equal . 64)
                  (equal-equal . 64) (lparen . 64) (lbracket . 64)
                  (lbrace . 64) (function-word-only . 64) (hash-t . 64)
                  (hash-f . 64) (hash-next . 64) (hash-rest . 64)
                  (hash-key . 64) (hash-all-keys . 64) (dot . 64)
                  (colon-colon . 64) (equal-greater . 64) (query . 64)
                  (query-query . 64) (query-equal . 64) (ellipsis . 64)
                  (hash-hash . 64) (otherwise . 64)
                  (parsed-function-call . 64) (parsed-macro-call . 64)
                  (escaped-substitution . 64) (constrained-name . 64)
                  (begin-word-only . 64)
                  (begin-and-define-body-word . 64)
                  (begin-and-define-list-word . 64)
                  (macro-case-begin-word-only . 64) (hash-lbrace . 64)
                  (define . 64) (local-declaration-word-only . 64)
                  (parsed-local-declaration . 64) (comma . 64)
                  (semicolon . 64) (end-constraint . 64) (end . 64)
                  (rbracket . 64) (rparen . 64) (rbrace . 64))
                 ((rparen . 87) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((unreserved-name . 127) (define-body-word-only . 127)
                  (define-list-word-only . 127) (number . 127)
                  (character-literal . 127) (string . 127)
                  (symbol . 127) (hash-lparen . 127)
                  (hash-lbracket . 127) (parsed-list-constant . 127)
                  (parsed-vector-constant . 127)
                  (unary-operator-only . 127)
                  (binary-operator-only . 127)
                  (unary-and-binary-operator . 127) (equal . 127)
                  (equal-equal . 127) (lparen . 127) (lbracket . 127)
                  (lbrace . 127) (function-word-only . 127)
                  (hash-t . 127) (hash-f . 127) (hash-next . 127)
                  (hash-rest . 127) (hash-key . 127)
                  (hash-all-keys . 127) (dot . 127) (colon-colon . 127)
                  (equal-greater . 127) (query . 127)
                  (query-query . 127) (query-equal . 127)
                  (ellipsis . 127) (hash-hash . 127) (otherwise . 127)
                  (parsed-function-call . 127)
                  (parsed-macro-call . 127)
                  (escaped-substitution . 127) (constrained-name . 127)
                  (begin-word-only . 127)
                  (begin-and-define-body-word . 127)
                  (begin-and-define-list-word . 127)
                  (macro-case-begin-word-only . 127)
                  (hash-lbrace . 127) (define . 127)
                  (local-declaration-word-only . 127)
                  (parsed-local-declaration . 127) (comma . 127)
                  (semicolon . 127) (end-constraint . 127) (end . 127)
                  (rbracket . 127) (rparen . 127) (rbrace . 127))
                 ((unreserved-name . 120) (define-body-word-only . 120)
                  (define-list-word-only . 120) (number . 120)
                  (character-literal . 120) (string . 120)
                  (symbol . 120) (hash-lparen . 120)
                  (hash-lbracket . 120) (parsed-list-constant . 120)
                  (parsed-vector-constant . 120)
                  (unary-operator-only . 120)
                  (binary-operator-only . 120)
                  (unary-and-binary-operator . 120) (equal . 120)
                  (equal-equal . 120) (lparen . 120) (lbracket . 120)
                  (lbrace . 120) (function-word-only . 120)
                  (hash-t . 120) (hash-f . 120) (hash-next . 120)
                  (hash-rest . 120) (hash-key . 120)
                  (hash-all-keys . 120) (dot . 120) (colon-colon . 120)
                  (equal-greater . 120) (query . 120)
                  (query-query . 120) (query-equal . 120)
                  (ellipsis . 120) (hash-hash . 120) (otherwise . 120)
                  (parsed-function-call . 120)
                  (parsed-macro-call . 120)
                  (escaped-substitution . 120) (constrained-name . 120)
                  (begin-word-only . 120)
                  (begin-and-define-body-word . 120)
                  (begin-and-define-list-word . 120)
                  (macro-case-begin-word-only . 120)
                  (hash-lbrace . 120) (define . 120)
                  (local-declaration-word-only . 120)
                  (parsed-local-declaration . 120) (comma . 120)
                  (semicolon . 120) (end-constraint . 120) (end . 120)
                  (rbracket . 120) (rparen . 120) (rbrace . 120))
                 ((unreserved-name . 115) (define-body-word-only . 115)
                  (define-list-word-only . 115) (number . 115)
                  (character-literal . 115) (string . 115)
                  (symbol . 115) (hash-lparen . 115)
                  (hash-lbracket . 115) (parsed-list-constant . 115)
                  (parsed-vector-constant . 115)
                  (unary-operator-only . 115)
                  (binary-operator-only . 115)
                  (unary-and-binary-operator . 115) (equal . 115)
                  (equal-equal . 115) (lparen . 115) (lbracket . 115)
                  (lbrace . 115) (function-word-only . 115)
                  (hash-t . 115) (hash-f . 115) (hash-next . 115)
                  (hash-rest . 115) (hash-key . 115)
                  (hash-all-keys . 115) (dot . 115) (colon-colon . 115)
                  (equal-greater . 115) (query . 115)
                  (query-query . 115) (query-equal . 115)
                  (ellipsis . 115) (hash-hash . 115) (otherwise . 115)
                  (parsed-function-call . 115)
                  (parsed-macro-call . 115)
                  (escaped-substitution . 115) (constrained-name . 115)
                  (begin-word-only . 115)
                  (begin-and-define-body-word . 115)
                  (begin-and-define-list-word . 115)
                  (macro-case-begin-word-only . 115)
                  (hash-lbrace . 115) (define . 115)
                  (local-declaration-word-only . 115)
                  (parsed-local-declaration . 115) (comma . 115)
                  (semicolon . 115) (end-constraint . 115) (end . 115)
                  (rbracket . 115) (rparen . 115) (rbrace . 115))
                 ((unreserved-name . 142) (define-body-word-only . 142)
                  (define-list-word-only . 142) (number . 142)
                  (character-literal . 142) (string . 142)
                  (symbol . 142) (hash-lparen . 142)
                  (hash-lbracket . 142) (parsed-list-constant . 142)
                  (parsed-vector-constant . 142)
                  (unary-operator-only . 142)
                  (binary-operator-only . 142)
                  (unary-and-binary-operator . 142) (equal . 142)
                  (equal-equal . 142) (lparen . 142) (lbracket . 142)
                  (lbrace . 142) (function-word-only . 142)
                  (hash-t . 142) (hash-f . 142) (hash-next . 142)
                  (hash-rest . 142) (hash-key . 142)
                  (hash-all-keys . 142) (dot . 142) (colon-colon . 142)
                  (equal-greater . 142) (query . 142)
                  (query-query . 142) (query-equal . 142)
                  (ellipsis . 142) (hash-hash . 142) (otherwise . 142)
                  (parsed-function-call . 142)
                  (parsed-macro-call . 142)
                  (escaped-substitution . 142) (constrained-name . 142)
                  (begin-word-only . 142)
                  (begin-and-define-body-word . 142)
                  (begin-and-define-list-word . 142)
                  (macro-case-begin-word-only . 142)
                  (hash-lbrace . 142) (define . 142)
                  (local-declaration-word-only . 142)
                  (parsed-local-declaration . 142) (comma . 142)
                  (semicolon . 142) (end-constraint . 142) (end . 142)
                  (rbracket . 142) (rparen . 142) (rbrace . 142))
                 ((rbrace . 87) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((rbrace . 90) (rparen . 90) (rbracket . 90)
                  (end . 90) (end-constraint . 90) (semicolon . 90))
                 ((unreserved-name . 134) (define-body-word-only . 134)
                  (define-list-word-only . 134) (number . 134)
                  (character-literal . 134) (string . 134)
                  (symbol . 134) (hash-lparen . 134)
                  (hash-lbracket . 134) (parsed-list-constant . 134)
                  (parsed-vector-constant . 134)
                  (unary-operator-only . 134)
                  (binary-operator-only . 134)
                  (unary-and-binary-operator . 134) (equal . 134)
                  (equal-equal . 134) (lparen . 134) (lbracket . 134)
                  (lbrace . 134) (function-word-only . 134)
                  (hash-t . 134) (hash-f . 134) (hash-next . 134)
                  (hash-rest . 134) (hash-key . 134)
                  (hash-all-keys . 134) (dot . 134) (colon-colon . 134)
                  (equal-greater . 134) (query . 134)
                  (query-query . 134) (query-equal . 134)
                  (ellipsis . 134) (hash-hash . 134) (otherwise . 134)
                  (parsed-function-call . 134)
                  (parsed-macro-call . 134)
                  (escaped-substitution . 134) (constrained-name . 134)
                  (begin-word-only . 134)
                  (begin-and-define-body-word . 134)
                  (begin-and-define-list-word . 134)
                  (macro-case-begin-word-only . 134)
                  (hash-lbrace . 134) (define . 134)
                  (local-declaration-word-only . 134)
                  (parsed-local-declaration . 134) (comma . 134)
                  (semicolon . 134) (end-constraint . 134) (end . 134)
                  (rbracket . 134) (rparen . 134) (rbrace . 134))
                 ((unreserved-name . 116) (define-body-word-only . 116)
                  (define-list-word-only . 116) (number . 116)
                  (character-literal . 116) (string . 116)
                  (symbol . 116) (hash-lparen . 116)
                  (hash-lbracket . 116) (parsed-list-constant . 116)
                  (parsed-vector-constant . 116)
                  (unary-operator-only . 116)
                  (binary-operator-only . 116)
                  (unary-and-binary-operator . 116) (equal . 116)
                  (equal-equal . 116) (lparen . 116) (lbracket . 116)
                  (lbrace . 116) (function-word-only . 116)
                  (hash-t . 116) (hash-f . 116) (hash-next . 116)
                  (hash-rest . 116) (hash-key . 116)
                  (hash-all-keys . 116) (dot . 116) (colon-colon . 116)
                  (equal-greater . 116) (query . 116)
                  (query-query . 116) (query-equal . 116)
                  (ellipsis . 116) (hash-hash . 116) (otherwise . 116)
                  (parsed-function-call . 116)
                  (parsed-macro-call . 116)
                  (escaped-substitution . 116) (constrained-name . 116)
                  (begin-word-only . 116)
                  (begin-and-define-body-word . 116)
                  (begin-and-define-list-word . 116)
                  (macro-case-begin-word-only . 116)
                  (hash-lbrace . 116) (define . 116)
                  (local-declaration-word-only . 116)
                  (parsed-local-declaration . 116) (comma . 116)
                  (semicolon . 116) (end-constraint . 116) (end . 116)
                  (rbracket . 116) (rparen . 116) (rbrace . 116))
                 ((unreserved-name . 66) (define-body-word-only . 66)
                  (define-list-word-only . 66) (number . 66)
                  (character-literal . 66) (string . 66) (symbol . 66)
                  (hash-lparen . 66) (hash-lbracket . 66)
                  (parsed-list-constant . 66)
                  (parsed-vector-constant . 66)
                  (unary-operator-only . 66)
                  (binary-operator-only . 66)
                  (unary-and-binary-operator . 66) (equal . 66)
                  (equal-equal . 66) (lparen . 66) (lbracket . 66)
                  (lbrace . 66) (function-word-only . 66) (hash-t . 66)
                  (hash-f . 66) (hash-next . 66) (hash-rest . 66)
                  (hash-key . 66) (hash-all-keys . 66) (dot . 66)
                  (colon-colon . 66) (equal-greater . 66) (query . 66)
                  (query-query . 66) (query-equal . 66) (ellipsis . 66)
                  (hash-hash . 66) (otherwise . 66)
                  (parsed-function-call . 66) (parsed-macro-call . 66)
                  (escaped-substitution . 66) (constrained-name . 66)
                  (begin-word-only . 66)
                  (begin-and-define-body-word . 66)
                  (begin-and-define-list-word . 66)
                  (macro-case-begin-word-only . 66) (hash-lbrace . 66)
                  (define . 66) (local-declaration-word-only . 66)
                  (parsed-local-declaration . 66) (comma . 66)
                  (semicolon . 66) (end-constraint . 66) (end . 66)
                  (rbracket . 66) (rparen . 66) (rbrace . 66))
                 ((unreserved-name . 138) (define-body-word-only . 138)
                  (define-list-word-only . 138) (number . 138)
                  (character-literal . 138) (string . 138)
                  (symbol . 138) (hash-lparen . 138)
                  (hash-lbracket . 138) (parsed-list-constant . 138)
                  (parsed-vector-constant . 138)
                  (unary-operator-only . 138)
                  (binary-operator-only . 138)
                  (unary-and-binary-operator . 138) (equal . 138)
                  (equal-equal . 138) (lparen . 138) (lbracket . 138)
                  (lbrace . 138) (function-word-only . 138)
                  (hash-t . 138) (hash-f . 138) (hash-next . 138)
                  (hash-rest . 138) (hash-key . 138)
                  (hash-all-keys . 138) (dot . 138) (colon-colon . 138)
                  (equal-greater . 138) (query . 138)
                  (query-query . 138) (query-equal . 138)
                  (ellipsis . 138) (hash-hash . 138) (otherwise . 138)
                  (parsed-function-call . 138)
                  (parsed-macro-call . 138)
                  (escaped-substitution . 138) (constrained-name . 138)
                  (begin-word-only . 138)
                  (begin-and-define-body-word . 138)
                  (begin-and-define-list-word . 138)
                  (macro-case-begin-word-only . 138)
                  (hash-lbrace . 138) (define . 138)
                  (local-declaration-word-only . 138)
                  (parsed-local-declaration . 138) (comma . 138)
                  (semicolon . 138) (end-constraint . 138) (end . 138)
                  (rbracket . 138) (rparen . 138) (rbrace . 138))
                 ((end-constraint . 99) (end . 99) (rbracket . 99)
                  (rparen . 99) (rbrace . 99) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28))
                 ((end-constraint . 86) (end . 86) (rbracket . 86)
                  (rparen . 86) (rbrace . 86))
                 ((end-constraint . 87) (end . 87) (rbracket . 87)
                  (rparen . 87) (rbrace . 87) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((end-constraint . 87) (end . 87) (rbracket . 87)
                  (rparen . 87) (rbrace . 87) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((end-constraint . 106) (end . 106) (rbracket . 106)
                  (rparen . 106) (rbrace . 106) (semicolon . -120))
                 ((end-constraint . 87) (end . 87) (rbracket . 87)
                  (rparen . 87) (rbrace . 87) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((rbrace . -348))
                 ((end-constraint . 89) (end . 89) (rbracket . 89)
                  (rparen . 89) (rbrace . 89))
                 ((end-constraint . 106) (end . 106) (rbracket . 106)
                  (rparen . 106) (rbrace . 106) (semicolon . -120))
                 ((rbrace . 103) (rparen . 103) (rbracket . 103)
                  (end . 103) (end-constraint . 103))
                 ((rbrace . 105) (rparen . 105) (rbracket . 105)
                  (end . 105) (end-constraint . 105))
                 ((rbrace . 87) (rparen . 87) (rbracket . 87)
                  (end . 87) (end-constraint . 87)
                  (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((end-constraint . 107) (end . 107) (rbracket . 107)
                  (rparen . 107) (rbrace . 107))
                 ((rparen . -123))
                 ((unreserved-name . 137) (define-body-word-only . 137)
                  (define-list-word-only . 137) (number . 137)
                  (character-literal . 137) (string . 137)
                  (symbol . 137) (hash-lparen . 137)
                  (hash-lbracket . 137) (parsed-list-constant . 137)
                  (parsed-vector-constant . 137)
                  (unary-operator-only . 137)
                  (binary-operator-only . 137)
                  (unary-and-binary-operator . 137) (equal . 137)
                  (equal-equal . 137) (lparen . 137) (lbracket . 137)
                  (lbrace . 137) (function-word-only . 137)
                  (hash-t . 137) (hash-f . 137) (hash-next . 137)
                  (hash-rest . 137) (hash-key . 137)
                  (hash-all-keys . 137) (dot . 137) (colon-colon . 137)
                  (equal-greater . 137) (query . 137)
                  (query-query . 137) (query-equal . 137)
                  (ellipsis . 137) (hash-hash . 137) (otherwise . 137)
                  (parsed-function-call . 137)
                  (parsed-macro-call . 137)
                  (escaped-substitution . 137) (constrained-name . 137)
                  (begin-word-only . 137)
                  (begin-and-define-body-word . 137)
                  (begin-and-define-list-word . 137)
                  (macro-case-begin-word-only . 137)
                  (hash-lbrace . 137) (define . 137)
                  (local-declaration-word-only . 137)
                  (parsed-local-declaration . 137) (comma . 137)
                  (semicolon . 137) (end-constraint . 137) (end . 137)
                  (rbracket . 137) (rparen . 137) (rbrace . 137))
                 ((unreserved-name . 294) (define . 294) (end . 294)
                  (define-macro-body-word-only . 294) (otherwise . 294)
                  (begin-word-only . 294) (function-word-only . 294)
                  (define-body-word-only . 294)
                  (define-list-word-only . 294)
                  (begin-and-define-list-word . 294)
                  (begin-and-define-body-word . 294)
                  (function-and-define-list-word . 294)
                  (function-and-define-body-word . 294)
                  (local-declaration-word-only . 294) (symbol . 294)
                  (number . 294) (character-literal . 294)
                  (unary-operator-only . 294) (semicolon . 294)
                  (comma . 294) (binary-operator-only . 294)
                  (unary-and-binary-operator . 294) (equal . 294)
                  (equal-equal . 294) (hash-t . 294) (hash-f . 294)
                  (hash-next . 294) (hash-rest . 294) (hash-key . 294)
                  (hash-all-keys . 294) (dot . 294) (colon-colon . 294)
                  (equal-greater . 294) (lparen . 294) (lbracket . 294)
                  (lbrace . 294) (string . 294) (query . 294)
                  (query-query . 294) (ellipsis . 294)
                  (query-equal . 294) (escaped-substitution . 294)
                  (constrained-name . 294) (parsed-function-call . 294)
                  (parsed-macro-call . 294)
                  (parsed-local-declaration . 294)
                  (parsed-list-constant . 294)
                  (parsed-vector-constant . 294) (hash-lparen . 294)
                  (hash-lbracket . 294) (hash-lbrace . 294)
                  (rbracket . 294) (rparen . 294) (rbrace . 294))
                 ((rbracket . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((hash-lbrace . 25) (macro-case-begin-word-only . 25)
                  (begin-and-define-list-word . 25)
                  (begin-and-define-body-word . 25)
                  (begin-word-only . 25) (semicolon . 25) (comma . 25)
                  (constrained-name . 25) (escaped-substitution . 25)
                  (parsed-macro-call . 25) (parsed-function-call . 25)
                  (otherwise . 25) (hash-hash . 25) (ellipsis . 25)
                  (query-equal . 25) (query-query . 25) (query . 25)
                  (equal-greater . 25) (colon-colon . 25) (dot . 25)
                  (hash-all-keys . 25) (hash-key . 25) (hash-rest . 25)
                  (hash-next . 25) (hash-f . 25) (hash-t . 25)
                  (function-word-only . 25) (lbrace . 25)
                  (lbracket . 25) (lparen . 25) (equal-equal . 25)
                  (equal . 25) (unary-and-binary-operator . 25)
                  (binary-operator-only . 25)
                  (unary-operator-only . 25)
                  (parsed-vector-constant . 25)
                  (parsed-list-constant . 25) (hash-lbracket . 25)
                  (hash-lparen . 25) (symbol . 25) (string . 25)
                  (character-literal . 25) (number . 25)
                  (define-list-word-only . 25)
                  (define-body-word-only . 25) (unreserved-name . 25)
                  (parsed-local-declaration . 25)
                  (local-declaration-word-only . 25) (define . 25)
                  (end . 25) (define-macro-body-word-only . 25)
                  (function-and-define-list-word . 25)
                  (function-and-define-body-word . 25) (rbracket . 25)
                  (rparen . 25) (rbrace . 25))
                 ((hash-lbrace . 36) (macro-case-begin-word-only . 36)
                  (begin-and-define-list-word . 36)
                  (begin-and-define-body-word . 36)
                  (begin-word-only . 36) (semicolon . 36) (comma . 36)
                  (constrained-name . 36) (escaped-substitution . 36)
                  (parsed-macro-call . 36) (parsed-function-call . 36)
                  (otherwise . 36) (hash-hash . 36) (ellipsis . 36)
                  (query-equal . 36) (query-query . 36) (query . 36)
                  (equal-greater . 36) (colon-colon . 36) (dot . 36)
                  (hash-all-keys . 36) (hash-key . 36) (hash-rest . 36)
                  (hash-next . 36) (hash-f . 36) (hash-t . 36)
                  (function-word-only . 36) (lbrace . 36)
                  (lbracket . 36) (lparen . 36) (equal-equal . 36)
                  (equal . 36) (unary-and-binary-operator . 36)
                  (binary-operator-only . 36)
                  (unary-operator-only . 36)
                  (parsed-vector-constant . 36)
                  (parsed-list-constant . 36) (hash-lbracket . 36)
                  (hash-lparen . 36) (symbol . 36) (string . 36)
                  (character-literal . 36) (number . 36)
                  (define-list-word-only . 36)
                  (define-body-word-only . 36) (unreserved-name . 36)
                  (parsed-local-declaration . 36)
                  (local-declaration-word-only . 36) (define . 36)
                  (end . 36) (define-macro-body-word-only . 36)
                  (function-and-define-list-word . 36)
                  (function-and-define-body-word . 36) (rbracket . 36)
                  (rparen . 36) (rbrace . 36))
                 ((unreserved-name . 306) (define . 306) (end . 306)
                  (define-macro-body-word-only . 306) (otherwise . 306)
                  (begin-word-only . 306) (function-word-only . 306)
                  (define-body-word-only . 306)
                  (define-list-word-only . 306)
                  (begin-and-define-list-word . 306)
                  (begin-and-define-body-word . 306)
                  (function-and-define-list-word . 306)
                  (function-and-define-body-word . 306)
                  (local-declaration-word-only . 306) (symbol . 306)
                  (number . 306) (character-literal . 306)
                  (unary-operator-only . 306) (semicolon . 306)
                  (comma . 306) (binary-operator-only . 306)
                  (unary-and-binary-operator . 306) (equal . 306)
                  (equal-equal . 306) (hash-t . 306) (hash-f . 306)
                  (hash-next . 306) (hash-rest . 306) (hash-key . 306)
                  (hash-all-keys . 306) (dot . 306) (colon-colon . 306)
                  (equal-greater . 306) (lparen . 306) (lbracket . 306)
                  (lbrace . 306) (string . 306) (query . 306)
                  (query-query . 306) (ellipsis . 306)
                  (query-equal . 306) (escaped-substitution . 306)
                  (constrained-name . 306) (parsed-function-call . 306)
                  (parsed-macro-call . 306)
                  (parsed-local-declaration . 306)
                  (parsed-list-constant . 306)
                  (parsed-vector-constant . 306) (hash-lparen . 306)
                  (hash-lbracket . 306) (hash-lbrace . 306)
                  (rbracket . 306) (rparen . 306) (rbrace . 306))
                 ((unreserved-name . -127)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145))
                 ((hash-lbrace . 29) (macro-case-begin-word-only . 29)
                  (begin-and-define-list-word . 29)
                  (begin-and-define-body-word . 29)
                  (begin-word-only . 29) (semicolon . 29) (comma . 29)
                  (constrained-name . 29) (escaped-substitution . 29)
                  (parsed-macro-call . 29) (parsed-function-call . 29)
                  (otherwise . 29) (hash-hash . 29) (ellipsis . 29)
                  (query-equal . 29) (query-query . 29) (query . 29)
                  (equal-greater . 29) (colon-colon . 29) (dot . 29)
                  (hash-all-keys . 29) (hash-key . 29) (hash-rest . 29)
                  (hash-next . 29) (hash-f . 29) (hash-t . 29)
                  (function-word-only . 29) (lbrace . 29)
                  (lbracket . 29) (lparen . 29) (equal-equal . 29)
                  (equal . 29) (unary-and-binary-operator . 29)
                  (binary-operator-only . 29)
                  (unary-operator-only . 29)
                  (parsed-vector-constant . 29)
                  (parsed-list-constant . 29) (hash-lbracket . 29)
                  (hash-lparen . 29) (symbol . 29) (string . 29)
                  (character-literal . 29) (number . 29)
                  (define-list-word-only . 29)
                  (define-body-word-only . 29) (unreserved-name . 29)
                  (parsed-local-declaration . 29)
                  (local-declaration-word-only . 29) (define . 29)
                  (end . 29) (define-macro-body-word-only . 29)
                  (function-and-define-list-word . 29)
                  (function-and-define-body-word . 29) (rbracket . 29)
                  (rparen . 29) (rbrace . 29))
                 ((unreserved-name . 310) (define . 310) (end . 310)
                  (define-macro-body-word-only . 310) (otherwise . 310)
                  (begin-word-only . 310) (function-word-only . 310)
                  (define-body-word-only . 310)
                  (define-list-word-only . 310)
                  (begin-and-define-list-word . 310)
                  (begin-and-define-body-word . 310)
                  (function-and-define-list-word . 310)
                  (function-and-define-body-word . 310)
                  (local-declaration-word-only . 310) (symbol . 310)
                  (number . 310) (character-literal . 310)
                  (unary-operator-only . 310) (semicolon . 310)
                  (comma . 310) (binary-operator-only . 310)
                  (unary-and-binary-operator . 310) (equal . 310)
                  (equal-equal . 310) (hash-t . 310) (hash-f . 310)
                  (hash-next . 310) (hash-rest . 310) (hash-key . 310)
                  (hash-all-keys . 310) (dot . 310) (colon-colon . 310)
                  (equal-greater . 310) (lparen . 310) (lbracket . 310)
                  (lbrace . 310) (string . 310) (query . 310)
                  (query-query . 310) (ellipsis . 310)
                  (query-equal . 310) (escaped-substitution . 310)
                  (constrained-name . 310) (parsed-function-call . 310)
                  (parsed-macro-call . 310)
                  (parsed-local-declaration . 310)
                  (parsed-list-constant . 310)
                  (parsed-vector-constant . 310) (hash-lparen . 310)
                  (hash-lbracket . 310) (hash-lbrace . 310)
                  (rbracket . 310) (rparen . 310) (rbrace . 310))
                 ((unreserved-name . 301) (define . 301) (end . 301)
                  (define-macro-body-word-only . 301) (otherwise . 301)
                  (begin-word-only . 301) (function-word-only . 301)
                  (define-body-word-only . 301)
                  (define-list-word-only . 301)
                  (begin-and-define-list-word . 301)
                  (begin-and-define-body-word . 301)
                  (function-and-define-list-word . 301)
                  (function-and-define-body-word . 301)
                  (local-declaration-word-only . 301) (symbol . 301)
                  (number . 301) (character-literal . 301)
                  (unary-operator-only . 301) (semicolon . 301)
                  (comma . 301) (binary-operator-only . 301)
                  (unary-and-binary-operator . 301) (equal . 301)
                  (equal-equal . 301) (hash-t . 301) (hash-f . 301)
                  (hash-next . 301) (hash-rest . 301) (hash-key . 301)
                  (hash-all-keys . 301) (dot . 301) (colon-colon . 301)
                  (equal-greater . 301) (lparen . 301) (lbracket . 301)
                  (lbrace . 301) (string . 301) (query . 301)
                  (query-query . 301) (ellipsis . 301)
                  (query-equal . 301) (escaped-substitution . 301)
                  (constrained-name . 301) (parsed-function-call . 301)
                  (parsed-macro-call . 301)
                  (parsed-local-declaration . 301)
                  (parsed-list-constant . 301)
                  (parsed-vector-constant . 301) (hash-lparen . 301)
                  (hash-lbracket . 301) (hash-lbrace . 301)
                  (rbracket . 301) (rparen . 301) (rbrace . 301))
                 ((unreserved-name . 302) (define . 302) (end . 302)
                  (define-macro-body-word-only . 302) (otherwise . 302)
                  (begin-word-only . 302) (function-word-only . 302)
                  (define-body-word-only . 302)
                  (define-list-word-only . 302)
                  (begin-and-define-list-word . 302)
                  (begin-and-define-body-word . 302)
                  (function-and-define-list-word . 302)
                  (function-and-define-body-word . 302)
                  (local-declaration-word-only . 302) (symbol . 302)
                  (number . 302) (character-literal . 302)
                  (unary-operator-only . 302) (semicolon . 302)
                  (comma . 302) (binary-operator-only . 302)
                  (unary-and-binary-operator . 302) (equal . 302)
                  (equal-equal . 302) (hash-t . 302) (hash-f . 302)
                  (hash-next . 302) (hash-rest . 302) (hash-key . 302)
                  (hash-all-keys . 302) (dot . 302) (colon-colon . 302)
                  (equal-greater . 302) (lparen . 302) (lbracket . 302)
                  (lbrace . 302) (string . 302) (query . 302)
                  (query-query . 302) (ellipsis . 302)
                  (query-equal . 302) (escaped-substitution . 302)
                  (constrained-name . 302) (parsed-function-call . 302)
                  (parsed-macro-call . 302)
                  (parsed-local-declaration . 302)
                  (parsed-list-constant . 302)
                  (parsed-vector-constant . 302) (hash-lparen . 302)
                  (hash-lbracket . 302) (hash-lbrace . 302)
                  (rbracket . 302) (rparen . 302) (rbrace . 302))
                 ((unreserved-name . 293) (define . 293) (end . 293)
                  (define-macro-body-word-only . 293) (otherwise . 293)
                  (begin-word-only . 293) (function-word-only . 293)
                  (define-body-word-only . 293)
                  (define-list-word-only . 293)
                  (begin-and-define-list-word . 293)
                  (begin-and-define-body-word . 293)
                  (function-and-define-list-word . 293)
                  (function-and-define-body-word . 293)
                  (local-declaration-word-only . 293) (symbol . 293)
                  (number . 293) (character-literal . 293)
                  (unary-operator-only . 293) (semicolon . 293)
                  (comma . 293) (binary-operator-only . 293)
                  (unary-and-binary-operator . 293) (equal . 293)
                  (equal-equal . 293) (hash-t . 293) (hash-f . 293)
                  (hash-next . 293) (hash-rest . 293) (hash-key . 293)
                  (hash-all-keys . 293) (dot . 293) (colon-colon . 293)
                  (equal-greater . 293) (lparen . 293) (lbracket . 293)
                  (lbrace . 293) (string . 293) (query . 293)
                  (query-query . 293) (ellipsis . 293)
                  (query-equal . 293) (escaped-substitution . 293)
                  (constrained-name . 293) (parsed-function-call . 293)
                  (parsed-macro-call . 293)
                  (parsed-local-declaration . 293)
                  (parsed-list-constant . 293)
                  (parsed-vector-constant . 293) (hash-lparen . 293)
                  (hash-lbracket . 293) (hash-lbrace . 293)
                  (rbracket . 293) (rparen . 293) (rbrace . 293))
                 ((unreserved-name . 316) (define . 316) (end . 316)
                  (define-macro-body-word-only . 316) (otherwise . 316)
                  (begin-word-only . 316) (function-word-only . 316)
                  (define-body-word-only . 316)
                  (define-list-word-only . 316)
                  (begin-and-define-list-word . 316)
                  (begin-and-define-body-word . 316)
                  (function-and-define-list-word . 316)
                  (function-and-define-body-word . 316)
                  (local-declaration-word-only . 316) (symbol . 316)
                  (number . 316) (character-literal . 316)
                  (unary-operator-only . 316) (semicolon . 316)
                  (comma . 316) (binary-operator-only . 316)
                  (unary-and-binary-operator . 316) (equal . 316)
                  (equal-equal . 316) (hash-t . 316) (hash-f . 316)
                  (hash-next . 316) (hash-rest . 316) (hash-key . 316)
                  (hash-all-keys . 316) (dot . 316) (colon-colon . 316)
                  (equal-greater . 316) (lparen . 316) (lbracket . 316)
                  (lbrace . 316) (string . 316) (query . 316)
                  (query-query . 316) (ellipsis . 316)
                  (query-equal . 316) (escaped-substitution . 316)
                  (constrained-name . 316) (parsed-function-call . 316)
                  (parsed-macro-call . 316)
                  (parsed-local-declaration . 316)
                  (parsed-list-constant . 316)
                  (parsed-vector-constant . 316) (hash-lparen . 316)
                  (hash-lbracket . 316) (hash-lbrace . 316)
                  (rbracket . 316) (rparen . 316) (rbrace . 316))
                 ((hash-lbrace . 20) (macro-case-begin-word-only . 20)
                  (begin-and-define-list-word . 20)
                  (begin-and-define-body-word . 20)
                  (begin-word-only . 20) (semicolon . 20) (comma . 20)
                  (constrained-name . 20) (escaped-substitution . 20)
                  (parsed-macro-call . 20) (parsed-function-call . 20)
                  (otherwise . 20) (hash-hash . 20) (ellipsis . 20)
                  (query-equal . 20) (query-query . 20) (query . 20)
                  (equal-greater . 20) (colon-colon . 20) (dot . 20)
                  (hash-all-keys . 20) (hash-key . 20) (hash-rest . 20)
                  (hash-next . 20) (hash-f . 20) (hash-t . 20)
                  (function-word-only . 20) (lbrace . 20)
                  (lbracket . 20) (lparen . 20) (equal-equal . 20)
                  (equal . 20) (unary-and-binary-operator . 20)
                  (binary-operator-only . 20)
                  (unary-operator-only . 20)
                  (parsed-vector-constant . 20)
                  (parsed-list-constant . 20) (hash-lbracket . 20)
                  (hash-lparen . 20) (symbol . 20) (string . 20)
                  (character-literal . 20) (number . 20)
                  (define-list-word-only . 20)
                  (define-body-word-only . 20) (unreserved-name . 20)
                  (parsed-local-declaration . 20)
                  (local-declaration-word-only . 20) (define . 20)
                  (end . 20) (define-macro-body-word-only . 20)
                  (function-and-define-list-word . 20)
                  (function-and-define-body-word . 20) (rbracket . 20)
                  (rparen . 20) (rbrace . 20))
                 ((hash-hash . -277) (unreserved-name . 307)
                  (define . 307) (end . 307)
                  (define-macro-body-word-only . 307) (otherwise . 307)
                  (begin-word-only . 307) (function-word-only . 307)
                  (define-body-word-only . 307)
                  (define-list-word-only . 307)
                  (begin-and-define-list-word . 307)
                  (begin-and-define-body-word . 307)
                  (function-and-define-list-word . 307)
                  (function-and-define-body-word . 307)
                  (local-declaration-word-only . 307) (symbol . 307)
                  (number . 307) (character-literal . 307)
                  (unary-operator-only . 307) (semicolon . 307)
                  (comma . 307) (binary-operator-only . 307)
                  (unary-and-binary-operator . 307) (equal . 307)
                  (equal-equal . 307) (hash-t . 307) (hash-f . 307)
                  (hash-next . 307) (hash-rest . 307) (hash-key . 307)
                  (hash-all-keys . 307) (dot . 307) (colon-colon . 307)
                  (equal-greater . 307) (lparen . 307) (lbracket . 307)
                  (lbrace . 307) (string . 307) (query . 307)
                  (query-query . 307) (ellipsis . 307)
                  (query-equal . 307) (escaped-substitution . 307)
                  (constrained-name . 307) (parsed-function-call . 307)
                  (parsed-macro-call . 307)
                  (parsed-local-declaration . 307)
                  (parsed-list-constant . 307)
                  (parsed-vector-constant . 307) (hash-lparen . 307)
                  (hash-lbracket . 307) (hash-lbrace . 307)
                  (rbracket . 307) (rparen . 307) (rbrace . 307))
                 ((unreserved-name . 297) (define . 297) (end . 297)
                  (define-macro-body-word-only . 297) (otherwise . 297)
                  (begin-word-only . 297) (function-word-only . 297)
                  (define-body-word-only . 297)
                  (define-list-word-only . 297)
                  (begin-and-define-list-word . 297)
                  (begin-and-define-body-word . 297)
                  (function-and-define-list-word . 297)
                  (function-and-define-body-word . 297)
                  (local-declaration-word-only . 297) (symbol . 297)
                  (number . 297) (character-literal . 297)
                  (unary-operator-only . 297) (semicolon . 297)
                  (comma . 297) (binary-operator-only . 297)
                  (unary-and-binary-operator . 297) (equal . 297)
                  (equal-equal . 297) (hash-t . 297) (hash-f . 297)
                  (hash-next . 297) (hash-rest . 297) (hash-key . 297)
                  (hash-all-keys . 297) (dot . 297) (colon-colon . 297)
                  (equal-greater . 297) (lparen . 297) (lbracket . 297)
                  (lbrace . 297) (string . 297) (query . 297)
                  (query-query . 297) (ellipsis . 297)
                  (query-equal . 297) (escaped-substitution . 297)
                  (constrained-name . 297) (parsed-function-call . 297)
                  (parsed-macro-call . 297)
                  (parsed-local-declaration . 297)
                  (parsed-list-constant . 297)
                  (parsed-vector-constant . 297) (hash-lparen . 297)
                  (hash-lbracket . 297) (hash-lbrace . 297)
                  (rbracket . 297) (rparen . 297) (rbrace . 297))
                 ((rbrace . -347))
                 ((unreserved-name . 308) (define . 308) (end . 308)
                  (define-macro-body-word-only . 308) (otherwise . 308)
                  (begin-word-only . 308) (function-word-only . 308)
                  (define-body-word-only . 308)
                  (define-list-word-only . 308)
                  (begin-and-define-list-word . 308)
                  (begin-and-define-body-word . 308)
                  (function-and-define-list-word . 308)
                  (function-and-define-body-word . 308)
                  (local-declaration-word-only . 308) (symbol . 308)
                  (number . 308) (character-literal . 308)
                  (unary-operator-only . 308) (semicolon . 308)
                  (comma . 308) (binary-operator-only . 308)
                  (unary-and-binary-operator . 308) (equal . 308)
                  (equal-equal . 308) (hash-t . 308) (hash-f . 308)
                  (hash-next . 308) (hash-rest . 308) (hash-key . 308)
                  (hash-all-keys . 308) (dot . 308) (colon-colon . 308)
                  (equal-greater . 308) (lparen . 308) (lbracket . 308)
                  (lbrace . 308) (string . 308) (query . 308)
                  (query-query . 308) (ellipsis . 308)
                  (query-equal . 308) (escaped-substitution . 308)
                  (constrained-name . 308) (parsed-function-call . 308)
                  (parsed-macro-call . 308)
                  (parsed-local-declaration . 308)
                  (parsed-list-constant . 308)
                  (parsed-vector-constant . 308) (hash-lparen . 308)
                  (hash-lbracket . 308) (hash-lbrace . 308)
                  (rbracket . 308) (rparen . 308) (rbrace . 308))
                 ((unreserved-name . 314) (define . 314) (end . 314)
                  (define-macro-body-word-only . 314) (otherwise . 314)
                  (begin-word-only . 314) (function-word-only . 314)
                  (define-body-word-only . 314)
                  (define-list-word-only . 314)
                  (begin-and-define-list-word . 314)
                  (begin-and-define-body-word . 314)
                  (function-and-define-list-word . 314)
                  (function-and-define-body-word . 314)
                  (local-declaration-word-only . 314) (symbol . 314)
                  (number . 314) (character-literal . 314)
                  (unary-operator-only . 314) (semicolon . 314)
                  (comma . 314) (binary-operator-only . 314)
                  (unary-and-binary-operator . 314) (equal . 314)
                  (equal-equal . 314) (hash-t . 314) (hash-f . 314)
                  (hash-next . 314) (hash-rest . 314) (hash-key . 314)
                  (hash-all-keys . 314) (dot . 314) (colon-colon . 314)
                  (equal-greater . 314) (lparen . 314) (lbracket . 314)
                  (lbrace . 314) (string . 314) (query . 314)
                  (query-query . 314) (ellipsis . 314)
                  (query-equal . 314) (escaped-substitution . 314)
                  (constrained-name . 314) (parsed-function-call . 314)
                  (parsed-macro-call . 314)
                  (parsed-local-declaration . 314)
                  (parsed-list-constant . 314)
                  (parsed-vector-constant . 314) (hash-lparen . 314)
                  (hash-lbracket . 314) (hash-lbrace . 314)
                  (rbracket . 314) (rparen . 314) (rbrace . 314))
                 ((hash-lbrace . 22) (macro-case-begin-word-only . 22)
                  (begin-and-define-list-word . 22)
                  (begin-and-define-body-word . 22)
                  (begin-word-only . 22) (semicolon . 22) (comma . 22)
                  (constrained-name . 22) (escaped-substitution . 22)
                  (parsed-macro-call . 22) (parsed-function-call . 22)
                  (otherwise . 22) (hash-hash . 22) (ellipsis . 22)
                  (query-equal . 22) (query-query . 22) (query . 22)
                  (equal-greater . 22) (colon-colon . 22) (dot . 22)
                  (hash-all-keys . 22) (hash-key . 22) (hash-rest . 22)
                  (hash-next . 22) (hash-f . 22) (hash-t . 22)
                  (function-word-only . 22) (lbrace . 22)
                  (lbracket . 22) (lparen . 22) (equal-equal . 22)
                  (equal . 22) (unary-and-binary-operator . 22)
                  (binary-operator-only . 22)
                  (unary-operator-only . 22)
                  (parsed-vector-constant . 22)
                  (parsed-list-constant . 22) (hash-lbracket . 22)
                  (hash-lparen . 22) (symbol . 22) (string . 22)
                  (character-literal . 22) (number . 22)
                  (define-list-word-only . 22)
                  (define-body-word-only . 22) (unreserved-name . 22)
                  (parsed-local-declaration . 22)
                  (local-declaration-word-only . 22) (define . 22)
                  (end . 22) (define-macro-body-word-only . 22)
                  (function-and-define-list-word . 22)
                  (function-and-define-body-word . 22) (rbracket . 22)
                  (rparen . 22) (rbrace . 22))
                 ((rbracket . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((rparen . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((hash-lbrace . 30) (macro-case-begin-word-only . 30)
                  (begin-and-define-list-word . 30)
                  (begin-and-define-body-word . 30)
                  (begin-word-only . 30) (semicolon . 30) (comma . 30)
                  (constrained-name . 30) (escaped-substitution . 30)
                  (parsed-macro-call . 30) (parsed-function-call . 30)
                  (otherwise . 30) (hash-hash . 30) (ellipsis . 30)
                  (query-equal . 30) (query-query . 30) (query . 30)
                  (equal-greater . 30) (colon-colon . 30) (dot . 30)
                  (hash-all-keys . 30) (hash-key . 30) (hash-rest . 30)
                  (hash-next . 30) (hash-f . 30) (hash-t . 30)
                  (function-word-only . 30) (lbrace . 30)
                  (lbracket . 30) (lparen . 30) (equal-equal . 30)
                  (equal . 30) (unary-and-binary-operator . 30)
                  (binary-operator-only . 30)
                  (unary-operator-only . 30)
                  (parsed-vector-constant . 30)
                  (parsed-list-constant . 30) (hash-lbracket . 30)
                  (hash-lparen . 30) (symbol . 30) (string . 30)
                  (character-literal . 30) (number . 30)
                  (define-list-word-only . 30)
                  (define-body-word-only . 30) (unreserved-name . 30)
                  (parsed-local-declaration . 30)
                  (local-declaration-word-only . 30) (define . 30)
                  (end . 30) (define-macro-body-word-only . 30)
                  (function-and-define-list-word . 30)
                  (function-and-define-body-word . 30) (rbracket . 30)
                  (rparen . 30) (rbrace . 30))
                 ((hash-lbrace . 21) (macro-case-begin-word-only . 21)
                  (begin-and-define-list-word . 21)
                  (begin-and-define-body-word . 21)
                  (begin-word-only . 21) (semicolon . 21) (comma . 21)
                  (constrained-name . 21) (escaped-substitution . 21)
                  (parsed-macro-call . 21) (parsed-function-call . 21)
                  (otherwise . 21) (hash-hash . 21) (ellipsis . 21)
                  (query-equal . 21) (query-query . 21) (query . 21)
                  (equal-greater . 21) (colon-colon . 21) (dot . 21)
                  (hash-all-keys . 21) (hash-key . 21) (hash-rest . 21)
                  (hash-next . 21) (hash-f . 21) (hash-t . 21)
                  (function-word-only . 21) (lbrace . 21)
                  (lbracket . 21) (lparen . 21) (equal-equal . 21)
                  (equal . 21) (unary-and-binary-operator . 21)
                  (binary-operator-only . 21)
                  (unary-operator-only . 21)
                  (parsed-vector-constant . 21)
                  (parsed-list-constant . 21) (hash-lbracket . 21)
                  (hash-lparen . 21) (symbol . 21) (string . 21)
                  (character-literal . 21) (number . 21)
                  (define-list-word-only . 21)
                  (define-body-word-only . 21) (unreserved-name . 21)
                  (parsed-local-declaration . 21)
                  (local-declaration-word-only . 21) (define . 21)
                  (end . 21) (define-macro-body-word-only . 21)
                  (function-and-define-list-word . 21)
                  (function-and-define-body-word . 21) (rbracket . 21)
                  (rparen . 21) (rbrace . 21))
                 ((unreserved-name . 315) (define . 315) (end . 315)
                  (define-macro-body-word-only . 315) (otherwise . 315)
                  (begin-word-only . 315) (function-word-only . 315)
                  (define-body-word-only . 315)
                  (define-list-word-only . 315)
                  (begin-and-define-list-word . 315)
                  (begin-and-define-body-word . 315)
                  (function-and-define-list-word . 315)
                  (function-and-define-body-word . 315)
                  (local-declaration-word-only . 315) (symbol . 315)
                  (number . 315) (character-literal . 315)
                  (unary-operator-only . 315) (semicolon . 315)
                  (comma . 315) (binary-operator-only . 315)
                  (unary-and-binary-operator . 315) (equal . 315)
                  (equal-equal . 315) (hash-t . 315) (hash-f . 315)
                  (hash-next . 315) (hash-rest . 315) (hash-key . 315)
                  (hash-all-keys . 315) (dot . 315) (colon-colon . 315)
                  (equal-greater . 315) (lparen . 315) (lbracket . 315)
                  (lbrace . 315) (string . 315) (query . 315)
                  (query-query . 315) (ellipsis . 315)
                  (query-equal . 315) (escaped-substitution . 315)
                  (constrained-name . 315) (parsed-function-call . 315)
                  (parsed-macro-call . 315)
                  (parsed-local-declaration . 315)
                  (parsed-list-constant . 315)
                  (parsed-vector-constant . 315) (hash-lparen . 315)
                  (hash-lbracket . 315) (hash-lbrace . 315)
                  (rbracket . 315) (rparen . 315) (rbrace . 315))
                 ((hash-lbrace . 24) (macro-case-begin-word-only . 24)
                  (begin-and-define-list-word . 24)
                  (begin-and-define-body-word . 24)
                  (begin-word-only . 24) (semicolon . 24) (comma . 24)
                  (constrained-name . 24) (escaped-substitution . 24)
                  (parsed-macro-call . 24) (parsed-function-call . 24)
                  (otherwise . 24) (hash-hash . 24) (ellipsis . 24)
                  (query-equal . 24) (query-query . 24) (query . 24)
                  (equal-greater . 24) (colon-colon . 24) (dot . 24)
                  (hash-all-keys . 24) (hash-key . 24) (hash-rest . 24)
                  (hash-next . 24) (hash-f . 24) (hash-t . 24)
                  (function-word-only . 24) (lbrace . 24)
                  (lbracket . 24) (lparen . 24) (equal-equal . 24)
                  (equal . 24) (unary-and-binary-operator . 24)
                  (binary-operator-only . 24)
                  (unary-operator-only . 24)
                  (parsed-vector-constant . 24)
                  (parsed-list-constant . 24) (hash-lbracket . 24)
                  (hash-lparen . 24) (symbol . 24) (string . 24)
                  (character-literal . 24) (number . 24)
                  (define-list-word-only . 24)
                  (define-body-word-only . 24) (unreserved-name . 24)
                  (parsed-local-declaration . 24)
                  (local-declaration-word-only . 24) (define . 24)
                  (end . 24) (define-macro-body-word-only . 24)
                  (function-and-define-list-word . 24)
                  (function-and-define-body-word . 24) (rbracket . 24)
                  (rparen . 24) (rbrace . 24))
                 ((hash-lbrace . 27) (macro-case-begin-word-only . 27)
                  (begin-and-define-list-word . 27)
                  (begin-and-define-body-word . 27)
                  (begin-word-only . 27) (semicolon . 27) (comma . 27)
                  (constrained-name . 27) (escaped-substitution . 27)
                  (parsed-macro-call . 27) (parsed-function-call . 27)
                  (otherwise . 27) (hash-hash . 27) (ellipsis . 27)
                  (query-equal . 27) (query-query . 27) (query . 27)
                  (equal-greater . 27) (colon-colon . 27) (dot . 27)
                  (hash-all-keys . 27) (hash-key . 27) (hash-rest . 27)
                  (hash-next . 27) (hash-f . 27) (hash-t . 27)
                  (function-word-only . 27) (lbrace . 27)
                  (lbracket . 27) (lparen . 27) (equal-equal . 27)
                  (equal . 27) (unary-and-binary-operator . 27)
                  (binary-operator-only . 27)
                  (unary-operator-only . 27)
                  (parsed-vector-constant . 27)
                  (parsed-list-constant . 27) (hash-lbracket . 27)
                  (hash-lparen . 27) (symbol . 27) (string . 27)
                  (character-literal . 27) (number . 27)
                  (define-list-word-only . 27)
                  (define-body-word-only . 27) (unreserved-name . 27)
                  (parsed-local-declaration . 27)
                  (local-declaration-word-only . 27) (define . 27)
                  (end . 27) (define-macro-body-word-only . 27)
                  (function-and-define-list-word . 27)
                  (function-and-define-body-word . 27) (rbracket . 27)
                  (rparen . 27) (rbrace . 27))
                 ((rbracket . 286) (rparen . 286) (rbrace . 286)
                  (query . 323) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((symbol . 63) (number . 63) (character-literal . 63)
                  (string . 63) (hash-t . 63) (hash-f . 63)
                  (hash-lparen . 63) (hash-lbracket . 63)
                  (parsed-list-constant . 63)
                  (parsed-vector-constant . 63) (unreserved-name . 63)
                  (define-body-word-only . 63)
                  (define-list-word-only . 63) (ellipsis . 63)
                  (lparen . 63) (function-word-only . 63)
                  (begin-word-only . 63)
                  (begin-and-define-body-word . 63)
                  (begin-and-define-list-word . 63)
                  (macro-case-begin-word-only . 63) (hash-lbrace . 63)
                  (parsed-function-call . 63) (parsed-macro-call . 63)
                  (unary-operator-only . 63)
                  (unary-and-binary-operator . 63) (define . 63)
                  (end . 63) (define-macro-body-word-only . 63)
                  (otherwise . 63) (function-and-define-list-word . 63)
                  (function-and-define-body-word . 63)
                  (local-declaration-word-only . 63) (semicolon . 63)
                  (comma . 63) (binary-operator-only . 63) (equal . 63)
                  (equal-equal . 63) (hash-next . 63) (hash-rest . 63)
                  (hash-key . 63) (hash-all-keys . 63) (dot . 63)
                  (colon-colon . 63) (equal-greater . 63)
                  (lbracket . 63) (lbrace . 63) (query . 63)
                  (query-query . 63) (query-equal . 63)
                  (escaped-substitution . 63) (constrained-name . 63)
                  (parsed-local-declaration . 63) (rbracket . 63)
                  (rparen . 63) (rbrace . 63))
                 ((rbrace . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((symbol . 61) (number . 61) (character-literal . 61)
                  (string . 61) (hash-t . 61) (hash-f . 61)
                  (hash-lparen . 61) (hash-lbracket . 61)
                  (parsed-list-constant . 61)
                  (parsed-vector-constant . 61) (unreserved-name . 61)
                  (define-body-word-only . 61)
                  (define-list-word-only . 61) (ellipsis . 61)
                  (lparen . 61) (function-word-only . 61)
                  (begin-word-only . 61)
                  (begin-and-define-body-word . 61)
                  (begin-and-define-list-word . 61)
                  (macro-case-begin-word-only . 61) (hash-lbrace . 61)
                  (parsed-function-call . 61) (parsed-macro-call . 61)
                  (unary-operator-only . 61)
                  (unary-and-binary-operator . 61) (define . 61)
                  (end . 61) (define-macro-body-word-only . 61)
                  (otherwise . 61) (function-and-define-list-word . 61)
                  (function-and-define-body-word . 61)
                  (local-declaration-word-only . 61) (semicolon . 61)
                  (comma . 61) (binary-operator-only . 61) (equal . 61)
                  (equal-equal . 61) (hash-next . 61) (hash-rest . 61)
                  (hash-key . 61) (hash-all-keys . 61) (dot . 61)
                  (colon-colon . 61) (equal-greater . 61)
                  (lbracket . 61) (lbrace . 61) (query . 61)
                  (query-query . 61) (query-equal . 61)
                  (escaped-substitution . 61) (constrained-name . 61)
                  (parsed-local-declaration . 61) (rbracket . 61)
                  (rparen . 61) (rbrace . 61))
                 ((unreserved-name . 311) (define . 311) (end . 311)
                  (define-macro-body-word-only . 311) (otherwise . 311)
                  (begin-word-only . 311) (function-word-only . 311)
                  (define-body-word-only . 311)
                  (define-list-word-only . 311)
                  (begin-and-define-list-word . 311)
                  (begin-and-define-body-word . 311)
                  (function-and-define-list-word . 311)
                  (function-and-define-body-word . 311)
                  (local-declaration-word-only . 311) (symbol . 311)
                  (number . 311) (character-literal . 311)
                  (unary-operator-only . 311) (semicolon . 311)
                  (comma . 311) (binary-operator-only . 311)
                  (unary-and-binary-operator . 311) (equal . 311)
                  (equal-equal . 311) (hash-t . 311) (hash-f . 311)
                  (hash-next . 311) (hash-rest . 311) (hash-key . 311)
                  (hash-all-keys . 311) (dot . 311) (colon-colon . 311)
                  (equal-greater . 311) (lparen . 311) (lbracket . 311)
                  (lbrace . 311) (string . 311) (query . 311)
                  (query-query . 311) (ellipsis . 311)
                  (query-equal . 311) (escaped-substitution . 311)
                  (constrained-name . 311) (parsed-function-call . 311)
                  (parsed-macro-call . 311)
                  (parsed-local-declaration . 311)
                  (parsed-list-constant . 311)
                  (parsed-vector-constant . 311) (hash-lparen . 311)
                  (hash-lbracket . 311) (hash-lbrace . 311)
                  (rbracket . 311) (rparen . 311) (rbrace . 311))
                 ((unreserved-name . 318) (define . 318) (end . 318)
                  (define-macro-body-word-only . 318) (otherwise . 318)
                  (begin-word-only . 318) (function-word-only . 318)
                  (define-body-word-only . 318)
                  (define-list-word-only . 318)
                  (begin-and-define-list-word . 318)
                  (begin-and-define-body-word . 318)
                  (function-and-define-list-word . 318)
                  (function-and-define-body-word . 318)
                  (local-declaration-word-only . 318) (symbol . 318)
                  (number . 318) (character-literal . 318)
                  (unary-operator-only . 318) (semicolon . 318)
                  (comma . 318) (binary-operator-only . 318)
                  (unary-and-binary-operator . 318) (equal . 318)
                  (equal-equal . 318) (hash-t . 318) (hash-f . 318)
                  (hash-next . 318) (hash-rest . 318) (hash-key . 318)
                  (hash-all-keys . 318) (dot . 318) (colon-colon . 318)
                  (equal-greater . 318) (lparen . 318) (lbracket . 318)
                  (lbrace . 318) (string . 318) (query . 318)
                  (query-query . 318) (ellipsis . 318)
                  (query-equal . 318) (escaped-substitution . 318)
                  (constrained-name . 318) (parsed-function-call . 318)
                  (parsed-macro-call . 318)
                  (parsed-local-declaration . 318)
                  (parsed-list-constant . 318)
                  (parsed-vector-constant . 318) (hash-lparen . 318)
                  (hash-lbracket . 318) (hash-lbrace . 318)
                  (rbracket . 318) (rparen . 318) (rbrace . 318))
                 ((constrained-name . -270) (unreserved-name . -127)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145))
                 ((unreserved-name . 291) (define . 291) (end . 291)
                  (define-macro-body-word-only . 291) (otherwise . 291)
                  (begin-word-only . 291) (function-word-only . 291)
                  (define-body-word-only . 291)
                  (define-list-word-only . 291)
                  (begin-and-define-list-word . 291)
                  (begin-and-define-body-word . 291)
                  (function-and-define-list-word . 291)
                  (function-and-define-body-word . 291)
                  (local-declaration-word-only . 291) (symbol . 291)
                  (number . 291) (character-literal . 291)
                  (unary-operator-only . 291) (semicolon . 291)
                  (comma . 291) (binary-operator-only . 291)
                  (unary-and-binary-operator . 291) (equal . 291)
                  (equal-equal . 291) (hash-t . 291) (hash-f . 291)
                  (hash-next . 291) (hash-rest . 291) (hash-key . 291)
                  (hash-all-keys . 291) (dot . 291) (colon-colon . 291)
                  (equal-greater . 291) (lparen . 291) (lbracket . 291)
                  (lbrace . 291) (string . 291) (query . 291)
                  (query-query . 291) (ellipsis . 291)
                  (query-equal . 291) (escaped-substitution . 291)
                  (constrained-name . 291) (parsed-function-call . 291)
                  (parsed-macro-call . 291)
                  (parsed-local-declaration . 291)
                  (parsed-list-constant . 291)
                  (parsed-vector-constant . 291) (hash-lparen . 291)
                  (hash-lbracket . 291) (hash-lbrace . 291)
                  (rbracket . 291) (rparen . 291) (rbrace . 291))
                 ((hash-lbrace . 18) (macro-case-begin-word-only . 18)
                  (begin-and-define-list-word . 18)
                  (begin-and-define-body-word . 18)
                  (begin-word-only . 18) (semicolon . 18) (comma . 18)
                  (constrained-name . 18) (escaped-substitution . 18)
                  (parsed-macro-call . 18) (parsed-function-call . 18)
                  (otherwise . 18) (hash-hash . 18) (ellipsis . 18)
                  (query-equal . 18) (query-query . 18) (query . 18)
                  (equal-greater . 18) (colon-colon . 18) (dot . 18)
                  (hash-all-keys . 18) (hash-key . 18) (hash-rest . 18)
                  (hash-next . 18) (hash-f . 18) (hash-t . 18)
                  (function-word-only . 18) (lbrace . 18)
                  (lbracket . 18) (lparen . 18) (equal-equal . 18)
                  (equal . 18) (unary-and-binary-operator . 18)
                  (binary-operator-only . 18)
                  (unary-operator-only . 18)
                  (parsed-vector-constant . 18)
                  (parsed-list-constant . 18) (hash-lbracket . 18)
                  (hash-lparen . 18) (symbol . 18) (string . 18)
                  (character-literal . 18) (number . 18)
                  (define-list-word-only . 18)
                  (define-body-word-only . 18) (unreserved-name . 18)
                  (parsed-local-declaration . 18)
                  (local-declaration-word-only . 18) (define . 18)
                  (end . 18) (define-macro-body-word-only . 18)
                  (function-and-define-list-word . 18)
                  (function-and-define-body-word . 18) (rbracket . 18)
                  (rparen . 18) (rbrace . 18))
                 ((hash-lbrace . 28) (macro-case-begin-word-only . 28)
                  (begin-and-define-list-word . 28)
                  (begin-and-define-body-word . 28)
                  (begin-word-only . 28) (semicolon . 28) (comma . 28)
                  (constrained-name . 28) (escaped-substitution . 28)
                  (parsed-macro-call . 28) (parsed-function-call . 28)
                  (otherwise . 28) (hash-hash . 28) (ellipsis . 28)
                  (query-equal . 28) (query-query . 28) (query . 28)
                  (equal-greater . 28) (colon-colon . 28) (dot . 28)
                  (hash-all-keys . 28) (hash-key . 28) (hash-rest . 28)
                  (hash-next . 28) (hash-f . 28) (hash-t . 28)
                  (function-word-only . 28) (lbrace . 28)
                  (lbracket . 28) (lparen . 28) (equal-equal . 28)
                  (equal . 28) (unary-and-binary-operator . 28)
                  (binary-operator-only . 28)
                  (unary-operator-only . 28)
                  (parsed-vector-constant . 28)
                  (parsed-list-constant . 28) (hash-lbracket . 28)
                  (hash-lparen . 28) (symbol . 28) (string . 28)
                  (character-literal . 28) (number . 28)
                  (define-list-word-only . 28)
                  (define-body-word-only . 28) (unreserved-name . 28)
                  (parsed-local-declaration . 28)
                  (local-declaration-word-only . 28) (define . 28)
                  (end . 28) (define-macro-body-word-only . 28)
                  (function-and-define-list-word . 28)
                  (function-and-define-body-word . 28) (rbracket . 28)
                  (rparen . 28) (rbrace . 28))
                 ((rbracket . 284) (rparen . 284) (rbrace . 284)
                  (query . 323) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((unreserved-name . 292) (define . 292) (end . 292)
                  (define-macro-body-word-only . 292) (otherwise . 292)
                  (begin-word-only . 292) (function-word-only . 292)
                  (define-body-word-only . 292)
                  (define-list-word-only . 292)
                  (begin-and-define-list-word . 292)
                  (begin-and-define-body-word . 292)
                  (function-and-define-list-word . 292)
                  (function-and-define-body-word . 292)
                  (local-declaration-word-only . 292) (symbol . 292)
                  (number . 292) (character-literal . 292)
                  (unary-operator-only . 292) (semicolon . 292)
                  (comma . 292) (binary-operator-only . 292)
                  (unary-and-binary-operator . 292) (equal . 292)
                  (equal-equal . 292) (hash-t . 292) (hash-f . 292)
                  (hash-next . 292) (hash-rest . 292) (hash-key . 292)
                  (hash-all-keys . 292) (dot . 292) (colon-colon . 292)
                  (equal-greater . 292) (lparen . 292) (lbracket . 292)
                  (lbrace . 292) (string . 292) (query . 292)
                  (query-query . 292) (ellipsis . 292)
                  (query-equal . 292) (escaped-substitution . 292)
                  (constrained-name . 292) (parsed-function-call . 292)
                  (parsed-macro-call . 292)
                  (parsed-local-declaration . 292)
                  (parsed-list-constant . 292)
                  (parsed-vector-constant . 292) (hash-lparen . 292)
                  (hash-lbracket . 292) (hash-lbrace . 292)
                  (rbracket . 292) (rparen . 292) (rbrace . 292))
                 ((unreserved-name . 305) (define . 305) (end . 305)
                  (define-macro-body-word-only . 305) (otherwise . 305)
                  (begin-word-only . 305) (function-word-only . 305)
                  (define-body-word-only . 305)
                  (define-list-word-only . 305)
                  (begin-and-define-list-word . 305)
                  (begin-and-define-body-word . 305)
                  (function-and-define-list-word . 305)
                  (function-and-define-body-word . 305)
                  (local-declaration-word-only . 305) (symbol . 305)
                  (number . 305) (character-literal . 305)
                  (unary-operator-only . 305) (semicolon . 305)
                  (comma . 305) (binary-operator-only . 305)
                  (unary-and-binary-operator . 305) (equal . 305)
                  (equal-equal . 305) (hash-t . 305) (hash-f . 305)
                  (hash-next . 305) (hash-rest . 305) (hash-key . 305)
                  (hash-all-keys . 305) (dot . 305) (colon-colon . 305)
                  (equal-greater . 305) (lparen . 305) (lbracket . 305)
                  (lbrace . 305) (string . 305) (query . 305)
                  (query-query . 305) (ellipsis . 305)
                  (query-equal . 305) (escaped-substitution . 305)
                  (constrained-name . 305) (parsed-function-call . 305)
                  (parsed-macro-call . 305)
                  (parsed-local-declaration . 305)
                  (parsed-list-constant . 305)
                  (parsed-vector-constant . 305) (hash-lparen . 305)
                  (hash-lbracket . 305) (hash-lbrace . 305)
                  (rbracket . 305) (rparen . 305) (rbrace . 305))
                 ((rbracket . 281) (rparen . 281) (rbrace . 281))
                 ((hash-lbrace . 19) (macro-case-begin-word-only . 19)
                  (begin-and-define-list-word . 19)
                  (begin-and-define-body-word . 19)
                  (begin-word-only . 19) (semicolon . 19) (comma . 19)
                  (constrained-name . 19) (escaped-substitution . 19)
                  (parsed-macro-call . 19) (parsed-function-call . 19)
                  (otherwise . 19) (hash-hash . 19) (ellipsis . 19)
                  (query-equal . 19) (query-query . 19) (query . 19)
                  (equal-greater . 19) (colon-colon . 19) (dot . 19)
                  (hash-all-keys . 19) (hash-key . 19) (hash-rest . 19)
                  (hash-next . 19) (hash-f . 19) (hash-t . 19)
                  (function-word-only . 19) (lbrace . 19)
                  (lbracket . 19) (lparen . 19) (equal-equal . 19)
                  (equal . 19) (unary-and-binary-operator . 19)
                  (binary-operator-only . 19)
                  (unary-operator-only . 19)
                  (parsed-vector-constant . 19)
                  (parsed-list-constant . 19) (hash-lbracket . 19)
                  (hash-lparen . 19) (symbol . 19) (string . 19)
                  (character-literal . 19) (number . 19)
                  (define-list-word-only . 19)
                  (define-body-word-only . 19) (unreserved-name . 19)
                  (parsed-local-declaration . 19)
                  (local-declaration-word-only . 19) (define . 19)
                  (end . 19) (define-macro-body-word-only . 19)
                  (function-and-define-list-word . 19)
                  (function-and-define-body-word . 19) (rbracket . 19)
                  (rparen . 19) (rbrace . 19))
                 ((symbol . 60) (number . 60) (character-literal . 60)
                  (string . 60) (hash-t . 60) (hash-f . 60)
                  (hash-lparen . 60) (hash-lbracket . 60)
                  (parsed-list-constant . 60)
                  (parsed-vector-constant . 60) (unreserved-name . 60)
                  (define-body-word-only . 60)
                  (define-list-word-only . 60) (ellipsis . 60)
                  (lparen . 60) (function-word-only . 60)
                  (begin-word-only . 60)
                  (begin-and-define-body-word . 60)
                  (begin-and-define-list-word . 60)
                  (macro-case-begin-word-only . 60) (hash-lbrace . 60)
                  (parsed-function-call . 60) (parsed-macro-call . 60)
                  (unary-operator-only . 60)
                  (unary-and-binary-operator . 60) (define . 60)
                  (end . 60) (define-macro-body-word-only . 60)
                  (otherwise . 60) (function-and-define-list-word . 60)
                  (function-and-define-body-word . 60)
                  (local-declaration-word-only . 60) (semicolon . 60)
                  (comma . 60) (binary-operator-only . 60) (equal . 60)
                  (equal-equal . 60) (hash-next . 60) (hash-rest . 60)
                  (hash-key . 60) (hash-all-keys . 60) (dot . 60)
                  (colon-colon . 60) (equal-greater . 60)
                  (lbracket . 60) (lbrace . 60) (query . 60)
                  (query-query . 60) (query-equal . 60)
                  (escaped-substitution . 60) (constrained-name . 60)
                  (parsed-local-declaration . 60) (rbracket . 60)
                  (rparen . 60) (rbrace . 60))
                 ((hash-lbrace . 35) (macro-case-begin-word-only . 35)
                  (begin-and-define-list-word . 35)
                  (begin-and-define-body-word . 35)
                  (begin-word-only . 35) (semicolon . 35) (comma . 35)
                  (constrained-name . 35) (escaped-substitution . 35)
                  (parsed-macro-call . 35) (parsed-function-call . 35)
                  (otherwise . 35) (hash-hash . 35) (ellipsis . 35)
                  (query-equal . 35) (query-query . 35) (query . 35)
                  (equal-greater . 35) (colon-colon . 35) (dot . 35)
                  (hash-all-keys . 35) (hash-key . 35) (hash-rest . 35)
                  (hash-next . 35) (hash-f . 35) (hash-t . 35)
                  (function-word-only . 35) (lbrace . 35)
                  (lbracket . 35) (lparen . 35) (equal-equal . 35)
                  (equal . 35) (unary-and-binary-operator . 35)
                  (binary-operator-only . 35)
                  (unary-operator-only . 35)
                  (parsed-vector-constant . 35)
                  (parsed-list-constant . 35) (hash-lbracket . 35)
                  (hash-lparen . 35) (symbol . 35) (string . 35)
                  (character-literal . 35) (number . 35)
                  (define-list-word-only . 35)
                  (define-body-word-only . 35) (unreserved-name . 35)
                  (parsed-local-declaration . 35)
                  (local-declaration-word-only . 35) (define . 35)
                  (end . 35) (define-macro-body-word-only . 35)
                  (function-and-define-list-word . 35)
                  (function-and-define-body-word . 35) (rbracket . 35)
                  (rparen . 35) (rbrace . 35))
                 ((query . 322))
                 ((unreserved-name . 290) (define . 290) (end . 290)
                  (define-macro-body-word-only . 290) (otherwise . 290)
                  (begin-word-only . 290) (function-word-only . 290)
                  (define-body-word-only . 290)
                  (define-list-word-only . 290)
                  (begin-and-define-list-word . 290)
                  (begin-and-define-body-word . 290)
                  (function-and-define-list-word . 290)
                  (function-and-define-body-word . 290)
                  (local-declaration-word-only . 290) (symbol . 290)
                  (number . 290) (character-literal . 290)
                  (unary-operator-only . 290) (semicolon . 290)
                  (comma . 290) (binary-operator-only . 290)
                  (unary-and-binary-operator . 290) (equal . 290)
                  (equal-equal . 290) (hash-t . 290) (hash-f . 290)
                  (hash-next . 290) (hash-rest . 290) (hash-key . 290)
                  (hash-all-keys . 290) (dot . 290) (colon-colon . 290)
                  (equal-greater . 290) (lparen . 290) (lbracket . 290)
                  (lbrace . 290) (string . 290) (query . 290)
                  (query-query . 290) (ellipsis . 290)
                  (query-equal . 290) (escaped-substitution . 290)
                  (constrained-name . 290) (parsed-function-call . 290)
                  (parsed-macro-call . 290)
                  (parsed-local-declaration . 290)
                  (parsed-list-constant . 290)
                  (parsed-vector-constant . 290) (hash-lparen . 290)
                  (hash-lbracket . 290) (hash-lbrace . 290)
                  (rbracket . 290) (rparen . 290) (rbrace . 290))
                 ((rparen . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((unreserved-name . 304) (define . 304) (end . 304)
                  (define-macro-body-word-only . 304) (otherwise . 304)
                  (begin-word-only . 304) (function-word-only . 304)
                  (define-body-word-only . 304)
                  (define-list-word-only . 304)
                  (begin-and-define-list-word . 304)
                  (begin-and-define-body-word . 304)
                  (function-and-define-list-word . 304)
                  (function-and-define-body-word . 304)
                  (local-declaration-word-only . 304) (symbol . 304)
                  (number . 304) (character-literal . 304)
                  (unary-operator-only . 304) (semicolon . 304)
                  (comma . 304) (binary-operator-only . 304)
                  (unary-and-binary-operator . 304) (equal . 304)
                  (equal-equal . 304) (hash-t . 304) (hash-f . 304)
                  (hash-next . 304) (hash-rest . 304) (hash-key . 304)
                  (hash-all-keys . 304) (dot . 304) (colon-colon . 304)
                  (equal-greater . 304) (lparen . 304) (lbracket . 304)
                  (lbrace . 304) (string . 304) (query . 304)
                  (query-query . 304) (ellipsis . 304)
                  (query-equal . 304) (escaped-substitution . 304)
                  (constrained-name . 304) (parsed-function-call . 304)
                  (parsed-macro-call . 304)
                  (parsed-local-declaration . 304)
                  (parsed-list-constant . 304)
                  (parsed-vector-constant . 304) (hash-lparen . 304)
                  (hash-lbracket . 304) (hash-lbrace . 304)
                  (rbracket . 304) (rparen . 304) (rbrace . 304))
                 ((hash-lbrace . 26) (macro-case-begin-word-only . 26)
                  (begin-and-define-list-word . 26)
                  (begin-and-define-body-word . 26)
                  (begin-word-only . 26) (semicolon . 26) (comma . 26)
                  (constrained-name . 26) (escaped-substitution . 26)
                  (parsed-macro-call . 26) (parsed-function-call . 26)
                  (otherwise . 26) (hash-hash . 26) (ellipsis . 26)
                  (query-equal . 26) (query-query . 26) (query . 26)
                  (equal-greater . 26) (colon-colon . 26) (dot . 26)
                  (hash-all-keys . 26) (hash-key . 26) (hash-rest . 26)
                  (hash-next . 26) (hash-f . 26) (hash-t . 26)
                  (function-word-only . 26) (lbrace . 26)
                  (lbracket . 26) (lparen . 26) (equal-equal . 26)
                  (equal . 26) (unary-and-binary-operator . 26)
                  (binary-operator-only . 26)
                  (unary-operator-only . 26)
                  (parsed-vector-constant . 26)
                  (parsed-list-constant . 26) (hash-lbracket . 26)
                  (hash-lparen . 26) (symbol . 26) (string . 26)
                  (character-literal . 26) (number . 26)
                  (define-list-word-only . 26)
                  (define-body-word-only . 26) (unreserved-name . 26)
                  (parsed-local-declaration . 26)
                  (local-declaration-word-only . 26) (define . 26)
                  (end . 26) (define-macro-body-word-only . 26)
                  (function-and-define-list-word . 26)
                  (function-and-define-body-word . 26) (rbracket . 26)
                  (rparen . 26) (rbrace . 26))
                 ((unreserved-name . 295) (define . 295) (end . 295)
                  (define-macro-body-word-only . 295) (otherwise . 295)
                  (begin-word-only . 295) (function-word-only . 295)
                  (define-body-word-only . 295)
                  (define-list-word-only . 295)
                  (begin-and-define-list-word . 295)
                  (begin-and-define-body-word . 295)
                  (function-and-define-list-word . 295)
                  (function-and-define-body-word . 295)
                  (local-declaration-word-only . 295) (symbol . 295)
                  (number . 295) (character-literal . 295)
                  (unary-operator-only . 295) (semicolon . 295)
                  (comma . 295) (binary-operator-only . 295)
                  (unary-and-binary-operator . 295) (equal . 295)
                  (equal-equal . 295) (hash-t . 295) (hash-f . 295)
                  (hash-next . 295) (hash-rest . 295) (hash-key . 295)
                  (hash-all-keys . 295) (dot . 295) (colon-colon . 295)
                  (equal-greater . 295) (lparen . 295) (lbracket . 295)
                  (lbrace . 295) (string . 295) (query . 295)
                  (query-query . 295) (ellipsis . 295)
                  (query-equal . 295) (escaped-substitution . 295)
                  (constrained-name . 295) (parsed-function-call . 295)
                  (parsed-macro-call . 295)
                  (parsed-local-declaration . 295)
                  (parsed-list-constant . 295)
                  (parsed-vector-constant . 295) (hash-lparen . 295)
                  (hash-lbracket . 295) (hash-lbrace . 295)
                  (rbracket . 295) (rparen . 295) (rbrace . 295))
                 ((unreserved-name . 309) (define . 309) (end . 309)
                  (define-macro-body-word-only . 309) (otherwise . 309)
                  (begin-word-only . 309) (function-word-only . 309)
                  (define-body-word-only . 309)
                  (define-list-word-only . 309)
                  (begin-and-define-list-word . 309)
                  (begin-and-define-body-word . 309)
                  (function-and-define-list-word . 309)
                  (function-and-define-body-word . 309)
                  (local-declaration-word-only . 309) (symbol . 309)
                  (number . 309) (character-literal . 309)
                  (unary-operator-only . 309) (semicolon . 309)
                  (comma . 309) (binary-operator-only . 309)
                  (unary-and-binary-operator . 309) (equal . 309)
                  (equal-equal . 309) (hash-t . 309) (hash-f . 309)
                  (hash-next . 309) (hash-rest . 309) (hash-key . 309)
                  (hash-all-keys . 309) (dot . 309) (colon-colon . 309)
                  (equal-greater . 309) (lparen . 309) (lbracket . 309)
                  (lbrace . 309) (string . 309) (query . 309)
                  (query-query . 309) (ellipsis . 309)
                  (query-equal . 309) (escaped-substitution . 309)
                  (constrained-name . 309) (parsed-function-call . 309)
                  (parsed-macro-call . 309)
                  (parsed-local-declaration . 309)
                  (parsed-list-constant . 309)
                  (parsed-vector-constant . 309) (hash-lparen . 309)
                  (hash-lbracket . 309) (hash-lbrace . 309)
                  (rbracket . 309) (rparen . 309) (rbrace . 309))
                 ((rbrace . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((hash-lbrace . 23) (macro-case-begin-word-only . 23)
                  (begin-and-define-list-word . 23)
                  (begin-and-define-body-word . 23)
                  (begin-word-only . 23) (semicolon . 23) (comma . 23)
                  (constrained-name . 23) (escaped-substitution . 23)
                  (parsed-macro-call . 23) (parsed-function-call . 23)
                  (otherwise . 23) (hash-hash . 23) (ellipsis . 23)
                  (query-equal . 23) (query-query . 23) (query . 23)
                  (equal-greater . 23) (colon-colon . 23) (dot . 23)
                  (hash-all-keys . 23) (hash-key . 23) (hash-rest . 23)
                  (hash-next . 23) (hash-f . 23) (hash-t . 23)
                  (function-word-only . 23) (lbrace . 23)
                  (lbracket . 23) (lparen . 23) (equal-equal . 23)
                  (equal . 23) (unary-and-binary-operator . 23)
                  (binary-operator-only . 23)
                  (unary-operator-only . 23)
                  (parsed-vector-constant . 23)
                  (parsed-list-constant . 23) (hash-lbracket . 23)
                  (hash-lparen . 23) (symbol . 23) (string . 23)
                  (character-literal . 23) (number . 23)
                  (define-list-word-only . 23)
                  (define-body-word-only . 23) (unreserved-name . 23)
                  (parsed-local-declaration . 23)
                  (local-declaration-word-only . 23) (define . 23)
                  (end . 23) (define-macro-body-word-only . 23)
                  (function-and-define-list-word . 23)
                  (function-and-define-body-word . 23) (rbracket . 23)
                  (rparen . 23) (rbrace . 23))
                 ((hash-lbrace . 17) (macro-case-begin-word-only . 17)
                  (begin-and-define-list-word . 17)
                  (begin-and-define-body-word . 17)
                  (begin-word-only . 17) (semicolon . 17) (comma . 17)
                  (constrained-name . 17) (escaped-substitution . 17)
                  (parsed-macro-call . 17) (parsed-function-call . 17)
                  (otherwise . 17) (hash-hash . 17) (ellipsis . 17)
                  (query-equal . 17) (query-query . 17) (query . 17)
                  (equal-greater . 17) (colon-colon . 17) (dot . 17)
                  (hash-all-keys . 17) (hash-key . 17) (hash-rest . 17)
                  (hash-next . 17) (hash-f . 17) (hash-t . 17)
                  (function-word-only . 17) (lbrace . 17)
                  (lbracket . 17) (lparen . 17) (equal-equal . 17)
                  (equal . 17) (unary-and-binary-operator . 17)
                  (binary-operator-only . 17)
                  (unary-operator-only . 17)
                  (parsed-vector-constant . 17)
                  (parsed-list-constant . 17) (hash-lbracket . 17)
                  (hash-lparen . 17) (symbol . 17) (string . 17)
                  (character-literal . 17) (number . 17)
                  (define-list-word-only . 17)
                  (define-body-word-only . 17) (unreserved-name . 17)
                  (parsed-local-declaration . 17)
                  (local-declaration-word-only . 17) (define . 17)
                  (end . 17) (define-macro-body-word-only . 17)
                  (function-and-define-list-word . 17)
                  (function-and-define-body-word . 17) (rbracket . 17)
                  (rparen . 17) (rbrace . 17))
                 ((unreserved-name . 303) (define . 303) (end . 303)
                  (define-macro-body-word-only . 303) (otherwise . 303)
                  (begin-word-only . 303) (function-word-only . 303)
                  (define-body-word-only . 303)
                  (define-list-word-only . 303)
                  (begin-and-define-list-word . 303)
                  (begin-and-define-body-word . 303)
                  (function-and-define-list-word . 303)
                  (function-and-define-body-word . 303)
                  (local-declaration-word-only . 303) (symbol . 303)
                  (number . 303) (character-literal . 303)
                  (unary-operator-only . 303) (semicolon . 303)
                  (comma . 303) (binary-operator-only . 303)
                  (unary-and-binary-operator . 303) (equal . 303)
                  (equal-equal . 303) (hash-t . 303) (hash-f . 303)
                  (hash-next . 303) (hash-rest . 303) (hash-key . 303)
                  (hash-all-keys . 303) (dot . 303) (colon-colon . 303)
                  (equal-greater . 303) (lparen . 303) (lbracket . 303)
                  (lbrace . 303) (string . 303) (query . 303)
                  (query-query . 303) (ellipsis . 303)
                  (query-equal . 303) (escaped-substitution . 303)
                  (constrained-name . 303) (parsed-function-call . 303)
                  (parsed-macro-call . 303)
                  (parsed-local-declaration . 303)
                  (parsed-list-constant . 303)
                  (parsed-vector-constant . 303) (hash-lparen . 303)
                  (hash-lbracket . 303) (hash-lbrace . 303)
                  (rbracket . 303) (rparen . 303) (rbrace . 303))
                 ((unreserved-name . 296) (define . 296) (end . 296)
                  (define-macro-body-word-only . 296) (otherwise . 296)
                  (begin-word-only . 296) (function-word-only . 296)
                  (define-body-word-only . 296)
                  (define-list-word-only . 296)
                  (begin-and-define-list-word . 296)
                  (begin-and-define-body-word . 296)
                  (function-and-define-list-word . 296)
                  (function-and-define-body-word . 296)
                  (local-declaration-word-only . 296) (symbol . 296)
                  (number . 296) (character-literal . 296)
                  (unary-operator-only . 296) (semicolon . 296)
                  (comma . 296) (binary-operator-only . 296)
                  (unary-and-binary-operator . 296) (equal . 296)
                  (equal-equal . 296) (hash-t . 296) (hash-f . 296)
                  (hash-next . 296) (hash-rest . 296) (hash-key . 296)
                  (hash-all-keys . 296) (dot . 296) (colon-colon . 296)
                  (equal-greater . 296) (lparen . 296) (lbracket . 296)
                  (lbrace . 296) (string . 296) (query . 296)
                  (query-query . 296) (ellipsis . 296)
                  (query-equal . 296) (escaped-substitution . 296)
                  (constrained-name . 296) (parsed-function-call . 296)
                  (parsed-macro-call . 296)
                  (parsed-local-declaration . 296)
                  (parsed-list-constant . 296)
                  (parsed-vector-constant . 296) (hash-lparen . 296)
                  (hash-lbracket . 296) (hash-lbrace . 296)
                  (rbracket . 296) (rparen . 296) (rbrace . 296))
                 ((symbol . 62) (number . 62) (character-literal . 62)
                  (string . 62) (hash-t . 62) (hash-f . 62)
                  (hash-lparen . 62) (hash-lbracket . 62)
                  (parsed-list-constant . 62)
                  (parsed-vector-constant . 62) (unreserved-name . 62)
                  (define-body-word-only . 62)
                  (define-list-word-only . 62) (ellipsis . 62)
                  (lparen . 62) (function-word-only . 62)
                  (begin-word-only . 62)
                  (begin-and-define-body-word . 62)
                  (begin-and-define-list-word . 62)
                  (macro-case-begin-word-only . 62) (hash-lbrace . 62)
                  (parsed-function-call . 62) (parsed-macro-call . 62)
                  (unary-operator-only . 62)
                  (unary-and-binary-operator . 62) (define . 62)
                  (end . 62) (define-macro-body-word-only . 62)
                  (otherwise . 62) (function-and-define-list-word . 62)
                  (function-and-define-body-word . 62)
                  (local-declaration-word-only . 62) (semicolon . 62)
                  (comma . 62) (binary-operator-only . 62) (equal . 62)
                  (equal-equal . 62) (hash-next . 62) (hash-rest . 62)
                  (hash-key . 62) (hash-all-keys . 62) (dot . 62)
                  (colon-colon . 62) (equal-greater . 62)
                  (lbracket . 62) (lbrace . 62) (query . 62)
                  (query-query . 62) (query-equal . 62)
                  (escaped-substitution . 62) (constrained-name . 62)
                  (parsed-local-declaration . 62) (rbracket . 62)
                  (rparen . 62) (rbrace . 62))
                 ((query . -181))
                 ((lparen . -182) (constrained-name . -184)
                  (symbol . -185) (string . -186)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((unreserved-name . 326) (define . 326) (end . 326)
                  (define-macro-body-word-only . 326) (otherwise . 326)
                  (begin-word-only . 326) (function-word-only . 326)
                  (define-body-word-only . 326)
                  (define-list-word-only . 326)
                  (begin-and-define-list-word . 326)
                  (begin-and-define-body-word . 326)
                  (function-and-define-list-word . 326)
                  (function-and-define-body-word . 326)
                  (local-declaration-word-only . 326) (symbol . 326)
                  (number . 326) (character-literal . 326)
                  (unary-operator-only . 326) (semicolon . 326)
                  (comma . 326) (binary-operator-only . 326)
                  (unary-and-binary-operator . 326) (equal . 326)
                  (equal-equal . 326) (hash-t . 326) (hash-f . 326)
                  (hash-next . 326) (hash-rest . 326) (hash-key . 326)
                  (hash-all-keys . 326) (dot . 326) (colon-colon . 326)
                  (equal-greater . 326) (lparen . 326) (lbracket . 326)
                  (lbrace . 326) (string . 326) (query . 326)
                  (query-query . 326) (ellipsis . 326)
                  (query-equal . 326) (escaped-substitution . 326)
                  (constrained-name . 326) (parsed-function-call . 326)
                  (parsed-macro-call . 326)
                  (parsed-local-declaration . 326)
                  (parsed-list-constant . 326)
                  (parsed-vector-constant . 326) (hash-lparen . 326)
                  (hash-lbracket . 326) (hash-lbrace . 326)
                  (rbracket . 326) (rparen . 326) (rbrace . 326)
                  (hash-hash . -189))
                 ((hash-hash . 329) (unreserved-name . 329)
                  (define . 329) (end . 329)
                  (define-macro-body-word-only . 329) (otherwise . 329)
                  (begin-word-only . 329) (function-word-only . 329)
                  (define-body-word-only . 329)
                  (define-list-word-only . 329)
                  (begin-and-define-list-word . 329)
                  (begin-and-define-body-word . 329)
                  (function-and-define-list-word . 329)
                  (function-and-define-body-word . 329)
                  (local-declaration-word-only . 329) (symbol . 329)
                  (number . 329) (character-literal . 329)
                  (unary-operator-only . 329) (semicolon . 329)
                  (comma . 329) (binary-operator-only . 329)
                  (unary-and-binary-operator . 329) (equal . 329)
                  (equal-equal . 329) (hash-t . 329) (hash-f . 329)
                  (hash-next . 329) (hash-rest . 329) (hash-key . 329)
                  (hash-all-keys . 329) (dot . 329) (colon-colon . 329)
                  (equal-greater . 329) (lparen . 329) (lbracket . 329)
                  (lbrace . 329) (string . 329) (query . 329)
                  (query-query . 329) (ellipsis . 329)
                  (query-equal . 329) (escaped-substitution . 329)
                  (constrained-name . 329) (parsed-function-call . 329)
                  (parsed-macro-call . 329)
                  (parsed-local-declaration . 329)
                  (parsed-list-constant . 329)
                  (parsed-vector-constant . 329) (hash-lparen . 329)
                  (hash-lbracket . 329) (hash-lbrace . 329)
                  (rbracket . 329) (rparen . 329) (rbrace . 329))
                 ((hash-hash . 330) (unreserved-name . 330)
                  (define . 330) (end . 330)
                  (define-macro-body-word-only . 330) (otherwise . 330)
                  (begin-word-only . 330) (function-word-only . 330)
                  (define-body-word-only . 330)
                  (define-list-word-only . 330)
                  (begin-and-define-list-word . 330)
                  (begin-and-define-body-word . 330)
                  (function-and-define-list-word . 330)
                  (function-and-define-body-word . 330)
                  (local-declaration-word-only . 330) (symbol . 330)
                  (number . 330) (character-literal . 330)
                  (unary-operator-only . 330) (semicolon . 330)
                  (comma . 330) (binary-operator-only . 330)
                  (unary-and-binary-operator . 330) (equal . 330)
                  (equal-equal . 330) (hash-t . 330) (hash-f . 330)
                  (hash-next . 330) (hash-rest . 330) (hash-key . 330)
                  (hash-all-keys . 330) (dot . 330) (colon-colon . 330)
                  (equal-greater . 330) (lparen . 330) (lbracket . 330)
                  (lbrace . 330) (string . 330) (query . 330)
                  (query-query . 330) (ellipsis . 330)
                  (query-equal . 330) (escaped-substitution . 330)
                  (constrained-name . 330) (parsed-function-call . 330)
                  (parsed-macro-call . 330)
                  (parsed-local-declaration . 330)
                  (parsed-list-constant . 330)
                  (parsed-vector-constant . 330) (hash-lparen . 330)
                  (hash-lbracket . 330) (hash-lbrace . 330)
                  (rbracket . 330) (rparen . 330) (rbrace . 330))
                 ((hash-hash . 331) (unreserved-name . 331)
                  (define . 331) (end . 331)
                  (define-macro-body-word-only . 331) (otherwise . 331)
                  (begin-word-only . 331) (function-word-only . 331)
                  (define-body-word-only . 331)
                  (define-list-word-only . 331)
                  (begin-and-define-list-word . 331)
                  (begin-and-define-body-word . 331)
                  (function-and-define-list-word . 331)
                  (function-and-define-body-word . 331)
                  (local-declaration-word-only . 331) (symbol . 331)
                  (number . 331) (character-literal . 331)
                  (unary-operator-only . 331) (semicolon . 331)
                  (comma . 331) (binary-operator-only . 331)
                  (unary-and-binary-operator . 331) (equal . 331)
                  (equal-equal . 331) (hash-t . 331) (hash-f . 331)
                  (hash-next . 331) (hash-rest . 331) (hash-key . 331)
                  (hash-all-keys . 331) (dot . 331) (colon-colon . 331)
                  (equal-greater . 331) (lparen . 331) (lbracket . 331)
                  (lbrace . 331) (string . 331) (query . 331)
                  (query-query . 331) (ellipsis . 331)
                  (query-equal . 331) (escaped-substitution . 331)
                  (constrained-name . 331) (parsed-function-call . 331)
                  (parsed-macro-call . 331)
                  (parsed-local-declaration . 331)
                  (parsed-list-constant . 331)
                  (parsed-vector-constant . 331) (hash-lparen . 331)
                  (hash-lbracket . 331) (hash-lbrace . 331)
                  (rbracket . 331) (rparen . 331) (rbrace . 331))
                 ((hash-hash . 332) (unreserved-name . 332)
                  (define . 332) (end . 332)
                  (define-macro-body-word-only . 332) (otherwise . 332)
                  (begin-word-only . 332) (function-word-only . 332)
                  (define-body-word-only . 332)
                  (define-list-word-only . 332)
                  (begin-and-define-list-word . 332)
                  (begin-and-define-body-word . 332)
                  (function-and-define-list-word . 332)
                  (function-and-define-body-word . 332)
                  (local-declaration-word-only . 332) (symbol . 332)
                  (number . 332) (character-literal . 332)
                  (unary-operator-only . 332) (semicolon . 332)
                  (comma . 332) (binary-operator-only . 332)
                  (unary-and-binary-operator . 332) (equal . 332)
                  (equal-equal . 332) (hash-t . 332) (hash-f . 332)
                  (hash-next . 332) (hash-rest . 332) (hash-key . 332)
                  (hash-all-keys . 332) (dot . 332) (colon-colon . 332)
                  (equal-greater . 332) (lparen . 332) (lbracket . 332)
                  (lbrace . 332) (string . 332) (query . 332)
                  (query-query . 332) (ellipsis . 332)
                  (query-equal . 332) (escaped-substitution . 332)
                  (constrained-name . 332) (parsed-function-call . 332)
                  (parsed-macro-call . 332)
                  (parsed-local-declaration . 332)
                  (parsed-list-constant . 332)
                  (parsed-vector-constant . 332) (hash-lparen . 332)
                  (hash-lbracket . 332) (hash-lbrace . 332)
                  (rbracket . 332) (rparen . 332) (rbrace . 332))
                 ((rbrace . 325) (rparen . 325) (rbracket . 325)
                  (hash-lbrace . 325) (hash-lbracket . 325)
                  (hash-lparen . 325) (parsed-vector-constant . 325)
                  (parsed-list-constant . 325)
                  (parsed-local-declaration . 325)
                  (parsed-macro-call . 325)
                  (parsed-function-call . 325) (constrained-name . 325)
                  (escaped-substitution . 325) (query-equal . 325)
                  (ellipsis . 325) (query-query . 325) (query . 325)
                  (string . 325) (lbrace . 325) (lbracket . 325)
                  (lparen . 325) (equal-greater . 325)
                  (colon-colon . 325) (dot . 325) (hash-all-keys . 325)
                  (hash-key . 325) (hash-rest . 325) (hash-next . 325)
                  (hash-f . 325) (hash-t . 325) (equal-equal . 325)
                  (equal . 325) (unary-and-binary-operator . 325)
                  (binary-operator-only . 325) (comma . 325)
                  (semicolon . 325) (unary-operator-only . 325)
                  (character-literal . 325) (number . 325)
                  (symbol . 325) (local-declaration-word-only . 325)
                  (function-and-define-body-word . 325)
                  (function-and-define-list-word . 325)
                  (begin-and-define-body-word . 325)
                  (begin-and-define-list-word . 325)
                  (define-list-word-only . 325)
                  (define-body-word-only . 325)
                  (function-word-only . 325) (begin-word-only . 325)
                  (otherwise . 325) (define-macro-body-word-only . 325)
                  (end . 325) (define . 325) (unreserved-name . 325))
                 ((string . -191))
                 ((rbrace . 321) (rparen . 321) (rbracket . 321)
                  (hash-lbrace . 321) (hash-lbracket . 321)
                  (hash-lparen . 321) (parsed-vector-constant . 321)
                  (parsed-list-constant . 321)
                  (parsed-local-declaration . 321)
                  (parsed-macro-call . 321)
                  (parsed-function-call . 321) (constrained-name . 321)
                  (escaped-substitution . 321) (query-equal . 321)
                  (ellipsis . 321) (query-query . 321) (query . 321)
                  (string . 321) (lbrace . 321) (lbracket . 321)
                  (lparen . 321) (equal-greater . 321)
                  (colon-colon . 321) (dot . 321) (hash-all-keys . 321)
                  (hash-key . 321) (hash-rest . 321) (hash-next . 321)
                  (hash-f . 321) (hash-t . 321) (equal-equal . 321)
                  (equal . 321) (unary-and-binary-operator . 321)
                  (binary-operator-only . 321) (comma . 321)
                  (semicolon . 321) (unary-operator-only . 321)
                  (character-literal . 321) (number . 321)
                  (symbol . 321) (local-declaration-word-only . 321)
                  (function-and-define-body-word . 321)
                  (function-and-define-list-word . 321)
                  (begin-and-define-body-word . 321)
                  (begin-and-define-list-word . 321)
                  (define-list-word-only . 321)
                  (define-body-word-only . 321)
                  (function-word-only . 321) (begin-word-only . 321)
                  (otherwise . 321) (define-macro-body-word-only . 321)
                  (end . 321) (define . 321) (unreserved-name . 321))
                 ((unreserved-name . 327) (define . 327) (end . 327)
                  (define-macro-body-word-only . 327) (otherwise . 327)
                  (begin-word-only . 327) (function-word-only . 327)
                  (define-body-word-only . 327)
                  (define-list-word-only . 327)
                  (begin-and-define-list-word . 327)
                  (begin-and-define-body-word . 327)
                  (function-and-define-list-word . 327)
                  (function-and-define-body-word . 327)
                  (local-declaration-word-only . 327) (symbol . 327)
                  (number . 327) (character-literal . 327)
                  (unary-operator-only . 327) (semicolon . 327)
                  (comma . 327) (binary-operator-only . 327)
                  (unary-and-binary-operator . 327) (equal . 327)
                  (equal-equal . 327) (hash-t . 327) (hash-f . 327)
                  (hash-next . 327) (hash-rest . 327) (hash-key . 327)
                  (hash-all-keys . 327) (dot . 327) (colon-colon . 327)
                  (equal-greater . 327) (lparen . 327) (lbracket . 327)
                  (lbrace . 327) (string . 327) (query . 327)
                  (query-query . 327) (ellipsis . 327)
                  (query-equal . 327) (escaped-substitution . 327)
                  (constrained-name . 327) (parsed-function-call . 327)
                  (parsed-macro-call . 327)
                  (parsed-local-declaration . 327)
                  (parsed-list-constant . 327)
                  (parsed-vector-constant . 327) (hash-lparen . 327)
                  (hash-lbracket . 327) (hash-lbrace . 327)
                  (rbracket . 327) (rparen . 327) (rbrace . 327))
                 ((rparen . -346))
                 ((rparen . 196) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (symbol . -198)
                  (parsed-macro-call . -16) (parsed-function-call . -7)
                  (lparen . -48) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37)
                  (hash-lbrace . -34))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (symbol . -198)
                  (parsed-macro-call . -16) (parsed-function-call . -7)
                  (lparen . -48) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37)
                  (hash-lbrace . -34))
                 ((ellipsis . -37) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10))
                 ((dot . 158) (lbracket . 158) (lparen . 158)
                  (comma . 158) (equal-greater . 158)
                  (equal-equal . 158) (equal . 158)
                  (unary-and-binary-operator . 158)
                  (binary-operator-only . 158) (semicolon . 158)
                  (rparen . 158) (end-constraint . 158)
                  (rbracket . 158))
                 ((comma . 165) (rparen . 165) (rbracket . 165))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34) (comma . 164) (rparen . 164)
                  (rbracket . 164))
                 ((rbracket . -345))
                 ((comma . -339) (rparen . 161) (rbracket . 161))
                 ((binary-operator-only . 211)
                  (unary-and-binary-operator . 211) (equal . 211)
                  (equal-equal . 211) (comma . 211) (rparen . 211)
                  (rbracket . 211))
                 ((equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (comma . 209)
                  (rparen . 209) (rbracket . 209))
                 ((comma . 163) (rparen . 163) (rbracket . 163))
                 ((symbol . -15) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37)
                  (hash-lbrace . -34))
                 ((binary-operator-only . 210)
                  (unary-and-binary-operator . 210) (equal . 210)
                  (equal-equal . 210) (comma . 210) (rparen . 210)
                  (rbracket . 210))
                 ((rparen . -344))
                 ((rbracket . 214) (end-constraint . 214)
                  (rparen . 214) (semicolon . 214)
                  (binary-operator-only . 214)
                  (unary-and-binary-operator . 214) (equal . 214)
                  (equal-equal . 214) (equal-greater . 214)
                  (comma . 214) (lparen . -193) (lbracket . -194)
                  (dot . -195))
                 ((comma . -222) (rbracket . 190) (rparen . 190)
                  (dot . 190))
                 ((comma . 192) (rbracket . 192) (rparen . 192)
                  (dot . 192))
                 ((comma . 194) (rbracket . 194) (rparen . 194)
                  (dot . 194))
                 ((rparen . 188) (dot . -216))
                 ((comma . 193) (rbracket . 193) (rparen . 193)
                  (dot . 193))
                 ((rparen . -214))
                 ((unreserved-name . 186) (define-body-word-only . 186)
                  (define-list-word-only . 186) (number . 186)
                  (character-literal . 186) (string . 186)
                  (symbol . 186) (hash-lparen . 186)
                  (hash-lbracket . 186) (parsed-list-constant . 186)
                  (parsed-vector-constant . 186)
                  (unary-operator-only . 186)
                  (binary-operator-only . 186)
                  (unary-and-binary-operator . 186) (equal . 186)
                  (equal-equal . 186) (lparen . 186) (lbracket . 186)
                  (lbrace . 186) (function-word-only . 186)
                  (hash-t . 186) (hash-f . 186) (hash-next . 186)
                  (hash-rest . 186) (hash-key . 186)
                  (hash-all-keys . 186) (dot . 186) (colon-colon . 186)
                  (equal-greater . 186) (query . 186)
                  (query-query . 186) (query-equal . 186)
                  (ellipsis . 186) (hash-hash . 186) (otherwise . 186)
                  (parsed-function-call . 186)
                  (parsed-macro-call . 186)
                  (escaped-substitution . 186) (constrained-name . 186)
                  (begin-word-only . 186)
                  (begin-and-define-body-word . 186)
                  (begin-and-define-list-word . 186)
                  (macro-case-begin-word-only . 186)
                  (hash-lbrace . 186) (comma . 186) (semicolon . 186)
                  (rparen . 186) (end-constraint . 186) (define . 186)
                  (local-declaration-word-only . 186)
                  (parsed-local-declaration . 186) (end . 186)
                  (rbracket . 186) (rbrace . 186))
                 ((rbracket . 181) (end-constraint . 181)
                  (rparen . 181) (semicolon . 181)
                  (binary-operator-only . 181)
                  (unary-and-binary-operator . 181) (equal . 181)
                  (equal-equal . 181) (equal-greater . 181)
                  (comma . 181) (lparen . 181) (lbracket . 181)
                  (dot . 181))
                 ((symbol . -212) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28))
                 ((rparen . -218))
                 ((unreserved-name . 187) (define-body-word-only . 187)
                  (define-list-word-only . 187) (number . 187)
                  (character-literal . 187) (string . 187)
                  (symbol . 187) (hash-lparen . 187)
                  (hash-lbracket . 187) (parsed-list-constant . 187)
                  (parsed-vector-constant . 187)
                  (unary-operator-only . 187)
                  (binary-operator-only . 187)
                  (unary-and-binary-operator . 187) (equal . 187)
                  (equal-equal . 187) (lparen . 187) (lbracket . 187)
                  (lbrace . 187) (function-word-only . 187)
                  (hash-t . 187) (hash-f . 187) (hash-next . 187)
                  (hash-rest . 187) (hash-key . 187)
                  (hash-all-keys . 187) (dot . 187) (colon-colon . 187)
                  (equal-greater . 187) (query . 187)
                  (query-query . 187) (query-equal . 187)
                  (ellipsis . 187) (hash-hash . 187) (otherwise . 187)
                  (parsed-function-call . 187)
                  (parsed-macro-call . 187)
                  (escaped-substitution . 187) (constrained-name . 187)
                  (begin-word-only . 187)
                  (begin-and-define-body-word . 187)
                  (begin-and-define-list-word . 187)
                  (macro-case-begin-word-only . 187)
                  (hash-lbrace . 187) (comma . 187) (semicolon . 187)
                  (rparen . 187) (end-constraint . 187) (define . 187)
                  (local-declaration-word-only . 187)
                  (parsed-local-declaration . 187) (end . 187)
                  (rbracket . 187) (rbrace . 187))
                 ((rbracket . 188)) ((rbracket . -221))
                 ((unreserved-name . 185) (define-body-word-only . 185)
                  (define-list-word-only . 185) (number . 185)
                  (character-literal . 185) (string . 185)
                  (symbol . 185) (hash-lparen . 185)
                  (hash-lbracket . 185) (parsed-list-constant . 185)
                  (parsed-vector-constant . 185)
                  (unary-operator-only . 185)
                  (binary-operator-only . 185)
                  (unary-and-binary-operator . 185) (equal . 185)
                  (equal-equal . 185) (lparen . 185) (lbracket . 185)
                  (lbrace . 185) (function-word-only . 185)
                  (hash-t . 185) (hash-f . 185) (hash-next . 185)
                  (hash-rest . 185) (hash-key . 185)
                  (hash-all-keys . 185) (dot . 185) (colon-colon . 185)
                  (equal-greater . 185) (query . 185)
                  (query-query . 185) (query-equal . 185)
                  (ellipsis . 185) (hash-hash . 185) (otherwise . 185)
                  (parsed-function-call . 185)
                  (parsed-macro-call . 185)
                  (escaped-substitution . 185) (constrained-name . 185)
                  (begin-word-only . 185)
                  (begin-and-define-body-word . 185)
                  (begin-and-define-list-word . 185)
                  (macro-case-begin-word-only . 185)
                  (hash-lbrace . 185) (comma . 185) (semicolon . 185)
                  (rparen . 185) (end-constraint . 185) (define . 185)
                  (local-declaration-word-only . 185)
                  (parsed-local-declaration . 185) (end . 185)
                  (rbracket . 185) (rbrace . 185))
                 ((symbol . -212) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28))
                 ((comma . 191) (rbracket . 191) (rparen . 191)
                  (dot . 191))
                 ((rparen . 87) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((rparen . -226))
                 ((rbrace . 167) (rbracket . 167) (end . 167)
                  (parsed-local-declaration . 167)
                  (local-declaration-word-only . 167) (define . 167)
                  (end-constraint . 167) (rparen . 167)
                  (semicolon . 167) (comma . 167) (hash-lbrace . 167)
                  (macro-case-begin-word-only . 167)
                  (begin-and-define-list-word . 167)
                  (begin-and-define-body-word . 167)
                  (begin-word-only . 167) (constrained-name . 167)
                  (escaped-substitution . 167)
                  (parsed-macro-call . 167)
                  (parsed-function-call . 167) (otherwise . 167)
                  (hash-hash . 167) (ellipsis . 167)
                  (query-equal . 167) (query-query . 167) (query . 167)
                  (equal-greater . 167) (colon-colon . 167) (dot . 167)
                  (hash-all-keys . 167) (hash-key . 167)
                  (hash-rest . 167) (hash-next . 167) (hash-f . 167)
                  (hash-t . 167) (function-word-only . 167)
                  (lbrace . 167) (lbracket . 167) (lparen . 167)
                  (equal-equal . 167) (equal . 167)
                  (unary-and-binary-operator . 167)
                  (binary-operator-only . 167)
                  (unary-operator-only . 167)
                  (parsed-vector-constant . 167)
                  (parsed-list-constant . 167) (hash-lbracket . 167)
                  (hash-lparen . 167) (symbol . 167) (string . 167)
                  (character-literal . 167) (number . 167)
                  (define-list-word-only . 167)
                  (define-body-word-only . 167) (unreserved-name . 167))
                 ((rbrace . 101) (rparen . 101) (rbracket . 101)
                  (end . 101) (end-constraint . 101))
                 ((begin-and-define-body-word . -237)
                  (function-and-define-body-word . -235)
                  (define-body-word-only . -240)
                  (define-list-word-only . -239)
                  (define-macro-body-word-only . -238))
                 ((define-macro-body-word-only . 150)
                  (define-list-word-only . 150)
                  (define-body-word-only . 150)
                  (function-and-define-body-word . 150)
                  (begin-and-define-body-word . 150))
                 ((define-macro-body-word-only . 153)
                  (define-list-word-only . 153)
                  (define-body-word-only . 153)
                  (function-and-define-body-word . 153)
                  (begin-and-define-body-word . 153)
                  (unreserved-name . -231))
                 ((unreserved-name . 149)
                  (define-macro-body-word-only . 149)
                  (define-list-word-only . 149)
                  (define-body-word-only . 149)
                  (function-and-define-body-word . 149)
                  (begin-and-define-body-word . 149))
                 ((begin-and-define-body-word . 152)
                  (function-and-define-body-word . 152)
                  (define-body-word-only . 152)
                  (define-list-word-only . 152)
                  (define-macro-body-word-only . 152))
                 ((unreserved-name . -127)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145))
                 ((end . 87) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (semicolon . -112)
                  (comma . -114) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((define-macro-body-word-only . 53)
                  (begin-word-only . 53)
                  (begin-and-define-body-word . 53)
                  (begin-and-define-list-word . 53)
                  (macro-case-begin-word-only . 53)
                  (unreserved-name . 53) (define-body-word-only . 53)
                  (define-list-word-only . 53) (hash-lbrace . 53)
                  (semicolon . 53) (comma . 53) (constrained-name . 53)
                  (escaped-substitution . 53) (parsed-macro-call . 53)
                  (parsed-function-call . 53) (otherwise . 53)
                  (hash-hash . 53) (ellipsis . 53) (query-equal . 53)
                  (query-query . 53) (query . 53) (equal-greater . 53)
                  (colon-colon . 53) (dot . 53) (hash-all-keys . 53)
                  (hash-key . 53) (hash-rest . 53) (hash-next . 53)
                  (hash-f . 53) (hash-t . 53) (function-word-only . 53)
                  (lbrace . 53) (lbracket . 53) (lparen . 53)
                  (equal-equal . 53) (equal . 53)
                  (unary-and-binary-operator . 53)
                  (binary-operator-only . 53)
                  (unary-operator-only . 53)
                  (parsed-vector-constant . 53)
                  (parsed-list-constant . 53) (hash-lbracket . 53)
                  (hash-lparen . 53) (symbol . 53) (string . 53)
                  (character-literal . 53) (number . 53)
                  (parsed-local-declaration . 53)
                  (local-declaration-word-only . 53) (define . 53)
                  (end . 53))
                 ((semicolon . 91) (end-constraint . 91) (end . 91)
                  (rbracket . 91) (rparen . 91) (rbrace . 91)
                  (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (comma . -85)
                  (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((hash-lbrace . 52) (macro-case-begin-word-only . 52)
                  (begin-and-define-list-word . 52)
                  (begin-and-define-body-word . 52)
                  (begin-word-only . 52) (semicolon . 52) (comma . 52)
                  (constrained-name . 52) (escaped-substitution . 52)
                  (parsed-macro-call . 52) (parsed-function-call . 52)
                  (otherwise . 52) (hash-hash . 52) (ellipsis . 52)
                  (query-equal . 52) (query-query . 52) (query . 52)
                  (equal-greater . 52) (colon-colon . 52) (dot . 52)
                  (hash-all-keys . 52) (hash-key . 52) (hash-rest . 52)
                  (hash-next . 52) (hash-f . 52) (hash-t . 52)
                  (function-word-only . 52) (lbrace . 52)
                  (lbracket . 52) (lparen . 52) (equal-equal . 52)
                  (equal . 52) (unary-and-binary-operator . 52)
                  (binary-operator-only . 52)
                  (unary-operator-only . 52)
                  (parsed-vector-constant . 52)
                  (parsed-list-constant . 52) (hash-lbracket . 52)
                  (hash-lparen . 52) (symbol . 52) (string . 52)
                  (character-literal . 52) (number . 52)
                  (define-list-word-only . 52)
                  (define-body-word-only . 52) (unreserved-name . 52)
                  (parsed-local-declaration . 52)
                  (local-declaration-word-only . 52) (define . 52)
                  (end . 52))
                 ((define-macro-body-word-only . 37)
                  (begin-word-only . 37)
                  (begin-and-define-body-word . 37)
                  (begin-and-define-list-word . 37)
                  (macro-case-begin-word-only . 37)
                  (unreserved-name . 37) (define-body-word-only . 37)
                  (define-list-word-only . 37) (define . 37) (end . 37)
                  (otherwise . 37) (function-word-only . 37)
                  (function-and-define-list-word . 37)
                  (function-and-define-body-word . 37)
                  (local-declaration-word-only . 37) (rbrace . 37)
                  (rparen . 37) (rbracket . 37) (end-constraint . 37)
                  (semicolon . 37))
                 ((unreserved-name . 55) (define-body-word-only . 55)
                  (define-list-word-only . 55) (number . 55)
                  (character-literal . 55) (string . 55) (symbol . 55)
                  (hash-lparen . 55) (hash-lbracket . 55)
                  (parsed-list-constant . 55)
                  (parsed-vector-constant . 55)
                  (unary-operator-only . 55)
                  (binary-operator-only . 55)
                  (unary-and-binary-operator . 55) (equal . 55)
                  (equal-equal . 55) (lparen . 55) (lbracket . 55)
                  (lbrace . 55) (function-word-only . 55) (hash-t . 55)
                  (hash-f . 55) (hash-next . 55) (hash-rest . 55)
                  (hash-key . 55) (hash-all-keys . 55) (dot . 55)
                  (colon-colon . 55) (equal-greater . 55) (query . 55)
                  (query-query . 55) (query-equal . 55) (ellipsis . 55)
                  (hash-hash . 55) (otherwise . 55)
                  (parsed-function-call . 55) (parsed-macro-call . 55)
                  (escaped-substitution . 55) (constrained-name . 55)
                  (comma . 55) (begin-word-only . 55)
                  (begin-and-define-body-word . 55)
                  (begin-and-define-list-word . 55)
                  (macro-case-begin-word-only . 55) (hash-lbrace . 55)
                  (semicolon . 55) (end-constraint . 55) (end . 55)
                  (rbracket . 55) (rparen . 55) (rbrace . 55))
                 ((hash-lbrace . 54) (macro-case-begin-word-only . 54)
                  (begin-and-define-list-word . 54)
                  (begin-and-define-body-word . 54)
                  (begin-word-only . 54) (semicolon . 54) (comma . 54)
                  (constrained-name . 54) (escaped-substitution . 54)
                  (parsed-macro-call . 54) (parsed-function-call . 54)
                  (otherwise . 54) (hash-hash . 54) (ellipsis . 54)
                  (query-equal . 54) (query-query . 54) (query . 54)
                  (equal-greater . 54) (colon-colon . 54) (dot . 54)
                  (hash-all-keys . 54) (hash-key . 54) (hash-rest . 54)
                  (hash-next . 54) (hash-f . 54) (hash-t . 54)
                  (function-word-only . 54) (lbrace . 54)
                  (lbracket . 54) (lparen . 54) (equal-equal . 54)
                  (equal . 54) (unary-and-binary-operator . 54)
                  (binary-operator-only . 54)
                  (unary-operator-only . 54)
                  (parsed-vector-constant . 54)
                  (parsed-list-constant . 54) (hash-lbracket . 54)
                  (hash-lparen . 54) (symbol . 54) (string . 54)
                  (character-literal . 54) (number . 54)
                  (define-list-word-only . 54)
                  (define-body-word-only . 54) (unreserved-name . 54)
                  (parsed-local-declaration . 54)
                  (local-declaration-word-only . 54) (define . 54)
                  (end . 54))
                 ((rbrace . 147) (rparen . 147) (rbracket . 147)
                  (end . 147) (end-constraint . 147) (semicolon . 147))
                 ((semicolon . 110) (end-constraint . 110) (end . 110)
                  (rbracket . 110) (rparen . 110) (rbrace . 110))
                 ((define . 277) (local-declaration-word-only . 277)
                  (parsed-local-declaration . 277)
                  (unreserved-name . 277) (define-body-word-only . 277)
                  (define-list-word-only . 277) (number . 277)
                  (character-literal . 277) (string . 277)
                  (symbol . 277) (hash-lparen . 277)
                  (hash-lbracket . 277) (parsed-list-constant . 277)
                  (parsed-vector-constant . 277)
                  (unary-operator-only . 277)
                  (binary-operator-only . 277)
                  (unary-and-binary-operator . 277) (equal . 277)
                  (equal-equal . 277) (lparen . 277) (lbracket . 277)
                  (lbrace . 277) (function-word-only . 277)
                  (hash-t . 277) (hash-f . 277) (hash-next . 277)
                  (hash-rest . 277) (hash-key . 277)
                  (hash-all-keys . 277) (dot . 277) (colon-colon . 277)
                  (equal-greater . 277) (query . 277)
                  (query-query . 277) (query-equal . 277)
                  (ellipsis . 277) (hash-hash . 277) (otherwise . 277)
                  (parsed-function-call . 277)
                  (parsed-macro-call . 277)
                  (escaped-substitution . 277) (constrained-name . 277)
                  (comma . 277) (semicolon . 277)
                  (begin-word-only . 277)
                  (begin-and-define-body-word . 277)
                  (begin-and-define-list-word . 277)
                  (macro-case-begin-word-only . 277)
                  (hash-lbrace . 277) (end . 277))
                 ((define . 276) (local-declaration-word-only . 276)
                  (parsed-local-declaration . 276)
                  (unreserved-name . 276) (define-body-word-only . 276)
                  (define-list-word-only . 276) (number . 276)
                  (character-literal . 276) (string . 276)
                  (symbol . 276) (hash-lparen . 276)
                  (hash-lbracket . 276) (parsed-list-constant . 276)
                  (parsed-vector-constant . 276)
                  (unary-operator-only . 276)
                  (binary-operator-only . 276)
                  (unary-and-binary-operator . 276) (equal . 276)
                  (equal-equal . 276) (lparen . 276) (lbracket . 276)
                  (lbrace . 276) (function-word-only . 276)
                  (hash-t . 276) (hash-f . 276) (hash-next . 276)
                  (hash-rest . 276) (hash-key . 276)
                  (hash-all-keys . 276) (dot . 276) (colon-colon . 276)
                  (equal-greater . 276) (query . 276)
                  (query-query . 276) (query-equal . 276)
                  (ellipsis . 276) (hash-hash . 276) (otherwise . 276)
                  (parsed-function-call . 276)
                  (parsed-macro-call . 276)
                  (escaped-substitution . 276) (constrained-name . 276)
                  (comma . 276) (semicolon . 276)
                  (begin-word-only . 276)
                  (begin-and-define-body-word . 276)
                  (begin-and-define-list-word . 276)
                  (macro-case-begin-word-only . 276)
                  (hash-lbrace . 276) (end . 276))
                 ((define . 270) (local-declaration-word-only . 270)
                  (parsed-local-declaration . 270)
                  (unreserved-name . 270) (define-body-word-only . 270)
                  (define-list-word-only . 270) (number . 270)
                  (character-literal . 270) (string . 270)
                  (symbol . 270) (hash-lparen . 270)
                  (hash-lbracket . 270) (parsed-list-constant . 270)
                  (parsed-vector-constant . 270)
                  (unary-operator-only . 270)
                  (binary-operator-only . 270)
                  (unary-and-binary-operator . 270) (equal . 270)
                  (equal-equal . 270) (lparen . 270) (lbracket . 270)
                  (lbrace . 270) (function-word-only . 270)
                  (hash-t . 270) (hash-f . 270) (hash-next . 270)
                  (hash-rest . 270) (hash-key . 270)
                  (hash-all-keys . 270) (dot . 270) (colon-colon . 270)
                  (equal-greater . 270) (query . 270)
                  (query-query . 270) (query-equal . 270)
                  (ellipsis . 270) (hash-hash . 270) (otherwise . 270)
                  (parsed-function-call . 270)
                  (parsed-macro-call . 270)
                  (escaped-substitution . 270) (constrained-name . 270)
                  (comma . 270) (semicolon . 270)
                  (begin-word-only . 270)
                  (begin-and-define-body-word . 270)
                  (begin-and-define-list-word . 270)
                  (macro-case-begin-word-only . 270)
                  (hash-lbrace . 270) (end . 270))
                 ((end . 251) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (semicolon . -252) (comma . -255)
                  (constrained-name . -261)
                  (escaped-substitution . -265)
                  (parsed-macro-call . -251)
                  (parsed-function-call . -245) (lbrace . -264)
                  (lbracket . -247) (lparen . -258))
                 ((rbracket . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((end . 238)) ((end . -297))
                 ((define . 275) (local-declaration-word-only . 275)
                  (parsed-local-declaration . 275)
                  (unreserved-name . 275) (define-body-word-only . 275)
                  (define-list-word-only . 275) (number . 275)
                  (character-literal . 275) (string . 275)
                  (symbol . 275) (hash-lparen . 275)
                  (hash-lbracket . 275) (parsed-list-constant . 275)
                  (parsed-vector-constant . 275)
                  (unary-operator-only . 275)
                  (binary-operator-only . 275)
                  (unary-and-binary-operator . 275) (equal . 275)
                  (equal-equal . 275) (lparen . 275) (lbracket . 275)
                  (lbrace . 275) (function-word-only . 275)
                  (hash-t . 275) (hash-f . 275) (hash-next . 275)
                  (hash-rest . 275) (hash-key . 275)
                  (hash-all-keys . 275) (dot . 275) (colon-colon . 275)
                  (equal-greater . 275) (query . 275)
                  (query-query . 275) (query-equal . 275)
                  (ellipsis . 275) (hash-hash . 275) (otherwise . 275)
                  (parsed-function-call . 275)
                  (parsed-macro-call . 275)
                  (escaped-substitution . 275) (constrained-name . 275)
                  (comma . 275) (semicolon . 275)
                  (begin-word-only . 275)
                  (begin-and-define-body-word . 275)
                  (begin-and-define-list-word . 275)
                  (macro-case-begin-word-only . 275)
                  (hash-lbrace . 275) (end . 275))
                 ((define . 269) (local-declaration-word-only . 269)
                  (parsed-local-declaration . 269)
                  (unreserved-name . 269) (define-body-word-only . 269)
                  (define-list-word-only . 269) (number . 269)
                  (character-literal . 269) (string . 269)
                  (symbol . 269) (hash-lparen . 269)
                  (hash-lbracket . 269) (parsed-list-constant . 269)
                  (parsed-vector-constant . 269)
                  (unary-operator-only . 269)
                  (binary-operator-only . 269)
                  (unary-and-binary-operator . 269) (equal . 269)
                  (equal-equal . 269) (lparen . 269) (lbracket . 269)
                  (lbrace . 269) (function-word-only . 269)
                  (hash-t . 269) (hash-f . 269) (hash-next . 269)
                  (hash-rest . 269) (hash-key . 269)
                  (hash-all-keys . 269) (dot . 269) (colon-colon . 269)
                  (equal-greater . 269) (query . 269)
                  (query-query . 269) (query-equal . 269)
                  (ellipsis . 269) (hash-hash . 269) (otherwise . 269)
                  (parsed-function-call . 269)
                  (parsed-macro-call . 269)
                  (escaped-substitution . 269) (constrained-name . 269)
                  (comma . 269) (semicolon . 269)
                  (begin-word-only . 269)
                  (begin-and-define-body-word . 269)
                  (begin-and-define-list-word . 269)
                  (macro-case-begin-word-only . 269)
                  (hash-lbrace . 269) (end . 269))
                 ((end . 239) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34)
                  (semicolon . -252) (comma . -255)
                  (constrained-name . -261)
                  (escaped-substitution . -265)
                  (parsed-macro-call . -251)
                  (parsed-function-call . -245) (lbrace . -264)
                  (lbracket . -247) (lparen . -258))
                 ((end . 258) (semicolon . -288))
                 ((end . 239) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34)
                  (semicolon . -252) (comma . -255)
                  (constrained-name . -261)
                  (escaped-substitution . -265)
                  (parsed-macro-call . -251)
                  (parsed-function-call . -245) (lbrace . -264)
                  (lbracket . -247) (lparen . -258))
                 ((end . 239) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34)
                  (semicolon . -252) (comma . -255)
                  (constrained-name . -261)
                  (escaped-substitution . -265)
                  (parsed-macro-call . -251)
                  (parsed-function-call . -245) (lbrace . -264)
                  (lbracket . -247) (lparen . -258))
                 ((define . 271) (local-declaration-word-only . 271)
                  (parsed-local-declaration . 271)
                  (unreserved-name . 271) (define-body-word-only . 271)
                  (define-list-word-only . 271) (number . 271)
                  (character-literal . 271) (string . 271)
                  (symbol . 271) (hash-lparen . 271)
                  (hash-lbracket . 271) (parsed-list-constant . 271)
                  (parsed-vector-constant . 271)
                  (unary-operator-only . 271)
                  (binary-operator-only . 271)
                  (unary-and-binary-operator . 271) (equal . 271)
                  (equal-equal . 271) (lparen . 271) (lbracket . 271)
                  (lbrace . 271) (function-word-only . 271)
                  (hash-t . 271) (hash-f . 271) (hash-next . 271)
                  (hash-rest . 271) (hash-key . 271)
                  (hash-all-keys . 271) (dot . 271) (colon-colon . 271)
                  (equal-greater . 271) (query . 271)
                  (query-query . 271) (query-equal . 271)
                  (ellipsis . 271) (hash-hash . 271) (otherwise . 271)
                  (parsed-function-call . 271)
                  (parsed-macro-call . 271)
                  (escaped-substitution . 271) (constrained-name . 271)
                  (comma . 271) (semicolon . 271)
                  (begin-word-only . 271)
                  (begin-and-define-body-word . 271)
                  (begin-and-define-list-word . 271)
                  (macro-case-begin-word-only . 271)
                  (hash-lbrace . 271) (end . 271))
                 ((define . 273) (local-declaration-word-only . 273)
                  (parsed-local-declaration . 273)
                  (unreserved-name . 273) (define-body-word-only . 273)
                  (define-list-word-only . 273) (number . 273)
                  (character-literal . 273) (string . 273)
                  (symbol . 273) (hash-lparen . 273)
                  (hash-lbracket . 273) (parsed-list-constant . 273)
                  (parsed-vector-constant . 273)
                  (unary-operator-only . 273)
                  (binary-operator-only . 273)
                  (unary-and-binary-operator . 273) (equal . 273)
                  (equal-equal . 273) (lparen . 273) (lbracket . 273)
                  (lbrace . 273) (function-word-only . 273)
                  (hash-t . 273) (hash-f . 273) (hash-next . 273)
                  (hash-rest . 273) (hash-key . 273)
                  (hash-all-keys . 273) (dot . 273) (colon-colon . 273)
                  (equal-greater . 273) (query . 273)
                  (query-query . 273) (query-equal . 273)
                  (ellipsis . 273) (hash-hash . 273) (otherwise . 273)
                  (parsed-function-call . 273)
                  (parsed-macro-call . 273)
                  (escaped-substitution . 273) (constrained-name . 273)
                  (comma . 273) (semicolon . 273)
                  (begin-word-only . 273)
                  (begin-and-define-body-word . 273)
                  (begin-and-define-list-word . 273)
                  (macro-case-begin-word-only . 273)
                  (hash-lbrace . 273) (end . 273))
                 ((rparen . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((define . 272) (local-declaration-word-only . 272)
                  (parsed-local-declaration . 272)
                  (unreserved-name . 272) (define-body-word-only . 272)
                  (define-list-word-only . 272) (number . 272)
                  (character-literal . 272) (string . 272)
                  (symbol . 272) (hash-lparen . 272)
                  (hash-lbracket . 272) (parsed-list-constant . 272)
                  (parsed-vector-constant . 272)
                  (unary-operator-only . 272)
                  (binary-operator-only . 272)
                  (unary-and-binary-operator . 272) (equal . 272)
                  (equal-equal . 272) (lparen . 272) (lbracket . 272)
                  (lbrace . 272) (function-word-only . 272)
                  (hash-t . 272) (hash-f . 272) (hash-next . 272)
                  (hash-rest . 272) (hash-key . 272)
                  (hash-all-keys . 272) (dot . 272) (colon-colon . 272)
                  (equal-greater . 272) (query . 272)
                  (query-query . 272) (query-equal . 272)
                  (ellipsis . 272) (hash-hash . 272) (otherwise . 272)
                  (parsed-function-call . 272)
                  (parsed-macro-call . 272)
                  (escaped-substitution . 272) (constrained-name . 272)
                  (comma . 272) (semicolon . 272)
                  (begin-word-only . 272)
                  (begin-and-define-body-word . 272)
                  (begin-and-define-list-word . 272)
                  (macro-case-begin-word-only . 272)
                  (hash-lbrace . 272) (end . 272))
                 ((define . 274) (local-declaration-word-only . 274)
                  (parsed-local-declaration . 274)
                  (unreserved-name . 274) (define-body-word-only . 274)
                  (define-list-word-only . 274) (number . 274)
                  (character-literal . 274) (string . 274)
                  (symbol . 274) (hash-lparen . 274)
                  (hash-lbracket . 274) (parsed-list-constant . 274)
                  (parsed-vector-constant . 274)
                  (unary-operator-only . 274)
                  (binary-operator-only . 274)
                  (unary-and-binary-operator . 274) (equal . 274)
                  (equal-equal . 274) (lparen . 274) (lbracket . 274)
                  (lbrace . 274) (function-word-only . 274)
                  (hash-t . 274) (hash-f . 274) (hash-next . 274)
                  (hash-rest . 274) (hash-key . 274)
                  (hash-all-keys . 274) (dot . 274) (colon-colon . 274)
                  (equal-greater . 274) (query . 274)
                  (query-query . 274) (query-equal . 274)
                  (ellipsis . 274) (hash-hash . 274) (otherwise . 274)
                  (parsed-function-call . 274)
                  (parsed-macro-call . 274)
                  (escaped-substitution . 274) (constrained-name . 274)
                  (comma . 274) (semicolon . 274)
                  (begin-word-only . 274)
                  (begin-and-define-body-word . 274)
                  (begin-and-define-list-word . 274)
                  (macro-case-begin-word-only . 274)
                  (hash-lbrace . 274) (end . 274))
                 ((define . 267) (local-declaration-word-only . 267)
                  (parsed-local-declaration . 267)
                  (unreserved-name . 267) (define-body-word-only . 267)
                  (define-list-word-only . 267) (number . 267)
                  (character-literal . 267) (string . 267)
                  (symbol . 267) (hash-lparen . 267)
                  (hash-lbracket . 267) (parsed-list-constant . 267)
                  (parsed-vector-constant . 267)
                  (unary-operator-only . 267)
                  (binary-operator-only . 267)
                  (unary-and-binary-operator . 267) (equal . 267)
                  (equal-equal . 267) (lparen . 267) (lbracket . 267)
                  (lbrace . 267) (function-word-only . 267)
                  (hash-t . 267) (hash-f . 267) (hash-next . 267)
                  (hash-rest . 267) (hash-key . 267)
                  (hash-all-keys . 267) (dot . 267) (colon-colon . 267)
                  (equal-greater . 267) (query . 267)
                  (query-query . 267) (query-equal . 267)
                  (ellipsis . 267) (hash-hash . 267) (otherwise . 267)
                  (parsed-function-call . 267)
                  (parsed-macro-call . 267)
                  (escaped-substitution . 267) (constrained-name . 267)
                  (comma . 267) (semicolon . 267)
                  (begin-word-only . 267)
                  (begin-and-define-body-word . 267)
                  (begin-and-define-list-word . 267)
                  (macro-case-begin-word-only . 267)
                  (hash-lbrace . 267) (end . 267))
                 ((end . 258) (semicolon . -288)) ((end . 241))
                 ((rbrace . 282) (query . 323) (hash-all-keys . -94)
                  (hash-key . -77) (hash-rest . -80) (hash-next . -82)
                  (hash-f . -88) (hash-t . -95)
                  (local-declaration-word-only . -176)
                  (function-and-define-body-word . -158)
                  (function-and-define-list-word . -164)
                  (begin-and-define-body-word . -136)
                  (begin-and-define-list-word . -146)
                  (define-list-word-only . -142)
                  (define-body-word-only . -175)
                  (function-word-only . -148) (begin-word-only . -126)
                  (otherwise . -149)
                  (define-macro-body-word-only . -159) (end . -130)
                  (define . -145) (unreserved-name . -127)
                  (equal-equal . -165) (equal . -153)
                  (unary-and-binary-operator . -179)
                  (binary-operator-only . -151) (hash-lbrace . -152)
                  (hash-lbracket . -143) (hash-lparen . -144)
                  (parsed-vector-constant . -168)
                  (parsed-list-constant . -157)
                  (parsed-local-declaration . -161)
                  (parsed-macro-call . -134)
                  (parsed-function-call . -124)
                  (constrained-name . -172)
                  (escaped-substitution . -178) (lbrace . -174)
                  (lbracket . -125) (lparen . -169)
                  (equal-greater . -132) (colon-colon . -133)
                  (dot . -177) (unary-operator-only . -128)
                  (string . -137) (character-literal . -140)
                  (number . -173) (symbol . -131) (comma . -147)
                  (semicolon . -135) (query-equal . -129)
                  (ellipsis . -155) (query-query . -156))
                 ((define . 268) (local-declaration-word-only . 268)
                  (parsed-local-declaration . 268)
                  (unreserved-name . 268) (define-body-word-only . 268)
                  (define-list-word-only . 268) (number . 268)
                  (character-literal . 268) (string . 268)
                  (symbol . 268) (hash-lparen . 268)
                  (hash-lbracket . 268) (parsed-list-constant . 268)
                  (parsed-vector-constant . 268)
                  (unary-operator-only . 268)
                  (binary-operator-only . 268)
                  (unary-and-binary-operator . 268) (equal . 268)
                  (equal-equal . 268) (lparen . 268) (lbracket . 268)
                  (lbrace . 268) (function-word-only . 268)
                  (hash-t . 268) (hash-f . 268) (hash-next . 268)
                  (hash-rest . 268) (hash-key . 268)
                  (hash-all-keys . 268) (dot . 268) (colon-colon . 268)
                  (equal-greater . 268) (query . 268)
                  (query-query . 268) (query-equal . 268)
                  (ellipsis . 268) (hash-hash . 268) (otherwise . 268)
                  (parsed-function-call . 268)
                  (parsed-macro-call . 268)
                  (escaped-substitution . 268) (constrained-name . 268)
                  (comma . 268) (semicolon . 268)
                  (begin-word-only . 268)
                  (begin-and-define-body-word . 268)
                  (begin-and-define-list-word . 268)
                  (macro-case-begin-word-only . 268)
                  (hash-lbrace . 268) (end . 268))
                 ((rbrace . -285)) ((rbrace . -284)) ((rparen . -283))
                 ((rbrace . 283) (rparen . 283) (rbracket . 283))
                 ((rbrace . 320) (rparen . 320) (rbracket . 320)
                  (hash-lbrace . 320) (hash-lbracket . 320)
                  (hash-lparen . 320) (parsed-vector-constant . 320)
                  (parsed-list-constant . 320)
                  (parsed-local-declaration . 320)
                  (parsed-macro-call . 320)
                  (parsed-function-call . 320) (constrained-name . 320)
                  (escaped-substitution . 320) (query-equal . 320)
                  (ellipsis . 320) (query-query . 320) (query . 320)
                  (string . 320) (lbrace . 320) (lbracket . 320)
                  (lparen . 320) (equal-greater . 320)
                  (colon-colon . 320) (dot . 320) (hash-all-keys . 320)
                  (hash-key . 320) (hash-rest . 320) (hash-next . 320)
                  (hash-f . 320) (hash-t . 320) (equal-equal . 320)
                  (equal . 320) (unary-and-binary-operator . 320)
                  (binary-operator-only . 320) (comma . 320)
                  (semicolon . 320) (unary-operator-only . 320)
                  (character-literal . 320) (number . 320)
                  (symbol . 320) (local-declaration-word-only . 320)
                  (function-and-define-body-word . 320)
                  (function-and-define-list-word . 320)
                  (begin-and-define-body-word . 320)
                  (begin-and-define-list-word . 320)
                  (define-list-word-only . 320)
                  (define-body-word-only . 320)
                  (function-word-only . 320) (begin-word-only . 320)
                  (otherwise . 320) (define-macro-body-word-only . 320)
                  (end . 320) (define . 320) (unreserved-name . 320))
                 ((rbrace . 319) (rparen . 319) (rbracket . 319)
                  (hash-lbrace . 319) (hash-lbracket . 319)
                  (hash-lparen . 319) (parsed-vector-constant . 319)
                  (parsed-list-constant . 319)
                  (parsed-local-declaration . 319)
                  (parsed-macro-call . 319)
                  (parsed-function-call . 319) (constrained-name . 319)
                  (escaped-substitution . 319) (query-equal . 319)
                  (ellipsis . 319) (query-query . 319) (query . 319)
                  (string . 319) (lbrace . 319) (lbracket . 319)
                  (lparen . 319) (equal-greater . 319)
                  (colon-colon . 319) (dot . 319) (hash-all-keys . 319)
                  (hash-key . 319) (hash-rest . 319) (hash-next . 319)
                  (hash-f . 319) (hash-t . 319) (equal-equal . 319)
                  (equal . 319) (unary-and-binary-operator . 319)
                  (binary-operator-only . 319) (comma . 319)
                  (semicolon . 319) (unary-operator-only . 319)
                  (character-literal . 319) (number . 319)
                  (symbol . 319) (local-declaration-word-only . 319)
                  (function-and-define-body-word . 319)
                  (function-and-define-list-word . 319)
                  (begin-and-define-body-word . 319)
                  (begin-and-define-list-word . 319)
                  (define-list-word-only . 319)
                  (define-body-word-only . 319)
                  (function-word-only . 319) (begin-word-only . 319)
                  (otherwise . 319) (define-macro-body-word-only . 319)
                  (end . 319) (define . 319) (unreserved-name . 319))
                 ((rbrace . -282))
                 ((rbrace . 285) (rparen . 285) (rbracket . 285))
                 ((rparen . -281)) ((rbracket . -276))
                 ((unreserved-name . 288) (define . 288) (end . 288)
                  (define-macro-body-word-only . 288) (otherwise . 288)
                  (begin-word-only . 288) (function-word-only . 288)
                  (define-body-word-only . 288)
                  (define-list-word-only . 288)
                  (begin-and-define-list-word . 288)
                  (begin-and-define-body-word . 288)
                  (function-and-define-list-word . 288)
                  (function-and-define-body-word . 288)
                  (local-declaration-word-only . 288) (symbol . 288)
                  (number . 288) (character-literal . 288)
                  (unary-operator-only . 288) (semicolon . 288)
                  (comma . 288) (binary-operator-only . 288)
                  (unary-and-binary-operator . 288) (equal . 288)
                  (equal-equal . 288) (hash-t . 288) (hash-f . 288)
                  (hash-next . 288) (hash-rest . 288) (hash-key . 288)
                  (hash-all-keys . 288) (dot . 288) (colon-colon . 288)
                  (equal-greater . 288) (lparen . 288) (lbracket . 288)
                  (lbrace . 288) (string . 288) (query . 288)
                  (query-query . 288) (ellipsis . 288)
                  (query-equal . 288) (escaped-substitution . 288)
                  (constrained-name . 288) (parsed-function-call . 288)
                  (parsed-macro-call . 288)
                  (parsed-local-declaration . 288)
                  (parsed-list-constant . 288)
                  (parsed-vector-constant . 288) (hash-lparen . 288)
                  (hash-lbracket . 288) (hash-lbrace . 288)
                  (rbracket . 288) (rparen . 288) (rbrace . 288))
                 ((query . 324))
                 ((rbrace . 317) (rparen . 317) (rbracket . 317)
                  (hash-lbrace . 317) (hash-lbracket . 317)
                  (hash-lparen . 317) (parsed-vector-constant . 317)
                  (parsed-list-constant . 317)
                  (parsed-local-declaration . 317)
                  (parsed-macro-call . 317)
                  (parsed-function-call . 317) (constrained-name . 317)
                  (escaped-substitution . 317) (query-equal . 317)
                  (ellipsis . 317) (query-query . 317) (query . 317)
                  (string . 317) (lbrace . 317) (lbracket . 317)
                  (lparen . 317) (equal-greater . 317)
                  (colon-colon . 317) (dot . 317) (hash-all-keys . 317)
                  (hash-key . 317) (hash-rest . 317) (hash-next . 317)
                  (hash-f . 317) (hash-t . 317) (equal-equal . 317)
                  (equal . 317) (unary-and-binary-operator . 317)
                  (binary-operator-only . 317) (comma . 317)
                  (semicolon . 317) (unary-operator-only . 317)
                  (character-literal . 317) (number . 317)
                  (symbol . 317) (local-declaration-word-only . 317)
                  (function-and-define-body-word . 317)
                  (function-and-define-list-word . 317)
                  (begin-and-define-body-word . 317)
                  (begin-and-define-list-word . 317)
                  (define-list-word-only . 317)
                  (define-body-word-only . 317)
                  (function-word-only . 317) (begin-word-only . 317)
                  (otherwise . 317) (define-macro-body-word-only . 317)
                  (end . 317) (define . 317) (unreserved-name . 317))
                 ((rbracket . -280))
                 ((unreserved-name . 299) (define . 299) (end . 299)
                  (define-macro-body-word-only . 299) (otherwise . 299)
                  (begin-word-only . 299) (function-word-only . 299)
                  (define-body-word-only . 299)
                  (define-list-word-only . 299)
                  (begin-and-define-list-word . 299)
                  (begin-and-define-body-word . 299)
                  (function-and-define-list-word . 299)
                  (function-and-define-body-word . 299)
                  (local-declaration-word-only . 299) (symbol . 299)
                  (number . 299) (character-literal . 299)
                  (unary-operator-only . 299) (semicolon . 299)
                  (comma . 299) (binary-operator-only . 299)
                  (unary-and-binary-operator . 299) (equal . 299)
                  (equal-equal . 299) (hash-t . 299) (hash-f . 299)
                  (hash-next . 299) (hash-rest . 299) (hash-key . 299)
                  (hash-all-keys . 299) (dot . 299) (colon-colon . 299)
                  (equal-greater . 299) (lparen . 299) (lbracket . 299)
                  (lbrace . 299) (string . 299) (query . 299)
                  (query-query . 299) (ellipsis . 299)
                  (query-equal . 299) (escaped-substitution . 299)
                  (constrained-name . 299) (parsed-function-call . 299)
                  (parsed-macro-call . 299)
                  (parsed-local-declaration . 299)
                  (parsed-list-constant . 299)
                  (parsed-vector-constant . 299) (hash-lparen . 299)
                  (hash-lbracket . 299) (hash-lbrace . 299)
                  (rbracket . 299) (rparen . 299) (rbrace . 299))
                 ((unreserved-name . 289) (define . 289) (end . 289)
                  (define-macro-body-word-only . 289) (otherwise . 289)
                  (begin-word-only . 289) (function-word-only . 289)
                  (define-body-word-only . 289)
                  (define-list-word-only . 289)
                  (begin-and-define-list-word . 289)
                  (begin-and-define-body-word . 289)
                  (function-and-define-list-word . 289)
                  (function-and-define-body-word . 289)
                  (local-declaration-word-only . 289) (symbol . 289)
                  (number . 289) (character-literal . 289)
                  (unary-operator-only . 289) (semicolon . 289)
                  (comma . 289) (binary-operator-only . 289)
                  (unary-and-binary-operator . 289) (equal . 289)
                  (equal-equal . 289) (hash-t . 289) (hash-f . 289)
                  (hash-next . 289) (hash-rest . 289) (hash-key . 289)
                  (hash-all-keys . 289) (dot . 289) (colon-colon . 289)
                  (equal-greater . 289) (lparen . 289) (lbracket . 289)
                  (lbrace . 289) (string . 289) (query . 289)
                  (query-query . 289) (ellipsis . 289)
                  (query-equal . 289) (escaped-substitution . 289)
                  (constrained-name . 289) (parsed-function-call . 289)
                  (parsed-macro-call . 289)
                  (parsed-local-declaration . 289)
                  (parsed-list-constant . 289)
                  (parsed-vector-constant . 289) (hash-lparen . 289)
                  (hash-lbracket . 289) (hash-lbrace . 289)
                  (rbracket . 289) (rparen . 289) (rbrace . 289))
                 ((unreserved-name . 287) (define . 287) (end . 287)
                  (define-macro-body-word-only . 287) (otherwise . 287)
                  (begin-word-only . 287) (function-word-only . 287)
                  (define-body-word-only . 287)
                  (define-list-word-only . 287)
                  (begin-and-define-list-word . 287)
                  (begin-and-define-body-word . 287)
                  (function-and-define-list-word . 287)
                  (function-and-define-body-word . 287)
                  (local-declaration-word-only . 287) (symbol . 287)
                  (number . 287) (character-literal . 287)
                  (unary-operator-only . 287) (semicolon . 287)
                  (comma . 287) (binary-operator-only . 287)
                  (unary-and-binary-operator . 287) (equal . 287)
                  (equal-equal . 287) (hash-t . 287) (hash-f . 287)
                  (hash-next . 287) (hash-rest . 287) (hash-key . 287)
                  (hash-all-keys . 287) (dot . 287) (colon-colon . 287)
                  (equal-greater . 287) (lparen . 287) (lbracket . 287)
                  (lbrace . 287) (string . 287) (query . 287)
                  (query-query . 287) (ellipsis . 287)
                  (query-equal . 287) (escaped-substitution . 287)
                  (constrained-name . 287) (parsed-function-call . 287)
                  (parsed-macro-call . 287)
                  (parsed-local-declaration . 287)
                  (parsed-list-constant . 287)
                  (parsed-vector-constant . 287) (hash-lparen . 287)
                  (hash-lbracket . 287) (hash-lbrace . 287)
                  (rbracket . 287) (rparen . 287) (rbrace . 287))
                 ((unreserved-name . 300) (define . 300) (end . 300)
                  (define-macro-body-word-only . 300) (otherwise . 300)
                  (begin-word-only . 300) (function-word-only . 300)
                  (define-body-word-only . 300)
                  (define-list-word-only . 300)
                  (begin-and-define-list-word . 300)
                  (begin-and-define-body-word . 300)
                  (function-and-define-list-word . 300)
                  (function-and-define-body-word . 300)
                  (local-declaration-word-only . 300) (symbol . 300)
                  (number . 300) (character-literal . 300)
                  (unary-operator-only . 300) (semicolon . 300)
                  (comma . 300) (binary-operator-only . 300)
                  (unary-and-binary-operator . 300) (equal . 300)
                  (equal-equal . 300) (hash-t . 300) (hash-f . 300)
                  (hash-next . 300) (hash-rest . 300) (hash-key . 300)
                  (hash-all-keys . 300) (dot . 300) (colon-colon . 300)
                  (equal-greater . 300) (lparen . 300) (lbracket . 300)
                  (lbrace . 300) (string . 300) (query . 300)
                  (query-query . 300) (ellipsis . 300)
                  (query-equal . 300) (escaped-substitution . 300)
                  (constrained-name . 300) (parsed-function-call . 300)
                  (parsed-macro-call . 300)
                  (parsed-local-declaration . 300)
                  (parsed-list-constant . 300)
                  (parsed-vector-constant . 300) (hash-lparen . 300)
                  (hash-lbracket . 300) (hash-lbrace . 300)
                  (rbracket . 300) (rparen . 300) (rbrace . 300))
                 ((unreserved-name . 298) (define . 298) (end . 298)
                  (define-macro-body-word-only . 298) (otherwise . 298)
                  (begin-word-only . 298) (function-word-only . 298)
                  (define-body-word-only . 298)
                  (define-list-word-only . 298)
                  (begin-and-define-list-word . 298)
                  (begin-and-define-body-word . 298)
                  (function-and-define-list-word . 298)
                  (function-and-define-body-word . 298)
                  (local-declaration-word-only . 298) (symbol . 298)
                  (number . 298) (character-literal . 298)
                  (unary-operator-only . 298) (semicolon . 298)
                  (comma . 298) (binary-operator-only . 298)
                  (unary-and-binary-operator . 298) (equal . 298)
                  (equal-equal . 298) (hash-t . 298) (hash-f . 298)
                  (hash-next . 298) (hash-rest . 298) (hash-key . 298)
                  (hash-all-keys . 298) (dot . 298) (colon-colon . 298)
                  (equal-greater . 298) (lparen . 298) (lbracket . 298)
                  (lbrace . 298) (string . 298) (query . 298)
                  (query-query . 298) (ellipsis . 298)
                  (query-equal . 298) (escaped-substitution . 298)
                  (constrained-name . 298) (parsed-function-call . 298)
                  (parsed-macro-call . 298)
                  (parsed-local-declaration . 298)
                  (parsed-list-constant . 298)
                  (parsed-vector-constant . 298) (hash-lparen . 298)
                  (hash-lbracket . 298) (hash-lbrace . 298)
                  (rbracket . 298) (rparen . 298) (rbrace . 298))
                 ((define . 278) (local-declaration-word-only . 278)
                  (parsed-local-declaration . 278)
                  (unreserved-name . 278) (define-body-word-only . 278)
                  (define-list-word-only . 278) (number . 278)
                  (character-literal . 278) (string . 278)
                  (symbol . 278) (hash-lparen . 278)
                  (hash-lbracket . 278) (parsed-list-constant . 278)
                  (parsed-vector-constant . 278)
                  (unary-operator-only . 278)
                  (binary-operator-only . 278)
                  (unary-and-binary-operator . 278) (equal . 278)
                  (equal-equal . 278) (lparen . 278) (lbracket . 278)
                  (lbrace . 278) (function-word-only . 278)
                  (hash-t . 278) (hash-f . 278) (hash-next . 278)
                  (hash-rest . 278) (hash-key . 278)
                  (hash-all-keys . 278) (dot . 278) (colon-colon . 278)
                  (equal-greater . 278) (query . 278)
                  (query-query . 278) (query-equal . 278)
                  (ellipsis . 278) (hash-hash . 278) (otherwise . 278)
                  (parsed-function-call . 278)
                  (parsed-macro-call . 278)
                  (escaped-substitution . 278) (constrained-name . 278)
                  (comma . 278) (semicolon . 278)
                  (begin-word-only . 278)
                  (begin-and-define-body-word . 278)
                  (begin-and-define-list-word . 278)
                  (macro-case-begin-word-only . 278)
                  (hash-lbrace . 278) (end . 278))
                 ((end . 255)) ((end . 257))
                 ((end . 239) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34)
                  (semicolon . -252) (comma . -255)
                  (constrained-name . -261)
                  (escaped-substitution . -265)
                  (parsed-macro-call . -251)
                  (parsed-function-call . -245) (lbrace . -264)
                  (lbracket . -247) (lparen . -258))
                 ((end . 259)) ((rparen . -291))
                 ((define . 280) (local-declaration-word-only . 280)
                  (parsed-local-declaration . 280)
                  (unreserved-name . 280) (define-body-word-only . 280)
                  (define-list-word-only . 280) (number . 280)
                  (character-literal . 280) (string . 280)
                  (symbol . 280) (hash-lparen . 280)
                  (hash-lbracket . 280) (parsed-list-constant . 280)
                  (parsed-vector-constant . 280)
                  (unary-operator-only . 280)
                  (binary-operator-only . 280)
                  (unary-and-binary-operator . 280) (equal . 280)
                  (equal-equal . 280) (lparen . 280) (lbracket . 280)
                  (lbrace . 280) (function-word-only . 280)
                  (hash-t . 280) (hash-f . 280) (hash-next . 280)
                  (hash-rest . 280) (hash-key . 280)
                  (hash-all-keys . 280) (dot . 280) (colon-colon . 280)
                  (equal-greater . 280) (query . 280)
                  (query-query . 280) (query-equal . 280)
                  (ellipsis . 280) (hash-hash . 280) (otherwise . 280)
                  (parsed-function-call . 280)
                  (parsed-macro-call . 280)
                  (escaped-substitution . 280) (constrained-name . 280)
                  (comma . 280) (semicolon . 280)
                  (begin-word-only . 280)
                  (begin-and-define-body-word . 280)
                  (begin-and-define-list-word . 280)
                  (macro-case-begin-word-only . 280)
                  (hash-lbrace . 280) (end . 280))
                 ((end . 253)) ((end . 254)) ((end . 256))
                 ((end . -297))
                 ((unreserved-name . 218) (define-body-word-only . 218)
                  (define-list-word-only . 218) (number . 218)
                  (character-literal . 218) (string . 218)
                  (symbol . 218) (hash-lparen . 218)
                  (hash-lbracket . 218) (parsed-list-constant . 218)
                  (parsed-vector-constant . 218)
                  (unary-operator-only . 218)
                  (binary-operator-only . 218)
                  (unary-and-binary-operator . 218) (equal . 218)
                  (equal-equal . 218) (lparen . 218) (lbracket . 218)
                  (lbrace . 218) (function-word-only . 218)
                  (hash-t . 218) (hash-f . 218) (hash-next . 218)
                  (hash-rest . 218) (hash-key . 218)
                  (hash-all-keys . 218) (dot . 218) (colon-colon . 218)
                  (equal-greater . 218) (query . 218)
                  (query-query . 218) (query-equal . 218)
                  (ellipsis . 218) (hash-hash . 218) (otherwise . 218)
                  (parsed-function-call . 218)
                  (parsed-macro-call . 218)
                  (escaped-substitution . 218) (constrained-name . 218)
                  (comma . 218) (semicolon . 218) (rparen . 218)
                  (end-constraint . 218) (define . 218)
                  (local-declaration-word-only . 218)
                  (parsed-local-declaration . 218) (end . 218)
                  (rbracket . 218) (rbrace . 218))
                 ((unreserved-name . 43) (define-body-word-only . 43)
                  (define-list-word-only . 43) (number . 43)
                  (character-literal . 43) (string . 43) (symbol . 43)
                  (hash-lparen . 43) (hash-lbracket . 43)
                  (parsed-list-constant . 43)
                  (parsed-vector-constant . 43)
                  (unary-operator-only . 43)
                  (binary-operator-only . 43)
                  (unary-and-binary-operator . 43) (equal . 43)
                  (equal-equal . 43) (lparen . 43) (lbracket . 43)
                  (lbrace . 43) (function-word-only . 43) (hash-t . 43)
                  (hash-f . 43) (hash-next . 43) (hash-rest . 43)
                  (hash-key . 43) (hash-all-keys . 43) (dot . 43)
                  (colon-colon . 43) (equal-greater . 43) (query . 43)
                  (query-query . 43) (query-equal . 43) (ellipsis . 43)
                  (hash-hash . 43) (otherwise . 43)
                  (parsed-function-call . 43) (parsed-macro-call . 43)
                  (escaped-substitution . 43) (constrained-name . 43)
                  (comma . 43) (semicolon . 43) (rparen . 43)
                  (end-constraint . 43) (define . 43)
                  (local-declaration-word-only . 43)
                  (parsed-local-declaration . 43) (end . 43)
                  (rbracket . 43) (rbrace . 43)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40))
                 ((rbrace . 219) (rbracket . 219) (end . 219)
                  (parsed-local-declaration . 219)
                  (local-declaration-word-only . 219) (define . 219)
                  (end-constraint . 219) (rparen . 219)
                  (semicolon . 219) (comma . 219)
                  (constrained-name . 219) (escaped-substitution . 219)
                  (parsed-macro-call . 219)
                  (parsed-function-call . 219) (otherwise . 219)
                  (hash-hash . 219) (ellipsis . 219)
                  (query-equal . 219) (query-query . 219) (query . 219)
                  (equal-greater . 219) (colon-colon . 219) (dot . 219)
                  (hash-all-keys . 219) (hash-key . 219)
                  (hash-rest . 219) (hash-next . 219) (hash-f . 219)
                  (hash-t . 219) (function-word-only . 219)
                  (lbrace . 219) (lbracket . 219) (lparen . 219)
                  (equal-equal . 219) (equal . 219)
                  (unary-and-binary-operator . 219)
                  (binary-operator-only . 219)
                  (unary-operator-only . 219)
                  (parsed-vector-constant . 219)
                  (parsed-list-constant . 219) (hash-lbracket . 219)
                  (hash-lparen . 219) (symbol . 219) (string . 219)
                  (character-literal . 219) (number . 219)
                  (define-list-word-only . 219)
                  (define-body-word-only . 219) (unreserved-name . 219))
                 ((rbrace . 42) (rbracket . 42) (end . 42)
                  (parsed-local-declaration . 42)
                  (local-declaration-word-only . 42) (define . 42)
                  (end-constraint . 42) (rparen . 42) (semicolon . 42)
                  (comma . 42) (constrained-name . 42)
                  (escaped-substitution . 42) (parsed-macro-call . 42)
                  (parsed-function-call . 42) (otherwise . 42)
                  (hash-hash . 42) (ellipsis . 42) (query-equal . 42)
                  (query-query . 42) (query . 42) (equal-greater . 42)
                  (colon-colon . 42) (dot . 42) (hash-all-keys . 42)
                  (hash-key . 42) (hash-rest . 42) (hash-next . 42)
                  (hash-f . 42) (hash-t . 42) (function-word-only . 42)
                  (lbrace . 42) (lbracket . 42) (lparen . 42)
                  (equal-equal . 42) (equal . 42)
                  (unary-and-binary-operator . 42)
                  (binary-operator-only . 42)
                  (unary-operator-only . 42)
                  (parsed-vector-constant . 42)
                  (parsed-list-constant . 42) (hash-lbracket . 42)
                  (hash-lparen . 42) (symbol . 42) (string . 42)
                  (character-literal . 42) (number . 42)
                  (define-list-word-only . 42)
                  (define-body-word-only . 42) (unreserved-name . 42))
                 ((rbrace . 220) (rbracket . 220) (end . 220)
                  (parsed-local-declaration . 220)
                  (local-declaration-word-only . 220) (define . 220)
                  (end-constraint . 220) (rparen . 220)
                  (semicolon . 220) (comma . 220)
                  (constrained-name . 220) (escaped-substitution . 220)
                  (parsed-macro-call . 220)
                  (parsed-function-call . 220) (otherwise . 220)
                  (hash-hash . 220) (ellipsis . 220)
                  (query-equal . 220) (query-query . 220) (query . 220)
                  (equal-greater . 220) (colon-colon . 220) (dot . 220)
                  (hash-all-keys . 220) (hash-key . 220)
                  (hash-rest . 220) (hash-next . 220) (hash-f . 220)
                  (hash-t . 220) (function-word-only . 220)
                  (lbrace . 220) (lbracket . 220) (lparen . 220)
                  (equal-equal . 220) (equal . 220)
                  (unary-and-binary-operator . 220)
                  (binary-operator-only . 220)
                  (unary-operator-only . 220)
                  (parsed-vector-constant . 220)
                  (parsed-list-constant . 220) (hash-lbracket . 220)
                  (hash-lparen . 220) (symbol . 220) (string . 220)
                  (character-literal . 220) (number . 220)
                  (define-list-word-only . 220)
                  (define-body-word-only . 220) (unreserved-name . 220))
                 ((rbrace . 104) (rparen . 104) (rbracket . 104)
                  (end . 104) (end-constraint . 104))
                 ((rbrace . 100) (rparen . 100) (rbracket . 100)
                  (end . 100) (end-constraint . 100))
                 ((rbrace . 102) (rparen . 102) (rbracket . 102)
                  (end . 102) (end-constraint . 102))
                 ((rbracket . -305))
                 ((unreserved-name . 136) (define-body-word-only . 136)
                  (define-list-word-only . 136) (number . 136)
                  (character-literal . 136) (string . 136)
                  (symbol . 136) (hash-lparen . 136)
                  (hash-lbracket . 136) (parsed-list-constant . 136)
                  (parsed-vector-constant . 136)
                  (unary-operator-only . 136)
                  (binary-operator-only . 136)
                  (unary-and-binary-operator . 136) (equal . 136)
                  (equal-equal . 136) (lparen . 136) (lbracket . 136)
                  (lbrace . 136) (function-word-only . 136)
                  (hash-t . 136) (hash-f . 136) (hash-next . 136)
                  (hash-rest . 136) (hash-key . 136)
                  (hash-all-keys . 136) (dot . 136) (colon-colon . 136)
                  (equal-greater . 136) (query . 136)
                  (query-query . 136) (query-equal . 136)
                  (ellipsis . 136) (hash-hash . 136) (otherwise . 136)
                  (parsed-function-call . 136)
                  (parsed-macro-call . 136)
                  (escaped-substitution . 136) (constrained-name . 136)
                  (begin-word-only . 136)
                  (begin-and-define-body-word . 136)
                  (begin-and-define-list-word . 136)
                  (macro-case-begin-word-only . 136)
                  (hash-lbrace . 136) (define . 136)
                  (local-declaration-word-only . 136)
                  (parsed-local-declaration . 136) (comma . 136)
                  (semicolon . 136) (end-constraint . 136) (end . 136)
                  (rbracket . 136) (rparen . 136) (rbrace . 136))
                 ((rbrace . 88) (rparen . 88) (rbracket . 88)
                  (end . 88) (end-constraint . 88))
                 ((rbrace . 98) (rparen . 98) (rbracket . 98)
                  (end . 98) (end-constraint . 98))
                 ((end . 252)) ((rbracket . -310))
                 ((define . 279) (local-declaration-word-only . 279)
                  (parsed-local-declaration . 279)
                  (unreserved-name . 279) (define-body-word-only . 279)
                  (define-list-word-only . 279) (number . 279)
                  (character-literal . 279) (string . 279)
                  (symbol . 279) (hash-lparen . 279)
                  (hash-lbracket . 279) (parsed-list-constant . 279)
                  (parsed-vector-constant . 279)
                  (unary-operator-only . 279)
                  (binary-operator-only . 279)
                  (unary-and-binary-operator . 279) (equal . 279)
                  (equal-equal . 279) (lparen . 279) (lbracket . 279)
                  (lbrace . 279) (function-word-only . 279)
                  (hash-t . 279) (hash-f . 279) (hash-next . 279)
                  (hash-rest . 279) (hash-key . 279)
                  (hash-all-keys . 279) (dot . 279) (colon-colon . 279)
                  (equal-greater . 279) (query . 279)
                  (query-query . 279) (query-equal . 279)
                  (ellipsis . 279) (hash-hash . 279) (otherwise . 279)
                  (parsed-function-call . 279)
                  (parsed-macro-call . 279)
                  (escaped-substitution . 279) (constrained-name . 279)
                  (comma . 279) (semicolon . 279)
                  (begin-word-only . 279)
                  (begin-and-define-body-word . 279)
                  (begin-and-define-list-word . 279)
                  (macro-case-begin-word-only . 279)
                  (hash-lbrace . 279) (end . 279))
                 ((end . 250)) ((end . 240))
                 ((unreserved-name . 217) (define-body-word-only . 217)
                  (define-list-word-only . 217) (number . 217)
                  (character-literal . 217) (string . 217)
                  (symbol . 217) (hash-lparen . 217)
                  (hash-lbracket . 217) (parsed-list-constant . 217)
                  (parsed-vector-constant . 217)
                  (unary-operator-only . 217)
                  (binary-operator-only . 217)
                  (unary-and-binary-operator . 217) (equal . 217)
                  (equal-equal . 217) (lparen . 217) (lbracket . 217)
                  (lbrace . 217) (function-word-only . 217)
                  (hash-t . 217) (hash-f . 217) (hash-next . 217)
                  (hash-rest . 217) (hash-key . 217)
                  (hash-all-keys . 217) (dot . 217) (colon-colon . 217)
                  (equal-greater . 217) (query . 217)
                  (query-query . 217) (query-equal . 217)
                  (ellipsis . 217) (hash-hash . 217) (otherwise . 217)
                  (parsed-function-call . 217)
                  (parsed-macro-call . 217)
                  (escaped-substitution . 217) (constrained-name . 217)
                  (comma . 217) (semicolon . 217) (rparen . 217)
                  (end-constraint . 217) (define . 217)
                  (local-declaration-word-only . 217)
                  (parsed-local-declaration . 217) (end . 217)
                  (rbracket . 217) (rbrace . 217))
                 ((semicolon . 111) (end-constraint . 111) (end . 111)
                  (rbracket . 111) (rparen . 111) (rbrace . 111))
                 ((semicolon . 108) (end-constraint . 108) (end . 108)
                  (rbracket . 108) (rparen . 108) (rbrace . 108))
                 ((semicolon . 92) (end-constraint . 92) (end . 92)
                  (rbracket . 92) (rparen . 92) (rbrace . 92))
                 ((end . -319))
                 ((semicolon . 148) (end-constraint . 148) (end . 148)
                  (rbracket . 148) (rparen . 148) (rbrace . 148))
                 ((semicolon . 156) (end-constraint . 156) (end . 156)
                  (rbracket . 156) (rparen . 156) (rbrace . 156)
                  (define-list-word-only . -22) (unreserved-name . -10)
                  (define-macro-body-word-only . -238)
                  (begin-and-define-list-word . -30)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (begin-and-define-body-word . -326)
                  (function-and-define-body-word . -235)
                  (define-body-word-only . -327))
                 ((rbrace . 41) (rparen . 41) (rbracket . 41)
                  (end . 41) (end-constraint . 41) (semicolon . 41))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (define-macro-body-word-only . -238)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40))
                 ((rbrace . 155) (rparen . 155) (rbracket . 155)
                  (end . 155) (end-constraint . 155) (semicolon . 155))
                 ((rbrace . 39) (rparen . 39) (rbracket . 39)
                  (end . 39) (end-constraint . 39) (semicolon . 39))
                 ((rbrace . 40) (rparen . 40) (rbracket . 40)
                  (end . 40) (end-constraint . 40) (semicolon . 40))
                 ((rbrace . 38) (rparen . 38) (rbracket . 38)
                  (end . 38) (end-constraint . 38) (semicolon . 38))
                 ((define-macro-body-word-only . 52)
                  (begin-word-only . 52)
                  (begin-and-define-body-word . 52)
                  (begin-and-define-list-word . 52)
                  (macro-case-begin-word-only . 52)
                  (unreserved-name . 52) (define-body-word-only . 52)
                  (define-list-word-only . 52) (rbrace . 45)
                  (rparen . 45) (rbracket . 45) (end . 45)
                  (end-constraint . 45) (semicolon . 45))
                 ((define-macro-body-word-only . 54)
                  (begin-word-only . 54)
                  (begin-and-define-body-word . 54)
                  (begin-and-define-list-word . 54)
                  (macro-case-begin-word-only . 54)
                  (unreserved-name . 54) (define-body-word-only . 54)
                  (define-list-word-only . 54) (rbrace . 32)
                  (rparen . 32) (rbracket . 32) (end . 32)
                  (end-constraint . 32) (semicolon . 32))
                 ((semicolon . 154) (end-constraint . 154) (end . 154)
                  (rbracket . 154) (rparen . 154) (rbrace . 154))
                 ((end . 239) (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34)
                  (semicolon . -252) (comma . -255)
                  (constrained-name . -261)
                  (escaped-substitution . -265)
                  (parsed-macro-call . -251)
                  (parsed-function-call . -245) (lbrace . -264)
                  (lbracket . -247) (lparen . -258))
                 ((end . -332))
                 ((rbrace . 146) (rparen . 146) (rbracket . 146)
                  (end . 146) (end-constraint . 146) (semicolon . 146))
                 ((rbrace . 335) (rparen . 335) (rbracket . 335)
                  (end . 335) (end-constraint . 335) (semicolon . 335)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (define-macro-body-word-only . -238))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (define-macro-body-word-only . -238)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40) (semicolon . 41)
                  (end-constraint . 41) (end . 41) (rbracket . 41)
                  (rparen . 41) (rbrace . 41))
                 ((semicolon . 334) (end-constraint . 334) (end . 334)
                  (rbracket . 334) (rparen . 334) (rbrace . 334))
                 ((rbrace . 333) (rparen . 333) (rbracket . 333)
                  (end . 333) (end-constraint . 333) (semicolon . 333))
                 ((rparen . 195)) ((rparen . -338))
                 ((rbracket . 160) (end-constraint . 160)
                  (rparen . 160) (semicolon . 160)
                  (binary-operator-only . 160)
                  (unary-and-binary-operator . 160) (equal . 160)
                  (equal-equal . 160) (equal-greater . 160)
                  (comma . 160) (lparen . 160) (lbracket . 160)
                  (dot . 160))
                 ((symbol . -198) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37)
                  (hash-lbrace . -34))
                 ((comma . 162) (rparen . 162) (rbracket . 162))
                 ((rbracket . 166) (rparen . 166) (comma . 166))
                 ((symbol . -15) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37)
                  (hash-lbrace . -34))
                 ((comma . 207) (equal-greater . 207)
                  (equal-equal . 207) (equal . 207)
                  (unary-and-binary-operator . 207)
                  (binary-operator-only . 207) (semicolon . 207)
                  (rparen . 207) (end-constraint . 207)
                  (rbracket . 207))
                 ((binary-operator-only . 172)
                  (unary-and-binary-operator . 172) (equal . 172)
                  (equal-equal . 172) (semicolon . 172) (lparen . 172)
                  (lbracket . 172) (dot . 172) (comma . 172)
                  (rparen . 172) (end-constraint . 172)
                  (rbracket . 172) (equal-greater . 172))
                 ((rbracket . 159) (end-constraint . 159)
                  (rparen . 159) (semicolon . 159)
                  (binary-operator-only . 159)
                  (unary-and-binary-operator . 159) (equal . 159)
                  (equal-equal . 159) (equal-greater . 159)
                  (comma . 159) (lparen . 159) (lbracket . 159)
                  (dot . 159))
                 ((hash-hash . 328) (unreserved-name . 328)
                  (define . 328) (end . 328)
                  (define-macro-body-word-only . 328) (otherwise . 328)
                  (begin-word-only . 328) (function-word-only . 328)
                  (define-body-word-only . 328)
                  (define-list-word-only . 328)
                  (begin-and-define-list-word . 328)
                  (begin-and-define-body-word . 328)
                  (function-and-define-list-word . 328)
                  (function-and-define-body-word . 328)
                  (local-declaration-word-only . 328) (symbol . 328)
                  (number . 328) (character-literal . 328)
                  (unary-operator-only . 328) (semicolon . 328)
                  (comma . 328) (binary-operator-only . 328)
                  (unary-and-binary-operator . 328) (equal . 328)
                  (equal-equal . 328) (hash-t . 328) (hash-f . 328)
                  (hash-next . 328) (hash-rest . 328) (hash-key . 328)
                  (hash-all-keys . 328) (dot . 328) (colon-colon . 328)
                  (equal-greater . 328) (lparen . 328) (lbracket . 328)
                  (lbrace . 328) (string . 328) (query . 328)
                  (query-query . 328) (ellipsis . 328)
                  (query-equal . 328) (escaped-substitution . 328)
                  (constrained-name . 328) (parsed-function-call . 328)
                  (parsed-macro-call . 328)
                  (parsed-local-declaration . 328)
                  (parsed-list-constant . 328)
                  (parsed-vector-constant . 328) (hash-lparen . 328)
                  (hash-lbracket . 328) (hash-lbrace . 328)
                  (rbracket . 328) (rparen . 328) (rbrace . 328))
                 ((unreserved-name . 216) (define-body-word-only . 216)
                  (define-list-word-only . 216) (number . 216)
                  (character-literal . 216) (string . 216)
                  (symbol . 216) (hash-lparen . 216)
                  (hash-lbracket . 216) (parsed-list-constant . 216)
                  (parsed-vector-constant . 216)
                  (unary-operator-only . 216)
                  (binary-operator-only . 216)
                  (unary-and-binary-operator . 216) (equal . 216)
                  (equal-equal . 216) (lparen . 216) (lbracket . 216)
                  (lbrace . 216) (function-word-only . 216)
                  (hash-t . 216) (hash-f . 216) (hash-next . 216)
                  (hash-rest . 216) (hash-key . 216)
                  (hash-all-keys . 216) (dot . 216) (colon-colon . 216)
                  (equal-greater . 216) (query . 216)
                  (query-query . 216) (query-equal . 216)
                  (ellipsis . 216) (hash-hash . 216) (otherwise . 216)
                  (parsed-function-call . 216)
                  (parsed-macro-call . 216)
                  (escaped-substitution . 216) (constrained-name . 216)
                  (comma . 216) (semicolon . 216) (rparen . 216)
                  (end-constraint . 216) (define . 216)
                  (local-declaration-word-only . 216)
                  (parsed-local-declaration . 216) (end . 216)
                  (rbracket . 216) (rbrace . 216))
                 ((unreserved-name . 135) (define-body-word-only . 135)
                  (define-list-word-only . 135) (number . 135)
                  (character-literal . 135) (string . 135)
                  (symbol . 135) (hash-lparen . 135)
                  (hash-lbracket . 135) (parsed-list-constant . 135)
                  (parsed-vector-constant . 135)
                  (unary-operator-only . 135)
                  (binary-operator-only . 135)
                  (unary-and-binary-operator . 135) (equal . 135)
                  (equal-equal . 135) (lparen . 135) (lbracket . 135)
                  (lbrace . 135) (function-word-only . 135)
                  (hash-t . 135) (hash-f . 135) (hash-next . 135)
                  (hash-rest . 135) (hash-key . 135)
                  (hash-all-keys . 135) (dot . 135) (colon-colon . 135)
                  (equal-greater . 135) (query . 135)
                  (query-query . 135) (query-equal . 135)
                  (ellipsis . 135) (hash-hash . 135) (otherwise . 135)
                  (parsed-function-call . 135)
                  (parsed-macro-call . 135)
                  (escaped-substitution . 135) (constrained-name . 135)
                  (begin-word-only . 135)
                  (begin-and-define-body-word . 135)
                  (begin-and-define-list-word . 135)
                  (macro-case-begin-word-only . 135)
                  (hash-lbrace . 135) (define . 135)
                  (local-declaration-word-only . 135)
                  (parsed-local-declaration . 135) (comma . 135)
                  (semicolon . 135) (end-constraint . 135) (end . 135)
                  (rbracket . 135) (rparen . 135) (rbrace . 135))
                 ((end-constraint . -356))
                 ((end-constraint . 198) (semicolon . -354))
                 ((semicolon . 76) (end-constraint . 76))
                 ((end-constraint . 70)) ((end-constraint . 72))
                 ((end-constraint . 197) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-macro-call . -16) (parsed-function-call . -7)
                  (lparen . -48) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((semicolon . 75) (end-constraint . 75)) ((:eoi . 6))
                 ((end-constraint . -358)) ((:eoi . 3))
                 ((end-constraint . -364))
                 ((end-constraint . 200) (colon-colon . -361))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37)
                  (hash-lbrace . -34))
                 ((end-constraint . 199))
                 ((end-constraint . 203) (lparen . -193)
                  (lbracket . -194) (dot . -195))
                 ((:eoi . 7)) ((end-constraint . -366)) ((:eoi . 8))
                 ((end-constraint . -368)) ((:eoi . 10))
                 ((end-constraint . -370)) ((:eoi . 9))
                 ((equal-greater . 205) (rparen . 205) (comma . -392))
                 ((define . 237) (local-declaration-word-only . 237)
                  (parsed-local-declaration . 237) (symbol . 237)
                  (number . 237) (character-literal . 237)
                  (string . 237) (hash-t . 237) (hash-f . 237)
                  (hash-lparen . 237) (hash-lbracket . 237)
                  (parsed-list-constant . 237)
                  (parsed-vector-constant . 237)
                  (unreserved-name . 237) (define-body-word-only . 237)
                  (define-list-word-only . 237) (ellipsis . 237)
                  (lparen . 237) (function-word-only . 237)
                  (begin-word-only . 237)
                  (begin-and-define-body-word . 237)
                  (begin-and-define-list-word . 237)
                  (macro-case-begin-word-only . 237)
                  (hash-lbrace . 237) (parsed-function-call . 237)
                  (parsed-macro-call . 237) (unary-operator-only . 237)
                  (unary-and-binary-operator . 237) (semicolon . 237)
                  (end-constraint . 237) (equal-greater . -395))
                 ((equal-greater . -394)) ((end-constraint . 221))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((end-constraint . -405)) ((end-constraint . 223))
                 ((end-constraint . 71) (semicolon . -398)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-macro-call . -16) (parsed-function-call . -7)
                  (lparen . -48) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((end-constraint . 71) (semicolon . -381)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-macro-call . -16) (parsed-function-call . -7)
                  (lparen . -48) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((end-constraint . 232))
                 ((end-constraint . 231) (otherwise . -372)
                  (lparen . -375) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (hash-f . -33)
                  (hash-t . -39) (character-literal . -20)
                  (number . -52) (string . -19)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((end-constraint . 198) (semicolon . -384))
                 ((end-constraint . 230))
                 ((otherwise . -372) (end-constraint . 197)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-macro-call . -16) (parsed-function-call . -7)
                  (lparen . -375) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((equal-greater . 205) (comma . -392) (semicolon . 77)
                  (end-constraint . 77))
                 ((end-constraint . 225) (define . 225)
                  (local-declaration-word-only . 225)
                  (parsed-local-declaration . 225) (symbol . 225)
                  (number . 225) (character-literal . 225)
                  (string . 225) (hash-t . 225) (hash-f . 225)
                  (hash-lparen . 225) (hash-lbracket . 225)
                  (parsed-list-constant . 225)
                  (parsed-vector-constant . 225)
                  (unreserved-name . 225) (define-body-word-only . 225)
                  (define-list-word-only . 225) (ellipsis . 225)
                  (lparen . 225) (function-word-only . 225)
                  (begin-word-only . 225)
                  (begin-and-define-body-word . 225)
                  (begin-and-define-list-word . 225)
                  (macro-case-begin-word-only . 225)
                  (hash-lbrace . 225) (parsed-function-call . 225)
                  (parsed-macro-call . 225) (unary-operator-only . 225)
                  (unary-and-binary-operator . 225) (semicolon . 225))
                 ((comma . -388) (rparen . -344))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((rparen . -390)) ((equal-greater . -391))
                 ((end-constraint . 234) (semicolon . 234)
                  (unary-and-binary-operator . 234)
                  (unary-operator-only . 234) (parsed-macro-call . 234)
                  (parsed-function-call . 234) (hash-lbrace . 234)
                  (macro-case-begin-word-only . 234)
                  (begin-and-define-list-word . 234)
                  (begin-and-define-body-word . 234)
                  (begin-word-only . 234) (function-word-only . 234)
                  (lparen . 234) (ellipsis . 234)
                  (define-list-word-only . 234)
                  (define-body-word-only . 234) (unreserved-name . 234)
                  (parsed-vector-constant . 234)
                  (parsed-list-constant . 234) (hash-lbracket . 234)
                  (hash-lparen . 234) (hash-f . 234) (hash-t . 234)
                  (string . 234) (character-literal . 234)
                  (number . 234) (symbol . 234)
                  (parsed-local-declaration . 234)
                  (local-declaration-word-only . 234) (define . 234))
                 ((define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -48)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((equal-greater . 204) (rparen . 204))
                 ((end-constraint . 235) (semicolon . 235)
                  (unary-and-binary-operator . 235)
                  (unary-operator-only . 235) (parsed-macro-call . 235)
                  (parsed-function-call . 235) (hash-lbrace . 235)
                  (macro-case-begin-word-only . 235)
                  (begin-and-define-list-word . 235)
                  (begin-and-define-body-word . 235)
                  (begin-word-only . 235) (function-word-only . 235)
                  (lparen . 235) (ellipsis . 235)
                  (define-list-word-only . 235)
                  (define-body-word-only . 235) (unreserved-name . 235)
                  (parsed-vector-constant . 235)
                  (parsed-list-constant . 235) (hash-lbracket . 235)
                  (hash-lparen . 235) (hash-f . 235) (hash-t . 235)
                  (string . 235) (character-literal . 235)
                  (number . 235) (symbol . 235)
                  (parsed-local-declaration . 235)
                  (local-declaration-word-only . 235) (define . 235))
                 ((end-constraint . 236) (semicolon . 236)
                  (unary-and-binary-operator . 236)
                  (unary-operator-only . 236) (parsed-macro-call . 236)
                  (parsed-function-call . 236) (hash-lbrace . 236)
                  (macro-case-begin-word-only . 236)
                  (begin-and-define-list-word . 236)
                  (begin-and-define-body-word . 236)
                  (begin-word-only . 236) (function-word-only . 236)
                  (lparen . 236) (ellipsis . 236)
                  (define-list-word-only . 236)
                  (define-body-word-only . 236) (unreserved-name . 236)
                  (parsed-vector-constant . 236)
                  (parsed-list-constant . 236) (hash-lbracket . 236)
                  (hash-lparen . 236) (hash-f . 236) (hash-t . 236)
                  (string . 236) (character-literal . 236)
                  (number . 236) (symbol . 236)
                  (parsed-local-declaration . 236)
                  (local-declaration-word-only . 236) (define . 236))
                 ((end-constraint . 233) (semicolon . 233)
                  (unary-and-binary-operator . 233)
                  (unary-operator-only . 233) (parsed-macro-call . 233)
                  (parsed-function-call . 233) (hash-lbrace . 233)
                  (macro-case-begin-word-only . 233)
                  (begin-and-define-list-word . 233)
                  (begin-and-define-body-word . 233)
                  (begin-word-only . 233) (function-word-only . 233)
                  (lparen . 233) (ellipsis . 233)
                  (define-list-word-only . 233)
                  (define-body-word-only . 233) (unreserved-name . 233)
                  (parsed-vector-constant . 233)
                  (parsed-list-constant . 233) (hash-lbracket . 233)
                  (hash-lparen . 233) (hash-f . 233) (hash-t . 233)
                  (string . 233) (character-literal . 233)
                  (number . 233) (symbol . 233)
                  (parsed-local-declaration . 233)
                  (local-declaration-word-only . 233) (define . 233))
                 ((semicolon . 226) (unary-and-binary-operator . 226)
                  (unary-operator-only . 226) (parsed-macro-call . 226)
                  (parsed-function-call . 226) (hash-lbrace . 226)
                  (macro-case-begin-word-only . 226)
                  (begin-and-define-list-word . 226)
                  (begin-and-define-body-word . 226)
                  (begin-word-only . 226) (function-word-only . 226)
                  (lparen . 226) (ellipsis . 226)
                  (define-list-word-only . 226)
                  (define-body-word-only . 226) (unreserved-name . 226)
                  (parsed-vector-constant . 226)
                  (parsed-list-constant . 226) (hash-lbracket . 226)
                  (hash-lparen . 226) (hash-f . 226) (hash-t . 226)
                  (string . 226) (character-literal . 226)
                  (number . 226) (symbol . 226)
                  (parsed-local-declaration . 226)
                  (local-declaration-word-only . 226) (define . 226)
                  (end-constraint . 226))
                 ((end-constraint . 231) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11) (parsed-macro-call . -16)
                  (parsed-function-call . -7) (lparen . -375)
                  (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34) (otherwise . -372))
                 ((end-constraint . 198) (semicolon . -402))
                 ((end-constraint . 227)) ((end-constraint . 224))
                 ((otherwise . -372) (end-constraint . 197)
                  (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (local-declaration-word-only . -57)
                  (function-word-only . -32)
                  (unary-and-binary-operator . -60)
                  (unary-operator-only . -11)
                  (parsed-local-declaration . -44) (define . -29)
                  (parsed-macro-call . -16) (parsed-function-call . -7)
                  (lparen . -375) (hash-f . -33) (hash-t . -39)
                  (character-literal . -20) (number . -52)
                  (string . -19) (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (ellipsis . -37) (symbol . -15)
                  (hash-lbrace . -34))
                 ((end-constraint . 228)) ((end-constraint . 229))
                 ((:eoi . 5)) ((end-constraint . 80))
                 ((end-constraint . -421))
                 ((end-constraint . 83) (comma . -419))
                 ((hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((end-constraint . 113) (comma . 113)
                  (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28))
                 ((end-constraint . 95) (comma . 95)
                  (hash-all-keys . -94) (hash-key . -77)
                  (hash-rest . -80) (hash-next . -82) (hash-f . -88)
                  (hash-t . -95) (define-list-word-only . -22)
                  (define-body-word-only . -54) (unreserved-name . -10)
                  (begin-and-define-list-word . -30)
                  (begin-and-define-body-word . -18)
                  (begin-word-only . -9)
                  (macro-case-begin-word-only . -40)
                  (function-word-only . -32) (equal-equal . -97)
                  (equal . -90) (unary-and-binary-operator . -107)
                  (binary-operator-only . -86)
                  (unary-operator-only . -69) (constrained-name . -101)
                  (escaped-substitution . -106)
                  (parsed-macro-call . -76)
                  (parsed-function-call . -67) (otherwise . -87)
                  (hash-hash . -99) (ellipsis . -91)
                  (query-equal . -71) (query-query . -92) (query . -83)
                  (equal-greater . -74) (colon-colon . -75)
                  (dot . -105) (lbrace . -103) (lbracket . -68)
                  (lparen . -98) (symbol . -73) (string . -78)
                  (character-literal . -79) (number . -102)
                  (parsed-vector-constant . -46)
                  (parsed-list-constant . -38) (hash-lbracket . -23)
                  (hash-lparen . -28) (hash-lbrace . -34))
                 ((end-constraint . 85) (comma . 85))
                 ((end-constraint . 84) (comma . 84))
                 ((end-constraint . 97) (comma . 97))
                 ((comma . 94) (end-constraint . 94))
                 ((comma . 114) (end-constraint . 114))
                 ((comma . 96) (end-constraint . 96))
                 ((comma . 112) (end-constraint . 112))
                 ((symbol . -409)) ((end-constraint . 82)) ((:eoi . 4)))
                :goto-table
                '((159 (name-prefix-opt . 179)
                   (unary-and-binary-operator . 178)
                   (escaped-substitution . 177) (dot . 176)
                   (local-declaration-word-only . 175)
                   (define-body-word-only . 174) (lbrace . 173)
                   (number . 172) (constrained-name . 171)
                   (core-word . 170) (hash-word . 169) (lparen . 168)
                   (parsed-vector-constant . 167) (name-prefix . 166)
                   (reserved-word . 165) (template . 268)
                   (equal-equal . 164)
                   (function-and-define-list-word . 163)
                   (separator . 161) (parsed-local-declaration . 160)
                   (compound-template-element . 159)
                   (define-macro-body-word-only . 158) (hash-t . 94)
                   (hash-all-keys . 93)
                   (function-and-define-body-word . 157)
                   (parsed-list-constant . 156) (query-query . 155)
                   (ellipsis . 154) (equal . 152) (name . 153)
                   (hash-lbrace . 151) (hash-f . 87)
                   (binary-operator-only . 150) (otherwise . 148)
                   (function-word-only . 147) (template-element . 149)
                   (comma . 146) (begin-and-define-list-word . 145)
                   (define . 144) (hash-lparen . 143) (hash-next . 81)
                   (hash-lbracket . 142) (define-list-word-only . 141)
                   (binary-operator . 140) (hash-rest . 79)
                   (character-literal . 139) (substitution . 137)
                   (string . 136) (hash-key . 76)
                   (begin-and-define-body-word . 135) (semicolon . 134)
                   (parsed-macro-call . 133) (colon-colon . 132)
                   (equal-greater . 131) (symbol . 130) (end . 129)
                   (query-equal . 128) (unary-operator-only . 127)
                   (unreserved-name . 126) (begin-word-only . 125)
                   (lbracket . 124) (parsed-function-call . 123))
                 (320 (begin-and-define-list-word . 29)
                  (macro-case-begin-word-only . 39)
                  (define-body-word-only . 53)
                  (define-list-word-only . 21) (unreserved-name . 9)
                  (define-macro-body-word-only . 237)
                  (begin-and-define-body-word . 17)
                  (ordinary-name . 324) (begin-word . 323)
                  (macro-case-begin-word . 322) (define-word-only . 54)
                  (begin-word-only . 8) (name-not-end . 327)
                  (define-macro-body-word . 319))
                 (318 (begin-and-define-list-word . 29)
                  (macro-case-begin-word-only . 39)
                  (define-body-word-only . 326)
                  (define-list-word-only . 21) (unreserved-name . 9)
                  (define-macro-body-word-only . 237)
                  (begin-and-define-body-word . 325)
                  (ordinary-name . 324) (begin-word . 323)
                  (macro-case-begin-word . 322) (define-word-only . 54)
                  (begin-word-only . 8)
                  (function-and-define-body-word . 234)
                  (name-not-end . 321) (define-body-word . 320)
                  (define-macro-body-word . 319))
                 (155 (end . 129) (begin-and-define-list-word . 145)
                  (reserved-word . 165) (define-body-word-only . 174)
                  (define-list-word-only . 141) (unreserved-name . 126)
                  (define-macro-body-word-only . 158) (name . 270)
                  (begin-and-define-body-word . 135)
                  (function-and-define-list-word . 163)
                  (constrained-name . 269) (otherwise . 148)
                  (local-declaration-word-only . 175)
                  (begin-word-only . 125)
                  (function-and-define-body-word . 157)
                  (core-word . 170) (define . 144)
                  (function-word-only . 147))
                 (316 (end . 318) (definition-tail . 317))
                 (151 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 271)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (149 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (template . 272)
                  (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (separator . 161) (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (equal . 152) (name . 153)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (otherwise . 148)
                  (function-word-only . 147) (template-element . 149)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (substitution . 137)
                  (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (308 (rbracket . 309))
                 (143 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 273)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (142 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 274)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (303 (rbracket . 304)) (138 (rbrace . 346))
                 (136 (hash-hash . 276))
                 (296 (begin-and-define-list-word . 29)
                  (macro-case-begin-word-only . 39)
                  (begin-word-opt . 299)
                  (begin-and-define-body-word . 17) (begin-word . 298)
                  (macro-case-begin-word . 297) (begin-word-only . 8))
                 (294 (end . 296) (end-clause . 295))
                 (128 (end . 129) (begin-and-define-list-word . 145)
                  (reserved-word . 165) (define-body-word-only . 174)
                  (define-list-word-only . 141) (unreserved-name . 126)
                  (define-macro-body-word-only . 158) (name . 277)
                  (begin-and-define-body-word . 135)
                  (function-and-define-list-word . 163)
                  (otherwise . 148) (local-declaration-word-only . 175)
                  (begin-word-only . 125)
                  (function-and-define-body-word . 157)
                  (core-word . 170) (define . 144)
                  (function-word-only . 147))
                 (289 (rparen . 290))
                 (287 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 264) (dot . 104)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 263) (number . 101)
                  (non-statement-macro-body-fragment . 262)
                  (local-declaration . 261) (constrained-name . 260)
                  (macro-bracketed-fragment . 259) (hash-word . 258)
                  (hash-hash . 98) (lparen . 257)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 256)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 255)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 254) (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (query . 82) (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (macro-simple-fragment . 253) (definition . 252)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (semicolon . 251)
                  (parsed-macro-call . 250) (colon-colon . 74)
                  (symbol . 72) (equal-greater . 73) (operator . 249)
                  (query-equal . 70) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (macro-body-fragment-opt . 288)
                  (macro-body-fragment . 247) (lbracket . 246)
                  (statement . 245) (parsed-function-call . 244)
                  (constant-fragment . 243) (function-word . 4)
                  (ordinary-name . 242))
                 (124 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 278)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (121 (rparen . 122))
                 (119 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 120) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (116 (semicolon . 119) (semicolon-fragment . 118)
                  (semicolon-fragment-opt . 117))
                 (278 (rbracket . 279)) (114 (rbrace . 347))
                 (113 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 226) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (112 (semicolon . 119) (semicolon-fragment . 118)
                  (semicolon-fragment-opt . 300))
                 (274 (rbracket . 275))
                 (111 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 301) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (273 (rparen . 280))
                 (110 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 302) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (271 (rbrace . 281))
                 (108 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 306) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-f . 87)
                  (otherwise . 86) (binary-operator-only . 85)
                  (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (define . 28) (hash-lparen . 27)
                  (bracketed-fragment . 83)
                  (non-statement-body-fragment-opt . 305) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76) (semicolon . 111)
                  (parsed-macro-call . 75) (colon-colon . 74)
                  (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 110) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9) (lbracket . 67)
                  (parsed-function-call . 66) (constant-fragment . 65)
                  (function-word . 4) (ordinary-name . 63))
                 (267 (rparen . 282)) (266 (rbrace . 283))
                 (265 (rbrace . 284))
                 (102 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 114) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (263 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 265)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (261 (semicolon . 287)
                  (macro-semicolon-fragment . 286)
                  (macro-semicolon-fragment-opt . 285))
                 (97 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 121) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (257 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 289)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (418 (symbol . 408) (property . 407)
                  (property-list . 419))
                 (254 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 264) (dot . 104)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 263) (number . 101)
                  (non-statement-macro-body-fragment . 262)
                  (local-declaration . 261) (constrained-name . 260)
                  (macro-bracketed-fragment . 259) (hash-word . 258)
                  (hash-hash . 98) (lparen . 257)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 256)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 255)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 254) (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (query . 82) (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (macro-simple-fragment . 253) (definition . 252)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (semicolon . 251)
                  (parsed-macro-call . 250) (colon-colon . 74)
                  (symbol . 72) (equal-greater . 73) (operator . 249)
                  (query-equal . 70) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (macro-body-fragment-opt . 291)
                  (macro-body-fragment . 247) (lbracket . 246)
                  (statement . 245) (parsed-function-call . 244)
                  (constant-fragment . 243) (function-word . 4)
                  (ordinary-name . 242))
                 (253 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 264) (dot . 104)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 263) (number . 101)
                  (non-statement-macro-body-fragment . 262)
                  (local-declaration . 261) (constrained-name . 260)
                  (macro-bracketed-fragment . 259) (hash-word . 258)
                  (hash-hash . 98) (lparen . 257)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 256)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 255)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 254) (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (query . 82) (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (macro-simple-fragment . 253) (definition . 252)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (semicolon . 251)
                  (parsed-macro-call . 250) (colon-colon . 74)
                  (symbol . 72) (equal-greater . 73) (operator . 249)
                  (query-equal . 70) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (macro-body-fragment-opt . 292)
                  (macro-body-fragment . 247) (lbracket . 246)
                  (statement . 245) (parsed-function-call . 244)
                  (constant-fragment . 243) (function-word . 4)
                  (ordinary-name . 242))
                 (252 (semicolon . 287)
                  (macro-semicolon-fragment . 286)
                  (macro-semicolon-fragment-opt . 293))
                 (251 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 264) (dot . 104)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 263) (number . 101)
                  (non-statement-macro-body-fragment . 262)
                  (local-declaration . 261) (constrained-name . 260)
                  (macro-bracketed-fragment . 259) (hash-word . 258)
                  (hash-hash . 98) (lparen . 257)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 256)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 255)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 254) (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (query . 82) (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (macro-simple-fragment . 253) (definition . 252)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (semicolon . 251)
                  (parsed-macro-call . 250) (colon-colon . 74)
                  (symbol . 72) (equal-greater . 73) (operator . 249)
                  (query-equal . 70) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (macro-body-fragment-opt . 307)
                  (macro-body-fragment . 247) (lbracket . 246)
                  (statement . 245) (parsed-function-call . 244)
                  (constant-fragment . 243) (function-word . 4)
                  (ordinary-name . 242))
                 (248 (end . 296) (end-clause . 312))
                 (410 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100)
                  (non-statement-basic-fragment . 413) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (basic-fragment-opt . 415) (equal-equal . 96)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (basic-fragment . 414)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 75) (colon-colon . 74)
                  (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 410) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 409)
                  (function-word . 4) (ordinary-name . 63))
                 (84 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (define-word-only . 54) (list-fragment . 103)
                  (define-body-word-only . 53) (lbrace . 102)
                  (number . 101) (constrained-name . 100)
                  (hash-word . 99) (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89)
                  (list-fragment-opt . 241) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 84) (begin-and-define-list-word . 29)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21)
                  (non-statement-list-fragment . 80) (hash-rest . 79)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 75)
                  (colon-colon . 74) (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 71) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 64)
                  (function-word . 4) (ordinary-name . 63))
                 (409 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100)
                  (non-statement-basic-fragment . 417) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (function-macro-call . 95) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-f . 87)
                  (binary-operator-only . 85) (otherwise . 86)
                  (function-word-only . 31) (hash-lparen . 27)
                  (bracketed-fragment . 83) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (parsed-macro-call . 75)
                  (colon-colon . 74) (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 410) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9)
                  (non-statement-basic-fragment-opt . 416)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (function-word . 4)
                  (ordinary-name . 63))
                 (246 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 308)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (408 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100)
                  (non-statement-basic-fragment . 413) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (value . 412) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (basic-fragment . 411)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 75) (colon-colon . 74)
                  (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 410) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 409)
                  (function-word . 4) (ordinary-name . 63))
                 (245 (sequence-literal . 107)
                  (non-statement-macro-body-fragment-opt . 311)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 264) (dot . 104)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 263) (number . 101)
                  (non-statement-macro-body-fragment . 310)
                  (local-declaration . 261) (constrained-name . 260)
                  (macro-bracketed-fragment . 259) (hash-word . 258)
                  (hash-hash . 98) (lparen . 257)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 256) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 255)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-f . 87)
                  (otherwise . 86) (binary-operator-only . 85)
                  (function-word-only . 31) (comma . 254)
                  (definition-macro-call . 30) (define . 28)
                  (hash-lparen . 27) (query . 82) (hash-next . 81)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (hash-rest . 79) (macro-simple-fragment . 253)
                  (definition . 252) (character-literal . 78)
                  (string . 77) (hash-key . 76) (semicolon . 251)
                  (parsed-macro-call . 250) (colon-colon . 74)
                  (equal-greater . 73) (symbol . 72) (operator . 249)
                  (query-equal . 70) (unary-operator-only . 68)
                  (unreserved-name . 9) (lbracket . 246)
                  (parsed-function-call . 244)
                  (constant-fragment . 243) (function-word . 4)
                  (ordinary-name . 242))
                 (407 (comma . 418)) (406 (end-constraint . 420))
                 (401 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59) (constituent . 354)
                  (case-label . 378) (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (intermediate-case . 377)
                  (number . 51) (leaf . 50) (final-case . 376)
                  (local-declaration . 49) (lparen . 374)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (case-body . 402) (binary-operand-no-symbol . 44)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 42) (expressions . 372)
                  (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31) (otherwise . 371)
                  (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (expression . 384) (hash-lbracket . 22)
                  (define-list-word-only . 21) (character-literal . 19)
                  (definition . 20) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (398 (semicolon . 401) (semicolon-opt . 352))
                 (235 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (define-word-only . 54) (list-fragment . 103)
                  (define-body-word-only . 53) (lbrace . 102)
                  (number . 101) (constrained-name . 100)
                  (hash-word . 99) (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89)
                  (list-fragment-opt . 240) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 84) (begin-and-define-list-word . 29)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21)
                  (non-statement-list-fragment . 80) (hash-rest . 79)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 75)
                  (colon-colon . 74) (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 71) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 64)
                  (function-word . 4) (ordinary-name . 63))
                 (397 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59) (case-label . 378)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (intermediate-case . 377)
                  (number . 51) (leaf . 50) (final-case . 376)
                  (lparen . 374) (unary-operator . 46)
                  (parsed-vector-constant . 45) (case-body . 403)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expressions . 372)
                  (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32) (otherwise . 371)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (expression . 370) (macro-case-begin-word . 25)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (71 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (define-word-only . 54) (list-fragment . 103)
                  (define-body-word-only . 53) (lbrace . 102)
                  (number . 101) (constrained-name . 100)
                  (hash-word . 99) (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89)
                  (list-fragment-opt . 313) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 84) (begin-and-define-list-word . 29)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21)
                  (non-statement-list-fragment . 80) (hash-rest . 79)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 75)
                  (colon-colon . 74) (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 71) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 64)
                  (function-word . 4) (ordinary-name . 63))
                 (233 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 316) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (232 (end . 129) (begin-and-define-list-word . 145)
                  (reserved-word . 165) (define-body-word-only . 174)
                  (define-list-word-only . 141) (unreserved-name . 126)
                  (define-macro-body-word-only . 158) (name . 328)
                  (begin-and-define-body-word . 135)
                  (function-and-define-list-word . 163)
                  (otherwise . 148) (local-declaration-word-only . 175)
                  (begin-word-only . 125)
                  (function-and-define-body-word . 157)
                  (core-word . 170) (define . 144)
                  (function-word-only . 147))
                 (67 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 303) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (229 (unreserved-name . 230) (modifier . 229)
                  (modifiers . 231))
                 (391 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expressions . 392)
                  (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (expression . 370)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (64 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (function-macro-call . 95)
                  (non-statement-list-fragment-opt . 315) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-f . 87)
                  (binary-operator-only . 85) (otherwise . 86)
                  (function-word-only . 31) (comma . 84)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (query . 82) (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (non-statement-list-fragment . 314)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (parsed-macro-call . 75)
                  (colon-colon . 74) (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 71) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9) (lbracket . 67)
                  (parsed-function-call . 66) (constant-fragment . 65)
                  (function-word . 4) (ordinary-name . 63))
                 (227 (define-body-word-only . 239)
                  (define-list-word-only . 238)
                  (define-macro-body-word-only . 237)
                  (begin-and-define-body-word . 236)
                  (define-list-word . 235)
                  (function-and-define-body-word . 234)
                  (define-body-word . 233)
                  (define-macro-body-word . 232))
                 (389 (equal-greater . 390)) (388 (rparen . 389))
                 (387 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expressions . 388)
                  (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (expression . 370)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (224 (rparen . 225))
                 (386 (rparen . 343) (comma . 387))
                 (223 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 224) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (384 (comma . 391))
                 (221 (parsed-vector-constant . 45) (hash-lparen . 27)
                  (hash-t . 38) (string . 18) (sequence-literal . 60)
                  (symbol . 211) (character-literal . 19) (hash-f . 32)
                  (parsed-list-constant . 37) (literal . 209)
                  (string-literal . 61) (number . 51) (constant . 222)
                  (hash-lbracket . 22))
                 (58 (semicolon . 62))
                 (383 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59) (constituent . 354)
                  (case-label . 385) (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (local-declaration . 49) (lparen . 374)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 42) (expressions . 372)
                  (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31) (otherwise . 371)
                  (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (expression . 384) (hash-lbracket . 22)
                  (define-list-word-only . 21) (character-literal . 19)
                  (definition . 20) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (57 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 105) (dot . 104)
                  (define-word-only . 54) (list-fragment . 103)
                  (define-body-word-only . 53) (lbrace . 102)
                  (number . 101) (constrained-name . 100)
                  (hash-word . 99) (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (list-fragment-opt . 88)
                  (hash-lbrace . 33) (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 84) (begin-and-define-list-word . 29)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21)
                  (non-statement-list-fragment . 80) (hash-rest . 79)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 75)
                  (colon-colon . 74) (equal-greater . 73) (symbol . 72)
                  (simple-fragment . 71) (query-equal . 70)
                  (operator . 69) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 64)
                  (function-word . 4) (ordinary-name . 63))
                 (219 (rbracket . 220))
                 (381 (semicolon . 383) (semicolon-opt . 352))
                 (380 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59) (case-label . 396)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 374) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expressions . 372)
                  (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31) (otherwise . 371)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (expression . 370) (macro-case-begin-word . 25)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (216 (rparen . 217))
                 (378 (string-literal . 61) (sequence-literal . 60)
                  (body . 351) (unary-and-binary-operator . 59)
                  (constituent . 350) (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (local-declaration . 49) (lparen . 47)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (final-case-body . 382)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (constituents . 381) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (expression . 24)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (definition . 20) (character-literal . 19)
                  (string . 18) (begin-and-define-body-word . 17)
                  (begin-word . 16) (semicolon . 380)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (body-opt . 379)
                  (statement . 7) (parsed-function-call . 6)
                  (function-word . 4) (ordinary-name . 2))
                 (215 (parsed-vector-constant . 45) (hash-lparen . 27)
                  (hash-t . 38) (string . 18) (sequence-literal . 60)
                  (symbol . 211) (character-literal . 19) (hash-f . 32)
                  (parsed-list-constant . 37) (literal . 209)
                  (string-literal . 61) (number . 51) (constant . 216)
                  (hash-lbracket . 22))
                 (52 (dot . 194) (lbracket . 193) (lparen . 192))
                 (377 (string-literal . 61) (sequence-literal . 60)
                  (body . 351) (constituent . 350)
                  (unary-and-binary-operator . 59)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (local-declaration . 49)
                  (intermediate-case-tail . 400) (lparen . 47)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (final-case-body . 399)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (constituents . 398)
                  (macro-case-begin-word . 25) (expression . 24)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (definition . 20)
                  (string . 18) (begin-and-define-body-word . 17)
                  (begin-word . 16) (semicolon . 397)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (body-opt . 379) (begin-word-only . 8)
                  (statement . 7) (parsed-function-call . 6)
                  (function-word . 4) (ordinary-name . 2))
                 (375 (end-constraint . 404)) (212 (rparen . 213))
                 (374 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (expression . 386)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (210 (dot . 215))
                 (47 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (expression . 205)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (372 (equal-greater . 393))
                 (46 (begin-and-define-list-word . 29)
                  (parsed-vector-constant . 45)
                  (parsed-function-call . 6)
                  (macro-case-begin-word-only . 39)
                  (function-macro-call . 42)
                  (define-body-word-only . 53) (variable-name . 34)
                  (define-list-word-only . 21) (statement . 7)
                  (unreserved-name . 9) (hash-lparen . 27)
                  (function-word . 4) (hash-t . 38) (string . 18)
                  (sequence-literal . 60)
                  (begin-and-define-body-word . 17) (ordinary-name . 2)
                  (begin-word . 16) (character-literal . 19)
                  (leaf . 50) (hash-f . 32) (parsed-list-constant . 37)
                  (macro-case-begin-word . 25) (ellipsis . 36)
                  (literal . 11) (define-word-only . 54)
                  (string-literal . 61) (parsed-macro-call . 15)
                  (operand . 206) (begin-word-only . 8)
                  (hash-lbrace . 33) (number . 51) (hash-lbracket . 22)
                  (function-word-only . 31) (lparen . 47))
                 (371 (equal-greater-opt . 395) (equal-greater . 394))
                 (370 (comma . 391)) (207 (comma . 221))
                 (206 (dot . 194) (lbracket . 193) (lparen . 192))
                 (368 (end-constraint . 369)) (205 (rparen . 343))
                 (41 (string-literal . 61) (sequence-literal . 60)
                  (body . 351) (constituent . 350)
                  (unary-and-binary-operator . 59)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (local-declaration . 49) (lparen . 47)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (constituents . 349)
                  (macro-case-begin-word . 25) (expression . 24)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (definition . 20) (character-literal . 19)
                  (string . 18) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 15)
                  (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (body-opt . 348) (begin-word-only . 8)
                  (statement . 7) (parsed-function-call . 6)
                  (function-word . 4) (ordinary-name . 2))
                 (366 (end-constraint . 367))
                 (40 (equal . 152) (equal-equal . 164)
                  (binary-operator . 341) (binary-operator-only . 150)
                  (unary-and-binary-operator . 178))
                 (203 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 204) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (hash-lbracket . 22)
                  (define-list-word-only . 21) (character-literal . 19)
                  (string . 18) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 15)
                  (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (364 (end-constraint . 365))
                 (201 (equal . 152) (equal-equal . 164)
                  (binary-operator . 203) (binary-operator-only . 150)
                  (unary-and-binary-operator . 178))
                 (362 (dot . 194) (lbracket . 193) (lparen . 192))
                 (199 (comma . 338)) (198 (rbracket . 344))
                 (360 (begin-and-define-list-word . 29)
                  (parsed-vector-constant . 45)
                  (parsed-function-call . 6)
                  (macro-case-begin-word-only . 39)
                  (function-macro-call . 42)
                  (define-body-word-only . 53) (variable-name . 34)
                  (define-list-word-only . 21) (statement . 7)
                  (unreserved-name . 9) (hash-lparen . 27)
                  (function-word . 4) (hash-t . 38) (string . 18)
                  (sequence-literal . 60)
                  (begin-and-define-body-word . 17) (ordinary-name . 2)
                  (begin-word . 16) (character-literal . 19)
                  (leaf . 50) (hash-f . 32) (parsed-list-constant . 37)
                  (macro-case-begin-word . 25) (ellipsis . 36)
                  (literal . 11) (define-word-only . 54)
                  (string-literal . 61) (parsed-macro-call . 15)
                  (operand . 362) (begin-word-only . 8)
                  (hash-lbrace . 33) (number . 51) (type . 361)
                  (hash-lbracket . 22) (function-word-only . 31)
                  (lparen . 47))
                 (197 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (expression . 340)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (359 (colon-colon . 360))
                 (33 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 138)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (358 (end-constraint . 363))
                 (194 (define-body-word-only . 53)
                  (variable-name . 195) (define-list-word-only . 21)
                  (unreserved-name . 9) (ordinary-name . 2)
                  (ellipsis . 36) (define-word-only . 54))
                 (356 (end-constraint . 357))
                 (193 (string-literal . 61) (argument . 202)
                  (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (expression-no-symbol-guts . 201) (lparen . 47)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 200)
                  (function-macro-call . 42)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (variable-name . 34) (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (hash-lbracket . 22)
                  (define-list-word-only . 21) (arguments-guts . 199)
                  (character-literal . 19) (string . 18)
                  (arguments . 198) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 15)
                  (symbol . 197) (expression-no-symbol . 196)
                  (literal . 11) (unary-operator-only . 10)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (statement . 7) (parsed-function-call . 6)
                  (function-word . 4) (ordinary-name . 2))
                 (192 (string-literal . 61) (argument . 202)
                  (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (expression-no-symbol-guts . 201) (lparen . 47)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 200)
                  (function-macro-call . 42)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (arguments-opt . 336) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (hash-lbracket . 22)
                  (define-list-word-only . 21) (arguments-guts . 199)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (arguments . 335)
                  (begin-word . 16) (parsed-macro-call . 15)
                  (symbol . 197) (expression-no-symbol . 196)
                  (literal . 11) (unary-operator-only . 10)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (statement . 7) (parsed-function-call . 6)
                  (function-word . 4) (ordinary-name . 2))
                 (191 (rparen . 345))
                 (28 (unreserved-name . 230) (modifier . 229)
                  (modifiers . 228) (modifiers-opt . 227))
                 (353 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59) (constituent . 354)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (local-declaration . 49) (lparen . 47)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (expression . 24) (hash-lbracket . 22)
                  (define-list-word-only . 21) (character-literal . 19)
                  (definition . 20) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (27 (parsed-vector-constant . 45) (hash-lparen . 27)
                  (constants-opt . 212) (hash-t . 38) (string . 18)
                  (symbol . 211) (sequence-literal . 60)
                  (character-literal . 19) (hash-f . 32)
                  (parsed-list-constant . 37) (constants . 210)
                  (literal . 209) (string-literal . 61) (number . 51)
                  (constant . 208) (hash-lbracket . 22)
                  (constants-guts . 207))
                 (26 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 356) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (188 (string . 190))
                 (25 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 264) (dot . 104)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 263) (number . 101)
                  (non-statement-macro-body-fragment . 262)
                  (local-declaration . 261) (constrained-name . 260)
                  (macro-bracketed-fragment . 259) (hash-word . 258)
                  (hash-hash . 98) (lparen . 257)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 256)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 255)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 254) (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (query . 82) (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (macro-simple-fragment . 253) (definition . 252)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (semicolon . 251)
                  (parsed-macro-call . 250) (colon-colon . 74)
                  (symbol . 72) (equal-greater . 73) (operator . 249)
                  (query-equal . 70) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (macro-body-fragment-opt . 248)
                  (macro-body-fragment . 247) (lbracket . 246)
                  (statement . 245) (parsed-function-call . 244)
                  (constant-fragment . 243) (function-word . 4)
                  (ordinary-name . 242))
                 (23 (define-body-word-only . 53)
                  (define-list-word-only . 21) (variable-name . 359)
                  (unreserved-name . 9) (ordinary-name . 2)
                  (variable . 358) (ellipsis . 36)
                  (define-word-only . 54))
                 (349 (semicolon . 353) (semicolon-opt . 352))
                 (348 (end-constraint . 355))
                 (22 (parsed-vector-constant . 45) (hash-lparen . 27)
                  (constants-opt . 219) (hash-t . 38) (string . 18)
                  (symbol . 211) (sequence-literal . 60)
                  (character-literal . 19) (hash-f . 32)
                  (parsed-list-constant . 37) (constants . 218)
                  (literal . 209) (string-literal . 61) (number . 51)
                  (constant . 208) (hash-lbracket . 22)
                  (constants-guts . 207))
                 (182 (name-suffix-opt . 189) (hash-hash . 188)
                  (name-suffix . 187))
                 (181 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (expression . 191)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (18 (string . 18) (string-literal . 214))
                 (180 (reserved-word . 165) (end . 129)
                  (begin-and-define-list-word . 145)
                  (define-body-word-only . 174)
                  (define-list-word-only . 141) (unreserved-name . 126)
                  (define-macro-body-word-only . 158) (name . 186)
                  (string . 185) (begin-and-define-body-word . 135)
                  (symbol . 184) (function-and-define-list-word . 163)
                  (constrained-name . 183) (otherwise . 148)
                  (local-declaration-word-only . 175)
                  (begin-word-only . 125)
                  (function-and-define-body-word . 157)
                  (name-string-or-symbol . 182) (core-word . 170)
                  (define . 144) (function-word-only . 147)
                  (lparen . 181))
                 (179 (query . 180))
                 (16 (sequence-literal . 107)
                  (unary-and-binary-operator . 106) (dot . 104)
                  (escaped-substitution . 105)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 102) (number . 101)
                  (constrained-name . 100) (local-declaration . 116)
                  (non-statement-body-fragment . 115) (hash-word . 99)
                  (hash-hash . 98) (lparen . 97)
                  (parsed-vector-constant . 45)
                  (body-fragment-opt . 294) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 95)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 92)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (definition-macro-call . 30) (comma . 113)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (bracketed-fragment . 83)
                  (macro-case-begin-word . 25) (query . 82)
                  (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (character-literal . 78) (definition . 112)
                  (string . 77) (hash-key . 76)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (semicolon . 111) (colon-colon . 74)
                  (parsed-macro-call . 75) (equal-greater . 73)
                  (symbol . 72) (simple-fragment . 110)
                  (query-equal . 70) (operator . 69)
                  (unary-operator-only . 68) (body-fragment . 109)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (lbracket . 67) (parsed-function-call . 66)
                  (constant-fragment . 65) (statement . 108)
                  (function-word . 4) (ordinary-name . 63))
                 (341 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 342) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (hash-lbracket . 22)
                  (define-list-word-only . 21) (character-literal . 19)
                  (string . 18) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 15)
                  (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (13 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (expression . 364)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (12 (token . 366))
                 (338 (string-literal . 61) (argument . 339)
                  (sequence-literal . 60)
                  (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (expression-no-symbol-guts . 201) (lparen . 47)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 200)
                  (function-macro-call . 42)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (variable-name . 34) (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (macro-case-begin-word . 25) (hash-lbracket . 22)
                  (define-list-word-only . 21) (character-literal . 19)
                  (string . 18) (begin-and-define-body-word . 17)
                  (begin-word . 16) (parsed-macro-call . 15)
                  (symbol . 197) (expression-no-symbol . 196)
                  (literal . 11) (unary-operator-only . 10)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (statement . 7) (parsed-function-call . 6)
                  (function-word . 4) (ordinary-name . 2))
                 (336 (rparen . 337))
                 (173 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 266)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (332 (begin-and-define-list-word . 29)
                  (macro-case-begin-word-only . 39)
                  (define-body-word-only . 53)
                  (define-list-word-only . 21) (unreserved-name . 9)
                  (define-macro-body-word-only . 237)
                  (begin-and-define-body-word . 17)
                  (ordinary-name . 324) (begin-word . 323)
                  (macro-case-begin-word . 322) (define-word-only . 54)
                  (begin-word-only . 8) (name-not-end . 334)
                  (define-macro-body-word . 319))
                 (5 (define-body-word-only . 53) (variable-name . 368)
                  (define-list-word-only . 21) (unreserved-name . 9)
                  (ordinary-name . 2) (ellipsis . 36)
                  (define-word-only . 54))
                 (331 (begin-and-define-list-word . 29)
                  (macro-case-begin-word-only . 39)
                  (define-body-word-only . 53)
                  (define-list-word-only . 21) (unreserved-name . 9)
                  (define-macro-body-word-only . 237)
                  (begin-and-define-body-word . 17)
                  (ordinary-name . 324) (begin-word . 323)
                  (macro-case-begin-word . 322) (define-word-only . 54)
                  (begin-word-only . 8) (name-not-end . 333)
                  (define-macro-body-word . 332))
                 (168 (name-prefix-opt . 179)
                  (unary-and-binary-operator . 178)
                  (escaped-substitution . 177) (dot . 176)
                  (local-declaration-word-only . 175)
                  (define-body-word-only . 174) (lbrace . 173)
                  (number . 172) (constrained-name . 171)
                  (core-word . 170) (hash-word . 169) (lparen . 168)
                  (parsed-vector-constant . 167) (name-prefix . 166)
                  (reserved-word . 165) (equal-equal . 164)
                  (function-and-define-list-word . 163)
                  (template . 162) (separator . 161)
                  (parsed-local-declaration . 160)
                  (compound-template-element . 159)
                  (define-macro-body-word-only . 158) (hash-t . 94)
                  (hash-all-keys . 93)
                  (function-and-define-body-word . 157)
                  (parsed-list-constant . 156) (query-query . 155)
                  (ellipsis . 154) (name . 153) (equal . 152)
                  (hash-lbrace . 151) (hash-f . 87)
                  (binary-operator-only . 150) (template-element . 149)
                  (otherwise . 148) (function-word-only . 147)
                  (comma . 146) (begin-and-define-list-word . 145)
                  (define . 144) (hash-lparen . 143) (hash-next . 81)
                  (hash-lbracket . 142) (define-list-word-only . 141)
                  (binary-operator . 140) (hash-rest . 79)
                  (character-literal . 139) (template-opt . 267)
                  (substitution . 137) (string . 136) (hash-key . 76)
                  (begin-and-define-body-word . 135) (semicolon . 134)
                  (parsed-macro-call . 133) (colon-colon . 132)
                  (equal-greater . 131) (symbol . 130) (end . 129)
                  (query-equal . 128) (unary-operator-only . 127)
                  (unreserved-name . 126) (begin-word-only . 125)
                  (lbracket . 124) (parsed-function-call . 123))
                 (4 (lparen . 223))
                 (3 (string-literal . 61) (sequence-literal . 60)
                  (case-label . 378) (unary-and-binary-operator . 59)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (intermediate-case . 377)
                  (final-case . 376) (number . 51)
                  (case-body-opt . 375) (leaf . 50) (lparen . 374)
                  (unary-operator . 46) (parsed-vector-constant . 45)
                  (case-body . 373) (binary-operand-no-symbol . 44)
                  (function-macro-call . 42) (expressions . 372)
                  (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32) (otherwise . 371)
                  (function-word-only . 31)
                  (begin-and-define-list-word . 29) (hash-lparen . 27)
                  (expression . 370) (macro-case-begin-word . 25)
                  (hash-lbracket . 22) (define-list-word-only . 21)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14) (literal . 11)
                  (unary-operator-only . 10) (unreserved-name . 9)
                  (begin-word-only . 8) (statement . 7)
                  (parsed-function-call . 6) (function-word . 4)
                  (ordinary-name . 2))
                 (329 (end . 331) (macro-definition-tail . 330))
                 (328 (sequence-literal . 107)
                  (unary-and-binary-operator . 106)
                  (escaped-substitution . 264) (dot . 104)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (lbrace . 263) (number . 101)
                  (non-statement-macro-body-fragment . 262)
                  (local-declaration . 261) (constrained-name . 260)
                  (macro-bracketed-fragment . 259) (hash-word . 258)
                  (hash-hash . 98) (lparen . 257)
                  (parsed-vector-constant . 45) (equal-equal . 96)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 256)
                  (macro-case-begin-word-only . 39) (hash-t . 94)
                  (hash-all-keys . 93) (punctuation-fragment . 255)
                  (parsed-list-constant . 37) (query-query . 91)
                  (ellipsis . 90) (equal . 89) (hash-lbrace . 33)
                  (hash-f . 87) (otherwise . 86)
                  (binary-operator-only . 85) (function-word-only . 31)
                  (comma . 254) (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (macro-case-begin-word . 25)
                  (query . 82) (hash-next . 81) (hash-lbracket . 22)
                  (define-list-word-only . 21) (hash-rest . 79)
                  (macro-simple-fragment . 253) (definition . 252)
                  (character-literal . 78) (string . 77)
                  (hash-key . 76) (begin-and-define-body-word . 17)
                  (begin-word . 16) (semicolon . 251)
                  (parsed-macro-call . 250) (colon-colon . 74)
                  (symbol . 72) (equal-greater . 73) (operator . 249)
                  (query-equal . 70) (unary-operator-only . 68)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (macro-body-fragment-opt . 329)
                  (macro-body-fragment . 247) (lbracket . 246)
                  (statement . 245) (parsed-function-call . 244)
                  (constant-fragment . 243) (function-word . 4)
                  (ordinary-name . 242))
                 (1 (symbol . 408) (property . 407)
                  (property-list-opt . 406) (property-list . 405))
                 (0 (string-literal . 61) (sequence-literal . 60)
                  (unary-and-binary-operator . 59) (constituent . 58)
                  (local-declaration-word . 57)
                  (local-declaration-word-only . 56) (eof . 55)
                  (define-word-only . 54) (define-body-word-only . 53)
                  (operand . 52) (number . 51) (leaf . 50)
                  (local-declaration . 49) (top-level-form . 48)
                  (lparen . 47) (unary-operator . 46)
                  (parsed-vector-constant . 45)
                  (binary-operand-no-symbol . 44)
                  (parsed-local-declaration . 43)
                  (function-macro-call . 42) (body-constraint . 41)
                  (expression-guts . 40)
                  (macro-case-begin-word-only . 39) (hash-t . 38)
                  (parsed-list-constant . 37) (ellipsis . 36)
                  (binary-operand . 35) (variable-name . 34)
                  (hash-lbrace . 33) (hash-f . 32)
                  (function-word-only . 31)
                  (definition-macro-call . 30)
                  (begin-and-define-list-word . 29) (define . 28)
                  (hash-lparen . 27) (fragment-constraint . 26)
                  (macro-case-begin-word . 25) (expression . 24)
                  (variable-constraint . 23) (hash-lbracket . 22)
                  (define-list-word-only . 21) (definition . 20)
                  (character-literal . 19) (string . 18)
                  (begin-and-define-body-word . 17) (begin-word . 16)
                  (parsed-macro-call . 15) (symbol . 14)
                  (expression-constraint . 13) (token-constraint . 12)
                  (literal . 11) (unary-operator-only . 10)
                  (unreserved-name . 9) (begin-word-only . 8)
                  (statement . 7) (parsed-function-call . 6)
                  (name-constraint . 5) (function-word . 4)
                  (case-body-constraint . 3) (ordinary-name . 2)
                  (property-list-constraint . 1)))
                :action-function-table
                (vector |parser-ACTION0| |parser-ACTION1|
                        |parser-ACTION2| |parser-ACTION3|
                        |parser-ACTION3| |parser-ACTION3|
                        |parser-ACTION3| |parser-ACTION3|
                        |parser-ACTION3| |parser-ACTION3|
                        |parser-ACTION3| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION43|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION43| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION43|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION71|
                        |parser-ACTION72| |parser-ACTION0|
                        |parser-ACTION74| |parser-ACTION75|
                        |parser-ACTION76| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION82| |parser-ACTION0|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION84|
                        |parser-ACTION84| |parser-ACTION84|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION74| |parser-ACTION84|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION84|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION135|
                        |parser-ACTION136| |parser-ACTION137|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION144| |parser-ACTION0|
                        |parser-ACTION146| |parser-ACTION147|
                        |parser-ACTION148| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION153|
                        |parser-ACTION154| |parser-ACTION2|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION158| |parser-ACTION159|
                        |parser-ACTION160| |parser-ACTION161|
                        |parser-ACTION75| |parser-ACTION76|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION166| |parser-ACTION167|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION3| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION181|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION185|
                        |parser-ACTION186| |parser-ACTION187|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION161| |parser-ACTION75|
                        |parser-ACTION76| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION74| |parser-ACTION0|
                        |parser-ACTION43| |parser-ACTION199|
                        |parser-ACTION153| |parser-ACTION201|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION204| |parser-ACTION153|
                        |parser-ACTION206| |parser-ACTION207|
                        |parser-ACTION0| |parser-ACTION206|
                        |parser-ACTION207| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION214| |parser-ACTION0|
                        |parser-ACTION216| |parser-ACTION217|
                        |parser-ACTION217| |parser-ACTION2|
                        |parser-ACTION220| |parser-ACTION0|
                        |parser-ACTION74| |parser-ACTION0|
                        |parser-ACTION224| |parser-ACTION225|
                        |parser-ACTION226| |parser-ACTION153|
                        |parser-ACTION228| |parser-ACTION229|
                        |parser-ACTION230| |parser-ACTION231|
                        |parser-ACTION0| |parser-ACTION84|
                        |parser-ACTION234| |parser-ACTION230|
                        |parser-ACTION153| |parser-ACTION74|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION250| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION84|
                        |parser-ACTION84| |parser-ACTION84|
                        |parser-ACTION84| |parser-ACTION250|
                        |parser-ACTION74| |parser-ACTION84|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION84|
                        |parser-ACTION0| |parser-ACTION74|
                        |parser-ACTION84| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION135| |parser-ACTION136|
                        |parser-ACTION137| |parser-ACTION0|
                        |parser-ACTION74| |parser-ACTION224|
                        |parser-ACTION0| |parser-ACTION84|
                        |parser-ACTION153| |parser-ACTION287|
                        |parser-ACTION287| |parser-ACTION287|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION135| |parser-ACTION136|
                        |parser-ACTION137| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION43|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION317|
                        |parser-ACTION0| |parser-ACTION319|
                        |parser-ACTION319| |parser-ACTION321|
                        |parser-ACTION0| |parser-ACTION43|
                        |parser-ACTION2| |parser-ACTION0|
                        |parser-ACTION43| |parser-ACTION327|
                        |parser-ACTION154| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION0|
                        |parser-ACTION0| |parser-ACTION154|
                        |parser-ACTION2| |parser-ACTION0|)
                :action-nargs-table
                '#(1 1 2 3 3 3 3 3 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 0 1
                 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2 1 0 3 1 1 1 1
                 1 0 3 1 2 1 1 0 2 1 1 0 2 1 1 0 2 1 1 0 2 2 2 2 2 1 0
                 2 1 0 2 2 1 0 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
                 1 3 3 3 1 1 1 1 1 1 2 1 6 4 5 1 1 0 2 1 3 2 1 1 3 4 4
                 1 3 1 1 1 2 4 1 1 1 1 3 1 1 1 1 1 1 1 1 2 1 1 1 3 3 5
                 1 0 1 3 1 1 1 1 0 1 0 3 1 1 1 1 3 1 1 3 1 1 3 1 1 1 2
                 1 3 3 3 2 2 1 0 1 2 4 3 1 3 2 2 1 1 2 6 2 1 0 1 0 2 1
                 1 0 2 1 1 0 2 1 1 0 2 2 2 2 2 1 0 2 1 0 2 2 1 0 2 1 1
                 1 1 1 1 1 1 1 1 1 3 3 3 1 0 2 1 2 1 3 3 3 1 1 1 1 1 1
                 1 1 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 2 1 2 2 4 1
                 0 2 1 0 2 3 1 1 1 1 3 2 1)
                :action-nt-table
                '#(start top-level-form top-level-form top-level-form
                 top-level-form top-level-form top-level-form
                 top-level-form top-level-form top-level-form
                 top-level-form hash-word hash-word hash-word hash-word
                 hash-word hash-word reserved-word reserved-word
                 reserved-word reserved-word reserved-word
                 reserved-word reserved-word reserved-word
                 reserved-word reserved-word core-word core-word
                 core-word core-word define-word-only define-word-only
                 ordinary-name ordinary-name name name
                 define-macro-body-word name-not-end name-not-end
                 name-not-end name-not-end begin-word-opt
                 begin-word-opt begin-word begin-word begin-word
                 macro-case-begin-word-opt macro-case-begin-word-opt
                 macro-case-begin-word define-body-word-opt
                 define-body-word-opt define-body-word define-body-word
                 define-body-word define-list-word
                 local-declaration-word function-word unary-operator
                 unary-operator binary-operator binary-operator
                 binary-operator binary-operator operator operator
                 operator operator operator source-record body-opt
                 body-opt body constituents-opt constituents-opt
                 constituents constituents constituent constituent
                 constituent property-list-opt property-list-opt
                 property-list property-list property value
                 body-fragment-opt body-fragment-opt body-fragment
                 body-fragment list-fragment-opt list-fragment-opt
                 list-fragment list-fragment basic-fragment-opt
                 basic-fragment-opt basic-fragment basic-fragment
                 non-statement-body-fragment-opt
                 non-statement-body-fragment-opt
                 non-statement-body-fragment
                 non-statement-body-fragment
                 non-statement-body-fragment
                 non-statement-body-fragment
                 non-statement-body-fragment semicolon-fragment-opt
                 semicolon-fragment-opt semicolon-fragment
                 non-statement-list-fragment-opt
                 non-statement-list-fragment-opt
                 non-statement-list-fragment
                 non-statement-list-fragment
                 non-statement-basic-fragment-opt
                 non-statement-basic-fragment-opt
                 non-statement-basic-fragment simple-fragment
                 simple-fragment simple-fragment simple-fragment
                 simple-fragment simple-fragment simple-fragment
                 simple-fragment simple-fragment simple-fragment
                 simple-fragment punctuation-fragment
                 punctuation-fragment punctuation-fragment
                 punctuation-fragment punctuation-fragment
                 punctuation-fragment punctuation-fragment
                 punctuation-fragment punctuation-fragment
                 bracketed-fragment bracketed-fragment
                 bracketed-fragment constant-fragment constant-fragment
                 constant-fragment constant-fragment constant-fragment
                 local-declaration local-declaration definition
                 definition-macro-call definition-macro-call
                 definition-macro-call modifier modifiers-opt
                 modifiers-opt modifiers modifiers definition-tail
                 definition-tail definition-tail operand operand
                 operand operand arguments arguments-guts
                 arguments-guts argument argument argument
                 function-macro-call leaf leaf leaf leaf leaf leaf leaf
                 literal literal literal literal literal literal
                 string-literal string-literal sequence-literal
                 sequence-literal sequence-literal sequence-literal
                 sequence-literal constants-opt constants-opt constants
                 constants-guts constants-guts constant constant
                 arguments-opt arguments-opt semicolon-opt
                 semicolon-opt variable variable variable-name
                 variable-name type expressions expressions expression
                 expression-guts expression-guts expression-no-symbol
                 expression-no-symbol-guts expression-no-symbol-guts
                 binary-operand binary-operand binary-operand-no-symbol
                 binary-operand-no-symbol statement statement statement
                 end-clause end-clause case-body-opt case-body-opt
                 case-body case-body intermediate-case
                 intermediate-case intermediate-case-tail
                 intermediate-case-tail intermediate-case-tail
                 final-case final-case-body final-case-body case-label
                 case-label case-label equal-greater-opt
                 equal-greater-opt macro-body-fragment-opt
                 macro-body-fragment-opt macro-body-fragment
                 macro-body-fragment macro-list-fragment-opt
                 macro-list-fragment-opt macro-list-fragment
                 macro-list-fragment macro-basic-fragment-opt
                 macro-basic-fragment-opt macro-basic-fragment
                 macro-basic-fragment
                 non-statement-macro-body-fragment-opt
                 non-statement-macro-body-fragment-opt
                 non-statement-macro-body-fragment
                 non-statement-macro-body-fragment
                 non-statement-macro-body-fragment
                 non-statement-macro-body-fragment
                 non-statement-macro-body-fragment
                 macro-semicolon-fragment-opt
                 macro-semicolon-fragment-opt macro-semicolon-fragment
                 non-statement-macro-list-fragment-opt
                 non-statement-macro-list-fragment-opt
                 non-statement-macro-list-fragment
                 non-statement-macro-list-fragment
                 non-statement-macro-basic-fragment-opt
                 non-statement-macro-basic-fragment-opt
                 non-statement-macro-basic-fragment
                 macro-simple-fragment macro-simple-fragment
                 macro-simple-fragment macro-simple-fragment
                 macro-simple-fragment macro-simple-fragment
                 macro-simple-fragment macro-simple-fragment
                 macro-simple-fragment macro-simple-fragment
                 macro-simple-fragment macro-bracketed-fragment
                 macro-bracketed-fragment macro-bracketed-fragment
                 template-opt template-opt template template template
                 template compound-template-element
                 compound-template-element compound-template-element
                 template-element template-element template-element
                 template-element template-element template-element
                 template-element template-element template-element
                 template-element template-element template-element
                 template-element template-element template-element
                 template-element template-element template-element
                 template-element template-element template-element
                 template-element separator-opt separator-opt separator
                 separator separator substitution substitution
                 substitution substitution substitution name-prefix-opt
                 name-prefix-opt name-prefix name-suffix-opt
                 name-suffix-opt name-suffix name-string-or-symbol
                 name-string-or-symbol name-string-or-symbol
                 name-string-or-symbol name-string-or-symbol
                 macro-definition-tail macro-definition-tail
                 macro-definition-tail)
                :error-productions '#() :error-action-function-table
                (vector) :error-action-nt-table '#()))) 
';

// eof
