Module:    macos-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Quickdraw.h"; do not edit.

// unnamed enum:
define inline-only constant $invalColReq               = -1;

// unnamed enum:
define inline-only constant $srcCopy                   = 0;
define inline-only constant $srcOr                     = 1;
define inline-only constant $srcXor                    = 2;
define inline-only constant $srcBic                    = 3;
define inline-only constant $notSrcCopy                = 4;
define inline-only constant $notSrcOr                  = 5;
define inline-only constant $notSrcXor                 = 6;
define inline-only constant $notSrcBic                 = 7;
define inline-only constant $patCopy                   = 8;
define inline-only constant $patOr                     = 9;
define inline-only constant $patXor                    = 10;
define inline-only constant $patBic                    = 11;
define inline-only constant $notPatCopy                = 12;
define inline-only constant $notPatOr                  = 13;
define inline-only constant $notPatXor                 = 14;
define inline-only constant $notPatBic                 = 15;
define inline-only constant $grayishTextOr             = 49;
define inline-only constant $hilitetransfermode        = 50;
define inline-only constant $hilite                    = 50;
define inline-only constant $blend                     = 32;
define inline-only constant $addPin                    = 33;
define inline-only constant $addOver                   = 34;
define inline-only constant $subPin                    = 35;
define inline-only constant $addMax                    = 37;
define inline-only constant $adMax                     = 37;
define inline-only constant $subOver                   = 38;
define inline-only constant $adMin                     = 39;
define inline-only constant $ditherCopy                = 64;
define inline-only constant $transparent               = 36;

// unnamed enum:
define inline-only constant $italicBit                 = 1;
define inline-only constant $ulineBit                  = 2;
define inline-only constant $outlineBit                = 3;
define inline-only constant $shadowBit                 = 4;
define inline-only constant $condenseBit               = 5;
define inline-only constant $extendBit                 = 6;

// unnamed enum:
define inline-only constant $normalBit                 = 0;
define inline-only constant $inverseBit                = 1;
define inline-only constant $redBit                    = 4;
define inline-only constant $greenBit                  = 3;
define inline-only constant $blueBit                   = 2;
define inline-only constant $cyanBit                   = 8;
define inline-only constant $magentaBit                = 7;
define inline-only constant $yellowBit                 = 6;
define inline-only constant $blackBit                  = 5;

// unnamed enum:
define inline-only constant $blackColor                = 33;
define inline-only constant $whiteColor                = 30;
define inline-only constant $redColor                  = 205;
define inline-only constant $greenColor                = 341;
define inline-only constant $blueColor                 = 409;
define inline-only constant $cyanColor                 = 273;
define inline-only constant $magentaColor              = 137;
define inline-only constant $yellowColor               = 69;

// unnamed enum:
define inline-only constant $picLParen                 = 0;
define inline-only constant $picRParen                 = 1;
define inline-only constant $clutType                  = 0;
define inline-only constant $fixedType                 = 1;
define inline-only constant $directType                = 2;
define inline-only constant $gdDevType                 = 0;

// unnamed enum:
define inline-only constant $interlacedDevice          = 2;
define inline-only constant $roundedDevice             = 5;
define inline-only constant $hasAuxMenuBar             = 6;
define inline-only constant $burstDevice               = 7;
define inline-only constant $ext32Device               = 8;
define inline-only constant $ramInit                   = 10;
define inline-only constant $mainScreen                = 11;
define inline-only constant $allInit                   = 12;
define inline-only constant $screenDevice              = 13;
define inline-only constant $noDriver                  = 14;
define inline-only constant $screenActive              = 15;
define inline-only constant $hiliteBit                 = 7;
define inline-only constant $pHiliteBit                = 0;
define inline-only constant $defQDColors               = 127;
define inline-only constant $RGBDirect                 = 16;
define inline-only constant $baseAddr32                = 4;

// unnamed enum:
define inline-only constant $sysPatListID              = 0;
define inline-only constant $iBeamCursor               = 1;
define inline-only constant $crossCursor               = 2;
define inline-only constant $plusCursor                = 3;
define inline-only constant $watchCursor               = 4;

// unnamed enum:
define inline-only constant $kQDGrafVerbFrame          = 0;
define inline-only constant $kQDGrafVerbPaint          = 1;
define inline-only constant $kQDGrafVerbErase          = 2;
define inline-only constant $kQDGrafVerbInvert         = 3;
define inline-only constant $kQDGrafVerbFill           = 4;

// unnamed enum:
define inline-only constant $frame                     = $kQDGrafVerbFrame;
define inline-only constant $paint                     = $kQDGrafVerbPaint;
define inline-only constant $erase                     = $kQDGrafVerbErase;
define inline-only constant $invert                    = $kQDGrafVerbInvert;
define inline-only constant $fill                      = $kQDGrafVerbFill;

define inline constant <GrafVerb> = <SInt8>;
define C-pointer-type <GrafVerb*> => <GrafVerb>;
define C-pointer-type <GrafVerb**> => <GrafVerb*>;
// unnamed enum:
define inline-only constant $chunky                    = 0;
define inline-only constant $chunkyPlanar              = 1;
define inline-only constant $planar                    = 2;

define inline constant <PixelType> = <SInt8>;
define C-pointer-type <PixelType*> => <PixelType>;
define C-pointer-type <PixelType**> => <PixelType*>;

define C-struct <Pattern>
  sealed inline-only array slot pat-array :: <UInt8>,
    length: 8,
    address-getter: pat-value;
  pack: 2;
  c-name: "struct Pattern";
end;
define C-pointer-type <Pattern*> => <Pattern>;
define C-pointer-type <Pattern**> => <Pattern*>;
define C-pointer-type <ConstPatternParam> =>  /* const */ <Pattern>;
define C-pointer-type <PatPtr> => <Pattern>;
define C-pointer-type <PatHandle> => <PatPtr>;
define inline constant <QDByte> = <SignedByte>;
define C-pointer-type <QDByte*> => <QDByte>;
define C-pointer-type <QDByte**> => <QDByte*>;
define C-pointer-type <QDPtr> => <QDByte>;
define C-pointer-type <QDHandle> => <QDPtr>;
define inline constant <QDErr> = <C-short>;
define C-pointer-type <QDErr*> => <QDErr>;
define C-pointer-type <QDErr**> => <QDErr*>;
// unnamed enum:
define inline-only constant $singleDevicesBit          = 0;
define inline-only constant $dontMatchSeedsBit         = 1;
define inline-only constant $allDevicesBit             = 2;

// unnamed enum:
define inline-only constant $singleDevices             = ash(1,$singleDevicesBit);
define inline-only constant $dontMatchSeeds            = ash(1,$dontMatchSeedsBit);
define inline-only constant $allDevices                = ash(1,$allDevicesBit);

define inline constant <DeviceLoopFlags> = <C-both-unsigned-long>;
define C-pointer-type <DeviceLoopFlags*> => <DeviceLoopFlags>;
define C-pointer-type <DeviceLoopFlags**> => <DeviceLoopFlags*>;

define C-struct <BitMap>
  sealed inline-only slot baseAddr-value :: <Ptr>;
  sealed inline-only slot rowBytes-value :: <C-short>;
  sealed inline-only slot bounds-value   :: <Rect>;
  pack: 2;
  c-name: "struct BitMap";
end;
define C-pointer-type <BitMap*> => <BitMap>;
define C-pointer-type <BitMap**> => <BitMap*>;
define C-pointer-type <BitMapPtr> => <BitMap>;
define C-pointer-type <BitMapHandle> => <BitMapPtr>;

define C-struct <Cursor>
  sealed inline-only slot data-value     :: <Bits16>;
  sealed inline-only slot mask-value     :: <Bits16>;
  sealed inline-only slot hotSpot-value  :: <Point>;
  pack: 2;
  c-name: "struct Cursor";
end;
define C-pointer-type <Cursor*> => <Cursor>;
define C-pointer-type <Cursor**> => <Cursor*>;
define C-pointer-type <CursPtr> => <Cursor>;
define C-pointer-type <CursHandle> => <CursPtr>;

define C-struct <PenState>
  sealed inline-only slot pnLoc-value    :: <Point>;
  sealed inline-only slot pnSize-value   :: <Point>;
  sealed inline-only slot pnMode-value   :: <C-short>;
  sealed inline-only slot pnPat-value    :: <Pattern>;
  pack: 2;
  c-name: "struct PenState";
end;
define C-pointer-type <PenState*> => <PenState>;
define C-pointer-type <PenState**> => <PenState*>;

define C-struct <MacRegion>
  sealed inline-only slot rgnSize-value  :: <C-unsigned-short>;
  sealed inline-only slot rgnBBox-value  :: <Rect>;
  pack: 2;
  c-name: "struct MacRegion";
end;
define C-pointer-type <MacRegion*> => <MacRegion>;
define C-pointer-type <MacRegion**> => <MacRegion*>;
define inline constant <Region> = <MacRegion>;
define C-pointer-type <Region*> => <Region>;
define C-pointer-type <Region**> => <Region*>;
define C-pointer-type <RgnPtr> => <MacRegion>;
define C-pointer-type <RgnHandle> => <RgnPtr>;

define C-struct <Picture>
  sealed inline-only slot picSize-value  :: <C-short>;
  sealed inline-only slot picFrame-value :: <Rect>;
  pack: 2;
  c-name: "struct Picture";
end;
define C-pointer-type <Picture*> => <Picture>;
define C-pointer-type <Picture**> => <Picture*>;
define C-pointer-type <PicPtr> => <Picture>;
define C-pointer-type <PicHandle> => <PicPtr>;

define C-struct <MacPolygon>
  sealed inline-only slot polySize-value :: <C-short>;
  sealed inline-only slot polyBBox-value :: <Rect>;
  sealed inline-only array slot polyPoints-array :: <Point>,
    length: 1,
    address-getter: polyPoints-value;
  pack: 2;
  c-name: "struct MacPolygon";
end;
define C-pointer-type <MacPolygon*> => <MacPolygon>;
define C-pointer-type <MacPolygon**> => <MacPolygon*>;
define inline constant <Polygon> = <MacPolygon>;
define C-pointer-type <Polygon*> => <Polygon>;
define C-pointer-type <Polygon**> => <Polygon*>;
define C-pointer-type <PolyPtr> => <MacPolygon>;
define C-pointer-type <PolyHandle> => <PolyPtr>;
define constant <QDTextProcPtr> = <C-function-pointer>;
define constant <QDLineProcPtr> = <C-function-pointer>;
define constant <QDRectProcPtr> = <C-function-pointer>;
define constant <QDRRectProcPtr> = <C-function-pointer>;
define constant <QDOvalProcPtr> = <C-function-pointer>;
define constant <QDArcProcPtr> = <C-function-pointer>;
define constant <QDPolyProcPtr> = <C-function-pointer>;
define constant <QDRgnProcPtr> = <C-function-pointer>;
define constant <QDBitsProcPtr> = <C-function-pointer>;
define constant <QDCommentProcPtr> = <C-function-pointer>;
define constant <QDTxMeasProcPtr> = <C-function-pointer>;
define constant <QDGetPicProcPtr> = <C-function-pointer>;
define constant <QDPutPicProcPtr> = <C-function-pointer>;
define constant <QDOpcodeProcPtr> = <C-function-pointer>;
define constant <QDStdGlyphsProcPtr> = <C-function-pointer>;
define constant <QDJShieldCursorProcPtr> = <C-function-pointer>;
define constant <QDTextUPP> = <UniversalProcPtr>;
define constant <QDLineUPP> = <UniversalProcPtr>;
define constant <QDRectUPP> = <UniversalProcPtr>;
define constant <QDRRectUPP> = <UniversalProcPtr>;
define constant <QDOvalUPP> = <UniversalProcPtr>;
define constant <QDArcUPP> = <UniversalProcPtr>;
define constant <QDPolyUPP> = <UniversalProcPtr>;
define constant <QDRgnUPP> = <UniversalProcPtr>;
define constant <QDBitsUPP> = <UniversalProcPtr>;
define constant <QDCommentUPP> = <UniversalProcPtr>;
define constant <QDTxMeasUPP> = <UniversalProcPtr>;
define constant <QDGetPicUPP> = <UniversalProcPtr>;
define constant <QDPutPicUPP> = <UniversalProcPtr>;
define constant <QDOpcodeUPP> = <UniversalProcPtr>;
define constant <QDStdGlyphsUPP> = <UniversalProcPtr>;
define constant <QDJShieldCursorUPP> = <UniversalProcPtr>;

define C-struct <QDProcs>
  sealed inline-only slot textProc-value :: <QDTextUPP>;
  sealed inline-only slot lineProc-value :: <QDLineUPP>;
  sealed inline-only slot rectProc-value :: <QDRectUPP>;
  sealed inline-only slot rRectProc-value :: <QDRRectUPP>;
  sealed inline-only slot ovalProc-value :: <QDOvalUPP>;
  sealed inline-only slot arcProc-value  :: <QDArcUPP>;
  sealed inline-only slot polyProc-value :: <QDPolyUPP>;
  sealed inline-only slot rgnProc-value  :: <QDRgnUPP>;
  sealed inline-only slot bitsProc-value :: <QDBitsUPP>;
  sealed inline-only slot commentProc-value :: <QDCommentUPP>;
  sealed inline-only slot txMeasProc-value :: <QDTxMeasUPP>;
  sealed inline-only slot getPicProc-value :: <QDGetPicUPP>;
  sealed inline-only slot putPicProc-value :: <QDPutPicUPP>;
  pack: 2;
  c-name: "struct QDProcs";
end;
define C-pointer-type <QDProcs*> => <QDProcs>;
define C-pointer-type <QDProcs**> => <QDProcs*>;
define C-pointer-type <QDProcsPtr> => <QDProcs>;
// unnamed enum:
define inline-only constant $uppQDTextProcInfo         = #x00003F80;

// unnamed enum:
define inline-only constant $uppQDLineProcInfo         = #x000000C0;

// unnamed enum:
define inline-only constant $uppQDRectProcInfo         = #x00000340;

// unnamed enum:
define inline-only constant $uppQDRRectProcInfo        = #x00002B40;

// unnamed enum:
define inline-only constant $uppQDOvalProcInfo         = #x00000340;

// unnamed enum:
define inline-only constant $uppQDArcProcInfo          = #x00002B40;

// unnamed enum:
define inline-only constant $uppQDPolyProcInfo         = #x00000340;

// unnamed enum:
define inline-only constant $uppQDRgnProcInfo          = #x00000340;

// unnamed enum:
define inline-only constant $uppQDBitsProcInfo         = #x0000EFC0;

// unnamed enum:
define inline-only constant $uppQDCommentProcInfo      = #x00000E80;

// unnamed enum:
define inline-only constant $uppQDTxMeasProcInfo       = #x0000FFA0;

// unnamed enum:
define inline-only constant $uppQDGetPicProcInfo       = #x000002C0;

// unnamed enum:
define inline-only constant $uppQDPutPicProcInfo       = #x000002C0;

// unnamed enum:
define inline-only constant $uppQDOpcodeProcInfo       = #x00002BC0;

// unnamed enum:
define inline-only constant $uppQDStdGlyphsProcInfo    = #x000003F1;

// unnamed enum:
define inline-only constant $uppQDJShieldCursorProcInfo = #x00002A80;


define C-struct <GrafPort>
  sealed inline-only slot device-value   :: <C-short>;
  sealed inline-only slot portBits-value :: <BitMap>;
  sealed inline-only slot portRect-value :: <Rect>;
  sealed inline-only slot visRgn-value   :: <RgnHandle>;
  sealed inline-only slot clipRgn-value  :: <RgnHandle>;
  sealed inline-only slot bkPat-value    :: <Pattern>;
  sealed inline-only slot fillPat-value  :: <Pattern>;
  sealed inline-only slot pnLoc-value    :: <Point>;
  sealed inline-only slot pnSize-value   :: <Point>;
  sealed inline-only slot pnMode-value   :: <C-short>;
  sealed inline-only slot pnPat-value    :: <Pattern>;
  sealed inline-only slot pnVis-value    :: <C-short>;
  sealed inline-only slot txFont-value   :: <C-short>;
  sealed inline-only slot txFace-value   :: <StyleField>;
  sealed inline-only slot txMode-value   :: <C-short>;
  sealed inline-only slot txSize-value   :: <C-short>;
  sealed inline-only slot spExtra-value  :: <Fixed>;
  sealed inline-only slot fgColor-value  :: <C-both-long>;
  sealed inline-only slot bkColor-value  :: <C-both-long>;
  sealed inline-only slot colrBit-value  :: <C-short>;
  sealed inline-only slot patStretch-value :: <C-short>;
  sealed inline-only slot picSave-value  :: <Handle>;
  sealed inline-only slot rgnSave-value  :: <Handle>;
  sealed inline-only slot polySave-value :: <Handle>;
  sealed inline-only slot grafProcs-value :: <QDProcsPtr>;
  pack: 2;
  c-name: "struct GrafPort";
end;
define C-pointer-type <GrafPort*> => <GrafPort>;
define C-pointer-type <GrafPort**> => <GrafPort*>;
define C-pointer-type <GrafPtr> => <GrafPort>;
define inline constant <WindowPtr> = <GrafPtr>;
define C-pointer-type <WindowPtr*> => <WindowPtr>;
define C-pointer-type <WindowPtr**> => <WindowPtr*>;
define inline constant <DialogPtr> = <WindowPtr>;
define C-pointer-type <DialogPtr*> => <DialogPtr>;
define C-pointer-type <DialogPtr**> => <DialogPtr*>;
define inline constant <WindowRef> = <WindowPtr>;
define C-pointer-type <WindowRef*> => <WindowRef>;
define C-pointer-type <WindowRef**> => <WindowRef*>;
define inline constant <DragConstraint> = <UInt16>;
define C-pointer-type <DragConstraint*> => <DragConstraint>;
define C-pointer-type <DragConstraint**> => <DragConstraint*>;
// unnamed enum:
define inline-only constant $kNoConstraint             = 0;
define inline-only constant $kVerticalConstraint       = 1;
define inline-only constant $kHorizontalConstraint     = 2;

define constant <DragGrayRgnProcPtr> = <C-function-pointer>;

define C-struct <RGBColor>
  sealed inline-only slot red-value      :: <C-unsigned-short>;
  sealed inline-only slot green-value    :: <C-unsigned-short>;
  sealed inline-only slot blue-value     :: <C-unsigned-short>;
  pack: 2;
  c-name: "struct RGBColor";
end;
define C-pointer-type <RGBColor*> => <RGBColor>;
define C-pointer-type <RGBColor**> => <RGBColor*>;
define C-pointer-type <RGBColorPtr> => <RGBColor>;
define C-pointer-type <RGBColorHdl> => <RGBColorPtr>;
define constant <ColorSearchProcPtr> = <C-function-pointer>;
define constant <ColorComplementProcPtr> = <C-function-pointer>;
define constant <DragGrayRgnUPP> = <UniversalProcPtr>;
define constant <ColorSearchUPP> = <UniversalProcPtr>;
define constant <ColorComplementUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppDragGrayRgnProcInfo    = #x00000000;

// unnamed enum:
define inline-only constant $uppColorSearchProcInfo    = #x000003D0;

// unnamed enum:
define inline-only constant $uppColorComplementProcInfo = #x000000D0;


define C-struct <ColorSpec>
  sealed inline-only slot value-value    :: <C-short>;
  sealed inline-only slot rgb-value      :: <RGBColor>;
  pack: 2;
  c-name: "struct ColorSpec";
end;
define C-pointer-type <ColorSpec*> => <ColorSpec>;
define C-pointer-type <ColorSpec**> => <ColorSpec*>;
define C-pointer-type <ColorSpecPtr> => <ColorSpec>;

define C-struct <ColorTable>
  sealed inline-only slot ctSeed-value   :: <C-both-long>;
  sealed inline-only slot ctFlags-value  :: <C-short>;
  sealed inline-only slot ctSize-value   :: <C-short>;
  sealed inline-only slot ctTable-value  :: <CSpecArray>;
  pack: 2;
  c-name: "struct ColorTable";
end;
define C-pointer-type <ColorTable*> => <ColorTable>;
define C-pointer-type <ColorTable**> => <ColorTable*>;
define C-pointer-type <CTabPtr> => <ColorTable>;
define C-pointer-type <CTabHandle> => <CTabPtr>;

define C-struct <xColorSpec>
  sealed inline-only slot value-value    :: <C-short>;
  sealed inline-only slot rgb-value      :: <RGBColor>;
  sealed inline-only slot xalpha-value   :: <C-short>;
  pack: 2;
  c-name: "struct xColorSpec";
end;
define C-pointer-type <xColorSpec*> => <xColorSpec>;
define C-pointer-type <xColorSpec**> => <xColorSpec*>;
define C-pointer-type <xColorSpecPtr> => <xColorSpec>;

define C-struct <MatchRec>
  sealed inline-only slot red-value      :: <C-unsigned-short>;
  sealed inline-only slot green-value    :: <C-unsigned-short>;
  sealed inline-only slot blue-value     :: <C-unsigned-short>;
  sealed inline-only slot matchData-value :: <C-both-long>;
  pack: 2;
  c-name: "struct MatchRec";
end;
define C-pointer-type <MatchRec*> => <MatchRec>;
define C-pointer-type <MatchRec**> => <MatchRec*>;
define inline-only constant $OLDPIXMAPSTRUCT               =    1;
// unnamed enum:
define inline-only constant $k1MonochromePixelFormat   = #x00000001;
define inline-only constant $k2IndexedPixelFormat      = #x00000002;
define inline-only constant $k4IndexedPixelFormat      = #x00000004;
define inline-only constant $k8IndexedPixelFormat      = #x00000008;
define inline-only constant $k16BE555PixelFormat       = #x00000010;
define inline-only constant $k24RGBPixelFormat         = #x00000018;
define inline-only constant $k32ARGBPixelFormat        = #x00000020;
define inline-only constant $k1IndexedGrayPixelFormat  = #x00000021;
define inline-only constant $k2IndexedGrayPixelFormat  = #x00000022;
define inline-only constant $k4IndexedGrayPixelFormat  = #x00000024;
define inline-only constant $k8IndexedGrayPixelFormat  = #x00000028;

// unnamed enum:
define inline-only constant $k16LE555PixelFormat       = FOUR_CHAR_CODE('L', '5', '5', '5');
define inline-only constant $k16BE565PixelFormat       = FOUR_CHAR_CODE('B', '5', '6', '5');
define inline-only constant $k16LE565PixelFormat       = FOUR_CHAR_CODE('L', '5', '6', '5');
define inline-only constant $k24BGRPixelFormat         = FOUR_CHAR_CODE('2', '4', 'B', 'G');
define inline-only constant $k32BGRAPixelFormat        = FOUR_CHAR_CODE('B', 'G', 'R', 'A');
define inline-only constant $k32ABGRPixelFormat        = FOUR_CHAR_CODE('A', 'B', 'G', 'R');
define inline-only constant $k32RGBAPixelFormat        = FOUR_CHAR_CODE('R', 'G', 'B', 'A');
define inline-only constant $kYUVSPixelFormat          = FOUR_CHAR_CODE('y', 'u', 'v', 's');
define inline-only constant $kYUVUPixelFormat          = FOUR_CHAR_CODE('y', 'u', 'v', 'u');
define inline-only constant $kYVU9PixelFormat          = FOUR_CHAR_CODE('Y', 'V', 'U', '9');
define inline-only constant $kYUV411PixelFormat        = FOUR_CHAR_CODE('Y', '4', '1', '1');
define inline-only constant $kYVYU422PixelFormat       = FOUR_CHAR_CODE('Y', 'V', 'Y', 'U');
define inline-only constant $kUYVY422PixelFormat       = FOUR_CHAR_CODE('U', 'Y', 'V', 'Y');
define inline-only constant $kYUV211PixelFormat        = FOUR_CHAR_CODE('Y', '2', '1', '1');


define C-struct <PixMapExtension>
  sealed inline-only slot extSize-value  :: <C-both-long>;
  sealed inline-only slot pmBits-value   :: <C-both-unsigned-long>;
  sealed inline-only slot pmGD-value     :: <C-void*>;
  sealed inline-only slot pmSeed-value   :: <C-both-long>;
  sealed inline-only slot reserved0-value :: <C-both-unsigned-long>;
  sealed inline-only slot reserved1-value :: <C-both-unsigned-long>;
  sealed inline-only slot reserved2-value :: <C-both-unsigned-long>;
  pack: 2;
  c-name: "struct PixMapExtension";
end;
define C-pointer-type <PixMapExtension*> => <PixMapExtension>;
define C-pointer-type <PixMapExtension**> => <PixMapExtension*>;
define C-pointer-type <PixMapExtPtr> => <PixMapExtension>;
define C-pointer-type <PixMapExtHandle> => <PixMapExtPtr>;

define C-struct <PixMap>
  sealed inline-only slot baseAddr-value :: <Ptr>;
  sealed inline-only slot rowBytes-value :: <C-short>;
  sealed inline-only slot bounds-value   :: <Rect>;
  sealed inline-only slot pmVersion-value :: <C-short>;
  sealed inline-only slot packType-value :: <C-short>;
  sealed inline-only slot packSize-value :: <C-both-long>;
  sealed inline-only slot hRes-value     :: <Fixed>;
  sealed inline-only slot vRes-value     :: <Fixed>;
  sealed inline-only slot pixelType-value :: <C-short>;
  sealed inline-only slot pixelSize-value :: <C-short>;
  sealed inline-only slot cmpCount-value :: <C-short>;
  sealed inline-only slot cmpSize-value  :: <C-short>;
  sealed inline-only slot pixelFormat-value :: <OSType>;
  sealed inline-only slot pmTable-value  :: <CTabHandle>;
  sealed inline-only slot pmExt-value    :: <PixMapExtHandle>;
  pack: 2;
  c-name: "struct PixMap";
end;
define C-pointer-type <PixMap*> => <PixMap>;
define C-pointer-type <PixMap**> => <PixMap*>;
define C-pointer-type <PixMapPtr> => <PixMap>;
define C-pointer-type <PixMapHandle> => <PixMapPtr>;

define C-struct <PixPat>
  sealed inline-only slot patType-value  :: <C-short>;
  sealed inline-only slot patMap-value   :: <PixMapHandle>;
  sealed inline-only slot patData-value  :: <Handle>;
  sealed inline-only slot patXData-value :: <Handle>;
  sealed inline-only slot patXValid-value :: <C-short>;
  sealed inline-only slot patXMap-value  :: <Handle>;
  sealed inline-only slot pat1Data-value :: <Pattern>;
  pack: 2;
  c-name: "struct PixPat";
end;
define C-pointer-type <PixPat*> => <PixPat>;
define C-pointer-type <PixPat**> => <PixPat*>;
define C-pointer-type <PixPatPtr> => <PixPat>;
define C-pointer-type <PixPatHandle> => <PixPatPtr>;

define C-struct <CCrsr>
  sealed inline-only slot crsrType-value :: <C-short>;
  sealed inline-only slot crsrMap-value  :: <PixMapHandle>;
  sealed inline-only slot crsrData-value :: <Handle>;
  sealed inline-only slot crsrXData-value :: <Handle>;
  sealed inline-only slot crsrXValid-value :: <C-short>;
  sealed inline-only slot crsrXHandle-value :: <Handle>;
  sealed inline-only slot crsr1Data-value :: <Bits16>;
  sealed inline-only slot crsrMask-value :: <Bits16>;
  sealed inline-only slot crsrHotSpot-value :: <Point>;
  sealed inline-only slot crsrXTable-value :: <C-both-long>;
  sealed inline-only slot crsrID-value   :: <C-both-long>;
  pack: 2;
  c-name: "struct CCrsr";
end;
define C-pointer-type <CCrsr*> => <CCrsr>;
define C-pointer-type <CCrsr**> => <CCrsr*>;
define C-pointer-type <CCrsrPtr> => <CCrsr>;
define C-pointer-type <CCrsrHandle> => <CCrsrPtr>;

define C-struct <GammaTbl>
  sealed inline-only slot gVersion-value :: <C-short>;
  sealed inline-only slot gType-value    :: <C-short>;
  sealed inline-only slot gFormulaSize-value :: <C-short>;
  sealed inline-only slot gChanCnt-value :: <C-short>;
  sealed inline-only slot gDataCnt-value :: <C-short>;
  sealed inline-only slot gDataWidth-value :: <C-short>;
  sealed inline-only array slot gFormulaData-array :: <C-short>,
    length: 1,
    address-getter: gFormulaData-value;
  pack: 2;
  c-name: "struct GammaTbl";
end;
define C-pointer-type <GammaTbl*> => <GammaTbl>;
define C-pointer-type <GammaTbl**> => <GammaTbl*>;
define C-pointer-type <GammaTblPtr> => <GammaTbl>;
define C-pointer-type <GammaTblHandle> => <GammaTblPtr>;

define C-struct <ITab>
  sealed inline-only slot iTabSeed-value :: <C-both-long>;
  sealed inline-only slot iTabRes-value  :: <C-short>;
  sealed inline-only array slot iTTable-array :: <Byte>,
    length: 1,
    address-getter: iTTable-value;
  pack: 2;
  c-name: "struct ITab";
end;
define C-pointer-type <ITab*> => <ITab>;
define C-pointer-type <ITab**> => <ITab*>;
define C-pointer-type <ITabPtr> => <ITab>;
define C-pointer-type <ITabHandle> => <ITabPtr>;

define C-struct <SProcRec>
  sealed inline-only slot nxtSrch-value  :: <Handle>;
  sealed inline-only slot srchProc-value :: <ColorSearchUPP>;
  pack: 2;
  c-name: "struct SProcRec";
end;
define C-pointer-type <SProcRec*> => <SProcRec>;
define C-pointer-type <SProcRec**> => <SProcRec*>;
define C-pointer-type <SProcPtr> => <SProcRec>;
define C-pointer-type <SProcHndl> => <SProcPtr>;

define C-struct <CProcRec>
  sealed inline-only slot nxtComp-value  :: <Handle>;
  sealed inline-only slot compProc-value :: <ColorComplementUPP>;
  pack: 2;
  c-name: "struct CProcRec";
end;
define C-pointer-type <CProcRec*> => <CProcRec>;
define C-pointer-type <CProcRec**> => <CProcRec*>;
define C-pointer-type <CProcPtr> => <CProcRec>;
define C-pointer-type <CProcHndl> => <CProcPtr>;
define inline-only constant $OLDGDEVICESTRUCT              =    1;

define C-struct <GDevice>
  sealed inline-only slot gdRefNum-value :: <C-short>;
  sealed inline-only slot gdID-value     :: <C-short>;
  sealed inline-only slot gdType-value   :: <C-short>;
  sealed inline-only slot gdITable-value :: <ITabHandle>;
  sealed inline-only slot gdResPref-value :: <C-short>;
  sealed inline-only slot gdSearchProc-value :: <SProcHndl>;
  sealed inline-only slot gdCompProc-value :: <CProcHndl>;
  sealed inline-only slot gdFlags-value  :: <C-short>;
  sealed inline-only slot gdPMap-value   :: <PixMapHandle>;
  sealed inline-only slot gdRefCon-value :: <C-both-long>;
  sealed inline-only slot gdNextGD-value :: <Handle>;
  sealed inline-only slot gdRect-value   :: <Rect>;
  sealed inline-only slot gdMode-value   :: <C-both-long>;
  sealed inline-only slot gdCCBytes-value :: <C-short>;
  sealed inline-only slot gdCCDepth-value :: <C-short>;
  sealed inline-only slot gdCCXData-value :: <Handle>;
  sealed inline-only slot gdCCXMask-value :: <Handle>;
  sealed inline-only slot gdExt-value    :: <Handle>;
  pack: 2;
  c-name: "struct GDevice";
end;
define C-pointer-type <GDevice*> => <GDevice>;
define C-pointer-type <GDevice**> => <GDevice*>;
define C-pointer-type <GDPtr> => <GDevice>;
define C-pointer-type <GDHandle> => <GDPtr>;

define C-struct <GrafVars>
  sealed inline-only slot rgbOpColor-value :: <RGBColor>;
  sealed inline-only slot rgbHiliteColor-value :: <RGBColor>;
  sealed inline-only slot pmFgColor-value :: <Handle>;
  sealed inline-only slot pmFgIndex-value :: <C-short>;
  sealed inline-only slot pmBkColor-value :: <Handle>;
  sealed inline-only slot pmBkIndex-value :: <C-short>;
  sealed inline-only slot pmFlags-value  :: <C-short>;
  pack: 2;
  c-name: "struct GrafVars";
end;
define C-pointer-type <GrafVars*> => <GrafVars>;
define C-pointer-type <GrafVars**> => <GrafVars*>;
define C-pointer-type <GVarPtr> => <GrafVars>;
define C-pointer-type <GVarHandle> => <GVarPtr>;

define C-struct <CQDProcs>
  sealed inline-only slot textProc-value :: <QDTextUPP>;
  sealed inline-only slot lineProc-value :: <QDLineUPP>;
  sealed inline-only slot rectProc-value :: <QDRectUPP>;
  sealed inline-only slot rRectProc-value :: <QDRRectUPP>;
  sealed inline-only slot ovalProc-value :: <QDOvalUPP>;
  sealed inline-only slot arcProc-value  :: <QDArcUPP>;
  sealed inline-only slot polyProc-value :: <QDPolyUPP>;
  sealed inline-only slot rgnProc-value  :: <QDRgnUPP>;
  sealed inline-only slot bitsProc-value :: <QDBitsUPP>;
  sealed inline-only slot commentProc-value :: <QDCommentUPP>;
  sealed inline-only slot txMeasProc-value :: <QDTxMeasUPP>;
  sealed inline-only slot getPicProc-value :: <QDGetPicUPP>;
  sealed inline-only slot putPicProc-value :: <QDPutPicUPP>;
  sealed inline-only slot opcodeProc-value :: <QDOpcodeUPP>;
  sealed inline-only slot newProc1-value :: <UniversalProcPtr>;
  sealed inline-only slot glyphsProc-value :: <QDStdGlyphsUPP>;
  sealed inline-only slot newProc3-value :: <UniversalProcPtr>;
  sealed inline-only slot newProc4-value :: <UniversalProcPtr>;
  sealed inline-only slot newProc5-value :: <UniversalProcPtr>;
  sealed inline-only slot newProc6-value :: <UniversalProcPtr>;
  pack: 2;
  c-name: "struct CQDProcs";
end;
define C-pointer-type <CQDProcs*> => <CQDProcs>;
define C-pointer-type <CQDProcs**> => <CQDProcs*>;
define C-pointer-type <CQDProcsPtr> => <CQDProcs>;

define C-struct <CGrafPort>
  sealed inline-only slot device-value   :: <C-short>;
  sealed inline-only slot portPixMap-value :: <PixMapHandle>;
  sealed inline-only slot portVersion-value :: <C-short>;
  sealed inline-only slot grafVars-value :: <Handle>;
  sealed inline-only slot chExtra-value  :: <C-short>;
  sealed inline-only slot pnLocHFrac-value :: <C-short>;
  sealed inline-only slot portRect-value :: <Rect>;
  sealed inline-only slot visRgn-value   :: <RgnHandle>;
  sealed inline-only slot clipRgn-value  :: <RgnHandle>;
  sealed inline-only slot bkPixPat-value :: <PixPatHandle>;
  sealed inline-only slot rgbFgColor-value :: <RGBColor>;
  sealed inline-only slot rgbBkColor-value :: <RGBColor>;
  sealed inline-only slot pnLoc-value    :: <Point>;
  sealed inline-only slot pnSize-value   :: <Point>;
  sealed inline-only slot pnMode-value   :: <C-short>;
  sealed inline-only slot pnPixPat-value :: <PixPatHandle>;
  sealed inline-only slot fillPixPat-value :: <PixPatHandle>;
  sealed inline-only slot pnVis-value    :: <C-short>;
  sealed inline-only slot txFont-value   :: <C-short>;
  sealed inline-only slot txFace-value   :: <StyleField>;
  sealed inline-only slot txMode-value   :: <C-short>;
  sealed inline-only slot txSize-value   :: <C-short>;
  sealed inline-only slot spExtra-value  :: <Fixed>;
  sealed inline-only slot fgColor-value  :: <C-both-long>;
  sealed inline-only slot bkColor-value  :: <C-both-long>;
  sealed inline-only slot colrBit-value  :: <C-short>;
  sealed inline-only slot patStretch-value :: <C-short>;
  sealed inline-only slot picSave-value  :: <Handle>;
  sealed inline-only slot rgnSave-value  :: <Handle>;
  sealed inline-only slot polySave-value :: <Handle>;
  sealed inline-only slot grafProcs-value :: <CQDProcsPtr>;
  pack: 2;
  c-name: "struct CGrafPort";
end;
define C-pointer-type <CGrafPort*> => <CGrafPort>;
define C-pointer-type <CGrafPort**> => <CGrafPort*>;
define C-pointer-type <CGrafPtr> => <CGrafPort>;
define inline constant <CWindowPtr> = <CGrafPtr>;
define C-pointer-type <CWindowPtr*> => <CWindowPtr>;
define C-pointer-type <CWindowPtr**> => <CWindowPtr*>;

define C-struct <ReqListRec>
  sealed inline-only slot reqLSize-value :: <C-short>;
  sealed inline-only array slot reqLData-array :: <C-short>,
    length: 1,
    address-getter: reqLData-value;
  pack: 2;
  c-name: "struct ReqListRec";
end;
define C-pointer-type <ReqListRec*> => <ReqListRec>;
define C-pointer-type <ReqListRec**> => <ReqListRec*>;

define C-struct <OpenCPicParams>
  sealed inline-only slot srcRect-value  :: <Rect>;
  sealed inline-only slot hRes-value     :: <Fixed>;
  sealed inline-only slot vRes-value     :: <Fixed>;
  sealed inline-only slot version-value  :: <C-short>;
  sealed inline-only slot reserved1-value :: <C-short>;
  sealed inline-only slot reserved2-value :: <C-both-long>;
  pack: 2;
  c-name: "struct OpenCPicParams";
end;
define C-pointer-type <OpenCPicParams*> => <OpenCPicParams>;
define C-pointer-type <OpenCPicParams**> => <OpenCPicParams*>;
// unnamed enum:
define inline-only constant $kCursorImageMajorVersion  = #x0001;
define inline-only constant $kCursorImageMinorVersion  = #x0000;


define C-struct <CursorImageRec>
  sealed inline-only slot majorVersion-value :: <UInt16>;
  sealed inline-only slot minorVersion-value :: <UInt16>;
  sealed inline-only slot cursorPixMap-value :: <PixMapHandle>;
  sealed inline-only slot cursorBitMask-value :: <BitMapHandle>;
  pack: 2;
  c-name: "struct CursorImageRec";
end;
define C-pointer-type <CursorImageRec*> => <CursorImageRec>;
define C-pointer-type <CursorImageRec**> => <CursorImageRec*>;
define C-pointer-type <CursorImagePtr> => <CursorImageRec>;
define constant <DeviceLoopDrawingProcPtr> = <C-function-pointer>;
define constant <DeviceLoopDrawingUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppDeviceLoopDrawingProcInfo = #x00003E80;


define C-struct <QDGlobals>
  sealed inline-only array slot privates-array :: <C-char>,
    length: 76,
    address-getter: privates-value;
  sealed inline-only slot randSeed-value :: <C-both-long>;
  sealed inline-only slot screenBits-value :: <BitMap>;
  sealed inline-only slot arrow-value    :: <Cursor>;
  sealed inline-only slot dkGray-value   :: <Pattern>;
  sealed inline-only slot ltGray-value   :: <Pattern>;
  sealed inline-only slot gray-value     :: <Pattern>;
  sealed inline-only slot black-value    :: <Pattern>;
  sealed inline-only slot white-value    :: <Pattern>;
  sealed inline-only slot thePort-value  :: <GrafPtr>;
  pack: 2;
  c-name: "struct QDGlobals";
end;
define C-pointer-type <QDGlobals*> => <QDGlobals>;
define C-pointer-type <QDGlobals**> => <QDGlobals*>;
define C-pointer-type <QDGlobalsPtr> => <QDGlobals>;
define C-pointer-type <QDGlobalsHdl> => <QDGlobalsPtr>;

define inline-only C-function InitGraf
  parameter globalPtr  :: <C-void*>;
  c-name: "InitGraf";
  c-modifiers: "pascal";
end;

define inline-only C-function OpenPort
  parameter port       :: <GrafPtr>;
  c-name: "OpenPort";
  c-modifiers: "pascal";
end;

define inline-only C-function InitPort
  parameter port       :: <GrafPtr>;
  c-name: "InitPort";
  c-modifiers: "pascal";
end;

define inline-only C-function ClosePort
  parameter port       :: <GrafPtr>;
  c-name: "ClosePort";
  c-modifiers: "pascal";
end;

define inline-only C-function MacSetPort
  parameter port       :: <GrafPtr>;
  c-name: "MacSetPort";
  c-modifiers: "pascal";
end;

define inline-only C-function GetPort
  parameter port       :: <GrafPtr*>;
  c-name: "GetPort";
  c-modifiers: "pascal";
end;

define inline-only C-function GrafDevice
  parameter device     :: <C-short>;
  c-name: "GrafDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function SetPortBits
  parameter bm         ::  /* const */ <BitMap*>;
  c-name: "SetPortBits";
  c-modifiers: "pascal";
end;

define inline-only C-function PortSize
  parameter width      :: <C-short>;
  parameter height     :: <C-short>;
  c-name: "PortSize";
  c-modifiers: "pascal";
end;

define inline-only C-function MovePortTo
  parameter leftGlobal :: <C-short>;
  parameter topGlobal  :: <C-short>;
  c-name: "MovePortTo";
  c-modifiers: "pascal";
end;

define inline-only C-function SetOrigin
  parameter h          :: <C-short>;
  parameter v          :: <C-short>;
  c-name: "SetOrigin";
  c-modifiers: "pascal";
end;

define inline-only C-function SetClip
  parameter rgn        :: <RgnHandle>;
  c-name: "SetClip";
  c-modifiers: "pascal";
end;

define inline-only C-function GetClip
  parameter rgn        :: <RgnHandle>;
  c-name: "GetClip";
  c-modifiers: "pascal";
end;

define inline-only C-function ClipRect
  parameter r          ::  /* const */ <Rect*>;
  c-name: "ClipRect";
  c-modifiers: "pascal";
end;

define inline-only C-function BackPat
  parameter pat        ::  /* const */ <Pattern*>;
  c-name: "BackPat";
  c-modifiers: "pascal";
end;

define inline-only C-function InitCursor
  c-name: "InitCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function MacSetCursor
  parameter crsr       ::  /* const */ <Cursor*>;
  c-name: "MacSetCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function HideCursor
  c-name: "HideCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function MacShowCursor
  c-name: "MacShowCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function ObscureCursor
  c-name: "ObscureCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function HidePen
  c-name: "HidePen";
  c-modifiers: "pascal";
end;

define inline-only C-function ShowPen
  c-name: "ShowPen";
  c-modifiers: "pascal";
end;

define inline-only C-function GetPen
  parameter pt         :: <Point*>;
  c-name: "GetPen";
  c-modifiers: "pascal";
end;

define inline-only C-function GetPenState
  parameter pnState    :: <PenState*>;
  c-name: "GetPenState";
  c-modifiers: "pascal";
end;

define inline-only C-function SetPenState
  parameter pnState    ::  /* const */ <PenState*>;
  c-name: "SetPenState";
  c-modifiers: "pascal";
end;

define inline-only C-function PenSize
  parameter width      :: <C-short>;
  parameter height     :: <C-short>;
  c-name: "PenSize";
  c-modifiers: "pascal";
end;

define inline-only C-function PenMode
  parameter mode       :: <C-short>;
  c-name: "PenMode";
  c-modifiers: "pascal";
end;

define inline-only C-function PenPat
  parameter pat        ::  /* const */ <Pattern*>;
  c-name: "PenPat";
  c-modifiers: "pascal";
end;

define inline-only C-function PenNormal
  c-name: "PenNormal";
  c-modifiers: "pascal";
end;

define inline-only C-function MoveTo
  parameter h          :: <C-short>;
  parameter v          :: <C-short>;
  c-name: "MoveTo";
  c-modifiers: "pascal";
end;

define inline-only C-function Move
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  c-name: "Move";
  c-modifiers: "pascal";
end;

define inline-only C-function MacLineTo
  parameter h          :: <C-short>;
  parameter v          :: <C-short>;
  c-name: "MacLineTo";
  c-modifiers: "pascal";
end;

define inline-only C-function Line
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  c-name: "Line";
  c-modifiers: "pascal";
end;

define inline-only C-function ForeColor
  parameter color      :: <C-both-long>;
  c-name: "ForeColor";
  c-modifiers: "pascal";
end;

define inline-only C-function BackColor
  parameter color      :: <C-both-long>;
  c-name: "BackColor";
  c-modifiers: "pascal";
end;

define inline-only C-function ColorBit
  parameter whichBit   :: <C-short>;
  c-name: "ColorBit";
  c-modifiers: "pascal";
end;

define inline-only C-function MacSetRect
  parameter r          :: <Rect*>;
  parameter left       :: <C-short>;
  parameter top        :: <C-short>;
  parameter right      :: <C-short>;
  parameter bottom     :: <C-short>;
  c-name: "MacSetRect";
  c-modifiers: "pascal";
end;

define inline-only C-function MacOffsetRect
  parameter r          :: <Rect*>;
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  c-name: "MacOffsetRect";
  c-modifiers: "pascal";
end;

define inline-only C-function MacInsetRect
  parameter r          :: <Rect*>;
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  c-name: "MacInsetRect";
  c-modifiers: "pascal";
end;

define inline-only C-function SectRect
  parameter src1       ::  /* const */ <Rect*>;
  parameter src2       ::  /* const */ <Rect*>;
  parameter dstRect    :: <Rect*>;
  result value :: <MacBoolean>;
  c-name: "SectRect";
  c-modifiers: "pascal";
end;

define inline-only C-function MacUnionRect
  parameter src1       ::  /* const */ <Rect*>;
  parameter src2       ::  /* const */ <Rect*>;
  parameter dstRect    :: <Rect*>;
  c-name: "MacUnionRect";
  c-modifiers: "pascal";
end;

define inline-only C-function MacEqualRect
  parameter rect1      ::  /* const */ <Rect*>;
  parameter rect2      ::  /* const */ <Rect*>;
  result value :: <MacBoolean>;
  c-name: "MacEqualRect";
  c-modifiers: "pascal";
end;

define inline-only C-function EmptyRect
  parameter r          ::  /* const */ <Rect*>;
  result value :: <MacBoolean>;
  c-name: "EmptyRect";
  c-modifiers: "pascal";
end;

define inline-only C-function MacFrameRect
  parameter r          ::  /* const */ <Rect*>;
  c-name: "MacFrameRect";
  c-modifiers: "pascal";
end;

define inline-only C-function PaintRect
  parameter r          ::  /* const */ <Rect*>;
  c-name: "PaintRect";
  c-modifiers: "pascal";
end;

define inline-only C-function EraseRect
  parameter r          ::  /* const */ <Rect*>;
  c-name: "EraseRect";
  c-modifiers: "pascal";
end;

define inline-only C-function MacInvertRect
  parameter r          ::  /* const */ <Rect*>;
  c-name: "MacInvertRect";
  c-modifiers: "pascal";
end;

define inline-only C-function MacFillRect
  parameter r          ::  /* const */ <Rect*>;
  parameter pat        ::  /* const */ <Pattern*>;
  c-name: "MacFillRect";
  c-modifiers: "pascal";
end;

define inline-only C-function FrameOval
  parameter r          ::  /* const */ <Rect*>;
  c-name: "FrameOval";
  c-modifiers: "pascal";
end;

define inline-only C-function PaintOval
  parameter r          ::  /* const */ <Rect*>;
  c-name: "PaintOval";
  c-modifiers: "pascal";
end;

define inline-only C-function EraseOval
  parameter r          ::  /* const */ <Rect*>;
  c-name: "EraseOval";
  c-modifiers: "pascal";
end;

define inline-only C-function InvertOval
  parameter r          ::  /* const */ <Rect*>;
  c-name: "InvertOval";
  c-modifiers: "pascal";
end;

define inline-only C-function FillOval
  parameter r          ::  /* const */ <Rect*>;
  parameter pat        ::  /* const */ <Pattern*>;
  c-name: "FillOval";
  c-modifiers: "pascal";
end;

define inline-only C-function FrameRoundRect
  parameter r          ::  /* const */ <Rect*>;
  parameter ovalWidth  :: <C-short>;
  parameter ovalHeight :: <C-short>;
  c-name: "FrameRoundRect";
  c-modifiers: "pascal";
end;

define inline-only C-function PaintRoundRect
  parameter r          ::  /* const */ <Rect*>;
  parameter ovalWidth  :: <C-short>;
  parameter ovalHeight :: <C-short>;
  c-name: "PaintRoundRect";
  c-modifiers: "pascal";
end;

define inline-only C-function EraseRoundRect
  parameter r          ::  /* const */ <Rect*>;
  parameter ovalWidth  :: <C-short>;
  parameter ovalHeight :: <C-short>;
  c-name: "EraseRoundRect";
  c-modifiers: "pascal";
end;

define inline-only C-function InvertRoundRect
  parameter r          ::  /* const */ <Rect*>;
  parameter ovalWidth  :: <C-short>;
  parameter ovalHeight :: <C-short>;
  c-name: "InvertRoundRect";
  c-modifiers: "pascal";
end;

define inline-only C-function FillRoundRect
  parameter r          ::  /* const */ <Rect*>;
  parameter ovalWidth  :: <C-short>;
  parameter ovalHeight :: <C-short>;
  parameter pat        ::  /* const */ <Pattern*>;
  c-name: "FillRoundRect";
  c-modifiers: "pascal";
end;

define inline-only C-function FrameArc
  parameter r          ::  /* const */ <Rect*>;
  parameter startAngle :: <C-short>;
  parameter arcAngle   :: <C-short>;
  c-name: "FrameArc";
  c-modifiers: "pascal";
end;

define inline-only C-function PaintArc
  parameter r          ::  /* const */ <Rect*>;
  parameter startAngle :: <C-short>;
  parameter arcAngle   :: <C-short>;
  c-name: "PaintArc";
  c-modifiers: "pascal";
end;

define inline-only C-function EraseArc
  parameter r          ::  /* const */ <Rect*>;
  parameter startAngle :: <C-short>;
  parameter arcAngle   :: <C-short>;
  c-name: "EraseArc";
  c-modifiers: "pascal";
end;

define inline-only C-function InvertArc
  parameter r          ::  /* const */ <Rect*>;
  parameter startAngle :: <C-short>;
  parameter arcAngle   :: <C-short>;
  c-name: "InvertArc";
  c-modifiers: "pascal";
end;

define inline-only C-function FillArc
  parameter r          ::  /* const */ <Rect*>;
  parameter startAngle :: <C-short>;
  parameter arcAngle   :: <C-short>;
  parameter pat        ::  /* const */ <Pattern*>;
  c-name: "FillArc";
  c-modifiers: "pascal";
end;

define inline-only C-function NewRgn
  result value :: <RgnHandle>;
  c-name: "NewRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function OpenRgn
  c-name: "OpenRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function CloseRgn
  parameter dstRgn     :: <RgnHandle>;
  c-name: "CloseRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function BitMapToRegion
  parameter region     :: <RgnHandle>;
  parameter bMap       ::  /* const */ <BitMap*>;
  result value :: <OSErr>;
  c-name: "BitMapToRegion";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeRgn
  parameter rgn        :: <RgnHandle>;
  c-name: "DisposeRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacCopyRgn
  parameter srcRgn     :: <RgnHandle>;
  parameter dstRgn     :: <RgnHandle>;
  c-name: "MacCopyRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function SetEmptyRgn
  parameter rgn        :: <RgnHandle>;
  c-name: "SetEmptyRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacSetRectRgn
  parameter rgn        :: <RgnHandle>;
  parameter left       :: <C-short>;
  parameter top        :: <C-short>;
  parameter right      :: <C-short>;
  parameter bottom     :: <C-short>;
  c-name: "MacSetRectRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function RectRgn
  parameter rgn        :: <RgnHandle>;
  parameter r          ::  /* const */ <Rect*>;
  c-name: "RectRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacOffsetRgn
  parameter rgn        :: <RgnHandle>;
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  c-name: "MacOffsetRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function InsetRgn
  parameter rgn        :: <RgnHandle>;
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  c-name: "InsetRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function SectRgn
  parameter srcRgnA    :: <RgnHandle>;
  parameter srcRgnB    :: <RgnHandle>;
  parameter dstRgn     :: <RgnHandle>;
  c-name: "SectRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacUnionRgn
  parameter srcRgnA    :: <RgnHandle>;
  parameter srcRgnB    :: <RgnHandle>;
  parameter dstRgn     :: <RgnHandle>;
  c-name: "MacUnionRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function DiffRgn
  parameter srcRgnA    :: <RgnHandle>;
  parameter srcRgnB    :: <RgnHandle>;
  parameter dstRgn     :: <RgnHandle>;
  c-name: "DiffRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacXorRgn
  parameter srcRgnA    :: <RgnHandle>;
  parameter srcRgnB    :: <RgnHandle>;
  parameter dstRgn     :: <RgnHandle>;
  c-name: "MacXorRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function RectInRgn
  parameter r          ::  /* const */ <Rect*>;
  parameter rgn        :: <RgnHandle>;
  result value :: <MacBoolean>;
  c-name: "RectInRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacEqualRgn
  parameter rgnA       :: <RgnHandle>;
  parameter rgnB       :: <RgnHandle>;
  result value :: <MacBoolean>;
  c-name: "MacEqualRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function EmptyRgn
  parameter rgn        :: <RgnHandle>;
  result value :: <MacBoolean>;
  c-name: "EmptyRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacFrameRgn
  parameter rgn        :: <RgnHandle>;
  c-name: "MacFrameRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacPaintRgn
  parameter rgn        :: <RgnHandle>;
  c-name: "MacPaintRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function EraseRgn
  parameter rgn        :: <RgnHandle>;
  c-name: "EraseRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacInvertRgn
  parameter rgn        :: <RgnHandle>;
  c-name: "MacInvertRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MacFillRgn
  parameter rgn        :: <RgnHandle>;
  parameter pat        ::  /* const */ <Pattern*>;
  c-name: "MacFillRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function ScrollRect
  parameter r          ::  /* const */ <Rect*>;
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  parameter updateRgn  :: <RgnHandle>;
  c-name: "ScrollRect";
  c-modifiers: "pascal";
end;

define inline-only C-function CopyBits
  parameter srcBits    ::  /* const */ <BitMap*>;
  parameter dstBits    ::  /* const */ <BitMap*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  parameter mode       :: <C-short>;
  parameter maskRgn    :: <RgnHandle>;
  c-name: "CopyBits";
  c-modifiers: "pascal";
end;

define inline-only C-function SeedFill
  parameter srcPtr     ::  /* const */ <C-void*>;
  parameter dstPtr     :: <C-void*>;
  parameter srcRow     :: <C-short>;
  parameter dstRow     :: <C-short>;
  parameter height     :: <C-short>;
  parameter words      :: <C-short>;
  parameter seedH      :: <C-short>;
  parameter seedV      :: <C-short>;
  c-name: "SeedFill";
  c-modifiers: "pascal";
end;

define inline-only C-function CalcMask
  parameter srcPtr     ::  /* const */ <C-void*>;
  parameter dstPtr     :: <C-void*>;
  parameter srcRow     :: <C-short>;
  parameter dstRow     :: <C-short>;
  parameter height     :: <C-short>;
  parameter words      :: <C-short>;
  c-name: "CalcMask";
  c-modifiers: "pascal";
end;

define inline-only C-function CopyMask
  parameter srcBits    ::  /* const */ <BitMap*>;
  parameter maskBits   ::  /* const */ <BitMap*>;
  parameter dstBits    ::  /* const */ <BitMap*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter maskRect   ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  c-name: "CopyMask";
  c-modifiers: "pascal";
end;

define inline-only C-function OpenPicture
  parameter picFrame   ::  /* const */ <Rect*>;
  result value :: <PicHandle>;
  c-name: "OpenPicture";
  c-modifiers: "pascal";
end;

define inline-only C-function PicComment
  parameter kind       :: <C-short>;
  parameter dataSize   :: <C-short>;
  parameter dataHandle :: <Handle>;
  c-name: "PicComment";
  c-modifiers: "pascal";
end;

define inline-only C-function ClosePicture
  c-name: "ClosePicture";
  c-modifiers: "pascal";
end;

define inline-only C-function DrawPicture
  parameter myPicture  :: <PicHandle>;
  parameter dstRect    ::  /* const */ <Rect*>;
  c-name: "DrawPicture";
  c-modifiers: "pascal";
end;

define inline-only C-function KillPicture
  parameter myPicture  :: <PicHandle>;
  c-name: "KillPicture";
  c-modifiers: "pascal";
end;

define inline-only C-function OpenPoly
  result value :: <PolyHandle>;
  c-name: "OpenPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function ClosePoly
  c-name: "ClosePoly";
  c-modifiers: "pascal";
end;

define inline-only C-function KillPoly
  parameter poly       :: <PolyHandle>;
  c-name: "KillPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function OffsetPoly
  parameter poly       :: <PolyHandle>;
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  c-name: "OffsetPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function FramePoly
  parameter poly       :: <PolyHandle>;
  c-name: "FramePoly";
  c-modifiers: "pascal";
end;

define inline-only C-function PaintPoly
  parameter poly       :: <PolyHandle>;
  c-name: "PaintPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function ErasePoly
  parameter poly       :: <PolyHandle>;
  c-name: "ErasePoly";
  c-modifiers: "pascal";
end;

define inline-only C-function InvertPoly
  parameter poly       :: <PolyHandle>;
  c-name: "InvertPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function FillPoly
  parameter poly       :: <PolyHandle>;
  parameter pat        ::  /* const */ <Pattern*>;
  c-name: "FillPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function SetPt
  parameter pt         :: <Point*>;
  parameter h          :: <C-short>;
  parameter v          :: <C-short>;
  c-name: "SetPt";
  c-modifiers: "pascal";
end;

define inline-only C-function LocalToGlobal
  parameter pt         :: <Point*>;
  c-name: "LocalToGlobal";
  c-modifiers: "pascal";
end;

define inline-only C-function GlobalToLocal
  parameter pt         :: <Point*>;
  c-name: "GlobalToLocal";
  c-modifiers: "pascal";
end;

define inline-only C-function Random
  result value :: <C-short>;
  c-name: "Random";
  c-modifiers: "pascal";
end;

define inline-only C-function StuffHex
  parameter thingPtr   :: <C-void*>;
  parameter s          :: <ConstStr255Param>;
  c-name: "StuffHex";
  c-modifiers: "pascal";
end;

define inline-only C-function MacGetPixel
  parameter h          :: <C-short>;
  parameter v          :: <C-short>;
  result value :: <MacBoolean>;
  c-name: "MacGetPixel";
  c-modifiers: "pascal";
end;

define inline-only C-function ScalePt
  parameter pt         :: <Point*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  c-name: "ScalePt";
  c-modifiers: "pascal";
end;

define inline-only C-function MapPt
  parameter pt         :: <Point*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  c-name: "MapPt";
  c-modifiers: "pascal";
end;

define inline-only C-function MapRect
  parameter r          :: <Rect*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  c-name: "MapRect";
  c-modifiers: "pascal";
end;

define inline-only C-function MapRgn
  parameter rgn        :: <RgnHandle>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  c-name: "MapRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function MapPoly
  parameter poly       :: <PolyHandle>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  c-name: "MapPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function SetStdProcs
  parameter procs      :: <QDProcs*>;
  c-name: "SetStdProcs";
  c-modifiers: "pascal";
end;

define inline-only C-function StdRect
  parameter verb       :: <GrafVerb>;
  parameter r          ::  /* const */ <Rect*>;
  c-name: "StdRect";
  c-modifiers: "pascal";
end;

define inline-only C-function StdRRect
  parameter verb       :: <GrafVerb>;
  parameter r          ::  /* const */ <Rect*>;
  parameter ovalWidth  :: <C-short>;
  parameter ovalHeight :: <C-short>;
  c-name: "StdRRect";
  c-modifiers: "pascal";
end;

define inline-only C-function StdOval
  parameter verb       :: <GrafVerb>;
  parameter r          ::  /* const */ <Rect*>;
  c-name: "StdOval";
  c-modifiers: "pascal";
end;

define inline-only C-function StdArc
  parameter verb       :: <GrafVerb>;
  parameter r          ::  /* const */ <Rect*>;
  parameter startAngle :: <C-short>;
  parameter arcAngle   :: <C-short>;
  c-name: "StdArc";
  c-modifiers: "pascal";
end;

define inline-only C-function StdPoly
  parameter verb       :: <GrafVerb>;
  parameter poly       :: <PolyHandle>;
  c-name: "StdPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function StdRgn
  parameter verb       :: <GrafVerb>;
  parameter rgn        :: <RgnHandle>;
  c-name: "StdRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function StdBits
  parameter srcBits    ::  /* const */ <BitMap*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  parameter mode       :: <C-short>;
  parameter maskRgn    :: <RgnHandle>;
  c-name: "StdBits";
  c-modifiers: "pascal";
end;

define inline-only C-function StdComment
  parameter kind       :: <C-short>;
  parameter dataSize   :: <C-short>;
  parameter dataHandle :: <Handle>;
  c-name: "StdComment";
  c-modifiers: "pascal";
end;

define inline-only C-function StdGetPic
  parameter dataPtr    :: <C-void*>;
  parameter byteCount  :: <C-short>;
  c-name: "StdGetPic";
  c-modifiers: "pascal";
end;

define inline-only C-function StdPutPic
  parameter dataPtr    ::  /* const */ <C-void*>;
  parameter byteCount  :: <C-short>;
  c-name: "StdPutPic";
  c-modifiers: "pascal";
end;

define inline-only C-function StdOpcode
  parameter fromRect   ::  /* const */ <Rect*>;
  parameter toRect     ::  /* const */ <Rect*>;
  parameter opcode     :: <UInt16>;
  parameter version    :: <SInt16>;
  c-name: "StdOpcode";
  c-modifiers: "pascal";
end;

define inline-only C-function AddPt
  parameter src        :: <Point>;
  parameter dst        :: <Point*>;
  c-name: "AddPt";
  c-modifiers: "pascal";
end;

define inline-only C-function EqualPt
  parameter pt1        :: <Point>;
  parameter pt2        :: <Point>;
  result value :: <MacBoolean>;
  c-name: "EqualPt";
  c-modifiers: "pascal";
end;

define inline-only C-function PtInRect
  parameter pt         :: <Point>;
  parameter r          ::  /* const */ <Rect*>;
  result value :: <MacBoolean>;
  c-name: "PtInRect";
  c-modifiers: "pascal";
end;

define inline-only C-function Pt2Rect
  parameter pt1        :: <Point>;
  parameter pt2        :: <Point>;
  parameter dstRect    :: <Rect*>;
  c-name: "Pt2Rect";
  c-modifiers: "pascal";
end;

define inline-only C-function PtToAngle
  parameter r          ::  /* const */ <Rect*>;
  parameter pt         :: <Point>;
  parameter angle      :: <C-short*>;
  c-name: "PtToAngle";
  c-modifiers: "pascal";
end;

define inline-only C-function SubPt
  parameter src        :: <Point>;
  parameter dst        :: <Point*>;
  c-name: "SubPt";
  c-modifiers: "pascal";
end;

define inline-only C-function PtInRgn
  parameter pt         :: <Point>;
  parameter rgn        :: <RgnHandle>;
  result value :: <MacBoolean>;
  c-name: "PtInRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function StdLine
  parameter newPt      :: <Point>;
  c-name: "StdLine";
  c-modifiers: "pascal";
end;

define inline-only C-function OpenCPort
  parameter port       :: <CGrafPtr>;
  c-name: "OpenCPort";
  c-modifiers: "pascal";
end;

define inline-only C-function InitCPort
  parameter port       :: <CGrafPtr>;
  c-name: "InitCPort";
  c-modifiers: "pascal";
end;

define inline-only C-function CloseCPort
  parameter port       :: <CGrafPtr>;
  c-name: "CloseCPort";
  c-modifiers: "pascal";
end;

define inline-only C-function NewPixMap
  result value :: <PixMapHandle>;
  c-name: "NewPixMap";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposePixMap
  parameter pm         :: <PixMapHandle>;
  c-name: "DisposePixMap";
  c-modifiers: "pascal";
end;

define inline-only C-function CopyPixMap
  parameter srcPM      :: <PixMapHandle>;
  parameter dstPM      :: <PixMapHandle>;
  c-name: "CopyPixMap";
  c-modifiers: "pascal";
end;

define inline-only C-function NewPixPat
  result value :: <PixPatHandle>;
  c-name: "NewPixPat";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposePixPat
  parameter pp         :: <PixPatHandle>;
  c-name: "DisposePixPat";
  c-modifiers: "pascal";
end;

define inline-only C-function CopyPixPat
  parameter srcPP      :: <PixPatHandle>;
  parameter dstPP      :: <PixPatHandle>;
  c-name: "CopyPixPat";
  c-modifiers: "pascal";
end;

define inline-only C-function PenPixPat
  parameter pp         :: <PixPatHandle>;
  c-name: "PenPixPat";
  c-modifiers: "pascal";
end;

define inline-only C-function BackPixPat
  parameter pp         :: <PixPatHandle>;
  c-name: "BackPixPat";
  c-modifiers: "pascal";
end;

define inline-only C-function GetPixPat
  parameter patID      :: <C-short>;
  result value :: <PixPatHandle>;
  c-name: "GetPixPat";
  c-modifiers: "pascal";
end;

define inline-only C-function MakeRGBPat
  parameter pp         :: <PixPatHandle>;
  parameter myColor    ::  /* const */ <RGBColor*>;
  c-name: "MakeRGBPat";
  c-modifiers: "pascal";
end;

define inline-only C-function FillCRect
  parameter r          ::  /* const */ <Rect*>;
  parameter pp         :: <PixPatHandle>;
  c-name: "FillCRect";
  c-modifiers: "pascal";
end;

define inline-only C-function FillCOval
  parameter r          ::  /* const */ <Rect*>;
  parameter pp         :: <PixPatHandle>;
  c-name: "FillCOval";
  c-modifiers: "pascal";
end;

define inline-only C-function FillCRoundRect
  parameter r          ::  /* const */ <Rect*>;
  parameter ovalWidth  :: <C-short>;
  parameter ovalHeight :: <C-short>;
  parameter pp         :: <PixPatHandle>;
  c-name: "FillCRoundRect";
  c-modifiers: "pascal";
end;

define inline-only C-function FillCArc
  parameter r          ::  /* const */ <Rect*>;
  parameter startAngle :: <C-short>;
  parameter arcAngle   :: <C-short>;
  parameter pp         :: <PixPatHandle>;
  c-name: "FillCArc";
  c-modifiers: "pascal";
end;

define inline-only C-function FillCRgn
  parameter rgn        :: <RgnHandle>;
  parameter pp         :: <PixPatHandle>;
  c-name: "FillCRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function FillCPoly
  parameter poly       :: <PolyHandle>;
  parameter pp         :: <PixPatHandle>;
  c-name: "FillCPoly";
  c-modifiers: "pascal";
end;

define inline-only C-function RGBForeColor
  parameter color      ::  /* const */ <RGBColor*>;
  c-name: "RGBForeColor";
  c-modifiers: "pascal";
end;

define inline-only C-function RGBBackColor
  parameter color      ::  /* const */ <RGBColor*>;
  c-name: "RGBBackColor";
  c-modifiers: "pascal";
end;

define inline-only C-function SetCPixel
  parameter h          :: <C-short>;
  parameter v          :: <C-short>;
  parameter cPix       ::  /* const */ <RGBColor*>;
  c-name: "SetCPixel";
  c-modifiers: "pascal";
end;

define inline-only C-function SetPortPix
  parameter pm         :: <PixMapHandle>;
  c-name: "SetPortPix";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCPixel
  parameter h          :: <C-short>;
  parameter v          :: <C-short>;
  parameter cPix       :: <RGBColor*>;
  c-name: "GetCPixel";
  c-modifiers: "pascal";
end;

define inline-only C-function GetForeColor
  parameter color      :: <RGBColor*>;
  c-name: "GetForeColor";
  c-modifiers: "pascal";
end;

define inline-only C-function GetBackColor
  parameter color      :: <RGBColor*>;
  c-name: "GetBackColor";
  c-modifiers: "pascal";
end;

define inline-only C-function SeedCFill
  parameter srcBits    ::  /* const */ <BitMap*>;
  parameter dstBits    ::  /* const */ <BitMap*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  parameter seedH      :: <C-short>;
  parameter seedV      :: <C-short>;
  parameter matchProc  :: <ColorSearchUPP>;
  parameter matchData  :: <C-both-long>;
  c-name: "SeedCFill";
  c-modifiers: "pascal";
end;

define inline-only C-function CalcCMask
  parameter srcBits    ::  /* const */ <BitMap*>;
  parameter dstBits    ::  /* const */ <BitMap*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  parameter seedRGB    ::  /* const */ <RGBColor*>;
  parameter matchProc  :: <ColorSearchUPP>;
  parameter matchData  :: <C-both-long>;
  c-name: "CalcCMask";
  c-modifiers: "pascal";
end;

define inline-only C-function OpenCPicture
  parameter newHeader  ::  /* const */ <OpenCPicParams*>;
  result value :: <PicHandle>;
  c-name: "OpenCPicture";
  c-modifiers: "pascal";
end;

define inline-only C-function OpColor
  parameter color      ::  /* const */ <RGBColor*>;
  c-name: "OpColor";
  c-modifiers: "pascal";
end;

define inline-only C-function HiliteColor
  parameter color      ::  /* const */ <RGBColor*>;
  c-name: "HiliteColor";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeCTable
  parameter cTable     :: <CTabHandle>;
  c-name: "DisposeCTable";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCTable
  parameter ctID       :: <C-short>;
  result value :: <CTabHandle>;
  c-name: "GetCTable";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCCursor
  parameter crsrID     :: <C-short>;
  result value :: <CCrsrHandle>;
  c-name: "GetCCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function SetCCursor
  parameter cCrsr      :: <CCrsrHandle>;
  c-name: "SetCCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function AllocCursor
  c-name: "AllocCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeCCursor
  parameter cCrsr      :: <CCrsrHandle>;
  c-name: "DisposeCCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function SetStdCProcs
  parameter procs      :: <CQDProcs*>;
  c-name: "SetStdCProcs";
  c-modifiers: "pascal";
end;

define inline-only C-function GetMaxDevice
  parameter globalRect ::  /* const */ <Rect*>;
  result value :: <GDHandle>;
  c-name: "GetMaxDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCTSeed
  result value :: <C-both-long>;
  c-name: "GetCTSeed";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDeviceList
  result value :: <GDHandle>;
  c-name: "GetDeviceList";
  c-modifiers: "pascal";
end;

define inline-only C-function GetMainDevice
  result value :: <GDHandle>;
  c-name: "GetMainDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function GetNextDevice
  parameter curDevice  :: <GDHandle>;
  result value :: <GDHandle>;
  c-name: "GetNextDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function TestDeviceAttribute
  parameter gdh        :: <GDHandle>;
  parameter attribute  :: <C-short>;
  result value :: <MacBoolean>;
  c-name: "TestDeviceAttribute";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDeviceAttribute
  parameter gdh        :: <GDHandle>;
  parameter attribute  :: <C-short>;
  parameter value      :: <MacBoolean>;
  c-name: "SetDeviceAttribute";
  c-modifiers: "pascal";
end;

define inline-only C-function InitGDevice
  parameter qdRefNum   :: <C-short>;
  parameter mode       :: <C-both-long>;
  parameter gdh        :: <GDHandle>;
  c-name: "InitGDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function NewGDevice
  parameter refNum     :: <C-short>;
  parameter mode       :: <C-both-long>;
  result value :: <GDHandle>;
  c-name: "NewGDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeGDevice
  parameter gdh        :: <GDHandle>;
  c-name: "DisposeGDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function SetGDevice
  parameter gd         :: <GDHandle>;
  c-name: "SetGDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function GetGDevice
  result value :: <GDHandle>;
  c-name: "GetGDevice";
  c-modifiers: "pascal";
end;

define inline-only C-function Color2Index
  parameter myColor    ::  /* const */ <RGBColor*>;
  result value :: <C-both-long>;
  c-name: "Color2Index";
  c-modifiers: "pascal";
end;

define inline-only C-function Index2Color
  parameter index      :: <C-both-long>;
  parameter aColor     :: <RGBColor*>;
  c-name: "Index2Color";
  c-modifiers: "pascal";
end;

define inline-only C-function InvertColor
  parameter myColor    :: <RGBColor*>;
  c-name: "InvertColor";
  c-modifiers: "pascal";
end;

define inline-only C-function RealColor
  parameter color      ::  /* const */ <RGBColor*>;
  result value :: <MacBoolean>;
  c-name: "RealColor";
  c-modifiers: "pascal";
end;

define inline-only C-function GetSubTable
  parameter myColors   :: <CTabHandle>;
  parameter iTabRes    :: <C-short>;
  parameter targetTbl  :: <CTabHandle>;
  c-name: "GetSubTable";
  c-modifiers: "pascal";
end;

define inline-only C-function MakeITable
  parameter cTabH      :: <CTabHandle>;
  parameter iTabH      :: <ITabHandle>;
  parameter res        :: <C-short>;
  c-name: "MakeITable";
  c-modifiers: "pascal";
end;

define inline-only C-function AddSearch
  parameter searchProc :: <ColorSearchUPP>;
  c-name: "AddSearch";
  c-modifiers: "pascal";
end;

define inline-only C-function AddComp
  parameter compProc   :: <ColorComplementUPP>;
  c-name: "AddComp";
  c-modifiers: "pascal";
end;

define inline-only C-function DelSearch
  parameter searchProc :: <ColorSearchUPP>;
  c-name: "DelSearch";
  c-modifiers: "pascal";
end;

define inline-only C-function DelComp
  parameter compProc   :: <ColorComplementUPP>;
  c-name: "DelComp";
  c-modifiers: "pascal";
end;

define inline-only C-function SetClientID
  parameter id         :: <C-short>;
  c-name: "SetClientID";
  c-modifiers: "pascal";
end;

define inline-only C-function ProtectEntry
  parameter index      :: <C-short>;
  parameter protect    :: <MacBoolean>;
  c-name: "ProtectEntry";
  c-modifiers: "pascal";
end;

define inline-only C-function ReserveEntry
  parameter index      :: <C-short>;
  parameter reserve    :: <MacBoolean>;
  c-name: "ReserveEntry";
  c-modifiers: "pascal";
end;

define inline-only C-function SetEntries
  parameter start      :: <C-short>;
  parameter count      :: <C-short>;
  parameter aTable     :: <CSpecArray>;
  c-name: "SetEntries";
  c-modifiers: "pascal";
end;

define inline-only C-function SaveEntries
  parameter srcTable   :: <CTabHandle>;
  parameter resultTable :: <CTabHandle>;
  parameter selection  :: <ReqListRec*>;
  c-name: "SaveEntries";
  c-modifiers: "pascal";
end;

define inline-only C-function RestoreEntries
  parameter srcTable   :: <CTabHandle>;
  parameter dstTable   :: <CTabHandle>;
  parameter selection  :: <ReqListRec*>;
  c-name: "RestoreEntries";
  c-modifiers: "pascal";
end;

define inline-only C-function QDError
  result value :: <C-short>;
  c-name: "QDError";
  c-modifiers: "pascal";
end;

define inline-only C-function CopyDeepMask
  parameter srcBits    ::  /* const */ <BitMap*>;
  parameter maskBits   ::  /* const */ <BitMap*>;
  parameter dstBits    ::  /* const */ <BitMap*>;
  parameter srcRect    ::  /* const */ <Rect*>;
  parameter maskRect   ::  /* const */ <Rect*>;
  parameter dstRect    ::  /* const */ <Rect*>;
  parameter mode       :: <C-short>;
  parameter maskRgn    :: <RgnHandle>;
  c-name: "CopyDeepMask";
  c-modifiers: "pascal";
end;

define inline-only C-function DeviceLoop
  parameter drawingRgn :: <RgnHandle>;
  parameter drawingProc :: <DeviceLoopDrawingUPP>;
  parameter userData   :: <C-both-long>;
  parameter flags      :: <DeviceLoopFlags>;
  c-name: "DeviceLoop";
  c-modifiers: "pascal";
end;

define inline-only C-function GetMaskTable
  result value :: <Ptr>;
  c-name: "GetMaskTable";
  c-modifiers: "pascal";
end;

define inline-only C-function GetPattern
  parameter patternID  :: <C-short>;
  result value :: <PatHandle>;
  c-name: "GetPattern";
  c-modifiers: "pascal";
end;

define inline-only C-function MacGetCursor
  parameter cursorID   :: <C-short>;
  result value :: <CursHandle>;
  c-name: "MacGetCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function GetPicture
  parameter pictureID  :: <C-short>;
  result value :: <PicHandle>;
  c-name: "GetPicture";
  c-modifiers: "pascal";
end;

define inline-only C-function DeltaPoint
  parameter ptA        :: <Point>;
  parameter ptB        :: <Point>;
  result value :: <C-both-long>;
  c-name: "DeltaPoint";
  c-modifiers: "pascal";
end;

define inline-only C-function ShieldCursor
  parameter shieldRect ::  /* const */ <Rect*>;
  parameter offsetPt   :: <Point>;
  c-name: "ShieldCursor";
  c-modifiers: "pascal";
end;

define inline-only C-function ScreenRes
  parameter scrnHRes   :: <C-short*>;
  parameter scrnVRes   :: <C-short*>;
  c-name: "ScreenRes";
  c-modifiers: "pascal";
end;

define inline-only C-function GetIndPattern
  parameter thePat     :: <Pattern*>;
  parameter patternListID :: <C-short>;
  parameter index      :: <C-short>;
  c-name: "GetIndPattern";
  c-modifiers: "pascal";
end;

define inline-only C-function PackBits
  parameter srcPtr     :: <Ptr*>;
  parameter dstPtr     :: <Ptr*>;
  parameter srcBytes   :: <C-short>;
  c-name: "PackBits";
  c-modifiers: "pascal";
end;

define inline-only C-function UnpackBits
  parameter srcPtr     :: <Ptr*>;
  parameter dstPtr     :: <Ptr*>;
  parameter dstBytes   :: <C-short>;
  c-name: "UnpackBits";
  c-modifiers: "pascal";
end;

define inline-only C-function SlopeFromAngle
  parameter angle      :: <C-short>;
  result value :: <Fixed>;
  c-name: "SlopeFromAngle";
  c-modifiers: "pascal";
end;

define inline-only C-function AngleFromSlope
  parameter slope      :: <Fixed>;
  result value :: <C-short>;
  c-name: "AngleFromSlope";
  c-modifiers: "pascal";
end;

