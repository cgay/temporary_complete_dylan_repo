Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "TextEdit.h"; do not edit.

define C-pointer-type <TERec*> => <TERec>;
define C-pointer-type <TERec**> => <TERec*>;
define C-pointer-type <TEPtr> => <TERec>;
define C-pointer-type <TEHandle> => <TEPtr>;
define constant <HighHookProcPtr> = <C-function-pointer>;
define constant <EOLHookProcPtr> = <C-function-pointer>;
define constant <CaretHookProcPtr> = <C-function-pointer>;
define constant <WidthHookProcPtr> = <C-function-pointer>;
define constant <TextWidthHookProcPtr> = <C-function-pointer>;
define constant <NWidthHookProcPtr> = <C-function-pointer>;
define constant <DrawHookProcPtr> = <C-function-pointer>;
define constant <HitTestHookProcPtr> = <C-function-pointer>;
define constant <TEFindWordProcPtr> = <C-function-pointer>;
define constant <TERecalcProcPtr> = <C-function-pointer>;
define constant <TEDoTextProcPtr> = <C-function-pointer>;
define constant <TEClickLoopProcPtr> = <C-function-pointer>;
define constant <WordBreakProcPtr> = <C-function-pointer>;
define constant <HighHookUPP> = <UniversalProcPtr>;
define constant <EOLHookUPP> = <UniversalProcPtr>;
define constant <CaretHookUPP> = <UniversalProcPtr>;
define constant <WidthHookUPP> = <UniversalProcPtr>;
define constant <TextWidthHookUPP> = <UniversalProcPtr>;
define constant <NWidthHookUPP> = <UniversalProcPtr>;
define constant <DrawHookUPP> = <UniversalProcPtr>;
define constant <HitTestHookUPP> = <UniversalProcPtr>;
define constant <TEFindWordUPP> = <UniversalProcPtr>;
define constant <TERecalcUPP> = <UniversalProcPtr>;
define constant <TEDoTextUPP> = <UniversalProcPtr>;
define constant <TEClickLoopUPP> = <UniversalProcPtr>;
define constant <WordBreakUPP> = <UniversalProcPtr>;

define C-struct <TERec>
  sealed inline-only slot destRect-value :: <Rect>;
  sealed inline-only slot viewRect-value :: <Rect>;
  sealed inline-only slot selRect-value  :: <Rect>;
  sealed inline-only slot lineHeight-value :: <C-short>;
  sealed inline-only slot fontAscent-value :: <C-short>;
  sealed inline-only slot selPoint-value :: <Point>;
  sealed inline-only slot selStart-value :: <C-short>;
  sealed inline-only slot selEnd-value   :: <C-short>;
  sealed inline-only slot active-value   :: <C-short>;
  sealed inline-only slot wordBreak-value :: <WordBreakUPP>;
  sealed inline-only slot clickLoop-value :: <TEClickLoopUPP>;
  sealed inline-only slot clickTime-value :: <C-both-long>;
  sealed inline-only slot clickLoc-value :: <C-short>;
  sealed inline-only slot caretTime-value :: <C-both-long>;
  sealed inline-only slot caretState-value :: <C-short>;
  sealed inline-only slot just-value     :: <C-short>;
  sealed inline-only slot teLength-value :: <C-short>;
  sealed inline-only slot hText-value    :: <Handle>;
  sealed inline-only slot hDispatchRec-value :: <C-both-long>;
  sealed inline-only slot clikStuff-value :: <C-short>;
  sealed inline-only slot crOnly-value   :: <C-short>;
  sealed inline-only slot txFont-value   :: <C-short>;
  sealed inline-only slot txFace-value   :: <StyleField>;
  sealed inline-only slot txMode-value   :: <C-short>;
  sealed inline-only slot txSize-value   :: <C-short>;
  sealed inline-only slot inPort-value   :: <GrafPtr>;
  sealed inline-only slot highHook-value :: <HighHookUPP>;
  sealed inline-only slot caretHook-value :: <CaretHookUPP>;
  sealed inline-only slot nLines-value   :: <C-short>;
  sealed inline-only array slot lineStarts-array :: <C-short>,
    length: 16001,
    address-getter: lineStarts-value;
  pack: 2;
  c-name: "struct TERec";
end;
// unnamed enum:
define inline-only constant $teJustLeft                = 0;
define inline-only constant $teJustCenter              = 1;
define inline-only constant $teJustRight               = -1;
define inline-only constant $teForceLeft               = -2;
define inline-only constant $teFlushDefault            = 0;
define inline-only constant $teCenter                  = 1;
define inline-only constant $teFlushRight              = -1;
define inline-only constant $teFlushLeft               = -2;

// unnamed enum:
define inline-only constant $fontBit                   = 0;
define inline-only constant $faceBit                   = 1;
define inline-only constant $sizeBit                   = 2;
define inline-only constant $clrBit                    = 3;
define inline-only constant $addSizeBit                = 4;
define inline-only constant $toggleBit                 = 5;

// unnamed enum:
define inline-only constant $doFont                    = 1;
define inline-only constant $doFace                    = 2;
define inline-only constant $doSize                    = 4;
define inline-only constant $doColor                   = 8;
define inline-only constant $doAll                     = 15;
define inline-only constant $addSize                   = 16;
define inline-only constant $doToggle                  = 32;

// unnamed enum:
define inline-only constant $EOLHook                   = 0;
define inline-only constant $DRAWHook                  = 4;
define inline-only constant $WIDTHHook                 = 8;
define inline-only constant $HITTESTHook               = 12;
define inline-only constant $nWIDTHHook                = 24;
define inline-only constant $TextWidthHook             = 28;

// unnamed enum:
define inline-only constant $intEOLHook                = 0;
define inline-only constant $intDrawHook               = 1;
define inline-only constant $intWidthHook              = 2;
define inline-only constant $intHitTestHook            = 3;
define inline-only constant $intNWidthHook             = 6;
define inline-only constant $intTextWidthHook          = 7;
define inline-only constant $intInlineInputTSMTEPreUpdateHook = 8;
define inline-only constant $intInlineInputTSMTEPostUpdateHook = 9;

// unnamed enum:
define inline-only constant $teFAutoScroll             = 0;
define inline-only constant $teFTextBuffering          = 1;
define inline-only constant $teFOutlineHilite          = 2;
define inline-only constant $teFInlineInput            = 3;
define inline-only constant $teFUseWhiteBackground     = 4;
define inline-only constant $teFUseInlineInput         = 5;
define inline-only constant $teFInlineInputAutoScroll  = 6;

// unnamed enum:
define inline-only constant $teBitClear                = 0;
define inline-only constant $teBitSet                  = 1;
define inline-only constant $teBitTest                 = -1;

// unnamed enum:
define inline-only constant $teWordSelect              = 4;
define inline-only constant $teWordDrag                = 8;
define inline-only constant $teFromFind                = 12;
define inline-only constant $teFromRecal               = 16;

// unnamed enum:
define inline-only constant $teFind                    = 0;
define inline-only constant $teHighlight               = 1;
define inline-only constant $teDraw                    = -1;
define inline-only constant $teCaret                   = -2;

define inline constant <CharsPtr> = <C-string>;
define C-pointer-type <CharsPtr*> => <CharsPtr>;
define C-pointer-type <CharsPtr**> => <CharsPtr*>;
define C-pointer-type <CharsHandle> => <CharsPtr>;

define C-struct <StyleRun>
  sealed inline-only slot startChar-value :: <C-short>;
  sealed inline-only slot styleIndex-value :: <C-short>;
  pack: 2;
  c-name: "struct StyleRun";
end;
define C-pointer-type <StyleRun*> => <StyleRun>;
define C-pointer-type <StyleRun**> => <StyleRun*>;

define C-struct <STElement>
  sealed inline-only slot stCount-value  :: <C-short>;
  sealed inline-only slot stHeight-value :: <C-short>;
  sealed inline-only slot stAscent-value :: <C-short>;
  sealed inline-only slot stFont-value   :: <C-short>;
  sealed inline-only slot stFace-value   :: <StyleField>;
  sealed inline-only slot stSize-value   :: <C-short>;
  sealed inline-only slot stColor-value  :: <RGBColor>;
  pack: 2;
  c-name: "struct STElement";
end;
define C-pointer-type <STElement*> => <STElement>;
define C-pointer-type <STElement**> => <STElement*>;
define C-pointer-type <STPtr> => <STElement>;
define C-pointer-type <STHandle> => <STPtr>;

define C-struct <LHElement>
  sealed inline-only slot lhHeight-value :: <C-short>;
  sealed inline-only slot lhAscent-value :: <C-short>;
  pack: 2;
  c-name: "struct LHElement";
end;
define C-pointer-type <LHElement*> => <LHElement>;
define C-pointer-type <LHElement**> => <LHElement*>;
define C-pointer-type <LHPtr> => <LHElement>;
define C-pointer-type <LHHandle> => <LHPtr>;

define C-struct <ScrpSTElement>
  sealed inline-only slot scrpStartChar-value :: <C-both-long>;
  sealed inline-only slot scrpHeight-value :: <C-short>;
  sealed inline-only slot scrpAscent-value :: <C-short>;
  sealed inline-only slot scrpFont-value :: <C-short>;
  sealed inline-only slot scrpFace-value :: <StyleField>;
  sealed inline-only slot scrpSize-value :: <C-short>;
  sealed inline-only slot scrpColor-value :: <RGBColor>;
  pack: 2;
  c-name: "struct ScrpSTElement";
end;
define C-pointer-type <ScrpSTElement*> => <ScrpSTElement>;
define C-pointer-type <ScrpSTElement**> => <ScrpSTElement*>;

define C-struct <StScrpRec>
  sealed inline-only slot scrpNStyles-value :: <C-short>;
  sealed inline-only slot scrpStyleTab-value :: <ScrpSTTable>;
  pack: 2;
  c-name: "struct StScrpRec";
end;
define C-pointer-type <StScrpRec*> => <StScrpRec>;
define C-pointer-type <StScrpRec**> => <StScrpRec*>;
define C-pointer-type <StScrpPtr> => <StScrpRec>;
define C-pointer-type <StScrpHandle> => <StScrpPtr>;

define C-struct <NullStRec>
  sealed inline-only slot teReserved     :: <C-both-long>;
  sealed inline-only slot nullScrap-value :: <StScrpHandle>;
  pack: 2;
  c-name: "struct NullStRec";
end;
define C-pointer-type <NullStRec*> => <NullStRec>;
define C-pointer-type <NullStRec**> => <NullStRec*>;
define C-pointer-type <NullStPtr> => <NullStRec>;
define C-pointer-type <NullStHandle> => <NullStPtr>;

define C-struct <TEStyleRec>
  sealed inline-only slot nRuns-value    :: <C-short>;
  sealed inline-only slot nStyles-value  :: <C-short>;
  sealed inline-only slot styleTab-value :: <STHandle>;
  sealed inline-only slot lhTab-value    :: <LHHandle>;
  sealed inline-only slot teRefCon-value :: <C-both-long>;
  sealed inline-only slot nullStyle-value :: <NullStHandle>;
  sealed inline-only array slot runs-array :: <StyleRun>,
    length: 8001,
    address-getter: runs-value;
  pack: 2;
  c-name: "struct TEStyleRec";
end;
define C-pointer-type <TEStyleRec*> => <TEStyleRec>;
define C-pointer-type <TEStyleRec**> => <TEStyleRec*>;
define C-pointer-type <TEStylePtr> => <TEStyleRec>;
define C-pointer-type <TEStyleHandle> => <TEStylePtr>;

define C-struct <TextStyle>
  sealed inline-only slot tsFont-value   :: <C-short>;
  sealed inline-only slot tsFace-value   :: <StyleField>;
  sealed inline-only slot tsSize-value   :: <C-short>;
  sealed inline-only slot tsColor-value  :: <RGBColor>;
  pack: 2;
  c-name: "struct TextStyle";
end;
define C-pointer-type <TextStyle*> => <TextStyle>;
define C-pointer-type <TextStyle**> => <TextStyle*>;
define C-pointer-type <TextStylePtr> => <TextStyle>;
define C-pointer-type <TextStyleHandle> => <TextStylePtr>;
define inline constant <TEIntHook> = <C-short>;
define C-pointer-type <TEIntHook*> => <TEIntHook>;
define C-pointer-type <TEIntHook**> => <TEIntHook*>;
// unnamed enum:
define inline-only constant $uppHighHookProcInfo       = #x0000000F;

// unnamed enum:
define inline-only constant $uppEOLHookProcInfo        = #x0000001F;

// unnamed enum:
define inline-only constant $uppCaretHookProcInfo      = #x0000000F;

// unnamed enum:
define inline-only constant $uppWidthHookProcInfo      = #x0000002F;

// unnamed enum:
define inline-only constant $uppTextWidthHookProcInfo  = #x0000002F;

// unnamed enum:
define inline-only constant $uppNWidthHookProcInfo     = #x0000003F;

// unnamed enum:
define inline-only constant $uppDrawHookProcInfo       = #x0000004F;

// unnamed enum:
define inline-only constant $uppHitTestHookProcInfo    = #x0000005F;

// unnamed enum:
define inline-only constant $uppTEFindWordProcInfo     = #x0000006F;

// unnamed enum:
define inline-only constant $uppTERecalcProcInfo       = #x0000009F;

// unnamed enum:
define inline-only constant $uppTEDoTextProcInfo       = #x000000AF;

// unnamed enum:
define inline-only constant $uppTEClickLoopProcInfo    = #x0000F812;

// unnamed enum:
define inline-only constant $uppWordBreakProcInfo      = #x00029812;

// unnamed enum:
define inline-only constant $teFUseTextServices        = 4;


define inline-only C-function TEScrapHandle
  result value :: <Handle>;
  c-name: "TEScrapHandle";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetScrapLength
  result value :: <C-both-long>;
  c-name: "TEGetScrapLength";
  c-modifiers: "pascal";
end;

define inline-only C-function TEInit
  c-name: "TEInit";
  c-modifiers: "pascal";
end;

define inline-only C-function TENew
  parameter destRect   ::  /* const */ <Rect*>;
  parameter viewRect   ::  /* const */ <Rect*>;
  result value :: <TEHandle>;
  c-name: "TENew";
  c-modifiers: "pascal";
end;

define inline-only C-function TEDispose
  parameter hTE        :: <TEHandle>;
  c-name: "TEDispose";
  c-modifiers: "pascal";
end;

define inline-only C-function TESetText
  parameter text       ::  /* const */ <C-void*>;
  parameter length     :: <C-both-long>;
  parameter hTE        :: <TEHandle>;
  c-name: "TESetText";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetText
  parameter hTE        :: <TEHandle>;
  result value :: <CharsHandle>;
  c-name: "TEGetText";
  c-modifiers: "pascal";
end;

define inline-only C-function TEIdle
  parameter hTE        :: <TEHandle>;
  c-name: "TEIdle";
  c-modifiers: "pascal";
end;

define inline-only C-function TESetSelect
  parameter selStart   :: <C-both-long>;
  parameter selEnd     :: <C-both-long>;
  parameter hTE        :: <TEHandle>;
  c-name: "TESetSelect";
  c-modifiers: "pascal";
end;

define inline-only C-function TEActivate
  parameter hTE        :: <TEHandle>;
  c-name: "TEActivate";
  c-modifiers: "pascal";
end;

define inline-only C-function TEDeactivate
  parameter hTE        :: <TEHandle>;
  c-name: "TEDeactivate";
  c-modifiers: "pascal";
end;

define inline-only C-function TEKey
  parameter key        :: <CharParameter>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEKey";
  c-modifiers: "pascal";
end;

define inline-only C-function TECut
  parameter hTE        :: <TEHandle>;
  c-name: "TECut";
  c-modifiers: "pascal";
end;

define inline-only C-function TECopy
  parameter hTE        :: <TEHandle>;
  c-name: "TECopy";
  c-modifiers: "pascal";
end;

define inline-only C-function TEPaste
  parameter hTE        :: <TEHandle>;
  c-name: "TEPaste";
  c-modifiers: "pascal";
end;

define inline-only C-function TEDelete
  parameter hTE        :: <TEHandle>;
  c-name: "TEDelete";
  c-modifiers: "pascal";
end;

define inline-only C-function TEInsert
  parameter text       ::  /* const */ <C-void*>;
  parameter length     :: <C-both-long>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEInsert";
  c-modifiers: "pascal";
end;

define inline-only C-function TESetAlignment
  parameter just       :: <C-short>;
  parameter hTE        :: <TEHandle>;
  c-name: "TESetAlignment";
  c-modifiers: "pascal";
end;

define inline-only C-function TEUpdate
  parameter rUpdate    ::  /* const */ <Rect*>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEUpdate";
  c-modifiers: "pascal";
end;

define inline-only C-function TETextBox
  parameter text       ::  /* const */ <C-void*>;
  parameter length     :: <C-both-long>;
  parameter box        ::  /* const */ <Rect*>;
  parameter just       :: <C-short>;
  c-name: "TETextBox";
  c-modifiers: "pascal";
end;

define inline-only C-function TEScroll
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEScroll";
  c-modifiers: "pascal";
end;

define inline-only C-function TESelView
  parameter hTE        :: <TEHandle>;
  c-name: "TESelView";
  c-modifiers: "pascal";
end;

define inline-only C-function TEPinScroll
  parameter dh         :: <C-short>;
  parameter dv         :: <C-short>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEPinScroll";
  c-modifiers: "pascal";
end;

define inline-only C-function TEAutoView
  parameter fAuto      :: <MacBoolean>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEAutoView";
  c-modifiers: "pascal";
end;

define inline-only C-function TECalText
  parameter hTE        :: <TEHandle>;
  c-name: "TECalText";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetOffset
  parameter pt         :: <Point>;
  parameter hTE        :: <TEHandle>;
  result value :: <C-short>;
  c-name: "TEGetOffset";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetPoint
  parameter offset     :: <C-short>;
  parameter hTE        :: <TEHandle>;
  result value :: <Point>;
  c-name: "TEGetPoint";
  c-modifiers: "pascal";
end;

define inline-only C-function TEClick
  parameter pt         :: <Point>;
  parameter fExtend    :: <MacBoolean>;
  parameter h          :: <TEHandle>;
  c-name: "TEClick";
  c-modifiers: "pascal";
end;

define inline-only C-function TEStyleNew
  parameter destRect   ::  /* const */ <Rect*>;
  parameter viewRect   ::  /* const */ <Rect*>;
  result value :: <TEHandle>;
  c-name: "TEStyleNew";
  c-modifiers: "pascal";
end;

define inline-only C-function TESetStyleHandle
  parameter theHandle  :: <TEStyleHandle>;
  parameter hTE        :: <TEHandle>;
  c-name: "TESetStyleHandle";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetStyleHandle
  parameter hTE        :: <TEHandle>;
  result value :: <TEStyleHandle>;
  c-name: "TEGetStyleHandle";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetStyle
  parameter offset     :: <C-short>;
  parameter theStyle   :: <TextStyle*>;
  parameter lineHeight :: <C-short*>;
  parameter fontAscent :: <C-short*>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEGetStyle";
  c-modifiers: "pascal";
end;

define inline-only C-function TEStylePaste
  parameter hTE        :: <TEHandle>;
  c-name: "TEStylePaste";
  c-modifiers: "pascal";
end;

define inline-only C-function TESetStyle
  parameter mode       :: <C-short>;
  parameter newStyle   ::  /* const */ <TextStyle*>;
  parameter fRedraw    :: <MacBoolean>;
  parameter hTE        :: <TEHandle>;
  c-name: "TESetStyle";
  c-modifiers: "pascal";
end;

define inline-only C-function TEReplaceStyle
  parameter mode       :: <C-short>;
  parameter oldStyle   ::  /* const */ <TextStyle*>;
  parameter newStyle   ::  /* const */ <TextStyle*>;
  parameter fRedraw    :: <MacBoolean>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEReplaceStyle";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetStyleScrapHandle
  parameter hTE        :: <TEHandle>;
  result value :: <StScrpHandle>;
  c-name: "TEGetStyleScrapHandle";
  c-modifiers: "pascal";
end;

define inline-only C-function TEStyleInsert
  parameter text       ::  /* const */ <C-void*>;
  parameter length     :: <C-both-long>;
  parameter hST        :: <StScrpHandle>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEStyleInsert";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetHeight
  parameter endLine    :: <C-both-long>;
  parameter startLine  :: <C-both-long>;
  parameter hTE        :: <TEHandle>;
  result value :: <C-both-long>;
  c-name: "TEGetHeight";
  c-modifiers: "pascal";
end;

define inline-only C-function TEContinuousStyle
  parameter mode       :: <C-short*>;
  parameter aStyle     :: <TextStyle*>;
  parameter hTE        :: <TEHandle>;
  result value :: <MacBoolean>;
  c-name: "TEContinuousStyle";
  c-modifiers: "pascal";
end;

define inline-only C-function TEUseStyleScrap
  parameter rangeStart :: <C-both-long>;
  parameter rangeEnd   :: <C-both-long>;
  parameter newStyles  :: <StScrpHandle>;
  parameter fRedraw    :: <MacBoolean>;
  parameter hTE        :: <TEHandle>;
  c-name: "TEUseStyleScrap";
  c-modifiers: "pascal";
end;

define inline-only C-function TECustomHook
  parameter which      :: <TEIntHook>;
  parameter addr       :: <UniversalProcPtr*>;
  parameter hTE        :: <TEHandle>;
  c-name: "TECustomHook";
  c-modifiers: "pascal";
end;

define inline-only C-function TENumStyles
  parameter rangeStart :: <C-both-long>;
  parameter rangeEnd   :: <C-both-long>;
  parameter hTE        :: <TEHandle>;
  result value :: <C-both-long>;
  c-name: "TENumStyles";
  c-modifiers: "pascal";
end;

define inline-only C-function TEFeatureFlag
  parameter feature    :: <C-short>;
  parameter action     :: <C-short>;
  parameter hTE        :: <TEHandle>;
  result value :: <C-short>;
  c-name: "TEFeatureFlag";
  c-modifiers: "pascal";
end;

define inline-only C-function TEGetHiliteRgn
  parameter region     :: <RgnHandle>;
  parameter hTE        :: <TEHandle>;
  result value :: <OSErr>;
  c-name: "TEGetHiliteRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function TESetScrapLength
  parameter length     :: <C-both-long>;
  c-name: "TESetScrapLength";
  c-modifiers: "pascal";
end;

define inline-only C-function TEFromScrap
  result value :: <OSErr>;
  c-name: "TEFromScrap";
  c-modifiers: "pascal";
end;

define inline-only C-function TEToScrap
  result value :: <OSErr>;
  c-name: "TEToScrap";
  c-modifiers: "pascal";
end;

define inline-only C-function TESetClickLoop
  parameter clikProc   :: <TEClickLoopUPP>;
  parameter hTE        :: <TEHandle>;
  c-name: "TESetClickLoop";
  c-modifiers: "pascal";
end;

define inline-only C-function TESetWordBreak
  parameter wBrkProc   :: <WordBreakUPP>;
  parameter hTE        :: <TEHandle>;
  c-name: "TESetWordBreak";
  c-modifiers: "pascal";
end;

