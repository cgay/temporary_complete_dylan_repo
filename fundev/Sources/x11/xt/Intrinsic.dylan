Module:    Xt
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Intrinsic.h"; do not edit.

//	XConsortium: Intrinsic.h,v 1.175 92/03/02 16:43:31 converse Exp 
define inline-only constant $XtSpecificationRelease     =    5;
define inline constant <X-String> = <C-string>;
define inline-only constant <_XtString> = <C-string>;
define inline-only constant <_XtBoolean> = <X-Boolean>;
define inline-only constant <_XtDimension> = <C-Dimension>;
define inline-only constant <_XtKeyCode> = <KeyCode>;
define inline-only constant <_XtPosition> = <C-Position>;
define inline-only constant <_XtXtEnum> = <C-XtEnum>;
define C-subtype <Widget> ( <C-void*> ) end;
define inline constant <WidgetList> = <Widget*>;
define C-subtype <WidgetClass> ( <C-void*> ) end;
define C-subtype <CompositeWidget> ( <C-void*> ) end;
define inline constant <XtActionList> = <XtActionsRec*>;
define C-subtype <XtEventTable> ( <C-void*> ) end;
define C-subtype <XtAppContext> ( <C-void*> ) end;
define inline constant <C-XtValueMask> = <C-both-unsigned-long>;
define inline constant <XtValueMask*> = <C-both-unsigned-long*>;
define inline constant <XtValueMask> = <unsigned-32-bits>;
define inline constant <C-XtIntervalId> = <C-both-unsigned-long>;
define inline constant <XtIntervalId*> = <C-both-unsigned-long*>;
define inline constant <XtIntervalId> = <unsigned-32-bits>;
define inline constant <C-XtInputId> = <C-both-unsigned-long>;
define inline constant <XtInputId*> = <C-both-unsigned-long*>;
define inline constant <XtInputId> = <unsigned-32-bits>;
define inline constant <C-XtWorkProcId> = <C-both-unsigned-long>;
define inline constant <XtWorkProcId*> = <C-both-unsigned-long*>;
define inline constant <XtWorkProcId> = <unsigned-32-bits>;
define inline constant <XtGeometryMask> = <C-unsigned-int>;
define inline constant <C-XtGCMask> = <C-both-unsigned-long>;
define inline constant <XtGCMask*> = <C-both-unsigned-long*>;
define inline constant <XtGCMask> = <unsigned-32-bits>;
define inline constant <C-Pixel> = <C-unsigned-long>;
define inline constant <Pixel*> = <C-unsigned-long*>;
define inline constant <Pixel> = <integer>;
define inline constant <XtCacheType> = <C-int>;
define inline-only constant $XtCacheNone                = #x001;
define inline-only constant $XtCacheAll                 = #x002;
define inline-only constant $XtCacheByDisplay           = #x003;
define inline-only constant $XtCacheRefCount            = #x100;
define inline constant <XtArgVal> = <C-both-long>;
define inline constant <C-XtEnum> = <C-unsigned-char>;
define inline constant <XtEnum> = limited(<integer>, min: 0, max: #xFF);
define inline constant <C-Cardinal> = <C-unsigned-int>;
define inline constant <C-Dimension> = <C-unsigned-short>;
define inline constant <C-Position> = <C-short>;
define inline constant <XtPointer> = <C-void*>;
define inline constant <Opaque> = <XtPointer>;
define C-subtype <XtTranslations> ( <C-void*> ) end;
define C-subtype <XtAccelerators> ( <C-void*> ) end;
define inline constant <Modifiers> = <C-unsigned-int>;

define C-subtype <XtActionProc> ( <C-function-pointer> ) end;
define macro <XtActionProc>-callback-wrapper
 { <XtActionProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  parameter event      :: <XEvent*>;
  parameter params     :: <X-String*>;
  output parameter num-params :: <Cardinal*>;
 end C-callable-wrapper }
end macro;
define inline constant <XtBoundActions> = <XtActionProc*>;

define C-struct <XtActionsRec>
  sealed inline-only slot string-value   :: <X-String>;
  sealed inline-only slot proc-value     :: <XtActionProc>;
  pointer-type-name: <XtActionsRec*>;
  c-name: "struct _XtActionsRec";
end C-struct <XtActionsRec>;
// enum XtAddressMode:
define inline-only constant $XtAddress = -1 + 1;
define inline-only constant $XtBaseOffset = $XtAddress + 1;
define inline-only constant $XtImmediate = $XtBaseOffset + 1;
define inline-only constant $XtResourceString = $XtImmediate + 1;
define inline-only constant $XtResourceQuark = $XtResourceString + 1;
define inline-only constant $XtWidgetBaseOffset = $XtResourceQuark + 1;
define inline-only constant $XtProcedureArg = $XtWidgetBaseOffset + 1;


define C-struct <XtConvertArgRec>
  sealed inline-only slot address-mode-value :: <C-int>;
  sealed inline-only slot address-id-value :: <XtPointer>;
  sealed inline-only slot size-value     :: <C-Cardinal>;
  pointer-type-name: <XtConvertArgRec*>;
end C-struct <XtConvertArgRec>;
define inline constant <XtConvertArgList> = <XtConvertArgRec*>;

define C-subtype <XtConvertArgProc> ( <C-function-pointer> ) end;
define macro <XtConvertArgProc>-callback-wrapper
 { <XtConvertArgProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  output parameter size :: <Cardinal*>;
  parameter value      :: <XrmValue*>;
 end C-callable-wrapper }
end macro;

define C-struct <XtWidgetGeometry>
  sealed inline-only slot request-mode-value :: <XtGeometryMask>;
  sealed inline-only slot x-value        :: <C-Position>;
  sealed inline-only slot y-value        :: <C-Position>;
  sealed inline-only slot width-value    :: <C-Dimension>;
  sealed inline-only slot height-value   :: <C-Dimension>;
  sealed inline-only slot border-width-value :: <C-Dimension>;
  sealed inline-only slot sibling-value  :: <Widget>;
  sealed inline-only slot stack-mode-value :: <C-int>;
  pointer-type-name: <XtWidgetGeometry*>;
end C-struct <XtWidgetGeometry>;
define inline-only constant $XtCWQueryOnly              = ash(1,7);
define inline-only constant $XtSMDontChange             =    5;

define C-subtype <XtConverter> ( <C-function-pointer> ) end;
define macro <XtConverter>-callback-wrapper
 { <XtConverter>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter args       :: <XrmValue*>;
  output parameter num-args :: <Cardinal*>;
  parameter from       :: <XrmValue*>;
  parameter to         :: <XrmValue*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtTypeConverter> ( <C-function-pointer> ) end;
define macro <XtTypeConverter>-callback-wrapper
 { <XtTypeConverter>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValue*>;
  output parameter num-args :: <Cardinal*>;
  parameter from       :: <XrmValue*>;
  parameter to         :: <XrmValue*>;
  output parameter converter-data :: <XtPointer*>;
  result value :: <X-Boolean>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtDestructor> ( <C-function-pointer> ) end;
define macro <XtDestructor>-callback-wrapper
 { <XtDestructor>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter app        :: <XtAppContext>;
  parameter to         :: <XrmValue*>;
  parameter converter-data :: <XtPointer>;
  parameter args       :: <XrmValue*>;
  output parameter num-args :: <Cardinal*>;
 end C-callable-wrapper }
end macro;
define inline constant <XtCacheRef> = <Opaque>;
define inline constant <XtActionHookId> = <Opaque>;

define C-subtype <XtActionHookProc> ( <C-function-pointer> ) end;
define macro <XtActionHookProc>-callback-wrapper
 { <XtActionHookProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter w          :: <Widget>;
  parameter client-data :: <XtPointer>;
  parameter action-name :: <X-String>;
  parameter event      :: <XEvent*>;
  parameter params     :: <X-String*>;
  output parameter num-params :: <Cardinal*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtKeyProc> ( <C-function-pointer> ) end;
define macro <XtKeyProc>-callback-wrapper
 { <XtKeyProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter dpy        :: <Display*>;
  parameter keycode    :: <_XtKeyCode>;
  parameter modifiers  :: <Modifiers>;
  output parameter modifiers-return :: <Modifiers*>;
  output parameter keysym-return :: <KeySym*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtCaseProc> ( <C-function-pointer> ) end;
define macro <XtCaseProc>-callback-wrapper
 { <XtCaseProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter display    :: <Display*>;
  parameter keysym     :: <C-KeySym>;
  output parameter lower-return :: <KeySym*>;
  output parameter upper-return :: <KeySym*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtEventHandler> ( <C-function-pointer> ) end;
define macro <XtEventHandler>-callback-wrapper
 { <XtEventHandler>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  parameter event      :: <XEvent*>;
  parameter continue-to-dispatch :: <X-Boolean*>;
 end C-callable-wrapper }
end macro;
define inline constant <C-EventMask> = <C-both-unsigned-long>;
define inline constant <EventMask*> = <C-both-unsigned-long*>;
define inline constant <EventMask> = <unsigned-32-bits>;
// enum XtListPosition:
define inline-only constant $XtListHead = -1 + 1;
define inline-only constant $XtListTail = $XtListHead + 1;

define inline constant <C-XtInputMask> = <C-both-unsigned-long>;
define inline constant <XtInputMask*> = <C-both-unsigned-long*>;
define inline constant <XtInputMask> = <unsigned-32-bits>;
define inline-only constant $XtInputNoneMask            =    0;
define inline-only constant $XtInputReadMask            = ash(1,0);
define inline-only constant $XtInputWriteMask           = ash(1,1);
define inline-only constant $XtInputExceptMask          = ash(1,2);

define C-subtype <XtTimerCallbackProc> ( <C-function-pointer> ) end;
define macro <XtTimerCallbackProc>-callback-wrapper
 { <XtTimerCallbackProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter closure    :: <XtPointer>;
  output parameter id  :: <XtIntervalId*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtInputCallbackProc> ( <C-function-pointer> ) end;
define macro <XtInputCallbackProc>-callback-wrapper
 { <XtInputCallbackProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter closure    :: <XtPointer>;
  output parameter source :: <C-int*>;
  output parameter id  :: <XtInputId*>;
 end C-callable-wrapper }
end macro;

define C-struct <Arg>
  sealed inline-only slot name-value     :: <X-String>;
  sealed inline-only slot value-value    :: <XtArgVal>;
  pointer-type-name: <Arg*>;
end C-struct <Arg>;
define inline constant <ArgList> = <Arg*>;
define inline constant <XtVarArgsList> = <XtPointer>;

define C-subtype <XtCallbackProc> ( <C-function-pointer> ) end;
define macro <XtCallbackProc>-callback-wrapper
 { <XtCallbackProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  parameter call-data  :: <XtPointer>;
 end C-callable-wrapper }
end macro;

define C-struct <XtCallbackRec>
  sealed inline-only slot callback-value :: <XtCallbackProc>;
  sealed inline-only slot closure-value  :: <XtPointer>;
  pointer-type-name: <XtCallbackRec*>;
  c-name: "struct _XtCallbackRec";
end C-struct <XtCallbackRec>;
define inline constant <XtCallbackList> = <XtCallbackRec*>;
// enum XtCallbackStatus:
define inline-only constant $XtCallbackNoList = -1 + 1;
define inline-only constant $XtCallbackHasNone = $XtCallbackNoList + 1;
define inline-only constant $XtCallbackHasSome = $XtCallbackHasNone + 1;

// enum XtGeometryResult:
define inline-only constant $XtGeometryYes = -1 + 1;
define inline-only constant $XtGeometryNo = $XtGeometryYes + 1;
define inline-only constant $XtGeometryAlmost = $XtGeometryNo + 1;
define inline-only constant $XtGeometryDone = $XtGeometryAlmost + 1;

// enum XtGrabKind:
define inline-only constant $XtGrabNone = -1 + 1;
define inline-only constant $XtGrabNonexclusive = $XtGrabNone + 1;
define inline-only constant $XtGrabExclusive = $XtGrabNonexclusive + 1;


define C-struct <XtPopdownIDRec>
  sealed inline-only slot shell-widget-value :: <Widget>;
  sealed inline-only slot enable-widget-value :: <Widget>;
  pointer-type-name: <XtPopdownIDRec*>;
end C-struct <XtPopdownIDRec>;
define inline constant <XtPopdownID> = <XtPopdownIDRec*>;

define C-struct <XtResource>
  sealed inline-only slot resource-name-value :: <X-String>;
  sealed inline-only slot resource-class-value :: <X-String>;
  sealed inline-only slot resource-type-value :: <X-String>;
  sealed inline-only slot resource-size-value :: <C-Cardinal>;
  sealed inline-only slot resource-offset-value :: <C-Cardinal>;
  sealed inline-only slot default-type-value :: <X-String>;
  sealed inline-only slot default-addr-value :: <XtPointer>;
  pointer-type-name: <XtResource*>;
  c-name: "struct _XtResource";
end C-struct <XtResource>;
define inline constant <XtResourceList> = <XtResource*>;

define C-subtype <XtResourceDefaultProc> ( <C-function-pointer> ) end;
define macro <XtResourceDefaultProc>-callback-wrapper
 { <XtResourceDefaultProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  parameter offset     :: <C-int>;
  parameter value      :: <XrmValue*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtLanguageProc> ( <C-function-pointer> ) end;
define macro <XtLanguageProc>-callback-wrapper
 { <XtLanguageProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter dpy        :: <Display*>;
  parameter xnl        :: <X-String>;
  parameter client-data :: <XtPointer>;
  result value :: <X-String>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtErrorMsgHandler> ( <C-function-pointer> ) end;
define macro <XtErrorMsgHandler>-callback-wrapper
 { <XtErrorMsgHandler>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter name       :: <X-String>;
  parameter type       :: <X-String>;
  parameter class      :: <X-String>;
  parameter default    :: <X-String>;
  parameter params     :: <X-String*>;
  output parameter num-params :: <Cardinal*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtErrorHandler> ( <C-function-pointer> ) end;
define macro <XtErrorHandler>-callback-wrapper
 { <XtErrorHandler>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter msg        :: <X-String>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtCreatePopupChildProc> ( <C-function-pointer> ) end;
define macro <XtCreatePopupChildProc>-callback-wrapper
 { <XtCreatePopupChildProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter shell      :: <Widget>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtWorkProc> ( <C-function-pointer> ) end;
define macro <XtWorkProc>-callback-wrapper
 { <XtWorkProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter closure    :: <XtPointer>;
  result value :: <X-Boolean>;
 end C-callable-wrapper }
end macro;

define C-struct <SubstitutionRec>
  sealed inline-only slot match-value    :: <C-char>;
  sealed inline-only slot substitution-value :: <X-String>;
  pointer-type-name: <SubstitutionRec*>;
end C-struct <SubstitutionRec>;
define inline constant <Substitution> = <SubstitutionRec*>;

define C-subtype <XtFilePredicate> ( <C-function-pointer> ) end;
define macro <XtFilePredicate>-callback-wrapper
 { <XtFilePredicate>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter filename   :: <X-String>;
  result value :: <X-Boolean>;
 end C-callable-wrapper }
end macro;
define inline constant <XtRequestId> = <XtPointer>;

define C-subtype <XtConvertSelectionProc> ( <C-function-pointer> ) end;
define macro <XtConvertSelectionProc>-callback-wrapper
 { <XtConvertSelectionProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  output parameter selection :: <Atom*>;
  output parameter target :: <Atom*>;
  output parameter type-return :: <Atom*>;
  output parameter value-return :: <XtPointer*>;
  output parameter length-return :: <C-both-unsigned-long*>;
  output parameter format-return :: <C-int*>;
  result value :: <X-Boolean>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtLoseSelectionProc> ( <C-function-pointer> ) end;
define macro <XtLoseSelectionProc>-callback-wrapper
 { <XtLoseSelectionProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  output parameter selection :: <Atom*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtSelectionDoneProc> ( <C-function-pointer> ) end;
define macro <XtSelectionDoneProc>-callback-wrapper
 { <XtSelectionDoneProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  output parameter selection :: <Atom*>;
  output parameter target :: <Atom*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtSelectionCallbackProc> ( <C-function-pointer> ) end;
define macro <XtSelectionCallbackProc>-callback-wrapper
 { <XtSelectionCallbackProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  output parameter selection :: <Atom*>;
  output parameter type :: <Atom*>;
  parameter value      :: <XtPointer>;
  output parameter length :: <C-both-unsigned-long*>;
  output parameter format :: <C-int*>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtLoseSelectionIncrProc> ( <C-function-pointer> ) end;
define macro <XtLoseSelectionIncrProc>-callback-wrapper
 { <XtLoseSelectionIncrProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  output parameter selection :: <Atom*>;
  parameter client-data :: <XtPointer>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtSelectionDoneIncrProc> ( <C-function-pointer> ) end;
define macro <XtSelectionDoneIncrProc>-callback-wrapper
 { <XtSelectionDoneIncrProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  output parameter selection :: <Atom*>;
  output parameter target :: <Atom*>;
  parameter receiver-id :: <XtRequestId*>;
  parameter client-data :: <XtPointer>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtConvertSelectionIncrProc> ( <C-function-pointer> ) end;
define macro <XtConvertSelectionIncrProc>-callback-wrapper
 { <XtConvertSelectionIncrProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  output parameter selection :: <Atom*>;
  output parameter target :: <Atom*>;
  output parameter type :: <Atom*>;
  output parameter value :: <XtPointer*>;
  output parameter length :: <C-both-unsigned-long*>;
  output parameter format :: <C-int*>;
  output parameter max-length :: <C-both-unsigned-long*>;
  parameter client-data :: <XtPointer>;
  parameter receiver-id :: <XtRequestId*>;
  result value :: <X-Boolean>;
 end C-callable-wrapper }
end macro;

define C-subtype <XtCancelConvertSelectionProc> ( <C-function-pointer> ) end;
define macro <XtCancelConvertSelectionProc>-callback-wrapper
 { <XtCancelConvertSelectionProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget     :: <Widget>;
  output parameter selection :: <Atom*>;
  output parameter target :: <Atom*>;
  parameter receiver-id :: <XtRequestId*>;
  parameter client-data :: <XtPointer>;
 end C-callable-wrapper }
end macro;

define inline-only C-function XtConvertAndStore
  parameter widget     :: <Widget>;
  parameter from-type  ::  /* const */ <_XtString>;
  parameter from       :: <XrmValue*>;
  parameter to-type    ::  /* const */ <_XtString>;
  parameter to-in-out  :: <XrmValue*>;
  result value :: <X-Boolean>;
  c-name: "XtConvertAndStore";
end;

define inline-only C-function XtCallConverter
  parameter dpy        :: <Display*>;
  parameter converter  :: <XtTypeConverter>;
  parameter args       :: <XrmValuePtr>;
  parameter num-args   :: <C-Cardinal>;
  parameter from       :: <XrmValuePtr>;
  parameter to-in-out  :: <XrmValue*>;
  output parameter cache-ref-return :: <XtCacheRef*>;
  result value :: <X-Boolean>;
  c-name: "XtCallConverter";
end;

define inline-only C-function XtDispatchEvent
  parameter event      :: <XEvent*>;
  result value :: <X-Boolean>;
  c-name: "XtDispatchEvent";
end;

define inline-only C-function XtCallAcceptFocus
  parameter widget     :: <Widget>;
  output parameter time :: <Time*>;
  result value :: <X-Boolean>;
  c-name: "XtCallAcceptFocus";
end;

define inline-only C-function XtAppPeekEvent
  parameter app-context :: <XtAppContext>;
  parameter event-return :: <XEvent*>;
  result value :: <X-Boolean>;
  c-name: "XtAppPeekEvent";
end;

define inline-only C-function XtIsSubclass
  parameter widget     :: <Widget>;
  parameter widgetClass :: <WidgetClass>;
  result value :: <X-Boolean>;
  c-name: "XtIsSubclass";
end;

define inline-only C-function XtIsObject
  parameter object     :: <Widget>;
  result value :: <X-Boolean>;
  c-name: "XtIsObject";
end;

define inline-only C-function %XtCheckSubclassFlag
  parameter object     :: <Widget>;
  parameter type-flag  :: <_XtXtEnum>;
  result value :: <X-Boolean>;
  c-name: "_XtCheckSubclassFlag";
end;

define inline-only C-function %XtIsSubclassOf
  parameter object     :: <Widget>;
  parameter widget-class :: <WidgetClass>;
  parameter flag-class :: <WidgetClass>;
  parameter type-flag  :: <_XtXtEnum>;
  result value :: <X-Boolean>;
  c-name: "_XtIsSubclassOf";
end;

define inline-only C-function XtIsManaged
  parameter rectobj    :: <Widget>;
  result value :: <X-Boolean>;
  c-name: "XtIsManaged";
end;

define inline-only C-function XtIsRealized
  parameter widget     :: <Widget>;
  result value :: <X-Boolean>;
  c-name: "XtIsRealized";
end;

define inline-only C-function XtIsSensitive
  parameter widget     :: <Widget>;
  result value :: <X-Boolean>;
  c-name: "XtIsSensitive";
end;

define inline-only C-function XtOwnSelection
  parameter widget     :: <Widget>;
  parameter selection  :: <C-Atom>;
  parameter time       :: <C-Time>;
  parameter convert    :: <XtConvertSelectionProc>;
  parameter lose       :: <XtLoseSelectionProc>;
  parameter done       :: <XtSelectionDoneProc>;
  result value :: <X-Boolean>;
  c-name: "XtOwnSelection";
end;

define inline-only C-function XtOwnSelectionIncremental
  parameter widget     :: <Widget>;
  parameter selection  :: <C-Atom>;
  parameter time       :: <C-Time>;
  parameter convert-callback :: <XtConvertSelectionIncrProc>;
  parameter lose-callback :: <XtLoseSelectionIncrProc>;
  parameter done-callback :: <XtSelectionDoneIncrProc>;
  parameter cancel-callback :: <XtCancelConvertSelectionProc>;
  parameter client-data :: <XtPointer>;
  result value :: <X-Boolean>;
  c-name: "XtOwnSelectionIncremental";
end;

define inline-only C-function XtMakeResizeRequest
  parameter widget     :: <Widget>;
  parameter width      :: <_XtDimension>;
  parameter height     :: <_XtDimension>;
  output parameter width-return :: <Dimension*>;
  output parameter height-return :: <Dimension*>;
  result value :: <C-int>;
  c-name: "XtMakeResizeRequest";
end;

define inline-only C-function XtTranslateCoords
  parameter widget     :: <Widget>;
  parameter x          :: <_XtPosition>;
  parameter y          :: <_XtPosition>;
  output parameter rootx-return :: <Position*>;
  output parameter rooty-return :: <Position*>;
  c-name: "XtTranslateCoords";
end;

define inline-only C-function XtGetKeysymTable
  parameter dpy        :: <Display*>;
  output parameter min-keycode-return :: <KeyCode*>;
  output parameter keysyms-per-keycode-return :: <C-int*>;
  result value :: <KeySym*>;
  c-name: "XtGetKeysymTable";
end;

define inline-only C-function XtKeysymToKeycodeList
  parameter dpy        :: <Display*>;
  parameter keysym     :: <C-KeySym>;
  parameter keycodes-return :: <KeyCode**>;
  output parameter keycount-return :: <Cardinal*>;
  c-name: "XtKeysymToKeycodeList";
end;

define inline-only C-function XtDisplayStringConversionWarning
  parameter dpy        :: <Display*>;
  parameter from-value ::  /* const */ <_XtString>;
  parameter to-type    ::  /* const */ <_XtString>;
  c-name: "XtDisplayStringConversionWarning";
end;
define C-variable colorConvertArgs :: <XtConvertArgRec*>
  c-name: "colorConvertArgs";
end;
define C-variable screenConvertArg :: <XtConvertArgRec*>
  c-name: "screenConvertArg";
end;

define inline-only C-function XtSetTypeConverter
  parameter from-type  ::  /* const */ <_XtString>;
  parameter to-type    ::  /* const */ <_XtString>;
  parameter converter  :: <XtTypeConverter>;
  parameter convert-args :: <XtConvertArgList>;
  parameter num-args   :: <C-Cardinal>;
  parameter cache-type :: <XtCacheType>;
  parameter destructor :: <XtDestructor>;
  c-name: "XtSetTypeConverter";
end;

define inline-only C-function XtAppSetTypeConverter
  parameter app-context :: <XtAppContext>;
  parameter from-type  ::  /* const */ <_XtString>;
  parameter to-type    ::  /* const */ <_XtString>;
  parameter converter  :: <XtTypeConverter>;
  parameter convert-args :: <XtConvertArgList>;
  parameter num-args   :: <C-Cardinal>;
  parameter cache-type :: <XtCacheType>;
  parameter destructor :: <XtDestructor>;
  c-name: "XtAppSetTypeConverter";
end;

define inline-only C-function XtParseTranslationTable
  parameter table      ::  /* const */ <_XtString>;
  result value :: <XtTranslations>;
  c-name: "XtParseTranslationTable";
end;

define inline-only C-function XtParseAcceleratorTable
  parameter source     ::  /* const */ <_XtString>;
  result value :: <XtAccelerators>;
  c-name: "XtParseAcceleratorTable";
end;

define inline-only C-function XtOverrideTranslations
  parameter widget     :: <Widget>;
  parameter translations :: <XtTranslations>;
  c-name: "XtOverrideTranslations";
end;

define inline-only C-function XtAugmentTranslations
  parameter widget     :: <Widget>;
  parameter translations :: <XtTranslations>;
  c-name: "XtAugmentTranslations";
end;

define inline-only C-function XtInstallAccelerators
  parameter destination :: <Widget>;
  parameter source     :: <Widget>;
  c-name: "XtInstallAccelerators";
end;

define inline-only C-function XtInstallAllAccelerators
  parameter destination :: <Widget>;
  parameter source     :: <Widget>;
  c-name: "XtInstallAllAccelerators";
end;

define inline-only C-function XtUninstallTranslations
  parameter widget     :: <Widget>;
  c-name: "XtUninstallTranslations";
end;

define inline-only C-function XtAppAddActions
  parameter app-context :: <XtAppContext>;
  parameter actions    :: <XtActionList>;
  parameter num-actions :: <C-Cardinal>;
  c-name: "XtAppAddActions";
end;

define inline-only C-function XtAppAddActionHook
  parameter app-context :: <XtAppContext>;
  parameter proc       :: <XtActionHookProc>;
  parameter client-data :: <XtPointer>;
  result value :: <XtActionHookId>;
  c-name: "XtAppAddActionHook";
end;

define inline-only C-function XtRemoveActionHook
  parameter id         :: <XtActionHookId>;
  c-name: "XtRemoveActionHook";
end;

define inline-only C-function XtGetActionList
  parameter widget-class :: <WidgetClass>;
  parameter actions-return :: <XtActionList*>;
  output parameter num-actions-return :: <Cardinal*>;
  c-name: "XtGetActionList";
end;

define inline-only C-function XtCallActionProc
  parameter widget     :: <Widget>;
  parameter action     ::  /* const */ <_XtString>;
  parameter event      :: <XEvent*>;
  parameter params     :: <X-String*>;
  parameter num-params :: <C-Cardinal>;
  c-name: "XtCallActionProc";
end;

define inline-only C-function XtRegisterGrabAction
  parameter action-proc :: <XtActionProc>;
  parameter owner-events :: <_XtBoolean>;
  parameter event-mask :: <C-unsigned-int>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  c-name: "XtRegisterGrabAction";
end;

define inline-only C-function XtSetMultiClickTime
  parameter dpy        :: <Display*>;
  parameter milliseconds :: <C-int>;
  c-name: "XtSetMultiClickTime";
end;

define inline-only C-function XtGetMultiClickTime
  parameter dpy        :: <Display*>;
  result value :: <C-int>;
  c-name: "XtGetMultiClickTime";
end;

define inline-only C-function XtGetActionKeysym
  parameter event      :: <XEvent*>;
  output parameter modifiers-return :: <Modifiers*>;
  result value :: <C-KeySym>;
  c-name: "XtGetActionKeysym";
end;

define inline-only C-function XtTranslateKeycode
  parameter dpy        :: <Display*>;
  parameter keycode    :: <_XtKeyCode>;
  parameter modifiers  :: <Modifiers>;
  output parameter modifiers-return :: <Modifiers*>;
  output parameter keysym-return :: <KeySym*>;
  c-name: "XtTranslateKeycode";
end;

define inline-only C-function XtTranslateKey
  parameter dpy        :: <Display*>;
  parameter keycode    :: <_XtKeyCode>;
  parameter modifiers  :: <Modifiers>;
  output parameter modifiers-return :: <Modifiers*>;
  output parameter keysym-return :: <KeySym*>;
  c-name: "XtTranslateKey";
end;

define inline-only C-function XtSetKeyTranslator
  parameter dpy        :: <Display*>;
  parameter proc       :: <XtKeyProc>;
  c-name: "XtSetKeyTranslator";
end;

define inline-only C-function XtRegisterCaseConverter
  parameter dpy        :: <Display*>;
  parameter proc       :: <XtCaseProc>;
  parameter start      :: <C-KeySym>;
  parameter stop       :: <C-KeySym>;
  c-name: "XtRegisterCaseConverter";
end;

define inline-only C-function XtConvertCase
  parameter dpy        :: <Display*>;
  parameter keysym     :: <C-KeySym>;
  output parameter lower-return :: <KeySym*>;
  output parameter upper-return :: <KeySym*>;
  c-name: "XtConvertCase";
end;
define inline-only constant $XtAllEvents                =
	c-type-cast(<C-EventMask>,-1);

define inline-only C-function XtAddEventHandler
  parameter widget     :: <Widget>;
  parameter event-mask :: <C-EventMask>;
  parameter nonmaskable :: <_XtBoolean>;
  parameter proc       :: <XtEventHandler>;
  parameter closure    :: <XtPointer>;
  c-name: "XtAddEventHandler";
end;

define inline-only C-function XtRemoveEventHandler
  parameter widget     :: <Widget>;
  parameter event-mask :: <C-EventMask>;
  parameter nonmaskable :: <_XtBoolean>;
  parameter proc       :: <XtEventHandler>;
  parameter closure    :: <XtPointer>;
  c-name: "XtRemoveEventHandler";
end;

define inline-only C-function XtAddRawEventHandler
  parameter widget     :: <Widget>;
  parameter event-mask :: <C-EventMask>;
  parameter nonmaskable :: <_XtBoolean>;
  parameter proc       :: <XtEventHandler>;
  parameter closure    :: <XtPointer>;
  c-name: "XtAddRawEventHandler";
end;

define inline-only C-function XtRemoveRawEventHandler
  parameter widget     :: <Widget>;
  parameter event-mask :: <C-EventMask>;
  parameter nonmaskable :: <_XtBoolean>;
  parameter proc       :: <XtEventHandler>;
  parameter closure    :: <XtPointer>;
  c-name: "XtRemoveRawEventHandler";
end;

define inline-only C-function XtInsertEventHandler
  parameter widget     :: <Widget>;
  parameter event-mask :: <C-EventMask>;
  parameter nonmaskable :: <_XtBoolean>;
  parameter proc       :: <XtEventHandler>;
  parameter closure    :: <XtPointer>;
  parameter position   :: <C-int>;
  c-name: "XtInsertEventHandler";
end;

define inline-only C-function XtInsertRawEventHandler
  parameter widget     :: <Widget>;
  parameter event-mask :: <C-EventMask>;
  parameter nonmaskable :: <_XtBoolean>;
  parameter proc       :: <XtEventHandler>;
  parameter closure    :: <XtPointer>;
  parameter position   :: <C-int>;
  c-name: "XtInsertRawEventHandler";
end;

define inline-only C-function XtBuildEventMask
  parameter widget     :: <Widget>;
  result value :: <C-EventMask>;
  c-name: "XtBuildEventMask";
end;

define inline-only C-function XtAddGrab
  parameter widget     :: <Widget>;
  parameter exclusive  :: <_XtBoolean>;
  parameter spring-loaded :: <_XtBoolean>;
  c-name: "XtAddGrab";
end;

define inline-only C-function XtRemoveGrab
  parameter widget     :: <Widget>;
  c-name: "XtRemoveGrab";
end;

define inline-only C-function XtAppProcessEvent
  parameter app-context :: <XtAppContext>;
  parameter mask       :: <C-XtInputMask>;
  c-name: "XtAppProcessEvent";
end;

define inline-only C-function XtAppMainLoop
  parameter app-context :: <XtAppContext>;
  c-name: "XtAppMainLoop";
end;

define inline-only C-function XtAddExposureToRegion
  parameter event      :: <XEvent*>;
  parameter region     :: <Region>;
  c-name: "XtAddExposureToRegion";
end;

define inline-only C-function XtSetKeyboardFocus
  parameter subtree    :: <Widget>;
  parameter descendent :: <Widget>;
  c-name: "XtSetKeyboardFocus";
end;

define inline-only C-function XtLastTimestampProcessed
  parameter dpy        :: <Display*>;
  result value :: <C-Time>;
  c-name: "XtLastTimestampProcessed";
end;

define inline-only C-function XtAppAddTimeOut
  parameter app-context :: <XtAppContext>;
  parameter interval   :: <C-both-unsigned-long>;
  parameter proc       :: <XtTimerCallbackProc>;
  parameter closure    :: <XtPointer>;
  result value :: <C-XtIntervalId>;
  c-name: "XtAppAddTimeOut";
end;

define inline-only C-function XtRemoveTimeOut
  parameter timer      :: <C-XtIntervalId>;
  c-name: "XtRemoveTimeOut";
end;

define inline-only C-function XtAppAddInput
  parameter app-context :: <XtAppContext>;
  parameter source     :: <C-int>;
  parameter condition  :: <XtPointer>;
  parameter proc       :: <XtInputCallbackProc>;
  parameter closure    :: <XtPointer>;
  result value :: <C-XtInputId>;
  c-name: "XtAppAddInput";
end;

define inline-only C-function XtRemoveInput
  parameter id         :: <C-XtInputId>;
  c-name: "XtRemoveInput";
end;

define inline-only C-function XtAppNextEvent
  parameter app-context :: <XtAppContext>;
  parameter event-return :: <XEvent*>;
  c-name: "XtAppNextEvent";
end;
define inline-only constant $XtIMXEvent                 =    1;
define inline-only constant $XtIMTimer                  =    2;
define inline-only constant $XtIMAlternateInput         =    4;
define inline-only constant $XtIMAll                    =
	logior($XtIMXEvent, $XtIMTimer, $XtIMAlternateInput);

define inline-only C-function XtAppPending
  parameter app-context :: <XtAppContext>;
  result value :: <C-XtInputMask>;
  c-name: "XtAppPending";
end;

define inline-only function XtIsRectObj (object);
  (%XtCheckSubclassFlag(object, #x02))
end;

define inline-only function XtIsWidget (object);
  (%XtCheckSubclassFlag(object, #x04))
end;

define inline-only function XtIsComposite (widget);
  (%XtCheckSubclassFlag(widget, #x08))
end;

define inline-only function XtIsConstraint (widget);
  (%XtCheckSubclassFlag(widget, #x10))
end;

define inline-only function XtIsShell (widget);
  (%XtCheckSubclassFlag(widget, #x20))
end;

define inline-only function XtIsOverrideShell (widget);
   (%XtIsSubclassOf(widget, c-type-cast(<WidgetClass>, overrideShellWidgetClass()),
	c-type-cast(<WidgetClass>, shellWidgetClass()), #x20))
end;

define inline-only function XtIsWMShell (widget);
  (%XtCheckSubclassFlag(widget, #x40))
end;

define inline-only function XtIsTransientShell (widget);
   (%XtIsSubclassOf(widget, c-type-cast(<WidgetClass>, transientShellWidgetClass()),
	c-type-cast(<WidgetClass>, wmShellWidgetClass()), #x40))
end;

define inline-only function XtIsTopLevelShell (widget);
  (%XtCheckSubclassFlag(widget, #x80))
end;

define inline-only function XtIsApplicationShell (widget);
   (%XtIsSubclassOf(widget, c-type-cast(<WidgetClass>, applicationShellWidgetClass()),
	c-type-cast(<WidgetClass>, topLevelShellWidgetClass()), #x80))
end;

define inline-only C-function XtRealizeWidget
  parameter widget     :: <Widget>;
  c-name: "XtRealizeWidget";
end;

define inline-only C-function XtDestroyWidget
  parameter widget     :: <Widget>;
  c-name: "XtDestroyWidget";
end;

define inline-only C-function XtSetSensitive
  parameter widget     :: <Widget>;
  parameter sensitive  :: <_XtBoolean>;
  c-name: "XtSetSensitive";
end;

define inline-only C-function XtSetMappedWhenManaged
  parameter widget     :: <Widget>;
  parameter mapped-when-managed :: <_XtBoolean>;
  c-name: "XtSetMappedWhenManaged";
end;

define inline-only C-function XtNameToWidget
  parameter reference  :: <Widget>;
  parameter names      ::  /* const */ <_XtString>;
  result value :: <Widget>;
  c-name: "XtNameToWidget";
end;

define inline-only C-function XtWindowToWidget
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  result value :: <Widget>;
  c-name: "XtWindowToWidget";
end;

define inline-only C-function XtMergeArgLists
  parameter args1      :: <ArgList>;
  parameter num-args1  :: <C-Cardinal>;
  parameter args2      :: <ArgList>;
  parameter num-args2  :: <C-Cardinal>;
  result value :: <ArgList>;
  c-name: "XtMergeArgLists";
end;
define inline-only constant $XtVaNestedList             =
	"XtVaNestedList";
define inline-only constant $XtVaTypedArg               =
	"XtVaTypedArg";

define inline-only C-function XtDisplay
  parameter widget     :: <Widget>;
  result value :: <Display*>;
  c-name: "XtDisplay";
end;

define inline-only C-function XtDisplayOfObject
  parameter object     :: <Widget>;
  result value :: <Display*>;
  c-name: "XtDisplayOfObject";
end;

define inline-only C-function XtScreen
  parameter widget     :: <Widget>;
  result value :: <Screen*>;
  c-name: "XtScreen";
end;

define inline-only C-function XtScreenOfObject
  parameter object     :: <Widget>;
  result value :: <Screen*>;
  c-name: "XtScreenOfObject";
end;

define inline-only C-function XtWindow
  parameter widget     :: <Widget>;
  result value :: <C-Window>;
  c-name: "XtWindow";
end;

define inline-only C-function XtWindowOfObject
  parameter object     :: <Widget>;
  result value :: <C-Window>;
  c-name: "XtWindowOfObject";
end;

define inline-only C-function XtName
  parameter object     :: <Widget>;
  result value :: <X-String>;
  c-name: "XtName";
end;

define inline-only C-function XtSuperclass
  parameter object     :: <Widget>;
  result value :: <WidgetClass>;
  c-name: "XtSuperclass";
end;

define inline-only C-function XtClass
  parameter object     :: <Widget>;
  result value :: <WidgetClass>;
  c-name: "XtClass";
end;

define inline-only C-function XtParent
  parameter widget     :: <Widget>;
  result value :: <Widget>;
  c-name: "XtParent";
end;

define inline-only function XtMapWidget (widget);
  XMapWindow(XtDisplay(widget), XtWindow(widget))
end;

define inline-only function XtUnmapWidget (widget);
   XUnmapWindow(XtDisplay(widget), XtWindow(widget))
end;

define inline-only C-function XtAddCallback
  parameter widget     :: <Widget>;
  parameter callback-name ::  /* const */ <_XtString>;
  parameter callback   :: <XtCallbackProc>;
  parameter closure    :: <XtPointer>;
  c-name: "XtAddCallback";
end;

define inline-only C-function XtRemoveCallback
  parameter widget     :: <Widget>;
  parameter callback-name ::  /* const */ <_XtString>;
  parameter callback   :: <XtCallbackProc>;
  parameter closure    :: <XtPointer>;
  c-name: "XtRemoveCallback";
end;

define inline-only C-function XtAddCallbacks
  parameter widget     :: <Widget>;
  parameter callback-name ::  /* const */ <_XtString>;
  parameter callbacks  :: <XtCallbackList>;
  c-name: "XtAddCallbacks";
end;

define inline-only C-function XtRemoveCallbacks
  parameter widget     :: <Widget>;
  parameter callback-name ::  /* const */ <_XtString>;
  parameter callbacks  :: <XtCallbackList>;
  c-name: "XtRemoveCallbacks";
end;

define inline-only C-function XtRemoveAllCallbacks
  parameter widget     :: <Widget>;
  parameter callback-name ::  /* const */ <_XtString>;
  c-name: "XtRemoveAllCallbacks";
end;

define inline-only C-function XtCallCallbacks
  parameter widget     :: <Widget>;
  parameter callback-name ::  /* const */ <_XtString>;
  parameter call-data  :: <XtPointer>;
  c-name: "XtCallCallbacks";
end;

define inline-only C-function XtCallCallbackList
  parameter widget     :: <Widget>;
  parameter callbacks  :: <XtCallbackList>;
  parameter call-data  :: <XtPointer>;
  c-name: "XtCallCallbackList";
end;

define inline-only C-function XtHasCallbacks
  parameter widget     :: <Widget>;
  parameter callback-name ::  /* const */ <_XtString>;
  result value :: <C-int>;
  c-name: "XtHasCallbacks";
end;

define inline-only C-function XtMakeGeometryRequest
  parameter widget     :: <Widget>;
  parameter request    :: <XtWidgetGeometry*>;
  parameter reply-return :: <XtWidgetGeometry*>;
  result value :: <C-int>;
  c-name: "XtMakeGeometryRequest";
end;

define inline-only C-function XtQueryGeometry
  parameter widget     :: <Widget>;
  parameter intended   :: <XtWidgetGeometry*>;
  parameter preferred-return :: <XtWidgetGeometry*>;
  result value :: <C-int>;
  c-name: "XtQueryGeometry";
end;

define inline-only C-function XtCreatePopupShell
  parameter name       ::  /* const */ <_XtString>;
  parameter widgetClass :: <WidgetClass>;
  parameter parent     :: <Widget>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XtCreatePopupShell";
end;

define inline-only C-function XtPopup
  parameter popup-shell :: <Widget>;
  parameter grab-kind  :: <C-int>;
  c-name: "XtPopup";
end;

define inline-only C-function XtPopupSpringLoaded
  parameter popup-shell :: <Widget>;
  c-name: "XtPopupSpringLoaded";
end;

define inline-only C-function XtCallbackNone
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  parameter call-data  :: <XtPointer>;
  c-name: "XtCallbackNone";
end;

define inline-only C-function XtCallbackNonexclusive
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  parameter call-data  :: <XtPointer>;
  c-name: "XtCallbackNonexclusive";
end;

define inline-only C-function XtCallbackExclusive
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  parameter call-data  :: <XtPointer>;
  c-name: "XtCallbackExclusive";
end;

define inline-only C-function XtPopdown
  parameter popup-shell :: <Widget>;
  c-name: "XtPopdown";
end;

define inline-only C-function XtCallbackPopdown
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  parameter call-data  :: <XtPointer>;
  c-name: "XtCallbackPopdown";
end;

define inline-only C-function XtMenuPopupAction
  parameter widget     :: <Widget>;
  parameter event      :: <XEvent*>;
  parameter params     :: <X-String*>;
  output parameter num-params :: <Cardinal*>;
  c-name: "XtMenuPopupAction";
end;

define inline-only C-function XtCreateWidget
  parameter name       ::  /* const */ <_XtString>;
  parameter widget-class :: <WidgetClass>;
  parameter parent     :: <Widget>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XtCreateWidget";
end;

define inline-only C-function XtCreateManagedWidget
  parameter name       ::  /* const */ <_XtString>;
  parameter widget-class :: <WidgetClass>;
  parameter parent     :: <Widget>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XtCreateManagedWidget";
end;

define inline-only C-function XtAppCreateShell
  parameter application-name ::  /* const */ <_XtString>;
  parameter application-class ::  /* const */ <_XtString>;
  parameter widget-class :: <WidgetClass>;
  parameter display    :: <Display*>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XtAppCreateShell";
end;

define inline-only C-function XtToolkitInitialize
  c-name: "XtToolkitInitialize";
end;

define inline-only C-function XtSetLanguageProc
  parameter app-context :: <XtAppContext>;
  parameter proc       :: <XtLanguageProc>;
  parameter client-data :: <XtPointer>;
  result value :: <XtLanguageProc>;
  c-name: "XtSetLanguageProc";
end;

define inline-only C-function XtDisplayInitialize
  parameter app-context :: <XtAppContext>;
  parameter dpy        :: <Display*>;
  parameter application-name ::  /* const */ <_XtString>;
  parameter application-class ::  /* const */ <_XtString>;
  parameter options    :: <XrmOptionDescRec*>;
  parameter num-options :: <C-Cardinal>;
  output parameter argc :: <C-int*>;
  parameter argv       :: <C-string*>;
  c-name: "XtDisplayInitialize";
end;

define inline-only C-function XtAppInitialize
  output parameter app-context-return :: <XtAppContext*>;
  parameter application-class ::  /* const */ <_XtString>;
  parameter options    :: <XrmOptionDescList>;
  parameter num-options :: <C-Cardinal>;
  input output parameter argc-in-out :: <C-int*>;
  parameter argv-in-out :: <X-String*>;
  parameter fallback-resources :: <X-String*>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XtAppInitialize";
end;

define inline-only C-function XtOpenDisplay
  parameter app-context :: <XtAppContext>;
  parameter display-string ::  /* const */ <_XtString>;
  parameter application-name ::  /* const */ <_XtString>;
  parameter application-class ::  /* const */ <_XtString>;
  parameter options    :: <XrmOptionDescRec*>;
  parameter num-options :: <C-Cardinal>;
  output parameter argc :: <C-int*>;
  parameter argv       :: <C-string*>;
  result value :: <Display*>;
  c-name: "XtOpenDisplay";
end;

define inline-only C-function XtCreateApplicationContext
  result value :: <XtAppContext>;
  c-name: "XtCreateApplicationContext";
end;

define inline-only C-function XtAppSetFallbackResources
  parameter app-context :: <XtAppContext>;
  parameter specification-list :: <X-String*>;
  c-name: "XtAppSetFallbackResources";
end;

define inline-only C-function XtDestroyApplicationContext
  parameter app-context :: <XtAppContext>;
  c-name: "XtDestroyApplicationContext";
end;

define inline-only C-function XtInitializeWidgetClass
  parameter widget-class :: <WidgetClass>;
  c-name: "XtInitializeWidgetClass";
end;

define inline-only C-function XtWidgetToApplicationContext
  parameter widget     :: <Widget>;
  result value :: <XtAppContext>;
  c-name: "XtWidgetToApplicationContext";
end;

define inline-only C-function XtDisplayToApplicationContext
  parameter dpy        :: <Display*>;
  result value :: <XtAppContext>;
  c-name: "XtDisplayToApplicationContext";
end;

define inline-only C-function XtDatabase
  parameter dpy        :: <Display*>;
  result value :: <XrmDatabase>;
  c-name: "XtDatabase";
end;

define inline-only C-function XtScreenDatabase
  parameter screen     :: <Screen*>;
  result value :: <XrmDatabase>;
  c-name: "XtScreenDatabase";
end;

define inline-only C-function XtCloseDisplay
  parameter dpy        :: <Display*>;
  c-name: "XtCloseDisplay";
end;

define inline-only C-function XtGetApplicationResources
  parameter widget     :: <Widget>;
  parameter base       :: <XtPointer>;
  parameter resources  :: <XtResourceList>;
  parameter num-resources :: <C-Cardinal>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  c-name: "XtGetApplicationResources";
end;

define inline-only C-function XtGetSubresources
  parameter widget     :: <Widget>;
  parameter base       :: <XtPointer>;
  parameter name       ::  /* const */ <_XtString>;
  parameter class      ::  /* const */ <_XtString>;
  parameter resources  :: <XtResourceList>;
  parameter num-resources :: <C-Cardinal>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  c-name: "XtGetSubresources";
end;

define inline-only C-function XtSetValues
  parameter widget     :: <Widget>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  c-name: "XtSetValues";
end;

define inline-only C-function XtGetValues
  parameter widget     :: <Widget>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  c-name: "XtGetValues";
end;

define inline-only C-function XtSetSubvalues
  parameter base       :: <XtPointer>;
  parameter resources  :: <XtResourceList>;
  parameter num-resources :: <C-Cardinal>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  c-name: "XtSetSubvalues";
end;

define inline-only C-function XtGetSubvalues
  parameter base       :: <XtPointer>;
  parameter resources  :: <XtResourceList>;
  parameter num-resources :: <C-Cardinal>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  c-name: "XtGetSubvalues";
end;

define inline-only C-function XtGetResourceList
  parameter widget-class :: <WidgetClass>;
  parameter resources-return :: <XtResourceList*>;
  output parameter num-resources-return :: <Cardinal*>;
  c-name: "XtGetResourceList";
end;

define inline-only C-function XtGetConstraintResourceList
  parameter widget-class :: <WidgetClass>;
  parameter resources-return :: <XtResourceList*>;
  output parameter num-resources-return :: <Cardinal*>;
  c-name: "XtGetConstraintResourceList";
end;
define inline-only constant $XtUnspecifiedPixmap        =
	c-type-cast(<C-Pixmap>,2);
define inline-only constant $XtUnspecifiedShellInt      =   -1;
define inline-only constant $XtUnspecifiedWindow        =
	c-type-cast(<C-Window>,2);
define inline-only constant $XtUnspecifiedWindowGroup   =
	c-type-cast(<C-Window>,3);
define inline-only constant $XtDefaultForeground        =
	"XtDefaultForeground";
define inline-only constant $XtDefaultBackground        =
	"XtDefaultBackground";
define inline-only constant $XtDefaultFont              =
	"XtDefaultFont";
define inline-only constant $XtDefaultFontSet           =
	"XtDefaultFontSet";

define inline-only C-function XtAppSetErrorMsgHandler
  parameter app-context :: <XtAppContext>;
  parameter handler    :: <XtErrorMsgHandler>;
  result value :: <XtErrorMsgHandler>;
  c-name: "XtAppSetErrorMsgHandler";
end;

define inline-only C-function XtAppSetWarningMsgHandler
  parameter app-context :: <XtAppContext>;
  parameter handler    :: <XtErrorMsgHandler>;
  result value :: <XtErrorMsgHandler>;
  c-name: "XtAppSetWarningMsgHandler";
end;

define inline-only C-function XtAppErrorMsg
  parameter app-context :: <XtAppContext>;
  parameter name       ::  /* const */ <_XtString>;
  parameter type       ::  /* const */ <_XtString>;
  parameter class      ::  /* const */ <_XtString>;
  parameter default    ::  /* const */ <_XtString>;
  parameter params     :: <X-String*>;
  output parameter num-params :: <Cardinal*>;
  c-name: "XtAppErrorMsg";
end;

define inline-only C-function XtAppWarningMsg
  parameter app-context :: <XtAppContext>;
  parameter name       ::  /* const */ <_XtString>;
  parameter type       ::  /* const */ <_XtString>;
  parameter class      ::  /* const */ <_XtString>;
  parameter default    ::  /* const */ <_XtString>;
  parameter params     :: <X-String*>;
  output parameter num-params :: <Cardinal*>;
  c-name: "XtAppWarningMsg";
end;

define inline-only C-function XtAppSetErrorHandler
  parameter app-context :: <XtAppContext>;
  parameter handler    :: <XtErrorHandler>;
  result value :: <XtErrorHandler>;
  c-name: "XtAppSetErrorHandler";
end;

define inline-only C-function XtAppSetWarningHandler
  parameter app-context :: <XtAppContext>;
  parameter handler    :: <XtErrorHandler>;
  result value :: <XtErrorHandler>;
  c-name: "XtAppSetWarningHandler";
end;

define inline-only C-function XtAppError
  parameter app-context :: <XtAppContext>;
  parameter message    ::  /* const */ <_XtString>;
  c-name: "XtAppError";
end;

define inline-only C-function XtAppWarning
  parameter app-context :: <XtAppContext>;
  parameter message    ::  /* const */ <_XtString>;
  c-name: "XtAppWarning";
end;

define inline-only C-function XtAppGetErrorDatabase
  parameter app-context :: <XtAppContext>;
  result value :: <XrmDatabase*>;
  c-name: "XtAppGetErrorDatabase";
end;

define inline-only C-function XtAppGetErrorDatabaseText
  parameter app-context :: <XtAppContext>;
  parameter name       ::  /* const */ <_XtString>;
  parameter type       ::  /* const */ <_XtString>;
  parameter class      ::  /* const */ <_XtString>;
  parameter default    ::  /* const */ <_XtString>;
  parameter buffer-return :: <X-String>;
  parameter nbytes     :: <C-int>;
  parameter database   :: <XrmDatabase>;
  c-name: "XtAppGetErrorDatabaseText";
end;

define inline-only C-function XtMalloc
  parameter size       :: <C-Cardinal>;
  result value :: <C-string>;
  c-name: "XtMalloc";
end;

define inline-only C-function XtCalloc
  parameter num        :: <C-Cardinal>;
  parameter size       :: <C-Cardinal>;
  result value :: <C-string>;
  c-name: "XtCalloc";
end;

define inline-only C-function XtRealloc
  parameter ptr        :: <C-string>;
  parameter num        :: <C-Cardinal>;
  result value :: <C-string>;
  c-name: "XtRealloc";
end;

define inline-only C-function XtFree
  parameter ptr        :: <C-string>;
  c-name: "XtFree";
end;

define inline-only C-function XtAppAddWorkProc
  parameter app-context :: <XtAppContext>;
  parameter proc       :: <XtWorkProc>;
  parameter closure    :: <XtPointer>;
  result value :: <C-XtWorkProcId>;
  c-name: "XtAppAddWorkProc";
end;

define inline-only C-function XtRemoveWorkProc
  parameter id         :: <C-XtWorkProcId>;
  c-name: "XtRemoveWorkProc";
end;

define inline-only C-function XtGetGC
  parameter widget     :: <Widget>;
  parameter valueMask  :: <C-XtGCMask>;
  parameter values     :: <XGCValues*>;
  result value :: <GC>;
  c-name: "XtGetGC";
end;

define inline-only C-function XtAllocateGC
  parameter widget     :: <Widget>;
  parameter depth      :: <C-Cardinal>;
  parameter valueMask  :: <C-XtGCMask>;
  parameter values     :: <XGCValues*>;
  parameter dynamicMask :: <C-XtGCMask>;
  parameter unusedMask :: <C-XtGCMask>;
  result value :: <GC>;
  c-name: "XtAllocateGC";
end;

define inline-only C-function XtReleaseGC
  parameter object     :: <Widget>;
  parameter gc         :: <GC>;
  c-name: "XtReleaseGC";
end;

define inline-only C-function XtAppReleaseCacheRefs
  parameter app-context :: <XtAppContext>;
  output parameter cache-ref :: <XtCacheRef*>;
  c-name: "XtAppReleaseCacheRefs";
end;

define inline-only C-function XtCallbackReleaseCacheRef
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  parameter call-data  :: <XtPointer>;
  c-name: "XtCallbackReleaseCacheRef";
end;

define inline-only C-function XtCallbackReleaseCacheRefList
  parameter widget     :: <Widget>;
  parameter closure    :: <XtPointer>;
  parameter call-data  :: <XtPointer>;
  c-name: "XtCallbackReleaseCacheRefList";
end;

define inline-only C-function XtSetWMColormapWindows
  parameter widget     :: <Widget>;
  parameter list       :: <Widget*>;
  parameter count      :: <C-Cardinal>;
  c-name: "XtSetWMColormapWindows";
end;

define inline-only C-function XtFindFile
  parameter path       ::  /* const */ <_XtString>;
  parameter substitutions :: <Substitution>;
  parameter num-substitutions :: <C-Cardinal>;
  parameter predicate  :: <XtFilePredicate>;
  result value :: <X-String>;
  c-name: "XtFindFile";
end;

define inline-only C-function XtResolvePathname
  parameter dpy        :: <Display*>;
  parameter type       ::  /* const */ <_XtString>;
  parameter filename   ::  /* const */ <_XtString>;
  parameter suffix     ::  /* const */ <_XtString>;
  parameter path       ::  /* const */ <_XtString>;
  parameter substitutions :: <Substitution>;
  parameter num-substitutions :: <C-Cardinal>;
  parameter predicate  :: <XtFilePredicate>;
  result value :: <X-String>;
  c-name: "XtResolvePathname";
end;
define inline-only constant $XT-CONVERT-FAIL            =
	as(<Atom>,as(<machine-word>, #x80000001));

define inline-only C-function XtDisownSelection
  parameter widget     :: <Widget>;
  parameter selection  :: <C-Atom>;
  parameter time       :: <C-Time>;
  c-name: "XtDisownSelection";
end;

define inline-only C-function XtGetSelectionValue
  parameter widget     :: <Widget>;
  parameter selection  :: <C-Atom>;
  parameter target     :: <C-Atom>;
  parameter callback   :: <XtSelectionCallbackProc>;
  parameter closure    :: <XtPointer>;
  parameter time       :: <C-Time>;
  c-name: "XtGetSelectionValue";
end;

define inline-only C-function XtGetSelectionValues
  parameter widget     :: <Widget>;
  parameter selection  :: <C-Atom>;
  output parameter targets :: <Atom*>;
  parameter count      :: <C-int>;
  parameter callback   :: <XtSelectionCallbackProc>;
  output parameter closures :: <XtPointer*>;
  parameter time       :: <C-Time>;
  c-name: "XtGetSelectionValues";
end;

define inline-only C-function XtAppSetSelectionTimeout
  parameter app-context :: <XtAppContext>;
  parameter timeout    :: <C-both-unsigned-long>;
  c-name: "XtAppSetSelectionTimeout";
end;

define inline-only C-function XtAppGetSelectionTimeout
  parameter app-context :: <XtAppContext>;
  result value :: <C-both-unsigned-long>;
  c-name: "XtAppGetSelectionTimeout";
end;

define inline-only C-function XtGetSelectionRequest
  parameter widget     :: <Widget>;
  parameter selection  :: <C-Atom>;
  parameter request-id :: <XtRequestId>;
  result value :: <XSelectionRequestEvent*>;
  c-name: "XtGetSelectionRequest";
end;

define inline-only C-function XtGetSelectionValueIncremental
  parameter widget     :: <Widget>;
  parameter selection  :: <C-Atom>;
  parameter target     :: <C-Atom>;
  parameter selection-callback :: <XtSelectionCallbackProc>;
  parameter client-data :: <XtPointer>;
  parameter time       :: <C-Time>;
  c-name: "XtGetSelectionValueIncremental";
end;

define inline-only C-function XtGetSelectionValuesIncremental
  parameter widget     :: <Widget>;
  parameter selection  :: <C-Atom>;
  output parameter targets :: <Atom*>;
  parameter count      :: <C-int>;
  parameter callback   :: <XtSelectionCallbackProc>;
  output parameter client-data :: <XtPointer*>;
  parameter time       :: <C-Time>;
  c-name: "XtGetSelectionValuesIncremental";
end;

define inline-only C-function XtGrabKey
  parameter widget     :: <Widget>;
  parameter keycode    :: <_XtKeyCode>;
  parameter modifiers  :: <Modifiers>;
  parameter owner-events :: <_XtBoolean>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  c-name: "XtGrabKey";
end;

define inline-only C-function XtUngrabKey
  parameter widget     :: <Widget>;
  parameter keycode    :: <_XtKeyCode>;
  parameter modifiers  :: <Modifiers>;
  c-name: "XtUngrabKey";
end;

define inline-only C-function XtGrabKeyboard
  parameter widget     :: <Widget>;
  parameter owner-events :: <_XtBoolean>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  parameter time       :: <C-Time>;
  result value :: <C-int>;
  c-name: "XtGrabKeyboard";
end;

define inline-only C-function XtUngrabKeyboard
  parameter widget     :: <Widget>;
  parameter time       :: <C-Time>;
  c-name: "XtUngrabKeyboard";
end;

define inline-only C-function XtGrabButton
  parameter widget     :: <Widget>;
  parameter button     :: <C-int>;
  parameter modifiers  :: <Modifiers>;
  parameter owner-events :: <_XtBoolean>;
  parameter event-mask :: <C-unsigned-int>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  parameter confine-to :: <C-Window>;
  parameter cursor     :: <C-Cursor>;
  c-name: "XtGrabButton";
end;

define inline-only C-function XtUngrabButton
  parameter widget     :: <Widget>;
  parameter button     :: <C-unsigned-int>;
  parameter modifiers  :: <Modifiers>;
  c-name: "XtUngrabButton";
end;

define inline-only C-function XtGrabPointer
  parameter widget     :: <Widget>;
  parameter owner-events :: <_XtBoolean>;
  parameter event-mask :: <C-unsigned-int>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  parameter confine-to :: <C-Window>;
  parameter cursor     :: <C-Cursor>;
  parameter time       :: <C-Time>;
  result value :: <C-int>;
  c-name: "XtGrabPointer";
end;

define inline-only C-function XtUngrabPointer
  parameter widget     :: <Widget>;
  parameter time       :: <C-Time>;
  c-name: "XtUngrabPointer";
end;

define inline-only C-function XtGetApplicationNameAndClass
  parameter dpy        :: <Display*>;
  parameter name-return :: <X-String*>;
  parameter class-return :: <X-String*>;
  c-name: "XtGetApplicationNameAndClass";
end;

define inline-only C-function XtCvtStringToAcceleratorTable
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToAcceleratorTable";
end;

define inline-only C-function XtCvtStringToAtom
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToAtom";
end;

define inline-only C-function XtCvtStringToBoolean
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToBoolean";
end;

define inline-only C-function XtCvtStringToBool
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToBool";
end;

define inline-only C-function XtCvtStringToCursor
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToCursor";
end;

define inline-only C-function XtCvtStringToDimension
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToDimension";
end;

define inline-only C-function XtCvtStringToDisplay
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToDisplay";
end;

define inline-only C-function XtCvtStringToFile
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToFile";
end;

define inline-only C-function XtCvtStringToFloat
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToFloat";
end;

define inline-only C-function XtCvtStringToFont
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToFont";
end;

define inline-only C-function XtCvtStringToFontSet
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToFontSet";
end;

define inline-only C-function XtCvtStringToFontStruct
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToFontStruct";
end;

define inline-only C-function XtCvtStringToInt
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToInt";
end;

define inline-only C-function XtCvtStringToInitialState
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToInitialState";
end;

define inline-only C-function XtCvtStringToPixel
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToPixel";
end;
define inline constant XtCvtStringToPosition :: <function> = XtCvtStringToShort;

define inline-only C-function XtCvtStringToShort
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToShort";
end;

define inline-only C-function XtCvtStringToTranslationTable
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToTranslationTable";
end;

define inline-only C-function XtCvtStringToUnsignedChar
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToUnsignedChar";
end;

define inline-only C-function XtCvtStringToVisual
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtStringToVisual";
end;

define inline-only C-function XtCvtIntToBoolean
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToBoolean";
end;

define inline-only C-function XtCvtIntToBool
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToBool";
end;

define inline-only C-function XtCvtIntToColor
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToColor";
end;
define inline constant XtCvtIntToDimension :: <function> = XtCvtIntToShort;

define inline-only C-function XtCvtIntToFloat
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToFloat";
end;

define inline-only C-function XtCvtIntToFont
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToFont";
end;

define inline-only C-function XtCvtIntToPixel
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToPixel";
end;

define inline-only C-function XtCvtIntToPixmap
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToPixmap";
end;
define inline constant XtCvtIntToPosition :: <function> = XtCvtIntToShort;

define inline-only C-function XtCvtIntToShort
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToShort";
end;

define inline-only C-function XtCvtIntToUnsignedChar
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtIntToUnsignedChar";
end;

define inline-only C-function XtCvtColorToPixel
  parameter dpy        :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter fromVal    :: <XrmValuePtr>;
  parameter toVal      :: <XrmValuePtr>;
  output parameter closure-ret :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XtCvtColorToPixel";
end;
define inline constant XtCvtPixelToColor :: <function> = XtCvtIntToColor;

define sealed domain make (singleton(<XtActionsRec*>));
define sealed domain initialize (<XtActionsRec*>);
define sealed domain make (singleton(<XtConvertArgRec*>));
define sealed domain initialize (<XtConvertArgRec*>);
define sealed domain make (singleton(<XtWidgetGeometry*>));
define sealed domain initialize (<XtWidgetGeometry*>);
define sealed domain make (singleton(<Arg*>));
define sealed domain initialize (<Arg*>);
define sealed domain make (singleton(<XtCallbackRec*>));
define sealed domain initialize (<XtCallbackRec*>);
define sealed domain make (singleton(<XtPopdownIDRec*>));
define sealed domain initialize (<XtPopdownIDRec*>);
define sealed domain make (singleton(<XtResource*>));
define sealed domain initialize (<XtResource*>);
define sealed domain make (singleton(<SubstitutionRec*>));
define sealed domain initialize (<SubstitutionRec*>);
