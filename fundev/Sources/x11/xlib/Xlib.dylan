Module:    Xlib
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Xlib.h"; do not edit.

//	XConsortium: Xlib.h,v 11.221 93/07/02 14:13:28 gildea Exp 
define inline-only constant $XlibSpecificationRelease   =    5;
define inline constant <XPointer> = <C-string>;
define inline-only constant <C-Bool> = <C-boolean>;
define C-pointer-type <Bool*> => <C-boolean>;
define inline-only constant <Bool> = <boolean>;
define inline constant <C-Status> = <C-int>;
define inline constant <Status*> = <C-int*>;
define inline constant <Status> = <integer>;
define inline-only constant $True                       =    1;
define inline-only constant $False                      =    0;
define inline-only constant $QueuedAlready              =    0;
define inline-only constant $QueuedAfterReading         =    1;
define inline-only constant $QueuedAfterFlush           =    2;

define inline-only function ConnectionNumber (dpy);
  (dpy.fd-value)
end;

define inline-only function RootWindow (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).root-value)
end;

define inline-only function DefaultScreen (dpy);
  (dpy.default-screen-value)
end;

define inline-only function DefaultRootWindow (dpy);
  ((pointer-value-address(dpy.screens-value, index: dpy.default-screen-value)).root-value)
end;
// not inline to work around Bug 4233

define function DefaultVisual (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).root-visual-value)
end;

define inline-only function DefaultGC (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).default-gc-value)
end;

define inline-only function BlackPixel (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).black-pixel-value)
end;

define inline-only function WhitePixel (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).white-pixel-value)
end;
define inline-only constant $AllPlanes                  =
	c-type-cast(<C-both-unsigned-long>,lognot(0));

define inline-only function QLength (dpy);
  (dpy.qlen-value)
end;

define inline-only function DisplayWidth (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).width-value)
end;

define inline-only function DisplayHeight (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).height-value)
end;

define inline-only function DisplayWidthMM (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).mwidth-value)
end;

define inline-only function DisplayHeightMM (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).mheight-value)
end;

define inline-only function DisplayPlanes (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).root-depth-value)
end;

define inline-only function DisplayCells (dpy, scr);
  (DefaultVisual(dpy, scr).map-entries-value)
end;

define inline-only function ScreenCount (dpy);
  (dpy.nscreens-value)
end;

define inline-only function ServerVendor (dpy);
  (dpy.vendor-value)
end;

define inline-only function ProtocolVersion (dpy);
  (dpy.proto-major-version-value)
end;

define inline-only function ProtocolRevision (dpy);
  (dpy.proto-minor-version-value)
end;

define inline-only function VendorRelease (dpy);
  (dpy.release-value)
end;

define inline-only function DisplayString (dpy);
  (dpy.display-name-value)
end;

define inline-only function DefaultDepth (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).root-depth-value)
end;

define inline-only function DefaultColormap (dpy, scr);
  ((pointer-value-address(dpy.screens-value, index: scr)).cmap-value)
end;

define inline-only function BitmapUnit (dpy);
  (dpy.bitmap-unit-value)
end;

define inline-only function BitmapBitOrder (dpy);
  (dpy.bitmap-bit-order-value)
end;

define inline-only function BitmapPad (dpy);
  (dpy.bitmap-pad-value)
end;

define inline-only function ImageByteOrder (dpy);
  (dpy.byte-order-value)
end;

define inline-only function NextRequest (dpy);
  (dpy.request-value + 1)
end;

define inline-only function LastKnownRequestProcessed (dpy);
  (dpy.last-request-read-value)
end;

define inline-only function ScreenOfDisplay (dpy, scr);
  (pointer-value-address(dpy.screens-value, index: scr))
end;

define inline-only function DefaultScreenOfDisplay (dpy);
  (pointer-value-address(dpy.screens-value, index: dpy.default-screen-value))
end;

define inline-only function DisplayOfScreen (s);
  (s.display-value)
end;

define inline-only function RootWindowOfScreen (s);
  (s.root-value)
end;

define inline-only function BlackPixelOfScreen (s);
  (s.black-pixel-value)
end;

define inline-only function WhitePixelOfScreen (s);
  (s.white-pixel-value)
end;

define inline-only function DefaultColormapOfScreen (s);
  (s.cmap-value)
end;

define inline-only function DefaultDepthOfScreen (s);
  (s.root-depth-value)
end;

define inline-only function DefaultGCOfScreen (s);
  (s.default-gc-value)
end;
// not inline to work around Bug 4233

define function DefaultVisualOfScreen (s);
  (s.root-visual-value)
end;

define inline-only function WidthOfScreen (s);
  (s.width-value)
end;

define inline-only function HeightOfScreen (s);
  (s.height-value)
end;

define inline-only function WidthMMOfScreen (s);
  (s.mwidth-value)
end;

define inline-only function HeightMMOfScreen (s);
  (s.mheight-value)
end;

define inline-only function PlanesOfScreen (s);
  (s.root-depth-value)
end;

define inline-only function CellsOfScreen (s);
  (DefaultVisualOfScreen(s).map-entries-value)
end;

define inline-only function MinCmapsOfScreen (s);
  (s.min-maps-value)
end;

define inline-only function MaxCmapsOfScreen (s);
  (s.max-maps-value)
end;

define inline-only function DoesSaveUnders (s);
  (s.save-unders-value)
end;

define inline-only function DoesBackingStore (s);
  (s.backing-store-value)
end;

define inline-only function EventMaskOfScreen (s);
  (s.root-input-mask-value)
end;

define C-struct <XExtData>
  sealed inline-only slot number-value   :: <C-int>;
  sealed inline-only slot next-value     :: <XExtData*>;
  sealed inline-only slot free-private-value :: <C-function-pointer>;
  sealed inline-only slot private-data-value :: <XPointer>;
  pointer-type-name: <XExtData*>;
  c-name: "struct _XExtData";
end C-struct <XExtData>;

define C-struct <XExtCodes>
  sealed inline-only slot extension-value :: <C-int>;
  sealed inline-only slot major-opcode-value :: <C-int>;
  sealed inline-only slot first-event-value :: <C-int>;
  sealed inline-only slot first-error-value :: <C-int>;
  pointer-type-name: <XExtCodes*>;
end C-struct <XExtCodes>;

define C-struct <XPixmapFormatValues>
  sealed inline-only slot depth-value    :: <C-int>;
  sealed inline-only slot bits-per-pixel-value :: <C-int>;
  sealed inline-only slot scanline-pad-value :: <C-int>;
  pointer-type-name: <XPixmapFormatValues*>;
end C-struct <XPixmapFormatValues>;

define C-struct <XGCValues>
  sealed inline-only slot function-value :: <C-int>;
  sealed inline-only slot plane-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot foreground-value :: <C-both-unsigned-long>;
  sealed inline-only slot background-value :: <C-both-unsigned-long>;
  sealed inline-only slot line-width-value :: <C-int>;
  sealed inline-only slot line-style-value :: <C-int>;
  sealed inline-only slot cap-style-value :: <C-int>;
  sealed inline-only slot join-style-value :: <C-int>;
  sealed inline-only slot fill-style-value :: <C-int>;
  sealed inline-only slot fill-rule-value :: <C-int>;
  sealed inline-only slot arc-mode-value :: <C-int>;
  sealed inline-only slot tile-value     :: <C-Pixmap>;
  sealed inline-only slot stipple-value  :: <C-Pixmap>;
  sealed inline-only slot ts-x-origin-value :: <C-int>;
  sealed inline-only slot ts-y-origin-value :: <C-int>;
  sealed inline-only slot font-value     :: <C-Font>;
  sealed inline-only slot subwindow-mode-value :: <C-int>;
  sealed inline-only slot graphics-exposures-value :: <C-Bool>;
  sealed inline-only slot clip-x-origin-value :: <C-int>;
  sealed inline-only slot clip-y-origin-value :: <C-int>;
  sealed inline-only slot clip-mask-value :: <C-Pixmap>;
  sealed inline-only slot dash-offset-value :: <C-int>;
  sealed inline-only slot dashes-value   :: <C-char>;
  pointer-type-name: <XGCValues*>;
end C-struct <XGCValues>;
define C-subtype <GC> ( <C-void*> ) end;

define C-struct <Visual>
  sealed inline-only slot ext-data-value :: <XExtData*>;
  sealed inline-only slot visualid-value :: <C-VisualID>;
  sealed inline-only slot class-value    :: <C-int>;
  sealed inline-only slot red-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot green-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot blue-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot bits-per-rgb-value :: <C-int>;
  sealed inline-only slot map-entries-value :: <C-int>;
  pointer-type-name: <Visual*>;
end C-struct <Visual>;

define C-struct <Depth>
  sealed inline-only slot depth-value    :: <C-int>;
  sealed inline-only slot nvisuals-value :: <C-int>;
  sealed inline-only slot visuals-value  :: <Visual*>;
  pointer-type-name: <Depth*>;
end C-struct <Depth>;

define C-struct <Screen>
  sealed inline-only slot ext-data-value :: <XExtData*>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot root-value     :: <C-Window>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot mwidth-value   :: <C-int>;
  sealed inline-only slot mheight-value  :: <C-int>;
  sealed inline-only slot ndepths-value  :: <C-int>;
  sealed inline-only slot depths-value   :: <Depth*>;
  sealed inline-only slot root-depth-value :: <C-int>;
  sealed inline-only slot root-visual-value :: <Visual*>;
  sealed inline-only slot default-gc-value :: <GC>;
  sealed inline-only slot cmap-value     :: <C-Colormap>;
  sealed inline-only slot white-pixel-value :: <C-both-unsigned-long>;
  sealed inline-only slot black-pixel-value :: <C-both-unsigned-long>;
  sealed inline-only slot max-maps-value :: <C-int>;
  sealed inline-only slot min-maps-value :: <C-int>;
  sealed inline-only slot backing-store-value :: <C-int>;
  sealed inline-only slot save-unders-value :: <C-Bool>;
  sealed inline-only slot root-input-mask-value :: <C-both-long>;
  pointer-type-name: <Screen*>;
end C-struct <Screen>;

define C-struct <ScreenFormat>
  sealed inline-only slot ext-data-value :: <XExtData*>;
  sealed inline-only slot depth-value    :: <C-int>;
  sealed inline-only slot bits-per-pixel-value :: <C-int>;
  sealed inline-only slot scanline-pad-value :: <C-int>;
  pointer-type-name: <ScreenFormat*>;
end C-struct <ScreenFormat>;

define C-struct <XSetWindowAttributes>
  sealed inline-only slot background-pixmap-value :: <C-Pixmap>;
  sealed inline-only slot background-pixel-value :: <C-both-unsigned-long>;
  sealed inline-only slot border-pixmap-value :: <C-Pixmap>;
  sealed inline-only slot border-pixel-value :: <C-both-unsigned-long>;
  sealed inline-only slot bit-gravity-value :: <C-int>;
  sealed inline-only slot win-gravity-value :: <C-int>;
  sealed inline-only slot backing-store-value :: <C-int>;
  sealed inline-only slot backing-planes-value :: <C-both-unsigned-long>;
  sealed inline-only slot backing-pixel-value :: <C-both-unsigned-long>;
  sealed inline-only slot save-under-value :: <C-Bool>;
  sealed inline-only slot event-mask-value :: <C-both-long>;
  sealed inline-only slot do-not-propagate-mask-value :: <C-both-long>;
  sealed inline-only slot override-redirect-value :: <C-Bool>;
  sealed inline-only slot colormap-value :: <C-Colormap>;
  sealed inline-only slot cursor-value   :: <C-Cursor>;
  pointer-type-name: <XSetWindowAttributes*>;
end C-struct <XSetWindowAttributes>;

define C-struct <XWindowAttributes>
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot border-width-value :: <C-int>;
  sealed inline-only slot depth-value    :: <C-int>;
  sealed inline-only slot visual-value   :: <Visual*>;
  sealed inline-only slot root-value     :: <C-Window>;
  sealed inline-only slot class-value    :: <C-int>;
  sealed inline-only slot bit-gravity-value :: <C-int>;
  sealed inline-only slot win-gravity-value :: <C-int>;
  sealed inline-only slot backing-store-value :: <C-int>;
  sealed inline-only slot backing-planes-value :: <C-both-unsigned-long>;
  sealed inline-only slot backing-pixel-value :: <C-both-unsigned-long>;
  sealed inline-only slot save-under-value :: <C-Bool>;
  sealed inline-only slot colormap-value :: <C-Colormap>;
  sealed inline-only slot map-installed-value :: <C-Bool>;
  sealed inline-only slot map-state-value :: <C-int>;
  sealed inline-only slot all-event-masks-value :: <C-both-long>;
  sealed inline-only slot your-event-mask-value :: <C-both-long>;
  sealed inline-only slot do-not-propagate-mask-value :: <C-both-long>;
  sealed inline-only slot override-redirect-value :: <C-Bool>;
  sealed inline-only slot screen-value   :: <Screen*>;
  pointer-type-name: <XWindowAttributes*>;
end C-struct <XWindowAttributes>;

define C-struct <XHostAddress>
  sealed inline-only slot family-value   :: <C-int>;
  sealed inline-only slot length-value   :: <C-int>;
  sealed inline-only slot address-value  :: <C-string>;
  pointer-type-name: <XHostAddress*>;
end C-struct <XHostAddress>;
define C-struct <f%1>
  sealed inline-only slot create-image-value :: <C-function-pointer>;
  sealed inline-only slot destroy-image-value :: <C-function-pointer>;
  sealed inline-only slot get-pixel-value :: <C-function-pointer>;
  sealed inline-only slot put-pixel-value :: <C-function-pointer>;
  sealed inline-only slot sub-image-value :: <C-function-pointer>;
  sealed inline-only slot add-pixel-value :: <C-function-pointer>;
  c-name: "struct funcs";
end;

define C-struct <XImage>
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot xoffset-value  :: <C-int>;
  sealed inline-only slot format-value   :: <C-int>;
  sealed inline-only slot data-value     :: <C-string>;
  sealed inline-only slot byte-order-value :: <C-int>;
  sealed inline-only slot bitmap-unit-value :: <C-int>;
  sealed inline-only slot bitmap-bit-order-value :: <C-int>;
  sealed inline-only slot bitmap-pad-value :: <C-int>;
  sealed inline-only slot depth-value    :: <C-int>;
  sealed inline-only slot bytes-per-line-value :: <C-int>;
  sealed inline-only slot bits-per-pixel-value :: <C-int>;
  sealed inline-only slot red-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot green-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot blue-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot obdata-value   :: <XPointer>;
  sealed inline-only slot f-value        :: <f%1>, setter: #f;
  pointer-type-name: <XImage*>;
  c-name: "struct _XImage";
end C-struct <XImage>;

define C-struct <XWindowChanges>
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot border-width-value :: <C-int>;
  sealed inline-only slot sibling-value  :: <C-Window>;
  sealed inline-only slot stack-mode-value :: <C-int>;
  pointer-type-name: <XWindowChanges*>;
end C-struct <XWindowChanges>;

define C-struct <XColor>
  sealed inline-only slot pixel-value    :: <C-both-unsigned-long>;
  sealed inline-only slot red-value      :: <C-unsigned-short>;
  sealed inline-only slot green-value    :: <C-unsigned-short>;
  sealed inline-only slot blue-value     :: <C-unsigned-short>;
  sealed inline-only slot flags-value    :: <C-char>;
  sealed inline-only slot pad-value      :: <C-char>;
  pointer-type-name: <XColor*>;
end C-struct <XColor>;

define C-struct <XSegment>
  sealed inline-only slot x1-value       :: <C-short>;
  sealed inline-only slot y1-value       :: <C-short>;
  sealed inline-only slot x2-value       :: <C-short>;
  sealed inline-only slot y2-value       :: <C-short>;
  pointer-type-name: <XSegment*>;
end C-struct <XSegment>;

define C-struct <XPoint>
  sealed inline-only slot x-value        :: <C-short>;
  sealed inline-only slot y-value        :: <C-short>;
  pointer-type-name: <XPoint*>;
end C-struct <XPoint>;

define C-struct <XRectangle>
  sealed inline-only slot x-value        :: <C-short>;
  sealed inline-only slot y-value        :: <C-short>;
  sealed inline-only slot width-value    :: <C-unsigned-short>;
  sealed inline-only slot height-value   :: <C-unsigned-short>;
  pointer-type-name: <XRectangle*>;
end C-struct <XRectangle>;

define C-struct <XArc>
  sealed inline-only slot x-value        :: <C-short>;
  sealed inline-only slot y-value        :: <C-short>;
  sealed inline-only slot width-value    :: <C-unsigned-short>;
  sealed inline-only slot height-value   :: <C-unsigned-short>;
  sealed inline-only slot angle1-value   :: <C-short>;
  sealed inline-only slot angle2-value   :: <C-short>;
  pointer-type-name: <XArc*>;
end C-struct <XArc>;

define C-struct <XKeyboardControl>
  sealed inline-only slot key-click-percent-value :: <C-int>;
  sealed inline-only slot bell-percent-value :: <C-int>;
  sealed inline-only slot bell-pitch-value :: <C-int>;
  sealed inline-only slot bell-duration-value :: <C-int>;
  sealed inline-only slot led-value      :: <C-int>;
  sealed inline-only slot led-mode-value :: <C-int>;
  sealed inline-only slot key-value      :: <C-int>;
  sealed inline-only slot auto-repeat-mode-value :: <C-int>;
  pointer-type-name: <XKeyboardControl*>;
end C-struct <XKeyboardControl>;

define C-struct <XKeyboardState>
  sealed inline-only slot key-click-percent-value :: <C-int>;
  sealed inline-only slot bell-percent-value :: <C-int>;
  sealed inline-only slot bell-pitch-value :: <C-unsigned-int>;
  sealed inline-only slot bell-duration-value :: <C-unsigned-int>;
  sealed inline-only slot led-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot global-auto-repeat-value :: <C-int>;
  sealed inline-only array slot auto-repeats-array :: <C-char>,
	length: 32, address-getter: auto-repeats-value;
  pointer-type-name: <XKeyboardState*>;
end C-struct <XKeyboardState>;

define C-struct <XTimeCoord>
  sealed inline-only slot time-value     :: <C-Time>;
  sealed inline-only slot x-value        :: <C-short>;
  sealed inline-only slot y-value        :: <C-short>;
  pointer-type-name: <XTimeCoord*>;
end C-struct <XTimeCoord>;

define C-struct <XModifierKeymap>
  sealed inline-only slot max-keypermod-value :: <C-int>;
  sealed inline-only slot modifiermap-value :: <KeyCode*>;
  pointer-type-name: <XModifierKeymap*>;
end C-struct <XModifierKeymap>;
define C-struct <cms%2>
  sealed inline-only slot defaultCCCs-value :: <XPointer>;
  sealed inline-only slot clientCmaps-value :: <XPointer>;
  sealed inline-only slot perVisualIntensityMaps-value :: <XPointer>;
end;

define C-struct <Display>
  sealed inline-only slot ext-data-value :: <XExtData*>;
  sealed inline-only slot free-funcs-value :: <XFreeFuncs*>;
  sealed inline-only slot fd-value       :: <C-int>;
  sealed inline-only slot conn-checker-value :: <C-int>;
  sealed inline-only slot proto-major-version-value :: <C-int>;
  sealed inline-only slot proto-minor-version-value :: <C-int>;
  sealed inline-only slot vendor-value   :: <C-string>;
  sealed inline-only slot resource-base-value :: <C-XID>;
  sealed inline-only slot resource-mask-value :: <C-XID>;
  sealed inline-only slot resource-id-value :: <C-XID>;
  sealed inline-only slot resource-shift-value :: <C-int>;
  sealed inline-only slot resource-alloc-value :: <C-function-pointer>;
  sealed inline-only slot byte-order-value :: <C-int>;
  sealed inline-only slot bitmap-unit-value :: <C-int>;
  sealed inline-only slot bitmap-pad-value :: <C-int>;
  sealed inline-only slot bitmap-bit-order-value :: <C-int>;
  sealed inline-only slot nformats-value :: <C-int>;
  sealed inline-only slot pixmap-format-value :: <ScreenFormat*>;
  sealed inline-only slot vnumber-value  :: <C-int>;
  sealed inline-only slot release-value  :: <C-int>;
  sealed inline-only slot head-value     :: <XSQEvent*>;
  sealed inline-only slot tail-value     :: <XSQEvent*>;
  sealed inline-only slot qlen-value     :: <C-int>;
  sealed inline-only slot last-request-read-value :: <C-both-unsigned-long>;
  sealed inline-only slot request-value  :: <C-both-unsigned-long>;
  sealed inline-only slot last-req-value :: <C-string>;
  sealed inline-only slot buffer-value   :: <C-string>;
  sealed inline-only slot bufptr-value   :: <C-string>;
  sealed inline-only slot bufmax-value   :: <C-string>;
  sealed inline-only slot max-request-size-value :: <C-unsigned-int>;
  sealed inline-only slot db-value       :: <XrmHashBucketRec*>;
  sealed inline-only slot synchandler-value :: <C-function-pointer>;
  sealed inline-only slot display-name-value :: <C-string>;
  sealed inline-only slot default-screen-value :: <C-int>;
  sealed inline-only slot nscreens-value :: <C-int>;
  sealed inline-only slot screens-value  :: <Screen*>;
  sealed inline-only slot motion-buffer-value :: <C-both-unsigned-long>;
  sealed inline-only slot flags-value    :: <C-both-unsigned-long>;
  sealed inline-only slot min-keycode-value :: <C-int>;
  sealed inline-only slot max-keycode-value :: <C-int>;
  sealed inline-only slot keysyms-value  :: <KeySym*>;
  sealed inline-only slot modifiermap-value :: <XModifierKeymap*>;
  sealed inline-only slot keysyms-per-keycode-value :: <C-int>;
  sealed inline-only slot xdefaults-value :: <C-string>;
  sealed inline-only slot scratch-buffer-value :: <C-string>;
  sealed inline-only slot scratch-length-value :: <C-both-unsigned-long>;
  sealed inline-only slot ext-number-value :: <C-int>;
  sealed inline-only slot ext-procs-value :: <XExten*>;
  sealed inline-only slot event-vec-value :: <C-function-pointer>;
  sealed inline-only slot wire-vec-value :: <C-function-pointer>;
  sealed inline-only slot lock-meaning-value :: <C-KeySym>;
  sealed inline-only slot lock-value     :: <XLockInfo*>;
  sealed inline-only slot async-handlers-value :: <XInternalAsync*>;
  sealed inline-only slot bigreq-size-value :: <C-both-unsigned-long>;
  sealed inline-only slot lock-fns-value :: <XLockPtrs*>;
  sealed inline-only slot key-bindings-value :: <XKeytrans*>;
  sealed inline-only slot cursor-font-value :: <C-Font>;
  sealed inline-only slot atoms-value    :: <XDisplayAtoms*>;
  sealed inline-only slot mode-switch-value :: <C-unsigned-int>;
  sealed inline-only slot num-lock-value :: <C-unsigned-int>;
  sealed inline-only slot context-db-value :: <XContextDB*>;
  sealed inline-only slot error-vec-value :: <C-function-pointer>;
  sealed inline-only slot cms-value      :: <cms%2>, setter: #f;
  sealed inline-only slot im-filters-value :: <XIMFilter*>;
  sealed inline-only slot qfree-value    :: <XSQEvent*>;
  sealed inline-only slot next-event-serial-num-value :: <C-both-unsigned-long>;
  sealed inline-only slot savedsynchandler-value :: <C-function-pointer>;
  pointer-type-name: <Display*>;
  c-name: "struct _XDisplay";
end C-struct <Display>;

define C-struct <XKeyEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot root-value     :: <C-Window>;
  sealed inline-only slot subwindow-value :: <C-Window>;
  sealed inline-only slot time-value     :: <C-Time>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot x-root-value   :: <C-int>;
  sealed inline-only slot y-root-value   :: <C-int>;
  sealed inline-only slot state-value    :: <C-unsigned-int>;
  sealed inline-only slot keycode-value  :: <C-unsigned-int>;
  sealed inline-only slot same-screen-value :: <C-Bool>;
  pointer-type-name: <XKeyEvent*>;
end C-struct <XKeyEvent>;
define inline constant <XKeyPressedEvent> = <XKeyEvent>;
define inline constant <XKeyPressedEvent*> = <XKeyEvent*>;
define inline constant <XKeyReleasedEvent> = <XKeyEvent>;
define inline constant <XKeyReleasedEvent*> = <XKeyEvent*>;

define C-struct <XButtonEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot root-value     :: <C-Window>;
  sealed inline-only slot subwindow-value :: <C-Window>;
  sealed inline-only slot time-value     :: <C-Time>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot x-root-value   :: <C-int>;
  sealed inline-only slot y-root-value   :: <C-int>;
  sealed inline-only slot state-value    :: <C-unsigned-int>;
  sealed inline-only slot button-value   :: <C-unsigned-int>;
  sealed inline-only slot same-screen-value :: <C-Bool>;
  pointer-type-name: <XButtonEvent*>;
end C-struct <XButtonEvent>;
define inline constant <XButtonPressedEvent> = <XButtonEvent>;
define inline constant <XButtonPressedEvent*> = <XButtonEvent*>;
define inline constant <XButtonReleasedEvent> = <XButtonEvent>;
define inline constant <XButtonReleasedEvent*> = <XButtonEvent*>;

define C-struct <XMotionEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot root-value     :: <C-Window>;
  sealed inline-only slot subwindow-value :: <C-Window>;
  sealed inline-only slot time-value     :: <C-Time>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot x-root-value   :: <C-int>;
  sealed inline-only slot y-root-value   :: <C-int>;
  sealed inline-only slot state-value    :: <C-unsigned-int>;
  sealed inline-only slot is-hint-value  :: <C-char>;
  sealed inline-only slot same-screen-value :: <C-Bool>;
  pointer-type-name: <XMotionEvent*>;
end C-struct <XMotionEvent>;
define inline constant <XPointerMovedEvent> = <XMotionEvent>;
define inline constant <XPointerMovedEvent*> = <XMotionEvent*>;

define C-struct <XCrossingEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot root-value     :: <C-Window>;
  sealed inline-only slot subwindow-value :: <C-Window>;
  sealed inline-only slot time-value     :: <C-Time>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot x-root-value   :: <C-int>;
  sealed inline-only slot y-root-value   :: <C-int>;
  sealed inline-only slot mode-value     :: <C-int>;
  sealed inline-only slot detail-value   :: <C-int>;
  sealed inline-only slot same-screen-value :: <C-Bool>;
  sealed inline-only slot focus-value    :: <C-Bool>;
  sealed inline-only slot state-value    :: <C-unsigned-int>;
  pointer-type-name: <XCrossingEvent*>;
end C-struct <XCrossingEvent>;
define inline constant <XEnterWindowEvent> = <XCrossingEvent>;
define inline constant <XEnterWindowEvent*> = <XCrossingEvent*>;
define inline constant <XLeaveWindowEvent> = <XCrossingEvent>;
define inline constant <XLeaveWindowEvent*> = <XCrossingEvent*>;

define C-struct <XFocusChangeEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot mode-value     :: <C-int>;
  sealed inline-only slot detail-value   :: <C-int>;
  pointer-type-name: <XFocusChangeEvent*>;
end C-struct <XFocusChangeEvent>;
define inline constant <XFocusInEvent> = <XFocusChangeEvent>;
define inline constant <XFocusInEvent*> = <XFocusChangeEvent*>;
define inline constant <XFocusOutEvent> = <XFocusChangeEvent>;
define inline constant <XFocusOutEvent*> = <XFocusChangeEvent*>;

define C-struct <XKeymapEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only array slot key-vector-array :: <C-char>,
	length: 32, address-getter: key-vector-value;
  pointer-type-name: <XKeymapEvent*>;
end C-struct <XKeymapEvent>;

define C-struct <XExposeEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot count-value    :: <C-int>;
  pointer-type-name: <XExposeEvent*>;
end C-struct <XExposeEvent>;

define C-struct <XGraphicsExposeEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot drawable-value :: <C-Drawable>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot count-value    :: <C-int>;
  sealed inline-only slot major-code-value :: <C-int>;
  sealed inline-only slot minor-code-value :: <C-int>;
  pointer-type-name: <XGraphicsExposeEvent*>;
end C-struct <XGraphicsExposeEvent>;

define C-struct <XNoExposeEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot drawable-value :: <C-Drawable>;
  sealed inline-only slot major-code-value :: <C-int>;
  sealed inline-only slot minor-code-value :: <C-int>;
  pointer-type-name: <XNoExposeEvent*>;
end C-struct <XNoExposeEvent>;

define C-struct <XVisibilityEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot state-value    :: <C-int>;
  pointer-type-name: <XVisibilityEvent*>;
end C-struct <XVisibilityEvent>;

define C-struct <XCreateWindowEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot parent-value   :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot border-width-value :: <C-int>;
  sealed inline-only slot override-redirect-value :: <C-Bool>;
  pointer-type-name: <XCreateWindowEvent*>;
end C-struct <XCreateWindowEvent>;

define C-struct <XDestroyWindowEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot event-value    :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  pointer-type-name: <XDestroyWindowEvent*>;
end C-struct <XDestroyWindowEvent>;

define C-struct <XUnmapEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot event-value    :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot from-configure-value :: <C-Bool>;
  pointer-type-name: <XUnmapEvent*>;
end C-struct <XUnmapEvent>;

define C-struct <XMapEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot event-value    :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot override-redirect-value :: <C-Bool>;
  pointer-type-name: <XMapEvent*>;
end C-struct <XMapEvent>;

define C-struct <XMapRequestEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot parent-value   :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  pointer-type-name: <XMapRequestEvent*>;
end C-struct <XMapRequestEvent>;

define C-struct <XReparentEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot event-value    :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot parent-value   :: <C-Window>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot override-redirect-value :: <C-Bool>;
  pointer-type-name: <XReparentEvent*>;
end C-struct <XReparentEvent>;

define C-struct <XConfigureEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot event-value    :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot border-width-value :: <C-int>;
  sealed inline-only slot above-value    :: <C-Window>;
  sealed inline-only slot override-redirect-value :: <C-Bool>;
  pointer-type-name: <XConfigureEvent*>;
end C-struct <XConfigureEvent>;

define C-struct <XGravityEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot event-value    :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  pointer-type-name: <XGravityEvent*>;
end C-struct <XGravityEvent>;

define C-struct <XResizeRequestEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  pointer-type-name: <XResizeRequestEvent*>;
end C-struct <XResizeRequestEvent>;

define C-struct <XConfigureRequestEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot parent-value   :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot border-width-value :: <C-int>;
  sealed inline-only slot above-value    :: <C-Window>;
  sealed inline-only slot detail-value   :: <C-int>;
  sealed inline-only slot value-mask-value :: <C-both-unsigned-long>;
  pointer-type-name: <XConfigureRequestEvent*>;
end C-struct <XConfigureRequestEvent>;

define C-struct <XCirculateEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot event-value    :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot place-value    :: <C-int>;
  pointer-type-name: <XCirculateEvent*>;
end C-struct <XCirculateEvent>;

define C-struct <XCirculateRequestEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot parent-value   :: <C-Window>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot place-value    :: <C-int>;
  pointer-type-name: <XCirculateRequestEvent*>;
end C-struct <XCirculateRequestEvent>;

define C-struct <XPropertyEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot atom-value     :: <C-Atom>;
  sealed inline-only slot time-value     :: <C-Time>;
  sealed inline-only slot state-value    :: <C-int>;
  pointer-type-name: <XPropertyEvent*>;
end C-struct <XPropertyEvent>;

define C-struct <XSelectionClearEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot selection-value :: <C-Atom>;
  sealed inline-only slot time-value     :: <C-Time>;
  pointer-type-name: <XSelectionClearEvent*>;
end C-struct <XSelectionClearEvent>;

define C-struct <XSelectionRequestEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot owner-value    :: <C-Window>;
  sealed inline-only slot requestor-value :: <C-Window>;
  sealed inline-only slot selection-value :: <C-Atom>;
  sealed inline-only slot target-value   :: <C-Atom>;
  sealed inline-only slot property-value :: <C-Atom>;
  sealed inline-only slot time-value     :: <C-Time>;
  pointer-type-name: <XSelectionRequestEvent*>;
end C-struct <XSelectionRequestEvent>;

define C-struct <XSelectionEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot requestor-value :: <C-Window>;
  sealed inline-only slot selection-value :: <C-Atom>;
  sealed inline-only slot target-value   :: <C-Atom>;
  sealed inline-only slot property-value :: <C-Atom>;
  sealed inline-only slot time-value     :: <C-Time>;
  pointer-type-name: <XSelectionEvent*>;
end C-struct <XSelectionEvent>;

define C-struct <XColormapEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot colormap-value :: <C-Colormap>;
  sealed inline-only slot new-value      :: <C-Bool>;
  sealed inline-only slot state-value    :: <C-int>;
  pointer-type-name: <XColormapEvent*>;
end C-struct <XColormapEvent>;
define C-union <data%3>
  sealed inline-only array slot b-array  :: <C-char>, length: 20,
	address-getter: b-value;
  sealed inline-only array slot s-array  :: <C-short>, length: 10,
	address-getter: s-value;
  sealed inline-only array slot l-array  :: <C-both-long>, length: 5,
	address-getter: l-value;
end;

define C-struct <XClientMessageEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot message-type-value :: <C-Atom>;
  sealed inline-only slot format-value   :: <C-int>;
  sealed inline-only slot data-value     :: <data%3>, setter: #f;
  pointer-type-name: <XClientMessageEvent*>;
end C-struct <XClientMessageEvent>;

define C-struct <XMappingEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot request-value  :: <C-int>;
  sealed inline-only slot first-keycode-value :: <C-int>;
  sealed inline-only slot count-value    :: <C-int>;
  pointer-type-name: <XMappingEvent*>;
end C-struct <XMappingEvent>;

define C-struct <XErrorEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot resourceid-value :: <C-XID>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot error-code-value :: <C-unsigned-char>;
  sealed inline-only slot request-code-value :: <C-unsigned-char>;
  sealed inline-only slot minor-code-value :: <C-unsigned-char>;
  pointer-type-name: <XErrorEvent*>;
end C-struct <XErrorEvent>;

define C-struct <XAnyEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot serial-value   :: <C-both-unsigned-long>;
  sealed inline-only slot send-event-value :: <C-Bool>;
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot window-value   :: <C-Window>;
  pointer-type-name: <XAnyEvent*>;
end C-struct <XAnyEvent>;

define C-union <XEvent>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot xany-value     :: <XAnyEvent>;
  sealed inline-only slot xkey-value     :: <XKeyEvent>;
  sealed inline-only slot xbutton-value  :: <XButtonEvent>;
  sealed inline-only slot xmotion-value  :: <XMotionEvent>;
  sealed inline-only slot xcrossing-value :: <XCrossingEvent>;
  sealed inline-only slot xfocus-value   :: <XFocusChangeEvent>;
  sealed inline-only slot xexpose-value  :: <XExposeEvent>;
  sealed inline-only slot xgraphicsexpose-value :: <XGraphicsExposeEvent>;
  sealed inline-only slot xnoexpose-value :: <XNoExposeEvent>;
  sealed inline-only slot xvisibility-value :: <XVisibilityEvent>;
  sealed inline-only slot xcreatewindow-value :: <XCreateWindowEvent>;
  sealed inline-only slot xdestroywindow-value :: <XDestroyWindowEvent>;
  sealed inline-only slot xunmap-value   :: <XUnmapEvent>;
  sealed inline-only slot xmap-value     :: <XMapEvent>;
  sealed inline-only slot xmaprequest-value :: <XMapRequestEvent>;
  sealed inline-only slot xreparent-value :: <XReparentEvent>;
  sealed inline-only slot xconfigure-value :: <XConfigureEvent>;
  sealed inline-only slot xgravity-value :: <XGravityEvent>;
  sealed inline-only slot xresizerequest-value :: <XResizeRequestEvent>;
  sealed inline-only slot xconfigurerequest-value :: <XConfigureRequestEvent>;
  sealed inline-only slot xcirculate-value :: <XCirculateEvent>;
  sealed inline-only slot xcirculaterequest-value :: <XCirculateRequestEvent>;
  sealed inline-only slot xproperty-value :: <XPropertyEvent>;
  sealed inline-only slot xselectionclear-value :: <XSelectionClearEvent>;
  sealed inline-only slot xselectionrequest-value :: <XSelectionRequestEvent>;
  sealed inline-only slot xselection-value :: <XSelectionEvent>;
  sealed inline-only slot xcolormap-value :: <XColormapEvent>;
  sealed inline-only slot xclient-value  :: <XClientMessageEvent>;
  sealed inline-only slot xmapping-value :: <XMappingEvent>;
  sealed inline-only slot xerror-value   :: <XErrorEvent>;
  sealed inline-only slot xkeymap-value  :: <XKeymapEvent>;
  sealed inline-only array slot pad-array :: <C-both-long>,
	length: 24, address-getter: pad-value;
end C-union <XEvent>;

define C-struct <XCharStruct>
  sealed inline-only slot lbearing-value :: <C-short>;
  sealed inline-only slot rbearing-value :: <C-short>;
  sealed inline-only slot width-value    :: <C-short>;
  sealed inline-only slot ascent-value   :: <C-short>;
  sealed inline-only slot descent-value  :: <C-short>;
  sealed inline-only slot attributes-value :: <C-unsigned-short>;
  pointer-type-name: <XCharStruct*>;
end C-struct <XCharStruct>;

define C-struct <XFontProp>
  sealed inline-only slot name-value     :: <C-Atom>;
  sealed inline-only slot card32-value   :: <C-both-unsigned-long>;
  pointer-type-name: <XFontProp*>;
end C-struct <XFontProp>;

define C-struct <XFontStruct>
  sealed inline-only slot ext-data-value :: <XExtData*>;
  sealed inline-only slot fid-value      :: <C-Font>;
  sealed inline-only slot direction-value :: <C-unsigned-int>;
  sealed inline-only slot min-char-or-byte2-value :: <C-unsigned-int>;
  sealed inline-only slot max-char-or-byte2-value :: <C-unsigned-int>;
  sealed inline-only slot min-byte1-value :: <C-unsigned-int>;
  sealed inline-only slot max-byte1-value :: <C-unsigned-int>;
  sealed inline-only slot all-chars-exist-value :: <C-Bool>;
  sealed inline-only slot default-char-value :: <C-unsigned-int>;
  sealed inline-only slot n-properties-value :: <C-int>;
  sealed inline-only slot properties-value :: <XFontProp*>;
  sealed inline-only slot min-bounds-value :: <XCharStruct>;
  sealed inline-only slot max-bounds-value :: <XCharStruct>;
  sealed inline-only slot per-char-value :: <XCharStruct*>;
  sealed inline-only slot ascent-value   :: <C-int>;
  sealed inline-only slot descent-value  :: <C-int>;
  pointer-type-name: <XFontStruct*>;
end C-struct <XFontStruct>;

define C-struct <XTextItem>
  sealed inline-only slot chars-value    :: <C-string>;
  sealed inline-only slot nchars-value   :: <C-int>;
  sealed inline-only slot delta-value    :: <C-int>;
  sealed inline-only slot font-value     :: <C-Font>;
  pointer-type-name: <XTextItem*>;
end C-struct <XTextItem>;

define C-struct <XChar2b>
  sealed inline-only slot byte1-value    :: <C-unsigned-char>;
  sealed inline-only slot byte2-value    :: <C-unsigned-char>;
  pointer-type-name: <XChar2b*>;
end C-struct <XChar2b>;

define C-struct <XTextItem16>
  sealed inline-only slot chars-value    :: <XChar2b*>;
  sealed inline-only slot nchars-value   :: <C-int>;
  sealed inline-only slot delta-value    :: <C-int>;
  sealed inline-only slot font-value     :: <C-Font>;
  pointer-type-name: <XTextItem16*>;
end C-struct <XTextItem16>;

define C-union <XEDataObject>
  sealed inline-only slot display-value  :: <Display*>;
  sealed inline-only slot gc-value       :: <GC>;
  sealed inline-only slot visual-value   :: <Visual*>;
  sealed inline-only slot screen-value   :: <Screen*>;
  sealed inline-only slot pixmap-format-value :: <ScreenFormat*>;
  sealed inline-only slot font-value     :: <XFontStruct*>;
end C-union <XEDataObject>;

define C-struct <XFontSetExtents>
  sealed inline-only slot max-ink-extent-value :: <XRectangle>;
  sealed inline-only slot max-logical-extent-value :: <XRectangle>;
  pointer-type-name: <XFontSetExtents*>;
end C-struct <XFontSetExtents>;
define C-subtype <XFontSet> ( <C-void*> ) end;

define C-struct <XmbTextItem>
  sealed inline-only slot chars-value    :: <C-string>;
  sealed inline-only slot nchars-value   :: <C-int>;
  sealed inline-only slot delta-value    :: <C-int>;
  sealed inline-only slot font-set-value :: <XFontSet>;
  pointer-type-name: <XmbTextItem*>;
end C-struct <XmbTextItem>;

define C-struct <XwcTextItem>
  sealed inline-only slot chars-value    :: <C-unicode-string>;
  sealed inline-only slot nchars-value   :: <C-int>;
  sealed inline-only slot delta-value    :: <C-int>;
  sealed inline-only slot font-set-value :: <XFontSet>;
  pointer-type-name: <XwcTextItem*>;
end C-struct <XwcTextItem>;

define C-subtype <XIMProc> ( <C-function-pointer> ) end;
define macro <XIMProc>-callback-wrapper
 { <XIMProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
 end C-callable-wrapper }
end macro;
define C-subtype <XIM> ( <C-void*> ) end;
define C-subtype <XIC> ( <C-void*> ) end;
define inline constant <C-XIMStyle> = <C-both-unsigned-long>;
define inline constant <XIMStyle*> = <C-both-unsigned-long*>;
define inline constant <XIMStyle> = <unsigned-32-bits>;

define C-struct <XIMStyles>
  sealed inline-only slot count-styles-value :: <C-unsigned-short>;
  sealed inline-only slot supported-styles-value :: <XIMStyle*>;
  pointer-type-name: <XIMStyles*>;
end C-struct <XIMStyles>;
define inline-only constant $XIMPreeditArea             = #x0001;
define inline-only constant $XIMPreeditCallbacks        = #x0002;
define inline-only constant $XIMPreeditPosition         = #x0004;
define inline-only constant $XIMPreeditNothing          = #x0008;
define inline-only constant $XIMPreeditNone             = #x0010;
define inline-only constant $XIMStatusArea              = #x0100;
define inline-only constant $XIMStatusCallbacks         = #x0200;
define inline-only constant $XIMStatusNothing           = #x0400;
define inline-only constant $XIMStatusNone              = #x0800;
define inline-only constant $XNVaNestedList             =
	"XNVaNestedList";
define inline-only constant $XNQueryInputStyle          =
	"queryInputStyle";
define inline-only constant $XNClientWindow             =
	"clientWindow";
define inline-only constant $XNInputStyle               =
	"inputStyle";
define inline-only constant $XNFocusWindow              =
	"focusWindow";
define inline-only constant $XNResourceName             =
	"resourceName";
define inline-only constant $XNResourceClass            =
	"resourceClass";
define inline-only constant $XNGeometryCallback         =
	"geometryCallback";
define inline-only constant $XNFilterEvents             =
	"filterEvents";
define inline-only constant $XNPreeditStartCallback     =
	"preeditStartCallback";
define inline-only constant $XNPreeditDoneCallback      =
	"preeditDoneCallback";
define inline-only constant $XNPreeditDrawCallback      =
	"preeditDrawCallback";
define inline-only constant $XNPreeditCaretCallback     =
	"preeditCaretCallback";
define inline-only constant $XNPreeditAttributes        =
	"preeditAttributes";
define inline-only constant $XNStatusStartCallback      =
	"statusStartCallback";
define inline-only constant $XNStatusDoneCallback       =
	"statusDoneCallback";
define inline-only constant $XNStatusDrawCallback       =
	"statusDrawCallback";
define inline-only constant $XNStatusAttributes         =
	"statusAttributes";
define inline-only constant $XNArea                     = "area";
define inline-only constant $XNAreaNeeded               =
	"areaNeeded";
define inline-only constant $XNSpotLocation             =
	"spotLocation";
define inline-only constant $XNColormap                 = "colorMap";
define inline-only constant $XNStdColormap              =
	"stdColorMap";
define inline-only constant $XNForeground               =
	"foreground";
define inline-only constant $XNBackground               =
	"background";
define inline-only constant $XNBackgroundPixmap         =
	"backgroundPixmap";
define inline-only constant $XNFontSet                  = "fontSet";
define inline-only constant $XNLineSpace                =
	"lineSpace";
define inline-only constant $XNCursor                   = "cursor";
define inline-only constant $XBufferOverflow            =   -1;
define inline-only constant $XLookupNone                =    1;
define inline-only constant $XLookupChars               =    2;
define inline-only constant $XLookupKeySym              =    3;
define inline-only constant $XLookupBoth                =    4;
define inline constant <XVaNestedList> = <C-void*>;

define C-struct <XIMCallback>
  sealed inline-only slot client-data-value :: <XPointer>;
  sealed inline-only slot callback-value :: <XIMProc>;
  pointer-type-name: <XIMCallback*>;
end C-struct <XIMCallback>;
define inline constant <C-XIMFeedback> = <C-both-unsigned-long>;
define inline constant <XIMFeedback*> = <C-both-unsigned-long*>;
define inline constant <XIMFeedback> = <unsigned-32-bits>;
define inline-only constant $XIMReverse                 =    1;
define inline-only constant $XIMUnderline               = ash(1,1);
define inline-only constant $XIMHighlight               = ash(1,2);
define inline-only constant $XIMPrimary                 = ash(1,5);
define inline-only constant $XIMSecondary               = ash(1,6);
define inline-only constant $XIMTertiary                = ash(1,7);
define C-union <string%4>
  sealed inline-only slot multi-byte-value :: <C-string>;
  sealed inline-only slot wide-char-value :: <C-unicode-string>;
end;

define C-struct <XIMText>
  sealed inline-only slot length-value   :: <C-unsigned-short>;
  sealed inline-only slot feedback-value :: <XIMFeedback*>;
  sealed inline-only slot encoding-is-wchar-value :: <C-Bool>;
  sealed inline-only slot string-value   :: <string%4>, setter: #f;
  pointer-type-name: <XIMText*>;
  c-name: "struct _XIMText";
end C-struct <XIMText>;

define C-struct <XIMPreeditDrawCallbackStruct>
  sealed inline-only slot caret-value    :: <C-int>;
  sealed inline-only slot chg-first-value :: <C-int>;
  sealed inline-only slot chg-length-value :: <C-int>;
  sealed inline-only slot text-value     :: <XIMText*>;
  pointer-type-name: <XIMPreeditDrawCallbackStruct*>;
  c-name: "struct _XIMPreeditDrawCallbackStruct";
end C-struct <XIMPreeditDrawCallbackStruct>;
// enum XIMCaretDirection:
define inline-only constant $XIMForwardChar = -1 + 1;
define inline-only constant $XIMBackwardChar = $XIMForwardChar + 1;
define inline-only constant $XIMForwardWord = $XIMBackwardChar + 1;
define inline-only constant $XIMBackwardWord = $XIMForwardWord + 1;
define inline-only constant $XIMCaretUp = $XIMBackwardWord + 1;
define inline-only constant $XIMCaretDown = $XIMCaretUp + 1;
define inline-only constant $XIMNextLine = $XIMCaretDown + 1;
define inline-only constant $XIMPreviousLine = $XIMNextLine + 1;
define inline-only constant $XIMLineStart = $XIMPreviousLine + 1;
define inline-only constant $XIMLineEnd = $XIMLineStart + 1;
define inline-only constant $XIMAbsolutePosition = $XIMLineEnd + 1;
define inline-only constant $XIMDontChange = $XIMAbsolutePosition + 1;

// enum XIMCaretStyle:
define inline-only constant $XIMIsInvisible = -1 + 1;
define inline-only constant $XIMIsPrimary = $XIMIsInvisible + 1;
define inline-only constant $XIMIsSecondary = $XIMIsPrimary + 1;


define C-struct <XIMPreeditCaretCallbackStruct>
  sealed inline-only slot position-value :: <C-int>;
  sealed inline-only slot direction-value :: <C-int>;
  sealed inline-only slot style-value    :: <C-int>;
  pointer-type-name: <XIMPreeditCaretCallbackStruct*>;
  c-name: "struct _XIMPreeditCaretCallbackStruct";
end C-struct <XIMPreeditCaretCallbackStruct>;
// enum XIMStatusDataType:
define inline-only constant $XIMTextType = -1 + 1;
define inline-only constant $XIMBitmapType = $XIMTextType + 1;

define C-union <data%5>
  sealed inline-only slot text-value     :: <XIMText*>;
  sealed inline-only slot bitmap-value   :: <C-Pixmap>;
end;

define C-struct <XIMStatusDrawCallbackStruct>
  sealed inline-only slot type-value     :: <C-int>;
  sealed inline-only slot data-value     :: <data%5>, setter: #f;
  pointer-type-name: <XIMStatusDrawCallbackStruct*>;
  c-name: "struct _XIMStatusDrawCallbackStruct";
end C-struct <XIMStatusDrawCallbackStruct>;

define inline-only C-function XLoadQueryFont
  parameter display    :: <Display*>;
  parameter name       ::  /* const */ <C-string>;
  result value :: <XFontStruct*>;
  c-name: "XLoadQueryFont";
end;

define inline-only C-function XQueryFont
  parameter display    :: <Display*>;
  parameter font-ID    :: <C-XID>;
  result value :: <XFontStruct*>;
  c-name: "XQueryFont";
end;

define inline-only C-function XGetMotionEvents
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter start      :: <C-Time>;
  parameter stop       :: <C-Time>;
  output parameter nevents-return :: <C-int*>;
  result value :: <XTimeCoord*>;
  c-name: "XGetMotionEvents";
end;

define inline-only C-function XDeleteModifiermapEntry
  parameter modmap     :: <XModifierKeymap*>;
  parameter keycode-entry :: <KeyCode>;
  parameter modifier   :: <C-int>;
  result value :: <XModifierKeymap*>;
  c-name: "XDeleteModifiermapEntry";
end;

define inline-only C-function XGetModifierMapping
  parameter display    :: <Display*>;
  result value :: <XModifierKeymap*>;
  c-name: "XGetModifierMapping";
end;

define inline-only C-function XInsertModifiermapEntry
  parameter modmap     :: <XModifierKeymap*>;
  parameter keycode-entry :: <KeyCode>;
  parameter modifier   :: <C-int>;
  result value :: <XModifierKeymap*>;
  c-name: "XInsertModifiermapEntry";
end;

define inline-only C-function XNewModifiermap
  parameter max-keys-per-mod :: <C-int>;
  result value :: <XModifierKeymap*>;
  c-name: "XNewModifiermap";
end;

define inline-only C-function XCreateImage
  parameter display    :: <Display*>;
  parameter visual     :: <Visual*>;
  parameter depth      :: <C-unsigned-int>;
  parameter format     :: <C-int>;
  parameter offset     :: <C-int>;
  parameter data       :: <C-string>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter bitmap-pad :: <C-int>;
  parameter bytes-per-line :: <C-int>;
  result value :: <XImage*>;
  c-name: "XCreateImage";
end;

define inline-only C-function XGetImage
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter plane-mask :: <C-both-unsigned-long>;
  parameter format     :: <C-int>;
  result value :: <XImage*>;
  c-name: "XGetImage";
end;

define inline-only C-function XGetSubImage
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter plane-mask :: <C-both-unsigned-long>;
  parameter format     :: <C-int>;
  parameter dest-image :: <XImage*>;
  parameter dest-x     :: <C-int>;
  parameter dest-y     :: <C-int>;
  result value :: <XImage*>;
  c-name: "XGetSubImage";
end;

define inline-only C-function XOpenDisplay
  parameter display-name ::  /* const */ <C-string>;
  result value :: <Display*>;
  c-name: "XOpenDisplay";
end;

define inline-only C-function XrmInitialize
  c-name: "XrmInitialize";
end;

define inline-only C-function XFetchBytes
  parameter display    :: <Display*>;
  output parameter nbytes-return :: <C-int*>;
  result value :: <C-string>;
  c-name: "XFetchBytes";
end;

define inline-only C-function XFetchBuffer
  parameter display    :: <Display*>;
  output parameter nbytes-return :: <C-int*>;
  parameter buffer     :: <C-int>;
  result value :: <C-string>;
  c-name: "XFetchBuffer";
end;

define inline-only C-function XGetAtomName
  parameter display    :: <Display*>;
  parameter atom       :: <C-Atom>;
  result value :: <C-string>;
  c-name: "XGetAtomName";
end;

define inline-only C-function XGetDefault
  parameter display    :: <Display*>;
  parameter program    ::  /* const */ <C-string>;
  parameter option     ::  /* const */ <C-string>;
  result value :: <C-string>;
  c-name: "XGetDefault";
end;

define inline-only C-function XDisplayName
  parameter string     ::  /* const */ <C-string>;
  result value :: <C-string>;
  c-name: "XDisplayName";
end;

define inline-only C-function XKeysymToString
  parameter keysym     :: <C-KeySym>;
  result value :: <C-string>;
  c-name: "XKeysymToString";
end;

define inline-only C-function XInternAtom
  parameter display    :: <Display*>;
  parameter atom-name  ::  /* const */ <C-string>;
  parameter only-if-exists :: <C-Bool>;
  result value :: <C-Atom>;
  c-name: "XInternAtom";
end;

define inline-only C-function XCopyColormapAndFree
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  result value :: <C-Colormap>;
  c-name: "XCopyColormapAndFree";
end;

define inline-only C-function XCreateColormap
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter visual     :: <Visual*>;
  parameter alloc      :: <C-int>;
  result value :: <C-Colormap>;
  c-name: "XCreateColormap";
end;

define inline-only C-function XCreatePixmapCursor
  parameter display    :: <Display*>;
  parameter source     :: <C-Pixmap>;
  parameter mask       :: <C-Pixmap>;
  parameter foreground-color :: <XColor*>;
  parameter background-color :: <XColor*>;
  parameter x          :: <C-unsigned-int>;
  parameter y          :: <C-unsigned-int>;
  result value :: <C-Cursor>;
  c-name: "XCreatePixmapCursor";
end;

define inline-only C-function XCreateGlyphCursor
  parameter display    :: <Display*>;
  parameter source-font :: <C-Font>;
  parameter mask-font  :: <C-Font>;
  parameter source-char :: <C-unsigned-int>;
  parameter mask-char  :: <C-unsigned-int>;
  parameter foreground-color :: <XColor*>;
  parameter background-color :: <XColor*>;
  result value :: <C-Cursor>;
  c-name: "XCreateGlyphCursor";
end;

define inline-only C-function XCreateFontCursor
  parameter display    :: <Display*>;
  parameter shape      :: <C-unsigned-int>;
  result value :: <C-Cursor>;
  c-name: "XCreateFontCursor";
end;

define inline-only C-function XLoadFont
  parameter display    :: <Display*>;
  parameter name       ::  /* const */ <C-string>;
  result value :: <C-Font>;
  c-name: "XLoadFont";
end;

define inline-only C-function XCreateGC
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter valuemask  :: <C-both-unsigned-long>;
  parameter values     :: <XGCValues*>;
  result value :: <GC>;
  c-name: "XCreateGC";
end;

define inline-only C-function XGContextFromGC
  parameter gc         :: <GC>;
  result value :: <C-GContext>;
  c-name: "XGContextFromGC";
end;

define inline-only C-function XFlushGC
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  c-name: "XFlushGC";
end;

define inline-only C-function XCreatePixmap
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter depth      :: <C-unsigned-int>;
  result value :: <C-Pixmap>;
  c-name: "XCreatePixmap";
end;

define inline-only C-function XCreateBitmapFromData
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter data       ::  /* const */ <C-string>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  result value :: <C-Pixmap>;
  c-name: "XCreateBitmapFromData";
end;

define inline-only C-function XCreatePixmapFromBitmapData
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter data       :: <C-string>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter fg         :: <C-both-unsigned-long>;
  parameter bg         :: <C-both-unsigned-long>;
  parameter depth      :: <C-unsigned-int>;
  result value :: <C-Pixmap>;
  c-name: "XCreatePixmapFromBitmapData";
end;

define inline-only C-function XCreateSimpleWindow
  parameter display    :: <Display*>;
  parameter parent     :: <C-Window>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter border-width :: <C-unsigned-int>;
  parameter border     :: <C-both-unsigned-long>;
  parameter background :: <C-both-unsigned-long>;
  result value :: <C-Window>;
  c-name: "XCreateSimpleWindow";
end;

define inline-only C-function XGetSelectionOwner
  parameter display    :: <Display*>;
  parameter selection  :: <C-Atom>;
  result value :: <C-Window>;
  c-name: "XGetSelectionOwner";
end;

define inline-only C-function XCreateWindow
  parameter display    :: <Display*>;
  parameter parent     :: <C-Window>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter border-width :: <C-unsigned-int>;
  parameter depth      :: <C-int>;
  parameter class      :: <C-unsigned-int>;
  parameter visual     :: <Visual*>;
  parameter valuemask  :: <C-both-unsigned-long>;
  parameter attributes :: <XSetWindowAttributes*>;
  result value :: <C-Window>;
  c-name: "XCreateWindow";
end;

define inline-only C-function XListInstalledColormaps
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter num-return :: <C-int*>;
  result value :: <Colormap*>;
  c-name: "XListInstalledColormaps";
end;

define inline-only C-function XListFonts
  parameter display    :: <Display*>;
  parameter pattern    ::  /* const */ <C-string>;
  parameter maxnames   :: <C-int>;
  output parameter actual-count-return :: <C-int*>;
  result value :: <C-string*>;
  c-name: "XListFonts";
end;

define inline-only C-function XListFontsWithInfo
  parameter display    :: <Display*>;
  parameter pattern    ::  /* const */ <C-string>;
  parameter maxnames   :: <C-int>;
  output parameter count-return :: <C-int*>;
  output parameter info-return :: <XFontStruct**>;
  result value :: <C-string*>;
  c-name: "XListFontsWithInfo";
end;

define inline-only C-function XGetFontPath
  parameter display    :: <Display*>;
  output parameter npaths-return :: <C-int*>;
  result value :: <C-string*>;
  c-name: "XGetFontPath";
end;

define inline-only C-function XListExtensions
  parameter display    :: <Display*>;
  output parameter nextensions-return :: <C-int*>;
  result value :: <C-string*>;
  c-name: "XListExtensions";
end;

define inline-only C-function XListProperties
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter num-prop-return :: <C-int*>;
  result value :: <Atom*>;
  c-name: "XListProperties";
end;

define inline-only C-function XListHosts
  parameter display    :: <Display*>;
  output parameter nhosts-return :: <C-int*>;
  parameter state-return :: <Bool*>;
  result value :: <XHostAddress*>;
  c-name: "XListHosts";
end;

define inline-only C-function XKeycodeToKeysym
  parameter display    :: <Display*>;
  parameter keycode    :: <KeyCode>;
  parameter index      :: <C-int>;
  result value :: <C-KeySym>;
  c-name: "XKeycodeToKeysym";
end;

define inline-only C-function XLookupKeysym
  parameter key-event  :: <XKeyEvent*>;
  parameter index      :: <C-int>;
  result value :: <C-KeySym>;
  c-name: "XLookupKeysym";
end;

define inline-only C-function XGetKeyboardMapping
  parameter display    :: <Display*>;
  parameter first-keycode :: <KeyCode>;
  parameter keycode-count :: <C-int>;
  output parameter keysyms-per-keycode-return :: <C-int*>;
  result value :: <KeySym*>;
  c-name: "XGetKeyboardMapping";
end;

define inline-only C-function XStringToKeysym
  parameter string     ::  /* const */ <C-string>;
  result value :: <C-KeySym>;
  c-name: "XStringToKeysym";
end;

define inline-only C-function XMaxRequestSize
  parameter display    :: <Display*>;
  result value :: <C-both-long>;
  c-name: "XMaxRequestSize";
end;

define inline-only C-function XExtendedMaxRequestSize
  parameter display    :: <Display*>;
  result value :: <C-both-long>;
  c-name: "XExtendedMaxRequestSize";
end;

define inline-only C-function XResourceManagerString
  parameter display    :: <Display*>;
  result value :: <C-string>;
  c-name: "XResourceManagerString";
end;

define inline-only C-function XScreenResourceString
  parameter screen     :: <Screen*>;
  result value :: <C-string>;
  c-name: "XScreenResourceString";
end;

define inline-only C-function XDisplayMotionBufferSize
  parameter display    :: <Display*>;
  result value :: <C-both-unsigned-long>;
  c-name: "XDisplayMotionBufferSize";
end;

define inline-only C-function XVisualIDFromVisual
  parameter visual     :: <Visual*>;
  result value :: <C-VisualID>;
  c-name: "XVisualIDFromVisual";
end;

define inline-only C-function XInitExtension
  parameter display    :: <Display*>;
  parameter name       ::  /* const */ <C-string>;
  result value :: <XExtCodes*>;
  c-name: "XInitExtension";
end;

define inline-only C-function XAddExtension
  parameter display    :: <Display*>;
  result value :: <XExtCodes*>;
  c-name: "XAddExtension";
end;

define inline-only C-function XFindOnExtensionList
  parameter structure  :: <XExtData**>;
  parameter number     :: <C-int>;
  result value :: <XExtData*>;
  c-name: "XFindOnExtensionList";
end;

define inline-only C-function XEHeadOfExtensionList
  parameter object     :: <XEDataObject>;
  result value :: <XExtData**>;
  c-name: "XEHeadOfExtensionList";
end;

define inline-only C-function XRootWindow
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-Window>;
  c-name: "XRootWindow";
end;

define inline-only C-function XDefaultRootWindow
  parameter display    :: <Display*>;
  result value :: <C-Window>;
  c-name: "XDefaultRootWindow";
end;

define inline-only C-function XRootWindowOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-Window>;
  c-name: "XRootWindowOfScreen";
end;

define inline-only C-function XDefaultVisual
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <Visual*>;
  c-name: "XDefaultVisual";
end;

define inline-only C-function XDefaultVisualOfScreen
  parameter screen     :: <Screen*>;
  result value :: <Visual*>;
  c-name: "XDefaultVisualOfScreen";
end;

define inline-only C-function XDefaultGC
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <GC>;
  c-name: "XDefaultGC";
end;

define inline-only C-function XDefaultGCOfScreen
  parameter screen     :: <Screen*>;
  result value :: <GC>;
  c-name: "XDefaultGCOfScreen";
end;

define inline-only C-function XBlackPixel
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-both-unsigned-long>;
  c-name: "XBlackPixel";
end;

define inline-only C-function XWhitePixel
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-both-unsigned-long>;
  c-name: "XWhitePixel";
end;

define inline-only C-function XAllPlanes
  result value :: <C-both-unsigned-long>;
  c-name: "XAllPlanes";
end;

define inline-only C-function XBlackPixelOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-both-unsigned-long>;
  c-name: "XBlackPixelOfScreen";
end;

define inline-only C-function XWhitePixelOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-both-unsigned-long>;
  c-name: "XWhitePixelOfScreen";
end;

define inline-only C-function XNextRequest
  parameter display    :: <Display*>;
  result value :: <C-both-unsigned-long>;
  c-name: "XNextRequest";
end;

define inline-only C-function XLastKnownRequestProcessed
  parameter display    :: <Display*>;
  result value :: <C-both-unsigned-long>;
  c-name: "XLastKnownRequestProcessed";
end;

define inline-only C-function XServerVendor
  parameter display    :: <Display*>;
  result value :: <C-string>;
  c-name: "XServerVendor";
end;

define inline-only C-function XDisplayString
  parameter display    :: <Display*>;
  result value :: <C-string>;
  c-name: "XDisplayString";
end;

define inline-only C-function XDefaultColormap
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-Colormap>;
  c-name: "XDefaultColormap";
end;

define inline-only C-function XDefaultColormapOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-Colormap>;
  c-name: "XDefaultColormapOfScreen";
end;

define inline-only C-function XDisplayOfScreen
  parameter screen     :: <Screen*>;
  result value :: <Display*>;
  c-name: "XDisplayOfScreen";
end;

define inline-only C-function XScreenOfDisplay
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <Screen*>;
  c-name: "XScreenOfDisplay";
end;

define inline-only C-function XDefaultScreenOfDisplay
  parameter display    :: <Display*>;
  result value :: <Screen*>;
  c-name: "XDefaultScreenOfDisplay";
end;

define inline-only C-function XEventMaskOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-both-long>;
  c-name: "XEventMaskOfScreen";
end;

define inline-only C-function XScreenNumberOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XScreenNumberOfScreen";
end;

define C-subtype <XErrorHandler> ( <C-function-pointer> ) end;
define macro <XErrorHandler>-callback-wrapper
 { <XErrorHandler>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter display    :: <Display*>;
  parameter error-event :: <XErrorEvent*>;
  result value :: <C-int>;
 end C-callable-wrapper }
end macro;

define inline-only C-function XSetErrorHandler
  parameter handler    :: <XErrorHandler>;
  result value :: <XErrorHandler>;
  c-name: "XSetErrorHandler";
end;

define C-subtype <XIOErrorHandler> ( <C-function-pointer> ) end;
define macro <XIOErrorHandler>-callback-wrapper
 { <XIOErrorHandler>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter display    :: <Display*>;
  result value :: <C-int>;
 end C-callable-wrapper }
end macro;

define inline-only C-function XSetIOErrorHandler
  parameter handler    :: <XIOErrorHandler>;
  result value :: <XIOErrorHandler>;
  c-name: "XSetIOErrorHandler";
end;

define inline-only C-function XListPixmapFormats
  parameter display    :: <Display*>;
  output parameter count-return :: <C-int*>;
  result value :: <XPixmapFormatValues*>;
  c-name: "XListPixmapFormats";
end;

define inline-only C-function XListDepths
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  output parameter count-return :: <C-int*>;
  result value :: <C-int*>;
  c-name: "XListDepths";
end;

define inline-only C-function XReconfigureWMWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter screen-number :: <C-int>;
  parameter mask       :: <C-unsigned-int>;
  parameter changes    :: <XWindowChanges*>;
  result value :: <C-Status>;
  c-name: "XReconfigureWMWindow";
end;

define inline-only C-function XGetWMProtocols
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter protocols-return :: <Atom**>;
  output parameter count-return :: <C-int*>;
  result value :: <C-Status>;
  c-name: "XGetWMProtocols";
end;

define inline-only C-function XSetWMProtocols
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter protocols :: <Atom*>;
  parameter count      :: <C-int>;
  result value :: <C-Status>;
  c-name: "XSetWMProtocols";
end;

define inline-only C-function XIconifyWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter screen-number :: <C-int>;
  result value :: <C-Status>;
  c-name: "XIconifyWindow";
end;

define inline-only C-function XWithdrawWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter screen-number :: <C-int>;
  result value :: <C-Status>;
  c-name: "XWithdrawWindow";
end;

define inline-only C-function XGetCommand
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter argv-return :: <C-string**>;
  output parameter argc-return :: <C-int*>;
  result value :: <C-Status>;
  c-name: "XGetCommand";
end;

define inline-only C-function XGetWMColormapWindows
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter windows-return :: <Window**>;
  output parameter count-return :: <C-int*>;
  result value :: <C-Status>;
  c-name: "XGetWMColormapWindows";
end;

define inline-only C-function XSetWMColormapWindows
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter colormap-windows :: <Window*>;
  parameter count      :: <C-int>;
  result value :: <C-Status>;
  c-name: "XSetWMColormapWindows";
end;

define inline-only C-function XFreeStringList
  parameter list       :: <C-string*>;
  c-name: "XFreeStringList";
end;

define inline-only C-function XSetTransientForHint
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter prop-window :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetTransientForHint";
end;

define inline-only C-function XActivateScreenSaver
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XActivateScreenSaver";
end;

define inline-only C-function XAddHost
  parameter display    :: <Display*>;
  parameter host       :: <XHostAddress*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XAddHost";
end;

define inline-only C-function XAddHosts
  parameter display    :: <Display*>;
  parameter hosts      :: <XHostAddress*>;
  parameter num-hosts  :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XAddHosts";
end;

define inline-only C-function XAddToExtensionList
  parameter structure  :: <XExtData**>;
  parameter ext-data   :: <XExtData*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XAddToExtensionList";
end;

define inline-only C-function XAddToSaveSet
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XAddToSaveSet";
end;

define inline-only C-function XAllocColor
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter screen-in-out :: <XColor*>;
  result value :: <C-Status>;
  c-name: "XAllocColor";
end;

define inline-only C-function XAllocColorCells
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter contig     :: <C-Bool>;
  output parameter plane-masks-return :: <C-both-unsigned-long*>;
  parameter nplanes    :: <C-unsigned-int>;
  output parameter pixels-return :: <C-both-unsigned-long*>;
  parameter npixels    :: <C-unsigned-int>;
  result value :: <C-Status>;
  c-name: "XAllocColorCells";
end;

define inline-only C-function XAllocColorPlanes
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter contig     :: <C-Bool>;
  output parameter pixels-return :: <C-both-unsigned-long*>;
  parameter ncolors    :: <C-int>;
  parameter nreds      :: <C-int>;
  parameter ngreens    :: <C-int>;
  parameter nblues     :: <C-int>;
  output parameter rmask-return :: <C-both-unsigned-long*>;
  output parameter gmask-return :: <C-both-unsigned-long*>;
  output parameter bmask-return :: <C-both-unsigned-long*>;
  result value :: <C-Status>;
  c-name: "XAllocColorPlanes";
end;

define inline-only C-function XAllocNamedColor
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter color-name ::  /* const */ <C-string>;
  parameter screen-def-return :: <XColor*>;
  parameter exact-def-return :: <XColor*>;
  result value :: <C-Status>;
  c-name: "XAllocNamedColor";
end;

define inline-only C-function XAllowEvents
  parameter display    :: <Display*>;
  parameter event-mode :: <C-int>;
  parameter time       :: <C-Time>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XAllowEvents";
end;

define inline-only C-function XAutoRepeatOff
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XAutoRepeatOff";
end;

define inline-only C-function XAutoRepeatOn
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XAutoRepeatOn";
end;

define inline-only C-function XBell
  parameter display    :: <Display*>;
  parameter percent    :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XBell";
end;

define inline-only C-function XBitmapBitOrder
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XBitmapBitOrder";
end;

define inline-only C-function XBitmapPad
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XBitmapPad";
end;

define inline-only C-function XBitmapUnit
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XBitmapUnit";
end;

define inline-only C-function XCellsOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XCellsOfScreen";
end;

define inline-only C-function XChangeActivePointerGrab
  parameter display    :: <Display*>;
  parameter event-mask :: <C-unsigned-int>;
  parameter cursor     :: <C-Cursor>;
  parameter time       :: <C-Time>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XChangeActivePointerGrab";
end;

define inline-only C-function XChangeGC
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter valuemask  :: <C-both-unsigned-long>;
  parameter values     :: <XGCValues*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XChangeGC";
end;

define inline-only C-function XChangeKeyboardControl
  parameter display    :: <Display*>;
  parameter value-mask :: <C-both-unsigned-long>;
  parameter values     :: <XKeyboardControl*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XChangeKeyboardControl";
end;

define inline-only C-function XChangeKeyboardMapping
  parameter display    :: <Display*>;
  parameter first-keycode :: <C-int>;
  parameter keysyms-per-keycode :: <C-int>;
  output parameter keysyms :: <KeySym*>;
  parameter num-codes  :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XChangeKeyboardMapping";
end;

define inline-only C-function XChangePointerControl
  parameter display    :: <Display*>;
  parameter do-accel   :: <C-Bool>;
  parameter do-threshold :: <C-Bool>;
  parameter accel-numerator :: <C-int>;
  parameter accel-denominator :: <C-int>;
  parameter threshold  :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XChangePointerControl";
end;

define inline-only C-function XChangeProperty
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter property   :: <C-Atom>;
  parameter type       :: <C-Atom>;
  parameter format     :: <C-int>;
  parameter mode       :: <C-int>;
  parameter data       ::  /* const */ <C-unsigned-char*>;
  parameter nelements  :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XChangeProperty";
end;

define inline-only C-function XChangeSaveSet
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter change-mode :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XChangeSaveSet";
end;

define inline-only C-function XChangeWindowAttributes
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter valuemask  :: <C-both-unsigned-long>;
  parameter attributes :: <XSetWindowAttributes*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XChangeWindowAttributes";
end;

define inline-only C-function XCheckIfEvent
  parameter display    :: <Display*>;
  parameter event-return :: <XEvent*>;
  parameter functionpointer1 :: <C-function-pointer>;
  parameter arg        :: <XPointer>;
  result value :: <C-Bool>;
  c-name: "XCheckIfEvent";
end;

define inline-only C-function XCheckMaskEvent
  parameter display    :: <Display*>;
  parameter event-mask :: <C-both-long>;
  parameter event-return :: <XEvent*>;
  result value :: <C-Bool>;
  c-name: "XCheckMaskEvent";
end;

define inline-only C-function XCheckTypedEvent
  parameter display    :: <Display*>;
  parameter event-type :: <C-int>;
  parameter event-return :: <XEvent*>;
  result value :: <C-Bool>;
  c-name: "XCheckTypedEvent";
end;

define inline-only C-function XCheckTypedWindowEvent
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter event-type :: <C-int>;
  parameter event-return :: <XEvent*>;
  result value :: <C-Bool>;
  c-name: "XCheckTypedWindowEvent";
end;

define inline-only C-function XCheckWindowEvent
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter event-mask :: <C-both-long>;
  parameter event-return :: <XEvent*>;
  result value :: <C-Bool>;
  c-name: "XCheckWindowEvent";
end;

define inline-only C-function XCirculateSubwindows
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter direction  :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XCirculateSubwindows";
end;

define inline-only C-function XCirculateSubwindowsDown
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XCirculateSubwindowsDown";
end;

define inline-only C-function XCirculateSubwindowsUp
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XCirculateSubwindowsUp";
end;

define inline-only C-function XClearArea
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter exposures  :: <C-Bool>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XClearArea";
end;

define inline-only C-function XClearWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XClearWindow";
end;

define inline-only C-function XCloseDisplay
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XCloseDisplay";
end;

define inline-only C-function XConfigureWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter value-mask :: <C-unsigned-int>;
  parameter values     :: <XWindowChanges*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XConfigureWindow";
end;

define inline-only C-function XConnectionNumber
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XConnectionNumber";
end;

define inline-only C-function XConvertSelection
  parameter display    :: <Display*>;
  parameter selection  :: <C-Atom>;
  parameter target     :: <C-Atom>;
  parameter property   :: <C-Atom>;
  parameter requestor  :: <C-Window>;
  parameter time       :: <C-Time>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XConvertSelection";
end;

define inline-only C-function XCopyArea
  parameter display    :: <Display*>;
  parameter src        :: <C-Drawable>;
  parameter dest       :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter src-x      :: <C-int>;
  parameter src-y      :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter dest-x     :: <C-int>;
  parameter dest-y     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XCopyArea";
end;

define inline-only C-function XCopyGC
  parameter display    :: <Display*>;
  parameter src        :: <GC>;
  parameter valuemask  :: <C-both-unsigned-long>;
  parameter dest       :: <GC>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XCopyGC";
end;

define inline-only C-function XCopyPlane
  parameter display    :: <Display*>;
  parameter src        :: <C-Drawable>;
  parameter dest       :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter src-x      :: <C-int>;
  parameter src-y      :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter dest-x     :: <C-int>;
  parameter dest-y     :: <C-int>;
  parameter plane      :: <C-both-unsigned-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XCopyPlane";
end;

define inline-only C-function XDefaultDepth
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-int>;
  c-name: "XDefaultDepth";
end;

define inline-only C-function XDefaultDepthOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XDefaultDepthOfScreen";
end;

define inline-only C-function XDefaultScreen
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XDefaultScreen";
end;

define inline-only C-function XDefineCursor
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter cursor     :: <C-Cursor>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDefineCursor";
end;

define inline-only C-function XDeleteProperty
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter property   :: <C-Atom>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDeleteProperty";
end;

define inline-only C-function XDestroyWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDestroyWindow";
end;

define inline-only C-function XDestroySubwindows
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDestroySubwindows";
end;

define inline-only C-function XDoesBackingStore
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XDoesBackingStore";
end;

define inline-only C-function XDoesSaveUnders
  parameter screen     :: <Screen*>;
  result value :: <C-Bool>;
  c-name: "XDoesSaveUnders";
end;

define inline-only C-function XDisableAccessControl
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDisableAccessControl";
end;

define inline-only C-function XDisplayCells
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-int>;
  c-name: "XDisplayCells";
end;

define inline-only C-function XDisplayHeight
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-int>;
  c-name: "XDisplayHeight";
end;

define inline-only C-function XDisplayHeightMM
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-int>;
  c-name: "XDisplayHeightMM";
end;

define inline-only C-function XDisplayKeycodes
  parameter display    :: <Display*>;
  output parameter min-keycodes-return :: <C-int*>;
  output parameter max-keycodes-return :: <C-int*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDisplayKeycodes";
end;

define inline-only C-function XDisplayPlanes
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-int>;
  c-name: "XDisplayPlanes";
end;

define inline-only C-function XDisplayWidth
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-int>;
  c-name: "XDisplayWidth";
end;

define inline-only C-function XDisplayWidthMM
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  result value :: <C-int>;
  c-name: "XDisplayWidthMM";
end;

define inline-only C-function XDrawArc
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter angle1     :: <C-int>;
  parameter angle2     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawArc";
end;

define inline-only C-function XDrawArcs
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter arcs       :: <XArc*>;
  parameter narcs      :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawArcs";
end;

define inline-only C-function XDrawImageString
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter string     ::  /* const */ <C-string>;
  parameter length     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawImageString";
end;

define inline-only C-function XDrawImageString16
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter string     ::  /* const */ <XChar2b*>;
  parameter length     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawImageString16";
end;

define inline-only C-function XDrawLine
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x1         :: <C-int>;
  parameter y1         :: <C-int>;
  parameter x2         :: <C-int>;
  parameter y2         :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawLine";
end;

define inline-only C-function XDrawLines
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter points     :: <XPoint*>;
  parameter npoints    :: <C-int>;
  parameter mode       :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawLines";
end;

define inline-only C-function XDrawPoint
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawPoint";
end;

define inline-only C-function XDrawPoints
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter points     :: <XPoint*>;
  parameter npoints    :: <C-int>;
  parameter mode       :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawPoints";
end;

define inline-only C-function XDrawRectangle
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawRectangle";
end;

define inline-only C-function XDrawRectangles
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter rectangles :: <XRectangle*>;
  parameter nrectangles :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawRectangles";
end;

define inline-only C-function XDrawSegments
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter segments   :: <XSegment*>;
  parameter nsegments  :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawSegments";
end;

define inline-only C-function XDrawString
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter string     ::  /* const */ <C-string>;
  parameter length     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawString";
end;

define inline-only C-function XDrawString16
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter string     ::  /* const */ <XChar2b*>;
  parameter length     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawString16";
end;

define inline-only C-function XDrawText
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter items      :: <XTextItem*>;
  parameter nitems     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawText";
end;

define inline-only C-function XDrawText16
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter items      :: <XTextItem16*>;
  parameter nitems     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDrawText16";
end;

define inline-only C-function XEnableAccessControl
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XEnableAccessControl";
end;

define inline-only C-function XEventsQueued
  parameter display    :: <Display*>;
  parameter mode       :: <C-int>;
  result value :: <C-int>;
  c-name: "XEventsQueued";
end;

define inline-only C-function XFetchName
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter window-name-return :: <C-string*>;
  result value :: <C-Status>;
  c-name: "XFetchName";
end;

define inline-only C-function XFillArc
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter angle1     :: <C-int>;
  parameter angle2     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFillArc";
end;

define inline-only C-function XFillArcs
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter arcs       :: <XArc*>;
  parameter narcs      :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFillArcs";
end;

define inline-only C-function XFillPolygon
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter points     :: <XPoint*>;
  parameter npoints    :: <C-int>;
  parameter shape      :: <C-int>;
  parameter mode       :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFillPolygon";
end;

define inline-only C-function XFillRectangle
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFillRectangle";
end;

define inline-only C-function XFillRectangles
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter rectangles :: <XRectangle*>;
  parameter nrectangles :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFillRectangles";
end;

define inline-only C-function XFlush
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFlush";
end;

define inline-only C-function XForceScreenSaver
  parameter display    :: <Display*>;
  parameter mode       :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XForceScreenSaver";
end;

define inline-only C-function XFree
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFree";
end;

define inline-only C-function XFreeColormap
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeColormap";
end;

define inline-only C-function XFreeColors
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  output parameter pixels :: <C-both-unsigned-long*>;
  parameter npixels    :: <C-int>;
  parameter planes     :: <C-both-unsigned-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeColors";
end;

define inline-only C-function XFreeCursor
  parameter display    :: <Display*>;
  parameter cursor     :: <C-Cursor>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeCursor";
end;

define inline-only C-function XFreeExtensionList
  parameter list       :: <C-string*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeExtensionList";
end;

define inline-only C-function XFreeFont
  parameter display    :: <Display*>;
  parameter font-struct :: <XFontStruct*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeFont";
end;

define inline-only C-function XFreeFontInfo
  parameter names      :: <C-string*>;
  parameter free-info  :: <XFontStruct*>;
  parameter actual-count :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeFontInfo";
end;

define inline-only C-function XFreeFontNames
  parameter list       :: <C-string*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeFontNames";
end;

define inline-only C-function XFreeFontPath
  parameter list       :: <C-string*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeFontPath";
end;

define inline-only C-function XFreeGC
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeGC";
end;

define inline-only C-function XFreeModifiermap
  parameter modmap     :: <XModifierKeymap*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreeModifiermap";
end;

define inline-only C-function XFreePixmap
  parameter display    :: <Display*>;
  parameter pixmap     :: <C-Pixmap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XFreePixmap";
end;

define inline-only C-function XGeometry
  parameter display    :: <Display*>;
  parameter screen     :: <C-int>;
  parameter position   ::  /* const */ <C-string>;
  parameter default-position ::  /* const */ <C-string>;
  parameter bwidth     :: <C-unsigned-int>;
  parameter fwidth     :: <C-unsigned-int>;
  parameter fheight    :: <C-unsigned-int>;
  parameter xadder     :: <C-int>;
  parameter yadder     :: <C-int>;
  output parameter x-return :: <C-int*>;
  output parameter y-return :: <C-int*>;
  output parameter width-return :: <C-int*>;
  output parameter height-return :: <C-int*>;
  result value :: <C-int>;
  c-name: "XGeometry";
end;

define inline-only C-function XGetErrorDatabaseText
  parameter display    :: <Display*>;
  parameter name       ::  /* const */ <C-string>;
  parameter message    ::  /* const */ <C-string>;
  parameter default-string ::  /* const */ <C-string>;
  parameter buffer-return :: <C-string>;
  parameter length     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGetErrorDatabaseText";
end;

define inline-only C-function XGetErrorText
  parameter display    :: <Display*>;
  parameter code       :: <C-int>;
  parameter buffer-return :: <C-string>;
  parameter length     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGetErrorText";
end;

define inline-only C-function XGetFontProperty
  parameter font-struct :: <XFontStruct*>;
  parameter atom       :: <C-Atom>;
  output parameter value-return :: <C-both-unsigned-long*>;
  result value :: <C-Bool>;
  c-name: "XGetFontProperty";
end;

define inline-only C-function XGetGCValues
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter valuemask  :: <C-both-unsigned-long>;
  parameter values-return :: <XGCValues*>;
  result value :: <C-Status>;
  c-name: "XGetGCValues";
end;

define inline-only C-function XGetGeometry
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  output parameter root-return :: <Window*>;
  output parameter x-return :: <C-int*>;
  output parameter y-return :: <C-int*>;
  output parameter width-return :: <C-unsigned-int*>;
  output parameter height-return :: <C-unsigned-int*>;
  output parameter border-width-return :: <C-unsigned-int*>;
  output parameter depth-return :: <C-unsigned-int*>;
  result value :: <C-Status>;
  c-name: "XGetGeometry";
end;

define inline-only C-function XGetIconName
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter icon-name-return :: <C-string*>;
  result value :: <C-Status>;
  c-name: "XGetIconName";
end;

define inline-only C-function XGetInputFocus
  parameter display    :: <Display*>;
  output parameter focus-return :: <Window*>;
  output parameter revert-to-return :: <C-int*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGetInputFocus";
end;

define inline-only C-function XGetKeyboardControl
  parameter display    :: <Display*>;
  parameter values-return :: <XKeyboardState*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGetKeyboardControl";
end;

define inline-only C-function XGetPointerControl
  parameter display    :: <Display*>;
  output parameter accel-numerator-return :: <C-int*>;
  output parameter accel-denominator-return :: <C-int*>;
  output parameter threshold-return :: <C-int*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGetPointerControl";
end;

define inline-only C-function XGetPointerMapping
  parameter display    :: <Display*>;
  parameter map-return :: <C-unsigned-char*>;
  parameter nmap       :: <C-int>;
  result value :: <C-int>;
  c-name: "XGetPointerMapping";
end;

define inline-only C-function XGetScreenSaver
  parameter display    :: <Display*>;
  output parameter timeout-return :: <C-int*>;
  output parameter interval-return :: <C-int*>;
  output parameter prefer-blanking-return :: <C-int*>;
  output parameter allow-exposures-return :: <C-int*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGetScreenSaver";
end;

define inline-only C-function XGetTransientForHint
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter prop-window-return :: <Window*>;
  result value :: <C-Status>;
  c-name: "XGetTransientForHint";
end;

define inline-only C-function XGetWindowProperty
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter property   :: <C-Atom>;
  parameter long-offset :: <C-both-long>;
  parameter long-length :: <C-both-long>;
  parameter delete     :: <C-Bool>;
  parameter req-type   :: <C-Atom>;
  output parameter actual-type-return :: <Atom*>;
  output parameter actual-format-return :: <C-int*>;
  output parameter nitems-return :: <C-both-unsigned-long*>;
  output parameter bytes-after-return :: <C-both-unsigned-long*>;
  parameter prop-return :: <C-unsigned-char**>;
  result value :: <C-int>;
  c-name: "XGetWindowProperty";
end;

define inline-only C-function XGetWindowAttributes
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter window-attributes-return :: <XWindowAttributes*>;
  result value :: <C-Status>;
  c-name: "XGetWindowAttributes";
end;

define inline-only C-function XGrabButton
  parameter display    :: <Display*>;
  parameter button     :: <C-unsigned-int>;
  parameter modifiers  :: <C-unsigned-int>;
  parameter grab-window :: <C-Window>;
  parameter owner-events :: <C-Bool>;
  parameter event-mask :: <C-unsigned-int>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  parameter confine-to :: <C-Window>;
  parameter cursor     :: <C-Cursor>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGrabButton";
end;

define inline-only C-function XGrabKey
  parameter display    :: <Display*>;
  parameter keycode    :: <C-int>;
  parameter modifiers  :: <C-unsigned-int>;
  parameter grab-window :: <C-Window>;
  parameter owner-events :: <C-Bool>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGrabKey";
end;

define inline-only C-function XGrabKeyboard
  parameter display    :: <Display*>;
  parameter grab-window :: <C-Window>;
  parameter owner-events :: <C-Bool>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  parameter time       :: <C-Time>;
  result value :: <C-int>;
  c-name: "XGrabKeyboard";
end;

define inline-only C-function XGrabPointer
  parameter display    :: <Display*>;
  parameter grab-window :: <C-Window>;
  parameter owner-events :: <C-Bool>;
  parameter event-mask :: <C-unsigned-int>;
  parameter pointer-mode :: <C-int>;
  parameter keyboard-mode :: <C-int>;
  parameter confine-to :: <C-Window>;
  parameter cursor     :: <C-Cursor>;
  parameter time       :: <C-Time>;
  result value :: <C-int>;
  c-name: "XGrabPointer";
end;

define inline-only C-function XGrabServer
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XGrabServer";
end;

define inline-only C-function XHeightMMOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XHeightMMOfScreen";
end;

define inline-only C-function XHeightOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XHeightOfScreen";
end;

define inline-only C-function XIfEvent
  parameter display    :: <Display*>;
  parameter event-return :: <XEvent*>;
  parameter functionpointer1 :: <C-function-pointer>;
  parameter arg        :: <XPointer>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XIfEvent";
end;

define inline-only C-function XImageByteOrder
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XImageByteOrder";
end;

define inline-only C-function XInstallColormap
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XInstallColormap";
end;

define inline-only C-function XKeysymToKeycode
  parameter display    :: <Display*>;
  parameter keysym     :: <C-KeySym>;
  result value :: <KeyCode>;
  c-name: "XKeysymToKeycode";
end;

define inline-only C-function XKillClient
  parameter display    :: <Display*>;
  parameter resource   :: <C-XID>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XKillClient";
end;

define inline-only C-function XLookupColor
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter color-name ::  /* const */ <C-string>;
  parameter exact-def-return :: <XColor*>;
  parameter screen-def-return :: <XColor*>;
  result value :: <C-Status>;
  c-name: "XLookupColor";
end;

define inline-only C-function XLowerWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XLowerWindow";
end;

define inline-only C-function XMapRaised
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XMapRaised";
end;

define inline-only C-function XMapSubwindows
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XMapSubwindows";
end;

define inline-only C-function XMapWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XMapWindow";
end;

define inline-only C-function XMaskEvent
  parameter display    :: <Display*>;
  parameter event-mask :: <C-both-long>;
  parameter event-return :: <XEvent*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XMaskEvent";
end;

define inline-only C-function XMaxCmapsOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XMaxCmapsOfScreen";
end;

define inline-only C-function XMinCmapsOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XMinCmapsOfScreen";
end;

define inline-only C-function XMoveResizeWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XMoveResizeWindow";
end;

define inline-only C-function XMoveWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XMoveWindow";
end;

define inline-only C-function XNextEvent
  parameter display    :: <Display*>;
  parameter event-return :: <XEvent*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XNextEvent";
end;

define inline-only C-function XNoOp
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XNoOp";
end;

define inline-only C-function XParseColor
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter spec       ::  /* const */ <C-string>;
  parameter exact-def-return :: <XColor*>;
  result value :: <C-Status>;
  c-name: "XParseColor";
end;

define inline-only C-function XParseGeometry
  parameter parsestring ::  /* const */ <C-string>;
  output parameter x-return :: <C-int*>;
  output parameter y-return :: <C-int*>;
  output parameter width-return :: <C-unsigned-int*>;
  output parameter height-return :: <C-unsigned-int*>;
  result value :: <C-int>;
  c-name: "XParseGeometry";
end;

define inline-only C-function XPeekEvent
  parameter display    :: <Display*>;
  parameter event-return :: <XEvent*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XPeekEvent";
end;

define inline-only C-function XPeekIfEvent
  parameter display    :: <Display*>;
  parameter event-return :: <XEvent*>;
  parameter functionpointer1 :: <C-function-pointer>;
  parameter arg        :: <XPointer>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XPeekIfEvent";
end;

define inline-only C-function XPending
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XPending";
end;

define inline-only C-function XPlanesOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XPlanesOfScreen";
end;

define inline-only C-function XProtocolRevision
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XProtocolRevision";
end;

define inline-only C-function XProtocolVersion
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XProtocolVersion";
end;

define inline-only C-function XPutBackEvent
  parameter display    :: <Display*>;
  parameter event      :: <XEvent*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XPutBackEvent";
end;

define inline-only C-function XPutImage
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter image      :: <XImage*>;
  parameter src-x      :: <C-int>;
  parameter src-y      :: <C-int>;
  parameter dest-x     :: <C-int>;
  parameter dest-y     :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XPutImage";
end;

define inline-only C-function XQLength
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XQLength";
end;

define inline-only C-function XQueryBestCursor
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  output parameter width-return :: <C-unsigned-int*>;
  output parameter height-return :: <C-unsigned-int*>;
  result value :: <C-Status>;
  c-name: "XQueryBestCursor";
end;

define inline-only C-function XQueryBestSize
  parameter display    :: <Display*>;
  parameter class      :: <C-int>;
  parameter which-screen :: <C-Drawable>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  output parameter width-return :: <C-unsigned-int*>;
  output parameter height-return :: <C-unsigned-int*>;
  result value :: <C-Status>;
  c-name: "XQueryBestSize";
end;

define inline-only C-function XQueryBestStipple
  parameter display    :: <Display*>;
  parameter which-screen :: <C-Drawable>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  output parameter width-return :: <C-unsigned-int*>;
  output parameter height-return :: <C-unsigned-int*>;
  result value :: <C-Status>;
  c-name: "XQueryBestStipple";
end;

define inline-only C-function XQueryBestTile
  parameter display    :: <Display*>;
  parameter which-screen :: <C-Drawable>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  output parameter width-return :: <C-unsigned-int*>;
  output parameter height-return :: <C-unsigned-int*>;
  result value :: <C-Status>;
  c-name: "XQueryBestTile";
end;

define inline-only C-function XQueryColor
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter def-in-out :: <XColor*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XQueryColor";
end;

define inline-only C-function XQueryColors
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter defs-in-out :: <XColor*>;
  parameter ncolors    :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XQueryColors";
end;

define inline-only C-function XQueryExtension
  parameter display    :: <Display*>;
  parameter name       ::  /* const */ <C-string>;
  output parameter major-opcode-return :: <C-int*>;
  output parameter first-event-return :: <C-int*>;
  output parameter first-error-return :: <C-int*>;
  result value :: <C-Bool>;
  c-name: "XQueryExtension";
end;

define inline-only C-function XQueryKeymap
  parameter display    :: <Display*>;
  parameter string1    :: <C-string> /* char[32] */;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XQueryKeymap";
end;

define inline-only C-function XQueryPointer
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter root-return :: <Window*>;
  output parameter child-return :: <Window*>;
  output parameter root-x-return :: <C-int*>;
  output parameter root-y-return :: <C-int*>;
  output parameter win-x-return :: <C-int*>;
  output parameter win-y-return :: <C-int*>;
  output parameter mask-return :: <C-unsigned-int*>;
  result value :: <C-Bool>;
  c-name: "XQueryPointer";
end;

define inline-only C-function XQueryTextExtents
  parameter display    :: <Display*>;
  parameter font-ID    :: <C-XID>;
  parameter string     ::  /* const */ <C-string>;
  parameter nchars     :: <C-int>;
  output parameter direction-return :: <C-int*>;
  output parameter font-ascent-return :: <C-int*>;
  output parameter font-descent-return :: <C-int*>;
  parameter overall-return :: <XCharStruct*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XQueryTextExtents";
end;

define inline-only C-function XQueryTextExtents16
  parameter display    :: <Display*>;
  parameter font-ID    :: <C-XID>;
  parameter string     ::  /* const */ <XChar2b*>;
  parameter nchars     :: <C-int>;
  output parameter direction-return :: <C-int*>;
  output parameter font-ascent-return :: <C-int*>;
  output parameter font-descent-return :: <C-int*>;
  parameter overall-return :: <XCharStruct*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XQueryTextExtents16";
end;

define inline-only C-function XQueryTree
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter root-return :: <Window*>;
  output parameter parent-return :: <Window*>;
  parameter children-return :: <Window**>;
  output parameter nchildren-return :: <C-unsigned-int*>;
  result value :: <C-Status>;
  c-name: "XQueryTree";
end;

define inline-only C-function XRaiseWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRaiseWindow";
end;

define inline-only C-function XReadBitmapFile
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter filename   ::  /* const */ <C-string>;
  output parameter width-return :: <C-unsigned-int*>;
  output parameter height-return :: <C-unsigned-int*>;
  output parameter bitmap-return :: <Pixmap*>;
  output parameter x-hot-return :: <C-int*>;
  output parameter y-hot-return :: <C-int*>;
  result value :: <C-int>;
  c-name: "XReadBitmapFile";
end;

define inline-only C-function XRebindKeysym
  parameter display    :: <Display*>;
  parameter keysym     :: <C-KeySym>;
  parameter list       :: <KeySym*>;
  parameter mod-count  :: <C-int>;
  parameter string     ::  /* const */ <C-unsigned-char*>;
  parameter bytes-string :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRebindKeysym";
end;

define inline-only C-function XRecolorCursor
  parameter display    :: <Display*>;
  parameter cursor     :: <C-Cursor>;
  parameter foreground-color :: <XColor*>;
  parameter background-color :: <XColor*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRecolorCursor";
end;

define inline-only C-function XRefreshKeyboardMapping
  parameter event-map  :: <XMappingEvent*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRefreshKeyboardMapping";
end;

define inline-only C-function XRemoveFromSaveSet
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRemoveFromSaveSet";
end;

define inline-only C-function XRemoveHost
  parameter display    :: <Display*>;
  parameter host       :: <XHostAddress*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRemoveHost";
end;

define inline-only C-function XRemoveHosts
  parameter display    :: <Display*>;
  parameter hosts      :: <XHostAddress*>;
  parameter num-hosts  :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRemoveHosts";
end;

define inline-only C-function XReparentWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter parent     :: <C-Window>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XReparentWindow";
end;

define inline-only C-function XResetScreenSaver
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XResetScreenSaver";
end;

define inline-only C-function XResizeWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XResizeWindow";
end;

define inline-only C-function XRestackWindows
  parameter display    :: <Display*>;
  output parameter windows :: <Window*>;
  parameter nwindows   :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRestackWindows";
end;

define inline-only C-function XRotateBuffers
  parameter display    :: <Display*>;
  parameter rotate     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRotateBuffers";
end;

define inline-only C-function XRotateWindowProperties
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter properties :: <Atom*>;
  parameter num-prop   :: <C-int>;
  parameter npositions :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XRotateWindowProperties";
end;

define inline-only C-function XScreenCount
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XScreenCount";
end;

define inline-only C-function XSelectInput
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter event-mask :: <C-both-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSelectInput";
end;

define inline-only C-function XSendEvent
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter propagate  :: <C-Bool>;
  parameter event-mask :: <C-both-long>;
  parameter event-send :: <XEvent*>;
  result value :: <C-Status>;
  c-name: "XSendEvent";
end;

define inline-only C-function XSetAccessControl
  parameter display    :: <Display*>;
  parameter mode       :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetAccessControl";
end;

define inline-only C-function XSetArcMode
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter arc-mode   :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetArcMode";
end;

define inline-only C-function XSetBackground
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter background :: <C-both-unsigned-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetBackground";
end;

define inline-only C-function XSetClipMask
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter pixmap     :: <C-Pixmap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetClipMask";
end;

define inline-only C-function XSetClipOrigin
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter clip-x-origin :: <C-int>;
  parameter clip-y-origin :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetClipOrigin";
end;

define inline-only C-function XSetClipRectangles
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter clip-x-origin :: <C-int>;
  parameter clip-y-origin :: <C-int>;
  parameter rectangles :: <XRectangle*>;
  parameter n          :: <C-int>;
  parameter ordering   :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetClipRectangles";
end;

define inline-only C-function XSetCloseDownMode
  parameter display    :: <Display*>;
  parameter close-mode :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetCloseDownMode";
end;

define inline-only C-function XSetCommand
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter argv       :: <C-string*>;
  parameter argc       :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetCommand";
end;

define inline-only C-function XSetDashes
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter dash-offset :: <C-int>;
  parameter dash-list  ::  /* const */ <C-string>;
  parameter n          :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetDashes";
end;

define inline-only C-function XSetFillRule
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter fill-rule  :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetFillRule";
end;

define inline-only C-function XSetFillStyle
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter fill-style :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetFillStyle";
end;

define inline-only C-function XSetFont
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter font       :: <C-Font>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetFont";
end;

define inline-only C-function XSetFontPath
  parameter display    :: <Display*>;
  parameter directories :: <C-string*>;
  parameter ndirs      :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetFontPath";
end;

define inline-only C-function XSetForeground
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter foreground :: <C-both-unsigned-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetForeground";
end;

define inline-only C-function XSetFunction
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter function   :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetFunction";
end;

define inline-only C-function XSetGraphicsExposures
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter graphics-exposures :: <C-Bool>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetGraphicsExposures";
end;

define inline-only C-function XSetIconName
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter icon-name  ::  /* const */ <C-string>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetIconName";
end;

define inline-only C-function XSetInputFocus
  parameter display    :: <Display*>;
  parameter focus      :: <C-Window>;
  parameter revert-to  :: <C-int>;
  parameter time       :: <C-Time>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetInputFocus";
end;

define inline-only C-function XSetLineAttributes
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter line-width :: <C-unsigned-int>;
  parameter line-style :: <C-int>;
  parameter cap-style  :: <C-int>;
  parameter join-style :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetLineAttributes";
end;

define inline-only C-function XSetModifierMapping
  parameter display    :: <Display*>;
  parameter modmap     :: <XModifierKeymap*>;
  result value :: <C-int>;
  c-name: "XSetModifierMapping";
end;

define inline-only C-function XSetPlaneMask
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter plane-mask :: <C-both-unsigned-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetPlaneMask";
end;

define inline-only C-function XSetPointerMapping
  parameter display    :: <Display*>;
  parameter map        ::  /* const */ <C-unsigned-char*>;
  parameter nmap       :: <C-int>;
  result value :: <C-int>;
  c-name: "XSetPointerMapping";
end;

define inline-only C-function XSetScreenSaver
  parameter display    :: <Display*>;
  parameter timeout    :: <C-int>;
  parameter interval   :: <C-int>;
  parameter prefer-blanking :: <C-int>;
  parameter allow-exposures :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetScreenSaver";
end;

define inline-only C-function XSetSelectionOwner
  parameter display    :: <Display*>;
  parameter selection  :: <C-Atom>;
  parameter owner      :: <C-Window>;
  parameter time       :: <C-Time>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetSelectionOwner";
end;

define inline-only C-function XSetState
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter foreground :: <C-both-unsigned-long>;
  parameter background :: <C-both-unsigned-long>;
  parameter function   :: <C-int>;
  parameter plane-mask :: <C-both-unsigned-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetState";
end;

define inline-only C-function XSetStipple
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter stipple    :: <C-Pixmap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetStipple";
end;

define inline-only C-function XSetSubwindowMode
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter subwindow-mode :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetSubwindowMode";
end;

define inline-only C-function XSetTSOrigin
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter ts-x-origin :: <C-int>;
  parameter ts-y-origin :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetTSOrigin";
end;

define inline-only C-function XSetTile
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter tile       :: <C-Pixmap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetTile";
end;

define inline-only C-function XSetWindowBackground
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter background-pixel :: <C-both-unsigned-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetWindowBackground";
end;

define inline-only C-function XSetWindowBackgroundPixmap
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter background-pixmap :: <C-Pixmap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetWindowBackgroundPixmap";
end;

define inline-only C-function XSetWindowBorder
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter border-pixel :: <C-both-unsigned-long>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetWindowBorder";
end;

define inline-only C-function XSetWindowBorderPixmap
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter border-pixmap :: <C-Pixmap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetWindowBorderPixmap";
end;

define inline-only C-function XSetWindowBorderWidth
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter width      :: <C-unsigned-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetWindowBorderWidth";
end;

define inline-only C-function XSetWindowColormap
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter colormap   :: <C-Colormap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetWindowColormap";
end;

define inline-only C-function XStoreBuffer
  parameter display    :: <Display*>;
  parameter bytes      ::  /* const */ <C-string>;
  parameter nbytes     :: <C-int>;
  parameter buffer     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XStoreBuffer";
end;

define inline-only C-function XStoreBytes
  parameter display    :: <Display*>;
  parameter bytes      ::  /* const */ <C-string>;
  parameter nbytes     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XStoreBytes";
end;

define inline-only C-function XStoreColor
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter color      :: <XColor*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XStoreColor";
end;

define inline-only C-function XStoreColors
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter color      :: <XColor*>;
  parameter ncolors    :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XStoreColors";
end;

define inline-only C-function XStoreName
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter window-name ::  /* const */ <C-string>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XStoreName";
end;

define inline-only C-function XStoreNamedColor
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  parameter color      ::  /* const */ <C-string>;
  parameter pixel      :: <C-both-unsigned-long>;
  parameter flags      :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XStoreNamedColor";
end;

define inline-only C-function XSync
  parameter display    :: <Display*>;
  parameter discard    :: <C-Bool>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSync";
end;

define inline-only C-function XTextExtents
  parameter font-struct :: <XFontStruct*>;
  parameter string     ::  /* const */ <C-string>;
  parameter nchars     :: <C-int>;
  output parameter direction-return :: <C-int*>;
  output parameter font-ascent-return :: <C-int*>;
  output parameter font-descent-return :: <C-int*>;
  parameter overall-return :: <XCharStruct*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XTextExtents";
end;

define inline-only C-function XTextExtents16
  parameter font-struct :: <XFontStruct*>;
  parameter string     ::  /* const */ <XChar2b*>;
  parameter nchars     :: <C-int>;
  output parameter direction-return :: <C-int*>;
  output parameter font-ascent-return :: <C-int*>;
  output parameter font-descent-return :: <C-int*>;
  parameter overall-return :: <XCharStruct*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XTextExtents16";
end;

define inline-only C-function XTextWidth
  parameter font-struct :: <XFontStruct*>;
  parameter string     ::  /* const */ <C-string>;
  parameter count      :: <C-int>;
  result value :: <C-int>;
  c-name: "XTextWidth";
end;

define inline-only C-function XTextWidth16
  parameter font-struct :: <XFontStruct*>;
  parameter string     ::  /* const */ <XChar2b*>;
  parameter count      :: <C-int>;
  result value :: <C-int>;
  c-name: "XTextWidth16";
end;

define inline-only C-function XTranslateCoordinates
  parameter display    :: <Display*>;
  parameter src-w      :: <C-Window>;
  parameter dest-w     :: <C-Window>;
  parameter src-x      :: <C-int>;
  parameter src-y      :: <C-int>;
  output parameter dest-x-return :: <C-int*>;
  output parameter dest-y-return :: <C-int*>;
  output parameter child-return :: <Window*>;
  result value :: <C-Bool>;
  c-name: "XTranslateCoordinates";
end;

define inline-only C-function XUndefineCursor
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUndefineCursor";
end;

define inline-only C-function XUngrabButton
  parameter display    :: <Display*>;
  parameter button     :: <C-unsigned-int>;
  parameter modifiers  :: <C-unsigned-int>;
  parameter grab-window :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUngrabButton";
end;

define inline-only C-function XUngrabKey
  parameter display    :: <Display*>;
  parameter keycode    :: <C-int>;
  parameter modifiers  :: <C-unsigned-int>;
  parameter grab-window :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUngrabKey";
end;

define inline-only C-function XUngrabKeyboard
  parameter display    :: <Display*>;
  parameter time       :: <C-Time>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUngrabKeyboard";
end;

define inline-only C-function XUngrabPointer
  parameter display    :: <Display*>;
  parameter time       :: <C-Time>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUngrabPointer";
end;

define inline-only C-function XUngrabServer
  parameter display    :: <Display*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUngrabServer";
end;

define inline-only C-function XUninstallColormap
  parameter display    :: <Display*>;
  parameter colormap   :: <C-Colormap>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUninstallColormap";
end;

define inline-only C-function XUnloadFont
  parameter display    :: <Display*>;
  parameter font       :: <C-Font>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUnloadFont";
end;

define inline-only C-function XUnmapSubwindows
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUnmapSubwindows";
end;

define inline-only C-function XUnmapWindow
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUnmapWindow";
end;

define inline-only C-function XVendorRelease
  parameter display    :: <Display*>;
  result value :: <C-int>;
  c-name: "XVendorRelease";
end;

define inline-only C-function XWarpPointer
  parameter display    :: <Display*>;
  parameter src-w      :: <C-Window>;
  parameter dest-w     :: <C-Window>;
  parameter src-x      :: <C-int>;
  parameter src-y      :: <C-int>;
  parameter src-width  :: <C-unsigned-int>;
  parameter src-height :: <C-unsigned-int>;
  parameter dest-x     :: <C-int>;
  parameter dest-y     :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XWarpPointer";
end;

define inline-only C-function XWidthMMOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XWidthMMOfScreen";
end;

define inline-only C-function XWidthOfScreen
  parameter screen     :: <Screen*>;
  result value :: <C-int>;
  c-name: "XWidthOfScreen";
end;

define inline-only C-function XWindowEvent
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter event-mask :: <C-both-long>;
  parameter event-return :: <XEvent*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XWindowEvent";
end;

define inline-only C-function XWriteBitmapFile
  parameter display    :: <Display*>;
  parameter filename   ::  /* const */ <C-string>;
  parameter bitmap     :: <C-Pixmap>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  parameter x-hot      :: <C-int>;
  parameter y-hot      :: <C-int>;
  result value :: <C-int>;
  c-name: "XWriteBitmapFile";
end;

define inline-only C-function XSupportsLocale
  result value :: <C-Bool>;
  c-name: "XSupportsLocale";
end;

define inline-only C-function XSetLocaleModifiers
  parameter modifier-list ::  /* const */ <C-string>;
  result value :: <C-string>;
  c-name: "XSetLocaleModifiers";
end;

define inline-only C-function XCreateFontSet
  parameter display    :: <Display*>;
  parameter base-font-name-list ::  /* const */ <C-string>;
  parameter missing-charset-list :: <C-string**>;
  output parameter missing-charset-count :: <C-int*>;
  parameter def-string :: <C-string*>;
  result value :: <XFontSet>;
  c-name: "XCreateFontSet";
end;

define inline-only C-function XFreeFontSet
  parameter display    :: <Display*>;
  parameter font-set   :: <XFontSet>;
  c-name: "XFreeFontSet";
end;

define inline-only C-function XFontsOfFontSet
  parameter font-set   :: <XFontSet>;
  parameter font-struct-list :: <XFontStruct***>;
  parameter font-name-list :: <C-string**>;
  result value :: <C-int>;
  c-name: "XFontsOfFontSet";
end;

define inline-only C-function XBaseFontNameListOfFontSet
  parameter font-set   :: <XFontSet>;
  result value :: <C-string>;
  c-name: "XBaseFontNameListOfFontSet";
end;

define inline-only C-function XLocaleOfFontSet
  parameter font-set   :: <XFontSet>;
  result value :: <C-string>;
  c-name: "XLocaleOfFontSet";
end;

define inline-only C-function XContextDependentDrawing
  parameter font-set   :: <XFontSet>;
  result value :: <C-Bool>;
  c-name: "XContextDependentDrawing";
end;

define inline-only C-function XExtentsOfFontSet
  parameter font-set   :: <XFontSet>;
  result value :: <XFontSetExtents*>;
  c-name: "XExtentsOfFontSet";
end;

define inline-only C-function XmbTextEscapement
  parameter font-set   :: <XFontSet>;
  parameter text       ::  /* const */ <C-string>;
  parameter bytes-text :: <C-int>;
  result value :: <C-int>;
  c-name: "XmbTextEscapement";
end;

define inline-only C-function XwcTextEscapement
  parameter font-set   :: <XFontSet>;
  parameter text       :: <C-unicode-string>;
  parameter num-wchars :: <C-int>;
  result value :: <C-int>;
  c-name: "XwcTextEscapement";
end;

define inline-only C-function XmbTextExtents
  parameter font-set   :: <XFontSet>;
  parameter text       ::  /* const */ <C-string>;
  parameter bytes-text :: <C-int>;
  parameter overall-ink-return :: <XRectangle*>;
  parameter overall-logical-return :: <XRectangle*>;
  result value :: <C-int>;
  c-name: "XmbTextExtents";
end;

define inline-only C-function XwcTextExtents
  parameter font-set   :: <XFontSet>;
  parameter text       :: <C-unicode-string>;
  parameter num-wchars :: <C-int>;
  parameter overall-ink-return :: <XRectangle*>;
  parameter overall-logical-return :: <XRectangle*>;
  result value :: <C-int>;
  c-name: "XwcTextExtents";
end;

define inline-only C-function XmbTextPerCharExtents
  parameter font-set   :: <XFontSet>;
  parameter text       ::  /* const */ <C-string>;
  parameter bytes-text :: <C-int>;
  parameter ink-extents-buffer :: <XRectangle*>;
  parameter logical-extents-buffer :: <XRectangle*>;
  parameter buffer-size :: <C-int>;
  output parameter num-chars :: <C-int*>;
  parameter overall-ink-return :: <XRectangle*>;
  parameter overall-logical-return :: <XRectangle*>;
  result value :: <C-Status>;
  c-name: "XmbTextPerCharExtents";
end;

define inline-only C-function XwcTextPerCharExtents
  parameter font-set   :: <XFontSet>;
  parameter text       :: <C-unicode-string>;
  parameter num-wchars :: <C-int>;
  parameter ink-extents-buffer :: <XRectangle*>;
  parameter logical-extents-buffer :: <XRectangle*>;
  parameter buffer-size :: <C-int>;
  output parameter num-chars :: <C-int*>;
  parameter overall-ink-return :: <XRectangle*>;
  parameter overall-logical-return :: <XRectangle*>;
  result value :: <C-Status>;
  c-name: "XwcTextPerCharExtents";
end;

define inline-only C-function XmbDrawText
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter text-items :: <XmbTextItem*>;
  parameter nitems     :: <C-int>;
  c-name: "XmbDrawText";
end;

define inline-only C-function XwcDrawText
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter text-items :: <XwcTextItem*>;
  parameter nitems     :: <C-int>;
  c-name: "XwcDrawText";
end;

define inline-only C-function XmbDrawString
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter font-set   :: <XFontSet>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter text       ::  /* const */ <C-string>;
  parameter bytes-text :: <C-int>;
  c-name: "XmbDrawString";
end;

define inline-only C-function XwcDrawString
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter font-set   :: <XFontSet>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter text       :: <C-unicode-string>;
  parameter num-wchars :: <C-int>;
  c-name: "XwcDrawString";
end;

define inline-only C-function XmbDrawImageString
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter font-set   :: <XFontSet>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter text       ::  /* const */ <C-string>;
  parameter bytes-text :: <C-int>;
  c-name: "XmbDrawImageString";
end;

define inline-only C-function XwcDrawImageString
  parameter display    :: <Display*>;
  parameter d          :: <C-Drawable>;
  parameter font-set   :: <XFontSet>;
  parameter gc         :: <GC>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter text       :: <C-unicode-string>;
  parameter num-wchars :: <C-int>;
  c-name: "XwcDrawImageString";
end;

define inline-only C-function XOpenIM
  parameter dpy        :: <Display*>;
  parameter rdb        :: <XrmHashBucketRec*>;
  parameter res-name   :: <C-string>;
  parameter res-class  :: <C-string>;
  result value :: <XIM>;
  c-name: "XOpenIM";
end;

define inline-only C-function XCloseIM
  parameter im         :: <XIM>;
  result value :: <C-Status>;
  c-name: "XCloseIM";
end;

define inline-only C-function XGetIMValues
  result value :: <C-string>;
  c-name: "XGetIMValues";
end;

define inline-only C-function XDisplayOfIM
  parameter im         :: <XIM>;
  result value :: <Display*>;
  c-name: "XDisplayOfIM";
end;

define inline-only C-function XLocaleOfIM
  parameter im         :: <XIM>;
  result value :: <C-string>;
  c-name: "XLocaleOfIM";
end;

define inline-only C-function XCreateIC
  result value :: <XIC>;
  c-name: "XCreateIC";
end;

define inline-only C-function XDestroyIC
  parameter ic         :: <XIC>;
  c-name: "XDestroyIC";
end;

define inline-only C-function XSetICFocus
  parameter ic         :: <XIC>;
  c-name: "XSetICFocus";
end;

define inline-only C-function XUnsetICFocus
  parameter ic         :: <XIC>;
  c-name: "XUnsetICFocus";
end;

define inline-only C-function XwcResetIC
  parameter ic         :: <XIC>;
  result value :: <C-unicode-string>;
  c-name: "XwcResetIC";
end;

define inline-only C-function XmbResetIC
  parameter ic         :: <XIC>;
  result value :: <C-string>;
  c-name: "XmbResetIC";
end;

define inline-only C-function XSetICValues
  result value :: <C-string>;
  c-name: "XSetICValues";
end;

define inline-only C-function XGetICValues
  result value :: <C-string>;
  c-name: "XGetICValues";
end;

define inline-only C-function XIMOfIC
  parameter ic         :: <XIC>;
  result value :: <XIM>;
  c-name: "XIMOfIC";
end;

define inline-only C-function XFilterEvent
  parameter event      :: <XEvent*>;
  parameter window     :: <C-Window>;
  result value :: <C-Bool>;
  c-name: "XFilterEvent";
end;

define inline-only C-function XmbLookupString
  parameter ic         :: <XIC>;
  parameter event      :: <XKeyPressedEvent*>;
  parameter buffer-return :: <C-string>;
  parameter bytes-buffer :: <C-int>;
  output parameter keysym-return :: <KeySym*>;
  parameter status-return :: <Status*>;
  result value :: <C-int>;
  c-name: "XmbLookupString";
end;

define inline-only C-function XwcLookupString
  parameter ic         :: <XIC>;
  parameter event      :: <XKeyPressedEvent*>;
  parameter buffer-return :: <C-unicode-string>;
  parameter wchars-buffer :: <C-int>;
  output parameter keysym-return :: <KeySym*>;
  parameter status-return :: <Status*>;
  result value :: <C-int>;
  c-name: "XwcLookupString";
end;

define inline-only C-function XVaCreateNestedList
  result value :: <XVaNestedList>;
  c-name: "XVaCreateNestedList";
end;

define sealed domain make (singleton(<XExtData*>));
define sealed domain initialize (<XExtData*>);
define sealed domain make (singleton(<XExtCodes*>));
define sealed domain initialize (<XExtCodes*>);
define sealed domain make (singleton(<XPixmapFormatValues*>));
define sealed domain initialize (<XPixmapFormatValues*>);
define sealed domain make (singleton(<XGCValues*>));
define sealed domain initialize (<XGCValues*>);
define sealed domain make (singleton(<Visual*>));
define sealed domain initialize (<Visual*>);
define sealed domain make (singleton(<Depth*>));
define sealed domain initialize (<Depth*>);
define sealed domain make (singleton(<Screen*>));
define sealed domain initialize (<Screen*>);
define sealed domain make (singleton(<ScreenFormat*>));
define sealed domain initialize (<ScreenFormat*>);
define sealed domain make (singleton(<XSetWindowAttributes*>));
define sealed domain initialize (<XSetWindowAttributes*>);
define sealed domain make (singleton(<XWindowAttributes*>));
define sealed domain initialize (<XWindowAttributes*>);
define sealed domain make (singleton(<XHostAddress*>));
define sealed domain initialize (<XHostAddress*>);
define sealed domain make (singleton(<XImage*>));
define sealed domain initialize (<XImage*>);
define sealed domain make (singleton(<XWindowChanges*>));
define sealed domain initialize (<XWindowChanges*>);
define sealed domain make (singleton(<XColor*>));
define sealed domain initialize (<XColor*>);
define sealed domain make (singleton(<XSegment*>));
define sealed domain initialize (<XSegment*>);
define sealed domain make (singleton(<XPoint*>));
define sealed domain initialize (<XPoint*>);
define sealed domain make (singleton(<XRectangle*>));
define sealed domain initialize (<XRectangle*>);
define sealed domain make (singleton(<XArc*>));
define sealed domain initialize (<XArc*>);
define sealed domain make (singleton(<XKeyboardControl*>));
define sealed domain initialize (<XKeyboardControl*>);
define sealed domain make (singleton(<XKeyboardState*>));
define sealed domain initialize (<XKeyboardState*>);
define sealed domain make (singleton(<XTimeCoord*>));
define sealed domain initialize (<XTimeCoord*>);
define sealed domain make (singleton(<XModifierKeymap*>));
define sealed domain initialize (<XModifierKeymap*>);
define sealed domain make (singleton(<Display*>));
define sealed domain initialize (<Display*>);
define sealed domain make (singleton(<XKeyEvent*>));
define sealed domain initialize (<XKeyEvent*>);
define sealed domain make (singleton(<XButtonEvent*>));
define sealed domain initialize (<XButtonEvent*>);
define sealed domain make (singleton(<XMotionEvent*>));
define sealed domain initialize (<XMotionEvent*>);
define sealed domain make (singleton(<XCrossingEvent*>));
define sealed domain initialize (<XCrossingEvent*>);
define sealed domain make (singleton(<XFocusChangeEvent*>));
define sealed domain initialize (<XFocusChangeEvent*>);
define sealed domain make (singleton(<XKeymapEvent*>));
define sealed domain initialize (<XKeymapEvent*>);
define sealed domain make (singleton(<XExposeEvent*>));
define sealed domain initialize (<XExposeEvent*>);
define sealed domain make (singleton(<XGraphicsExposeEvent*>));
define sealed domain initialize (<XGraphicsExposeEvent*>);
define sealed domain make (singleton(<XNoExposeEvent*>));
define sealed domain initialize (<XNoExposeEvent*>);
define sealed domain make (singleton(<XVisibilityEvent*>));
define sealed domain initialize (<XVisibilityEvent*>);
define sealed domain make (singleton(<XCreateWindowEvent*>));
define sealed domain initialize (<XCreateWindowEvent*>);
define sealed domain make (singleton(<XDestroyWindowEvent*>));
define sealed domain initialize (<XDestroyWindowEvent*>);
define sealed domain make (singleton(<XUnmapEvent*>));
define sealed domain initialize (<XUnmapEvent*>);
define sealed domain make (singleton(<XMapEvent*>));
define sealed domain initialize (<XMapEvent*>);
define sealed domain make (singleton(<XMapRequestEvent*>));
define sealed domain initialize (<XMapRequestEvent*>);
define sealed domain make (singleton(<XReparentEvent*>));
define sealed domain initialize (<XReparentEvent*>);
define sealed domain make (singleton(<XConfigureEvent*>));
define sealed domain initialize (<XConfigureEvent*>);
define sealed domain make (singleton(<XGravityEvent*>));
define sealed domain initialize (<XGravityEvent*>);
define sealed domain make (singleton(<XResizeRequestEvent*>));
define sealed domain initialize (<XResizeRequestEvent*>);
define sealed domain make (singleton(<XConfigureRequestEvent*>));
define sealed domain initialize (<XConfigureRequestEvent*>);
define sealed domain make (singleton(<XCirculateEvent*>));
define sealed domain initialize (<XCirculateEvent*>);
define sealed domain make (singleton(<XCirculateRequestEvent*>));
define sealed domain initialize (<XCirculateRequestEvent*>);
define sealed domain make (singleton(<XPropertyEvent*>));
define sealed domain initialize (<XPropertyEvent*>);
define sealed domain make (singleton(<XSelectionClearEvent*>));
define sealed domain initialize (<XSelectionClearEvent*>);
define sealed domain make (singleton(<XSelectionRequestEvent*>));
define sealed domain initialize (<XSelectionRequestEvent*>);
define sealed domain make (singleton(<XSelectionEvent*>));
define sealed domain initialize (<XSelectionEvent*>);
define sealed domain make (singleton(<XColormapEvent*>));
define sealed domain initialize (<XColormapEvent*>);
define sealed domain make (singleton(<XClientMessageEvent*>));
define sealed domain initialize (<XClientMessageEvent*>);
define sealed domain make (singleton(<XMappingEvent*>));
define sealed domain initialize (<XMappingEvent*>);
define sealed domain make (singleton(<XErrorEvent*>));
define sealed domain initialize (<XErrorEvent*>);
define sealed domain make (singleton(<XAnyEvent*>));
define sealed domain initialize (<XAnyEvent*>);
define sealed domain make (singleton(<XCharStruct*>));
define sealed domain initialize (<XCharStruct*>);
define sealed domain make (singleton(<XFontProp*>));
define sealed domain initialize (<XFontProp*>);
define sealed domain make (singleton(<XFontStruct*>));
define sealed domain initialize (<XFontStruct*>);
define sealed domain make (singleton(<XTextItem*>));
define sealed domain initialize (<XTextItem*>);
define sealed domain make (singleton(<XChar2b*>));
define sealed domain initialize (<XChar2b*>);
define sealed domain make (singleton(<XTextItem16*>));
define sealed domain initialize (<XTextItem16*>);
define sealed domain make (singleton(<XFontSetExtents*>));
define sealed domain initialize (<XFontSetExtents*>);
define sealed domain make (singleton(<XmbTextItem*>));
define sealed domain initialize (<XmbTextItem*>);
define sealed domain make (singleton(<XwcTextItem*>));
define sealed domain initialize (<XwcTextItem*>);
define sealed domain make (singleton(<XIMStyles*>));
define sealed domain initialize (<XIMStyles*>);
define sealed domain make (singleton(<XIMCallback*>));
define sealed domain initialize (<XIMCallback*>);
define sealed domain make (singleton(<XIMText*>));
define sealed domain initialize (<XIMText*>);
define sealed domain make (singleton(<XIMPreeditDrawCallbackStruct*>));
define sealed domain initialize (<XIMPreeditDrawCallbackStruct*>);
define sealed domain make (singleton(<XIMPreeditCaretCallbackStruct*>));
define sealed domain initialize (<XIMPreeditCaretCallbackStruct*>);
define sealed domain make (singleton(<XIMStatusDrawCallbackStruct*>));
define sealed domain initialize (<XIMStatusDrawCallbackStruct*>);
