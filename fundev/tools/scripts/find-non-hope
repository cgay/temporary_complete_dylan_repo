#!/usr/local/bin/perl
# Script: find-non-hope	
# Author: Shri Amit(amit)	
#
#   Usage: find-non-hope [-r] [PATHNAME]
# Purpose: The following script finds files under the 
#           directory PATHNAME. If no directory is passed
#           as the argument then the current directory is
#           the default.The -r option induces a recursive search in
#           all existing subdirectories. All other arguments are 
#           ignored. The proceedings of the script are dumped to a 
#           file called find-non-hope.log which will also contain
#           a listing of all the files not in HOPE at the end.
# On Nov 06 1996, amit commented out all the print statements
# on rthor's request for the script to be less verbose. The
# script now only prints out the list and ignored files to
# the logfile. Ideally there should be a -verbose option.
# Will do this sometime in the future.
###########################################################

open (THELOG, ">find-non-hope.log") || die "\ncould not open file for writing log";
print THELOG "\nThe following is the logfile for the script find-non-hope";

$subdirflag = 0;  ### the first subroutine call is for top level
&find_non_hope("$ARGV[0]", "$ARGV[1]");

$number = @nonhopefiles;
print THELOG "\nNumber of files not found in HOPE = $number";
print THELOG "\nThe files not in HOPE are:\n";
foreach $i (@nonhopefiles) {
    print THELOG "$i  \n";
}

$number = @nonhopedirs;
print THELOG "\nNumber of directories not found in HOPE = $number";
print THELOG "\nThe directories not found in HOPE are:\n";
foreach $i (@nonhopedirs) {
    print THELOG "$i  \n";
}

close(THELOG);

### The subroutine that does all the work ###

sub find_non_hope {
    local (@subdirs, $targetdir);

### Checks for 4 cases of args to decide target directory and recursion ###

    if (($_[0] eq "") && ($_[1] eq "")) { ### no recursion, default path
	$recursiveflag = 0;
	$targetdir = `pwd`;
	chop($targetdir);
    } elsif (($_[0] eq "-r") && ($_[1] eq "")) { ### recursion, default path
	$recursiveflag = 1;
	$targetdir = `pwd`;
	chop($targetdir);
    } elsif (($_[0] eq "-r") && ($_[1] ne "")) { ### recursion, special path
	$recursiveflag = 1;
	$targetdir = $_[1];
    } else {                                     ### no recursion, special path
	$recursiveflag = 0;
	$targetdir = $_[0];
    }

### Checks if the current path is under ~dylan or not ###
    
    unless ($targetdir =~ /\/dylan/) {
#	print THELOG "The target path is not under ~dylan";
#	print THELOG "\nHOPE shall not have a corresponding compound for it.";
	die THELOG "\nGoing to abort\n";
    }
    
### Determines corresponding compound in HOPE ###
    
    chdir ("$targetdir");
    $hope_guess = `hope sel -g`;
    @chunks = split (/[`']/, $hope_guess);
    $compound = @chunks[1];
    $branch = @chunks[3];

### However if the compound returns empty then it might not exist ###

    if ($compound eq "") { ### No compound found 
        
#        print THELOG "\nThe compound could not be found";

        if ($subdirflag == 0) { ### searching in top level
#            print THELOG "\nUnable to get the corresponding HOPE compound";
#            print THELOG "\nThe corresponding compound might not exist or";
#            print THELOG "\nyour dylan directory might not be under your";
            die THELOG "\nroot directory..aborting\n";
        } 
        else  { ### searching in a lower level directory          
            push(@nonhopedirs, $targetdir);
#            print THELOG "\nThe subdirectory $targetdir does not exist in HOPE";
        }
    }
    else { ### The compound exists
#        print THELOG "\nYour corresponding HOPE compound is: $compound";
#        print THELOG "\nAnd the branch is: $branch\n";

### Now to dig into the target directory ###

        opendir (CURRPATH, "$targetdir") || die NONHOPE "\ncould not open $targetdir\ngoing to abort";
        foreach $i (readdir(CURRPATH)) { ### is a directory
            if (-d $i) {

### Adding the subdirectories to the list called subdirs ###

                unless($i eq "\." || $i eq "..") {
                     push (@subdirs, $i);
                }
            }
            else { ### is a file

### Makes a status check on each file and looks for the string 'completed' ###

## Upon rthor's request, .c's and .a's wont be ignored any more, to undo
## simply add the following to the list in the unless statement below
## |(\.c$)|(\.a$)

                $ignoreflag = 1;
                unless ($i =~ /(fasl$)|(^\.version)|(\.obj$)|(\.h$)|(\.doss$)|(\.o$)|(^TAGS)/) {
                     $ignoreflag = 0;
                     @check = `hope status -compound $compound -branch $branch $i`;
                     $lenght = @check;
                     if (@check[$lenght-2] =~ /completed/) { ### file exists
                     }
                     else { ### file does not exist in HOPE
                         push (@nonhopefiles, "$targetdir/$i");
                     }
                }
                if ($tmpflag == 1) { ### Prints the ignored files into the logfile
                   print THELOG "\n Ignored the file $targetdir/$i";
                }
            }
        } 
        closedir(CURRPATH);
    } ### else { ### The compound exists

### Now to check if the recursive flag was specified in command line ###
    
    $foo = @subdirs;
    unless ($foo > 0) { ### The list of subdirectories is non-empty
        $recursiveflag = 0;
    }
    if ($recursiveflag == 0) { ### There is no further to go
#        print THELOG "\nThere is no deeper level to pursue\n";
    }
    else { ### recall subroutine for each of the subdirectories
        foreach $i (@subdirs) {
             $subdirflag = 1; ### going into a deeper level
              chdir ("$i");
#              print THELOG "\nSearching the subdirectory $i\n";
              &find_non_hope("-r", "$targetdir/$i");
        }
    }
} ### end of sub find_non_hope {





