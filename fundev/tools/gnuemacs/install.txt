
		-=-=-=-=-=-=-=-=-=-=-=-=-
		D Y L A N - O - M A T I C
		-=-=-=-=-=-=-=-=-=-=-=-=-

		Installation Guide

		Jason Trenouth
		10 Mar 1997

* HISTORY

  10 Mar 1997, Jason Trenouth
    - initial version
  28 Mar 1997, Andy Armstrong
    - describe customization variables

* INTRODUCTION

"Dylan-O-Matic" is an interim programming "environment" for the
standalone Dylan compiler on the PC. It is a cheap plastic imitation
of a real set of programming tools. If it doesn't leave a bad taste
in your mouth, then you don't chew your food properly. :-j

Dylan-O-Matic consists of several separate components, each of which
must be installed separately and manually. This document leads you
through the installation of these various components.

* SYSTEM REQUIREMENTS

Dylan-O-Matic requires Windows NT 4.x running an Intel Pentium. A
minimum configuration for building compiling smallish applications is
probably as follows:

	100 Mhz Pentium
	32MB RAM
	1.2 GB DISK

Largish applications require PC-style "big iron".

* EMACS

** EMACS ITSELF

We are using GNU Emacs 19.31. If you want to use some other flavour of
Emacs or some other sufficiently smart editor then you are on your
own. In the case of other Emacsen, you are welcome to extend the
various elisp files to support them so long as this support doesn't
adversely affect the support for GNU Emacs 19.31.

You can get GNU Emacs 19.31 from your local Windows NT server. Here is
where it lives on "mother" ("longstanton" domain):

	\pub\win32\editor\emacs\emacs-19.31\

Ask your local sysadmin what your local Windows NT server is called,
or simply download the files from "mother".

The standard place to copy the Emacs directory is here:

	c:\hqbin\win32\emacs-19.31\

Then run the install script as directed by the README file.

** EMACS REGISTRY ENTRIES

It is handy to set up some Emacs-specific registry entries for Windows
NT. These set up environment variables that tell Emacs where to look
for its elisp extensions and so on. An export file of Jason's settings
exists in:

	D-tools-gnuemacs!emacs.reg

To add these to your registry:

	Run regedit.exe
	Import emacs.reg (as located above)

NB the hex values are simply strings describing directories relative
to %emacs_dir% so you don't need to see those, but it is irritating.

You should modify the HOME variable to match your own directory.

** EMACS CLIENT/SERVER

Another handy thing to have is the package that allows Emacs to act as
a editor server. In effect, this allows you to have one copy of Emacs
running that is reused for editing new files in certain circumstances.

You ought to be able to get this package from your local Windows NT
server. Here is where is lives on "pingu" ("cam" domain):

	\pub\win32\editors\emacs\gnuserv.zip

Install this in eg

	\hqbin\win32\gnuserv\

To enable it you need to:

	add \hqbin\win32\gnuserv\ to your Windows NT PATH

		"Start" -> "Settings" -> "System" -> "Environment"

	add \hqbin\win32\gnuserv\ to your Emacs elisp load-path:

		(if (not (member "c:\\hqbin\\win32\\gnuserv" load-path))
		    (setq load-path 
			  (cons "c:\\hqbin\\win32\\gnuserv" load-path)))

	put the following in your ".emacs" file:

		(require 'gnuserv)
		(gnuserv-start)

To take advantage of this Emacs server you can add a Dylan file type
to the Explorer that uses Emacs to "open" the file:

	Start Windows Explorer
	"View" -> "Options.." -> "File Types" -> "New Type.."
	Enter "dylan" for the extension then select "New.."
	in the action section.
	In the new action dialog, enter "open" for the action
	and c:\hqbin\win32\gnuserv\gnuclien.exe for the operation.
	Make it the default.

[Note: the filename above is 'gnuclien' without the final 't'
 because of the old DOS eight character limit.]

Now double clicking on a dylan file should open a new Emacs frame for
editing the file without starting a new Emacs process.

** DOT EMACS ADDITIONS

Here is a list of the emacs bindings that you can specify to control
how all of the emacs Dylan functionality uses the file system.

  Name				Default
  ----------------------------- --------------------------------------
  tilde-dylan-directory		prompts for a string
  personal-dylan-directory	tries WEBSTER_PERSONAL_ROOT first,
				then uses "~/dylan"
  dylan-release-directory	tries WEBSTER_SYSTEM_ROOT first,
				then uses "~dylan/releases/pentium-kan"
  dylan-platform		tries WEBSTER_PLATFORM_NAME,
				then uses "x86-win32"

There are further additions to the ".emacs" file below. A canonical
".emacs" with all these additions is in:

	D-tools-gnuemacs!dot-emacs.el

* HOPE

HOPE runs on Windows NT. 

** HOPE IMPLEMENTATION

For downloading and installing the HOPE client see the document in the
HOPE Notebook entitled:

	"5. Using HOPE on Windows NT/Windows 95"

under the topic:

	"2. User Documentation"

** HOPE EMACS INTERFACE

The Emacs HOPE interface is not maintained or supported by the HOPE
team. It was contributed "as is" by the Lisp team, who aren't interested
in support requests either. However, Jason will endeavour to maintain
this interface to the satisfaction of the Dylan team.

You can get the Emacs HOPE interface from:

	HOPEemacs-lisp!hope.el

which should be checked-out into:

	~dylan/tools/hope/hope.el

This can be autoloaded by putting the following into your ".emacs"
file (assuming that "~dylan/tools/hope/" is on your
load-path, see example ".emacs" file):

	(autoload 'hope-mode "hope.el" "" t)

You need to set up two variables in your ".emacs" file to point to the
public read-only sources and your private copies. For example:

	(setq hope-source-directories
	  '(("e:/" "D" "trunk")))

	(setq hope-work-directories
	  '(("c:/users/jason/dylan" "D" "trunk")
	    ("c:/users/jason/dylan/emacs-lisp" "HOPEemacs-lisp" "trunk")))
  
NOTA BENE:

The Emacs key bindings are not the same as the LispWorks key bindings
(if you are used to those). The Emacs ones try to follow the (new) Emacs
version control interface conventions. In particular, here are the key
bindings for checkout and checkin:

			LispWorks	Emacs

	checkout	C-c C-o		C-x C-q
	checkin		C-c C-i		C-x C-q

That is, Emacs has a single keystroke that toggles the checked in/out
nature of the file.

That said, I've added menu support for HOPE to the Emacs interface so
remembering keystrokes or command names should be less of an issue.

* COMPILER

There is now a command line compiler available.

** COMPILER IMPLEMENTATION

Hopefully by the time you read this, the PC batch compiler will be
available in the Kan release. It is currently called dw (short for
DylanWorks I suppose), but think of it as equivalent to 'cc' in Visual
C++. The Kan executable lives in the x86-win32 bin directory as
follows:

  ~dylan/releases/kan/install/x86-win32/bin/dw.exe

** COMPILER EMACS INTERFACE

The Emacs compiler interface lives in:

	D-tools-gnuemacs!dylan-compile.el

which should be checked out into:

	~dylan/tools/gnuemacs/dylan-compile.el

The compiler will run the installation of dw.exe from the current Kan
release by default. If you'd like to use a different version, you can
add the following to your .emacs (obviously with your path instead):

  (setq dylan-compile-program-name "c:\\bin\\dw.exe")

* LINKER

After compiling you need to link your Dylan program together using
some linker, eg the Visual C++ one called "nmake".

** LINKER EMACS INTERFACE

The Emacs linker interface lives in the same file as the Emacs
compiler interface. All it provides is a simple shell buffer that runs
the kan-env.bat file automatically. You then have a couple of
menu-items for linking and installing your application that
conveniently default the pathname for you.

* DEBUGGER

There is a command line debugger built from the debugger nub.

** DEBUGGER IMPLEMENTATION

This is now in the Kan release (kan-970305). You can find it in:

	~dylan/releases/kan/install/x86-win32/bin/devel-dbg-ui.exe

The Emacs interface should be able to find it there (you may have to
tell it which drive you have ~dylan mounted on). If not they you can
simply set the variable DYLAN-DEBUG-PROGRAM-NAME in you .emacs file.

** DEBUGGER EMACS INTERFACE

The Emacs debugger interface lives in:

	D-tools-gnuemacs!dylan-debug.el

which should be checked out into:

	~dylan/tools/gnuemacs/dylan-debug.el

There is also some Emacs-style online documentation for the console
debugger. This is kept in:

	D-doc-misc!devel-dbg-instructions.text

which should be checked out into:

	~dylan/doc/misc/devel-dbg-instructions.text

To see this in Emacs do:

	(Info-goto-node "(e:/doc/misc/devel-dbg-instructions.text)top")

or simply use the menu item provided.

* MAILER

It is handy to be able to mail out Dylan bug reports, source changes,
and promotion notifications from Emacs on the PC.

Mail out from the PC is achieved using smtpmail.el. This is "something
that someone got from somewhere", but it is checked-in as:

	~dylan/tools/gnuemacs/smtpmail.el

so Dylanfolk can access it reliably.

The package should allow dylan-bug.el and dylan-source-change-mail.el
to work.

See dot-emacs.el file for a configuration example.

* PARAMETER HELP

The parameters of the functions in the DRM are available in Emacs. See
the file: 

	~dylan/tools/gnuemacs/dylan-params.el

This is loaded as part of dylanomatic.el which is itself loaded as
part of the dylan-mode autoload if you follow the dot-emacs.el example
file.

* OPTIMIZATION COLORING

Kevin's optimization colorer is in:

	~dylan/tools/gnuemacs/dylan-optimization-coloring.el

This is loaded as part of dylanomatic.el which is itself loaded as
part of the dylan-mode autoload if you follow the dot-emacs.el example
file.

A menu item 'Color Optimizations' will appear under Dylan/Misc to
automatically colorize a given file.

* ONLINE DOCUMENTATION

You can lookup reference documentation in the DRM directly from the
current word in a Dylan mode editing buffer:

	~dylan/tools/gnuemacs/dylan-doc.el.

This is loaded as part of dylanomatic.el which is itself loaded as
part of the dylan-mode autoload if you follow the dot-emacs.el example
file.


