#!/usr/local/bin/perl
#       Script: nightly-tag-file
#       Author: Arthor Wienstien(rthor), Shri Amit(amit)
$usage=" Usage: nightly-tag-file [-m <usernames>]";
#     Synopsis: . Builds tags for $admindir/source-dirs2tag
#               . Gets all .dylan files from .lid files either in
#                 a file in the dir called lids2tag, else just
#                 `find`'s all .lids, extracts .dylan's and then
#                 builds the tags.
#               . Tags are build in that dir in TAGS
#               . Old file moved to TAGS.old
## Note that the variable $OUTPUT_TYPE determines where all
## the output is directed. See env.perl for details on how 
## to modify that                                          
## 
## Last modified:
##   Jan-08-97 by princew to add -m argument
#################################################################
## Application exit codes ##
## 0: TAGS build successful
## 1: Could not open $log_file
## 2: Could not open $dtt_file
## 3: Platform is non sparc

## Initialize command line arguments and platform ##
##
require '/u/dylan/tools/admin/env.perl';
$OUTPUT_TYPE = "both";
$start_time = `date`; chop($start_time);
$log_file   = "$logsdir/nightly-tag-file.log";
$TAG_FILE   = "TAGS";
$LIB_FILES  = "$scriptsdir/lib-files -r -q";
$PATTERNS   = "$toolsdir/gnuemacs/tags.pat";
$GEMA       = "$localdir/gema";	
$dtt_file   = "$admindir/source-dirs2tag";
$lid_list_file ="lids2tag";
$send_mail  = "No";
$sendmailto = "unspecified";

unless ($platform =~ /sparc/) {
    &application_error("The platform: $platform is not supported by the gema utility",
		       3, $0, $usage);
}

while (<@ARGV>) {
    if ($_ eq "-m") {
	$send_mail = "yes";
    } 
    else {  # assume its list of people to send mail to
        $sendmailto = $_;
    }
}

open(THELOG, ">$log_file") ||
    &application_error("Cannot open logfile", 1, $0, $usage);
open(DTTF,"<$dtt_file") ||
    &application_error("Cannot open $dtt_file", 2, $0, $usage);

## Strip out comments and blanks and get the dirs2tag ##
##
foreach (<DTTF>) {
    chop;
    unless (/^\s*#.*|^\s*$/) { 
        push(@dirs2tag, $_);
	}
}
close(DTTF);	       
&running_with_options();


## Now get the lids and do the job ##
##
foreach $dir (@dirs2tag ) {
    @files = ();
    @lids = ();
    &output("dir is \t $dir");
    if (-f "$dir/$lid_list_file") {
	&output("Found $dir/$lid_list_file");
	open(LLF,"<$dir/$lid_list_file");
	foreach (<LLF>) {
	    unless (/^\s*#.*|^\s*$/) {
		    push(@lids,$_);
		}			 
	}
    } else {		 
	&output("Using find to locate lids in $dir");
	@lids = `find $dir -name \*.lid -print`;  
	foreach $i (@lids) { 
	  &output(" $i ... "); 
      }		    
    }			

    ## pull all the .dylan files out of the lid files
    ##
    foreach $lid (@lids) {
	chop($lid);
	@these_files = ();
	&output("   processing lid file: $lid");
	@these_files = `$LIB_FILES $lid`;
	chop(@these_files);
	if ($these_files[0] eq "") {
	    &output("The lid file $lid contains no .dylan files");
	    push(@shady_lid_files, $lid);
	} else {
	    foreach $i (@these_files) {	
		@tmp_files = split(/ +/, $i);
		foreach $j (@tmp_files) {
		    if (-f "$j") { 
			@files = (@files, $j);
		    } else {
			&output("The file $j not found");
			&output("It came from the lidfile $lid");
			push(@shady_dylan_files, $j);
		    }
		}
	    }
	}
    }
    # now we have a list of all the .dylan files we want to tag.
    # run gema on each and output it to the TAGS file
    
    $targetdir = "$dir/$TAG_FILE";
    if (-f "$targetdir") {
	&execute("mv $targetdir $targetdir.old");
    }
    foreach $i (@files) {
	## This strips out the /u/dylan/<libName> infront of the filename ##
	##
	@chunks = split('/', $i);
	shift(@chunks);
	shift(@chunks);
	shift(@chunks);
	shift(@chunks);
	$i = join('/', @chunks);
	&output("  File is \t$i");
	&execute("cd $dir; $GEMA -f $PATTERNS -quiet -out - $i >> $targetdir");
    }
}

## Report the shady stuff ##
##
$shady_lids = @shady_lid_files;
$shady_dylans = @shady_dylan_files;
if ($shady_lids > 0 || $shady_dylans > 0) {
    &output("The following lid files don't return any dylan files");
    foreach (@shady_lid_files) {
	&output("$_");
    }
    &output("The following .dylan files were not found");
    foreach (@shady_dylan_files) {
	&output("$_");
    }
    
    if ($send_mail eq "yes") {
	$subject = "Report for nightly-tag-file on $host at $site on $suffix";
	$message = "Some TAGS failed to build:\n\tThe following lid files did not return dylan files:\n\t@shady_lid_files\n\tThe following dylan files were not found:\n\t@shady_dylan_files";
	&send_mail("$message", "$sendmailto", "$subject");
    }
}

## Close the logfile and remove old logs ##
##
$end_time = `date`; chop($end_time);
&output("Ending at: $end_time\n\n");
close(THELOG);
exit(0);

## Logical end of the script
## All subroutines under here ##
   
## Output all the options ##
##
sub running_with_options {
    &output("Starting at: $start_time");
    &output("Running nightly-tag-file with options:");
    &output("The dirs to tag file is: $dtt_file");
    &output("    The dirs to tag are: @dirs2tag");
    &output("         The logfile is: $log_file");
    &output("    Send mail status is: $send_mail");
    &output("        Sending mail to: $sendmailto\n\n");
}

#eof
