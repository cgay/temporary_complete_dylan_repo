Module:    gtk-common
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "gtkwidget.h"; do not edit.

// enum GtkWidgetFlags:
define C-pointer-type <GtkWidgetFlags*> => <GtkWidgetFlags>;
define C-pointer-type <GtkWidgetFlags**> => <GtkWidgetFlags*>;
define inline-only constant $GTK-TOPLEVEL = ash(1,4);
define inline-only constant $GTK-NO-WINDOW = ash(1,5);
define inline-only constant $GTK-REALIZED = ash(1,6);
define inline-only constant $GTK-MAPPED = ash(1,7);
define inline-only constant $GTK-VISIBLE = ash(1,8);
define inline-only constant $GTK-SENSITIVE = ash(1,9);
define inline-only constant $GTK-PARENT-SENSITIVE = ash(1,10);
define inline-only constant $GTK-CAN-FOCUS = ash(1,11);
define inline-only constant $GTK-HAS-FOCUS = ash(1,12);
define inline-only constant $GTK-CAN-DEFAULT = ash(1,13);
define inline-only constant $GTK-HAS-DEFAULT = ash(1,14);
define inline-only constant $GTK-HAS-GRAB = ash(1,15);
define inline-only constant $GTK-RC-STYLE = ash(1,16);
define inline-only constant $GTK-COMPOSITE-CHILD = ash(1,17);
define inline-only constant $GTK-NO-REPARENT = ash(1,18);
define inline-only constant $GTK-APP-PAINTABLE = ash(1,19);
define inline-only constant $GTK-RECEIVES-DEFAULT = ash(1,20);

define C-pointer-type <GtkRequisition*> => <GtkRequisition>;
define C-pointer-type <GtkRequisition**> => <GtkRequisition*>;
define C-pointer-type <GtkAllocation*> => <GtkAllocation>;
define C-pointer-type <GtkAllocation**> => <GtkAllocation*>;
define C-pointer-type <GtkSelectionData*> => <GtkSelectionData>;
define C-pointer-type <GtkSelectionData**> => <GtkSelectionData*>;
define C-pointer-type <GtkWidgetClass*> => <GtkWidgetClass>;
define C-pointer-type <GtkWidgetClass**> => <GtkWidgetClass*>;
define C-pointer-type <GtkWidgetAuxInfo*> => <GtkWidgetAuxInfo>;
define C-pointer-type <GtkWidgetAuxInfo**> => <GtkWidgetAuxInfo*>;
define C-pointer-type <GtkWidgetShapeInfo*> => <GtkWidgetShapeInfo>;
define C-pointer-type <GtkWidgetShapeInfo**> => <GtkWidgetShapeInfo*>;
define C-pointer-type <GtkCallback*> => <GtkCallback>;
define C-pointer-type <GtkCallback**> => <GtkCallback*>;

define C-struct <_GtkRequisition>
  sealed inline-only slot width-value    :: <gint16>;
  sealed inline-only slot height-value   :: <gint16>;
  pointer-type-name: <_GtkRequisition*>;
  c-name: "struct _GtkRequisition";
end;

define C-struct <_GtkAllocation>
  sealed inline-only slot x-value        :: <gint16>;
  sealed inline-only slot y-value        :: <gint16>;
  sealed inline-only slot width-value    :: <guint16>;
  sealed inline-only slot height-value   :: <guint16>;
  pointer-type-name: <_GtkAllocation*>;
  c-name: "struct _GtkAllocation";
end;

define C-struct <_GtkSelectionData>
  sealed inline-only slot selection-value :: <GdkAtom>;
  sealed inline-only slot target-value   :: <GdkAtom>;
  sealed inline-only slot type-value     :: <GdkAtom>;
  sealed inline-only slot format-value   :: <gint>;
  sealed inline-only slot data-value     :: <guchar*>;
  sealed inline-only slot length-value   :: <gint>;
  pointer-type-name: <_GtkSelectionData*>;
  c-name: "struct _GtkSelectionData";
end;

define C-struct <_GtkWidget>
  sealed inline-only slot object-value   :: <GtkObject>;
  sealed inline-only slot private-flags-value :: <guint16>;
  sealed inline-only slot state-value    :: <guint8>;
  sealed inline-only slot saved-state-value :: <guint8>;
  sealed inline-only slot name-value     :: <gchar*>;
  sealed inline-only slot style-value    :: <GtkStyle*>;
  sealed inline-only slot requisition-value :: <GtkRequisition>;
  sealed inline-only slot allocation-value :: <GtkAllocation>;
  sealed inline-only slot window-value   :: <GdkWindow*>;
  sealed inline-only slot parent-value   :: <GtkWidget*>;
  pointer-type-name: <_GtkWidget*>;
  c-name: "struct _GtkWidget";
end;

define C-struct <_GtkWidgetClass>
  sealed inline-only slot parent-class-value :: <GtkObjectClass>;
  sealed inline-only slot activate-signal-value :: <guint>;
  sealed inline-only slot set-scroll-adjustments-signal-value :: <guint>;
  sealed inline-only slot show-value     :: <C-function-pointer>;
  sealed inline-only slot show-all-value :: <C-function-pointer>;
  sealed inline-only slot hide-value     :: <C-function-pointer>;
  sealed inline-only slot hide-all-value :: <C-function-pointer>;
  sealed inline-only slot map-value      :: <C-function-pointer>;
  sealed inline-only slot unmap-value    :: <C-function-pointer>;
  sealed inline-only slot realize-value  :: <C-function-pointer>;
  sealed inline-only slot unrealize-value :: <C-function-pointer>;
  sealed inline-only slot draw-value     :: <C-function-pointer>;
  sealed inline-only slot draw-focus-value :: <C-function-pointer>;
  sealed inline-only slot draw-default-value :: <C-function-pointer>;
  sealed inline-only slot size-request-value :: <C-function-pointer>;
  sealed inline-only slot size-allocate-value :: <C-function-pointer>;
  sealed inline-only slot state-changed-value :: <C-function-pointer>;
  sealed inline-only slot parent-set-value :: <C-function-pointer>;
  sealed inline-only slot style-set-value :: <C-function-pointer>;
  sealed inline-only slot add-accelerator-value :: <C-function-pointer>;
  sealed inline-only slot remove-accelerator-value :: <C-function-pointer>;
  sealed inline-only slot grab-focus-value :: <C-function-pointer>;
  sealed inline-only slot event-value    :: <C-function-pointer>;
  sealed inline-only slot button-press-event-value :: <C-function-pointer>;
  sealed inline-only slot button-release-event-value :: <C-function-pointer>;
  sealed inline-only slot motion-notify-event-value :: <C-function-pointer>;
  sealed inline-only slot delete-event-value :: <C-function-pointer>;
  sealed inline-only slot destroy-event-value :: <C-function-pointer>;
  sealed inline-only slot expose-event-value :: <C-function-pointer>;
  sealed inline-only slot key-press-event-value :: <C-function-pointer>;
  sealed inline-only slot key-release-event-value :: <C-function-pointer>;
  sealed inline-only slot enter-notify-event-value :: <C-function-pointer>;
  sealed inline-only slot leave-notify-event-value :: <C-function-pointer>;
  sealed inline-only slot configure-event-value :: <C-function-pointer>;
  sealed inline-only slot focus-in-event-value :: <C-function-pointer>;
  sealed inline-only slot focus-out-event-value :: <C-function-pointer>;
  sealed inline-only slot map-event-value :: <C-function-pointer>;
  sealed inline-only slot unmap-event-value :: <C-function-pointer>;
  sealed inline-only slot property-notify-event-value :: <C-function-pointer>;
  sealed inline-only slot selection-clear-event-value :: <C-function-pointer>;
  sealed inline-only slot selection-request-event-value :: <C-function-pointer>;
  sealed inline-only slot selection-notify-event-value :: <C-function-pointer>;
  sealed inline-only slot proximity-in-event-value :: <C-function-pointer>;
  sealed inline-only slot proximity-out-event-value :: <C-function-pointer>;
  sealed inline-only slot visibility-notify-event-value :: <C-function-pointer>;
  sealed inline-only slot client-event-value :: <C-function-pointer>;
  sealed inline-only slot no-expose-event-value :: <C-function-pointer>;
  sealed inline-only slot selection-get-value :: <C-function-pointer>;
  sealed inline-only slot selection-received-value :: <C-function-pointer>;
  sealed inline-only slot drag-begin-value :: <C-function-pointer>;
  sealed inline-only slot drag-end-value :: <C-function-pointer>;
  sealed inline-only slot drag-data-get-value :: <C-function-pointer>;
  sealed inline-only slot drag-data-delete-value :: <C-function-pointer>;
  sealed inline-only slot drag-leave-value :: <C-function-pointer>;
  sealed inline-only slot drag-motion-value :: <C-function-pointer>;
  sealed inline-only slot drag-drop-value :: <C-function-pointer>;
  sealed inline-only slot drag-data-received-value :: <C-function-pointer>;
  sealed inline-only slot debug-msg-value :: <C-function-pointer>;
  sealed inline-only slot pad1-value     :: <GtkFunction>;
  sealed inline-only slot pad2-value     :: <GtkFunction>;
  sealed inline-only slot pad3-value     :: <GtkFunction>;
  sealed inline-only slot pad4-value     :: <GtkFunction>;
  pointer-type-name: <_GtkWidgetClass*>;
  c-name: "struct _GtkWidgetClass";
end;

define C-struct <_GtkWidgetAuxInfo>
  sealed inline-only slot x-value        :: <gint16>;
  sealed inline-only slot y-value        :: <gint16>;
  sealed inline-only slot width-value    :: <gint16>;
  sealed inline-only slot height-value   :: <gint16>;
  pointer-type-name: <_GtkWidgetAuxInfo*>;
  c-name: "struct _GtkWidgetAuxInfo";
end;

define C-struct <_GtkWidgetShapeInfo>
  sealed inline-only slot offset-x-value :: <gint16>;
  sealed inline-only slot offset-y-value :: <gint16>;
  sealed inline-only slot shape-mask-value :: <GdkBitmap*>;
  pointer-type-name: <_GtkWidgetShapeInfo*>;
  c-name: "struct _GtkWidgetShapeInfo";
end;

define inline-only C-function gtk-widget-get-type
  result value :: <GtkType>;
  c-name: "gtk_widget_get_type";
end;

define inline-only C-function gtk-widget-newv
  parameter type1      :: <GtkType>;
  parameter nargs2     :: <guint>;
  parameter args3      :: <GtkArg*>;
  result value :: <GtkWidget*>;
  c-name: "gtk_widget_newv";
end;

define inline-only C-function gtk-widget-ref
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_ref";
end;

define inline-only C-function gtk-widget-unref
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_unref";
end;

define inline-only C-function gtk-widget-destroy
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_destroy";
end;

define inline-only C-function gtk-widget-destroyed
  parameter widget1    :: <GtkWidget*>;
  parameter widget_pointer2 :: <GtkWidget**>;
  c-name: "gtk_widget_destroyed";
end;

define inline-only C-function gtk-widget-get
  parameter widget1    :: <GtkWidget*>;
  parameter arg2       :: <GtkArg*>;
  c-name: "gtk_widget_get";
end;

define inline-only C-function gtk-widget-getv
  parameter widget1    :: <GtkWidget*>;
  parameter nargs2     :: <guint>;
  parameter args3      :: <GtkArg*>;
  c-name: "gtk_widget_getv";
end;

define inline-only C-function gtk-widget-setv
  parameter widget1    :: <GtkWidget*>;
  parameter nargs2     :: <guint>;
  parameter args3      :: <GtkArg*>;
  c-name: "gtk_widget_setv";
end;

define inline-only C-function gtk-widget-unparent
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_unparent";
end;

define inline-only C-function gtk-widget-show
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_show";
end;

define inline-only C-function gtk-widget-show-now
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_show_now";
end;

define inline-only C-function gtk-widget-hide
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_hide";
end;

define inline-only C-function gtk-widget-show-all
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_show_all";
end;

define inline-only C-function gtk-widget-hide-all
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_hide_all";
end;

define inline-only C-function gtk-widget-map
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_map";
end;

define inline-only C-function gtk-widget-unmap
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_unmap";
end;

define inline-only C-function gtk-widget-realize
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_realize";
end;

define inline-only C-function gtk-widget-unrealize
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_unrealize";
end;

define inline-only C-function gtk-widget-queue-draw
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_queue_draw";
end;

define inline-only C-function gtk-widget-queue-draw-area
  parameter widget1    :: <GtkWidget*>;
  parameter x2         :: <gint>;
  parameter y3         :: <gint>;
  parameter width4     :: <gint>;
  parameter height5    :: <gint>;
  c-name: "gtk_widget_queue_draw_area";
end;

define inline-only C-function gtk-widget-queue-clear
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_queue_clear";
end;

define inline-only C-function gtk-widget-queue-clear-area
  parameter widget1    :: <GtkWidget*>;
  parameter x2         :: <gint>;
  parameter y3         :: <gint>;
  parameter width4     :: <gint>;
  parameter height5    :: <gint>;
  c-name: "gtk_widget_queue_clear_area";
end;

define inline-only C-function gtk-widget-queue-resize
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_queue_resize";
end;

define inline-only C-function gtk-widget-draw
  parameter widget1    :: <GtkWidget*>;
  parameter area2      :: <GdkRectangle*>;
  c-name: "gtk_widget_draw";
end;

define inline-only C-function gtk-widget-draw-focus
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_draw_focus";
end;

define inline-only C-function gtk-widget-draw-default
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_draw_default";
end;

define inline-only C-function gtk-widget-size-request
  parameter widget1    :: <GtkWidget*>;
  parameter requisition2 :: <GtkRequisition*>;
  c-name: "gtk_widget_size_request";
end;

define inline-only C-function gtk-widget-size-allocate
  parameter widget1    :: <GtkWidget*>;
  parameter allocation2 :: <GtkAllocation*>;
  c-name: "gtk_widget_size_allocate";
end;

define inline-only C-function gtk-widget-get-child-requisition
  parameter widget1    :: <GtkWidget*>;
  parameter requisition2 :: <GtkRequisition*>;
  c-name: "gtk_widget_get_child_requisition";
end;

define inline-only C-function gtk-widget-add-accelerator
  parameter widget1    :: <GtkWidget*>;
  parameter accel_signal2 ::  /* const */ <gchar*>;
  parameter accel_group3 :: <GtkAccelGroup*>;
  parameter accel_key4 :: <guint>;
  parameter accel_mods5 :: <guint>;
  parameter accel_flags6 :: <GtkAccelFlags>;
  c-name: "gtk_widget_add_accelerator";
end;

define inline-only C-function gtk-widget-remove-accelerator
  parameter widget1    :: <GtkWidget*>;
  parameter accel_group2 :: <GtkAccelGroup*>;
  parameter accel_key3 :: <guint>;
  parameter accel_mods4 :: <guint>;
  c-name: "gtk_widget_remove_accelerator";
end;

define inline-only C-function gtk-widget-remove-accelerators
  parameter widget1    :: <GtkWidget*>;
  parameter accel_signal2 ::  /* const */ <gchar*>;
  parameter visible_only3 :: <gboolean>;
  c-name: "gtk_widget_remove_accelerators";
end;

define inline-only C-function gtk-widget-accelerator-signal
  parameter widget1    :: <GtkWidget*>;
  parameter accel_group2 :: <GtkAccelGroup*>;
  parameter accel_key3 :: <guint>;
  parameter accel_mods4 :: <guint>;
  result value :: <guint>;
  c-name: "gtk_widget_accelerator_signal";
end;

define inline-only C-function gtk-widget-lock-accelerators
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_lock_accelerators";
end;

define inline-only C-function gtk-widget-unlock-accelerators
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_unlock_accelerators";
end;

define inline-only C-function gtk-widget-event
  parameter widget1    :: <GtkWidget*>;
  parameter event2     :: <GdkEvent*>;
  result value :: <gint>;
  c-name: "gtk_widget_event";
end;

define inline-only C-function gtk-widget-activate
  parameter widget1    :: <GtkWidget*>;
  result value :: <gboolean>;
  c-name: "gtk_widget_activate";
end;

define inline-only C-function gtk-widget-set-scroll-adjustments
  parameter widget1    :: <GtkWidget*>;
  parameter hadjustment2 :: <GtkAdjustment*>;
  parameter vadjustment3 :: <GtkAdjustment*>;
  result value :: <gboolean>;
  c-name: "gtk_widget_set_scroll_adjustments";
end;

define inline-only C-function gtk-widget-reparent
  parameter widget1    :: <GtkWidget*>;
  parameter new_parent2 :: <GtkWidget*>;
  c-name: "gtk_widget_reparent";
end;

define inline-only C-function gtk-widget-popup
  parameter widget1    :: <GtkWidget*>;
  parameter x2         :: <gint>;
  parameter y3         :: <gint>;
  c-name: "gtk_widget_popup";
end;

define inline-only C-function gtk-widget-intersect
  parameter widget1    :: <GtkWidget*>;
  parameter area2      :: <GdkRectangle*>;
  parameter intersection3 :: <GdkRectangle*>;
  result value :: <gint>;
  c-name: "gtk_widget_intersect";
end;

define inline-only C-function gtk-widget-grab-focus
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_grab_focus";
end;

define inline-only C-function gtk-widget-grab-default
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_grab_default";
end;

define inline-only C-function gtk-widget-set-name
  parameter widget1    :: <GtkWidget*>;
  parameter name2      ::  /* const */ <gchar*>;
  c-name: "gtk_widget_set_name";
end;

define inline-only C-function gtk-widget-get-name
  parameter widget1    :: <GtkWidget*>;
  result value :: <gchar*>;
  c-name: "gtk_widget_get_name";
end;

define inline-only C-function gtk-widget-set-state
  parameter widget1    :: <GtkWidget*>;
  parameter state2     :: <GtkStateType>;
  c-name: "gtk_widget_set_state";
end;

define inline-only C-function gtk-widget-set-sensitive
  parameter widget1    :: <GtkWidget*>;
  parameter sensitive2 :: <gboolean>;
  c-name: "gtk_widget_set_sensitive";
end;

define inline-only C-function gtk-widget-set-app-paintable
  parameter widget1    :: <GtkWidget*>;
  parameter app_paintable2 :: <gboolean>;
  c-name: "gtk_widget_set_app_paintable";
end;

define inline-only C-function gtk-widget-set-parent
  parameter widget1    :: <GtkWidget*>;
  parameter parent2    :: <GtkWidget*>;
  c-name: "gtk_widget_set_parent";
end;

define inline-only C-function gtk-widget-set-parent-window
  parameter widget1    :: <GtkWidget*>;
  parameter parent_window2 :: <GdkWindow*>;
  c-name: "gtk_widget_set_parent_window";
end;

define inline-only C-function gtk-widget-get-parent-window
  parameter widget1    :: <GtkWidget*>;
  result value :: <GdkWindow*>;
  c-name: "gtk_widget_get_parent_window";
end;

define inline-only C-function gtk-widget-set-uposition
  parameter widget1    :: <GtkWidget*>;
  parameter x2         :: <gint>;
  parameter y3         :: <gint>;
  c-name: "gtk_widget_set_uposition";
end;

define inline-only C-function gtk-widget-set-usize
  parameter widget1    :: <GtkWidget*>;
  parameter width2     :: <gint>;
  parameter height3    :: <gint>;
  c-name: "gtk_widget_set_usize";
end;

define inline-only C-function gtk-widget-set-events
  parameter widget1    :: <GtkWidget*>;
  parameter events2    :: <gint>;
  c-name: "gtk_widget_set_events";
end;

define inline-only C-function gtk-widget-add-events
  parameter widget1    :: <GtkWidget*>;
  parameter events2    :: <gint>;
  c-name: "gtk_widget_add_events";
end;

define inline-only C-function gtk-widget-set-extension-events
  parameter widget1    :: <GtkWidget*>;
  parameter mode2      :: <GdkExtensionMode>;
  c-name: "gtk_widget_set_extension_events";
end;

define inline-only C-function gtk-widget-get-extension-events
  parameter widget1    :: <GtkWidget*>;
  result value :: <GdkExtensionMode>;
  c-name: "gtk_widget_get_extension_events";
end;

define inline-only C-function gtk-widget-get-toplevel
  parameter widget1    :: <GtkWidget*>;
  result value :: <GtkWidget*>;
  c-name: "gtk_widget_get_toplevel";
end;

define inline-only C-function gtk-widget-get-ancestor
  parameter widget1    :: <GtkWidget*>;
  parameter widget_type2 :: <GtkType>;
  result value :: <GtkWidget*>;
  c-name: "gtk_widget_get_ancestor";
end;

define inline-only C-function gtk-widget-get-colormap
  parameter widget1    :: <GtkWidget*>;
  result value :: <GdkColormap*>;
  c-name: "gtk_widget_get_colormap";
end;

define inline-only C-function gtk-widget-get-visual
  parameter widget1    :: <GtkWidget*>;
  result value :: <GdkVisual*>;
  c-name: "gtk_widget_get_visual";
end;

define inline-only C-function gtk-widget-set-colormap
  parameter widget1    :: <GtkWidget*>;
  parameter colormap2  :: <GdkColormap*>;
  c-name: "gtk_widget_set_colormap";
end;

define inline-only C-function gtk-widget-set-visual
  parameter widget1    :: <GtkWidget*>;
  parameter visual2    :: <GdkVisual*>;
  c-name: "gtk_widget_set_visual";
end;

define inline-only C-function gtk-widget-get-events
  parameter widget1    :: <GtkWidget*>;
  result value :: <gint>;
  c-name: "gtk_widget_get_events";
end;

define inline-only C-function gtk-widget-get-pointer
  parameter widget1    :: <GtkWidget*>;
  parameter x2         :: <gint*>;
  parameter y3         :: <gint*>;
  c-name: "gtk_widget_get_pointer";
end;

define inline-only C-function gtk-widget-is-ancestor
  parameter widget1    :: <GtkWidget*>;
  parameter ancestor2  :: <GtkWidget*>;
  result value :: <gint>;
  c-name: "gtk_widget_is_ancestor";
end;

define inline-only C-function gtk-widget-hide-on-delete
  parameter widget1    :: <GtkWidget*>;
  result value :: <gint>;
  c-name: "gtk_widget_hide_on_delete";
end;

define inline-only C-function gtk-widget-set-style
  parameter widget1    :: <GtkWidget*>;
  parameter style2     :: <GtkStyle*>;
  c-name: "gtk_widget_set_style";
end;

define inline-only C-function gtk-widget-set-rc-style
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_set_rc_style";
end;

define inline-only C-function gtk-widget-ensure-style
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_ensure_style";
end;

define inline-only C-function gtk-widget-get-style
  parameter widget1    :: <GtkWidget*>;
  result value :: <GtkStyle*>;
  c-name: "gtk_widget_get_style";
end;

define inline-only C-function gtk-widget-restore-default-style
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_restore_default_style";
end;

define inline-only C-function gtk-widget-modify-style
  parameter widget1    :: <GtkWidget*>;
  parameter style2     :: <GtkRcStyle*>;
  c-name: "gtk_widget_modify_style";
end;

define inline-only C-function gtk-widget-set-composite-name
  parameter widget1    :: <GtkWidget*>;
  parameter name2      :: <gchar*>;
  c-name: "gtk_widget_set_composite_name";
end;

define inline-only C-function gtk-widget-get-composite-name
  parameter widget1    :: <GtkWidget*>;
  result value :: <gchar*>;
  c-name: "gtk_widget_get_composite_name";
end;

define inline-only C-function gtk-widget-reset-rc-styles
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_reset_rc_styles";
end;

define inline-only C-function gtk-widget-push-style
  parameter style1     :: <GtkStyle*>;
  c-name: "gtk_widget_push_style";
end;

define inline-only C-function gtk-widget-push-colormap
  parameter cmap1      :: <GdkColormap*>;
  c-name: "gtk_widget_push_colormap";
end;

define inline-only C-function gtk-widget-push-visual
  parameter visual1    :: <GdkVisual*>;
  c-name: "gtk_widget_push_visual";
end;

define inline-only C-function gtk-widget-push-composite-child
  c-name: "gtk_widget_push_composite_child";
end;

define inline-only C-function gtk-widget-pop-composite-child
  c-name: "gtk_widget_pop_composite_child";
end;

define inline-only C-function gtk-widget-pop-style
  c-name: "gtk_widget_pop_style";
end;

define inline-only C-function gtk-widget-pop-colormap
  c-name: "gtk_widget_pop_colormap";
end;

define inline-only C-function gtk-widget-pop-visual
  c-name: "gtk_widget_pop_visual";
end;

define inline-only C-function gtk-widget-set-default-style
  parameter style1     :: <GtkStyle*>;
  c-name: "gtk_widget_set_default_style";
end;

define inline-only C-function gtk-widget-set-default-colormap
  parameter colormap1  :: <GdkColormap*>;
  c-name: "gtk_widget_set_default_colormap";
end;

define inline-only C-function gtk-widget-set-default-visual
  parameter visual1    :: <GdkVisual*>;
  c-name: "gtk_widget_set_default_visual";
end;

define inline-only C-function gtk-widget-get-default-style
  result value :: <GtkStyle*>;
  c-name: "gtk_widget_get_default_style";
end;

define inline-only C-function gtk-widget-get-default-colormap
  result value :: <GdkColormap*>;
  c-name: "gtk_widget_get_default_colormap";
end;

define inline-only C-function gtk-widget-get-default-visual
  result value :: <GdkVisual*>;
  c-name: "gtk_widget_get_default_visual";
end;

define inline-only C-function gtk-widget-shape-combine-mask
  parameter widget1    :: <GtkWidget*>;
  parameter shape_mask2 :: <GdkBitmap*>;
  parameter offset_x3  :: <gint>;
  parameter offset_y4  :: <gint>;
  c-name: "gtk_widget_shape_combine_mask";
end;

define inline-only C-function gtk-widget-reset-shapes
  parameter widget1    :: <GtkWidget*>;
  c-name: "gtk_widget_reset_shapes";
end;

define inline-only C-function gtk-widget-path
  parameter widget1    :: <GtkWidget*>;
  parameter path_length2 :: <guint*>;
  parameter path3      :: <gchar**>;
  parameter path_reversed4 :: <gchar**>;
  c-name: "gtk_widget_path";
end;

define inline-only C-function gtk-widget-class-path
  parameter widget1    :: <GtkWidget*>;
  parameter path_length2 :: <guint*>;
  parameter path3      :: <gchar**>;
  parameter path_reversed4 :: <gchar**>;
  c-name: "gtk_widget_class_path";
end;

define inline constant <GtkWidgetFlags> = <c-signed-int>;
define inline constant <GtkRequisition> = <_GtkRequisition>;
define inline constant <GtkAllocation> = <_GtkAllocation>;
define inline constant <GtkSelectionData> = <_GtkSelectionData>;
define inline constant <GtkWidgetClass> = <_GtkWidgetClass>;
define inline constant <GtkWidgetAuxInfo> = <_GtkWidgetAuxInfo>;
define inline constant <GtkWidgetShapeInfo> = <_GtkWidgetShapeInfo>;
define inline constant <GtkCallback> = <C-function-pointer>;
define sealed domain make (singleton(<_GtkRequisition*>));
define sealed domain initialize (<_GtkRequisition*>);
define sealed domain make (singleton(<_GtkAllocation*>));
define sealed domain initialize (<_GtkAllocation*>);
define sealed domain make (singleton(<_GtkSelectionData*>));
define sealed domain initialize (<_GtkSelectionData*>);
define sealed domain make (singleton(<_GtkWidget*>));
define sealed domain initialize (<_GtkWidget*>);
define sealed domain make (singleton(<_GtkWidgetClass*>));
define sealed domain initialize (<_GtkWidgetClass*>);
define sealed domain make (singleton(<_GtkWidgetAuxInfo*>));
define sealed domain initialize (<_GtkWidgetAuxInfo*>);
define sealed domain make (singleton(<_GtkWidgetShapeInfo*>));
define sealed domain initialize (<_GtkWidgetShapeInfo*>);
