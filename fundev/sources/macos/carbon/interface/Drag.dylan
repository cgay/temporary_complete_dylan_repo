Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Drag.h"; do not edit.

define inline constant <DragReference> = <OpaqueDragReference*>;
define C-pointer-type <DragReference*> => <DragReference>;
define C-pointer-type <DragReference**> => <DragReference*>;
define inline constant <ItemReference> = <UInt32>;
define C-pointer-type <ItemReference*> => <ItemReference>;
define C-pointer-type <ItemReference**> => <ItemReference*>;
define inline constant <FlavorType> = <OSType>;
define C-pointer-type <FlavorType*> => <FlavorType>;
define C-pointer-type <FlavorType**> => <FlavorType*>;
define inline constant <DragAttributes> = <OptionBits>;
define C-pointer-type <DragAttributes*> => <DragAttributes>;
define C-pointer-type <DragAttributes**> => <DragAttributes*>;
// unnamed enum:
define inline-only constant $kDragHasLeftSenderWindow  = ash(1, 0);
define inline-only constant $kDragInsideSenderApplication = ash(1, 1);
define inline-only constant $kDragInsideSenderWindow   = ash(1, 2);

define inline constant <DragImageFlags> = <OptionBits>;
define C-pointer-type <DragImageFlags*> => <DragImageFlags>;
define C-pointer-type <DragImageFlags**> => <DragImageFlags*>;
// unnamed enum:
define inline-only constant $kDragRegionAndImage       = ash(1, 4);

// unnamed enum:
define inline-only constant $kDragStandardTranslucency = 0;
define inline-only constant $kDragDarkTranslucency     = 1;
define inline-only constant $kDragDarkerTranslucency   = 2;
define inline-only constant $kDragOpaqueTranslucency   = 3;

define inline constant <DragRegionMessage> = <SInt16>;
define C-pointer-type <DragRegionMessage*> => <DragRegionMessage>;
define C-pointer-type <DragRegionMessage**> => <DragRegionMessage*>;
// unnamed enum:
define inline-only constant $kDragRegionBegin          = 1;
define inline-only constant $kDragRegionDraw           = 2;
define inline-only constant $kDragRegionHide           = 3;
define inline-only constant $kDragRegionIdle           = 4;
define inline-only constant $kDragRegionEnd            = 5;

define inline constant <ZoomAcceleration> = <SInt16>;
define C-pointer-type <ZoomAcceleration*> => <ZoomAcceleration>;
define C-pointer-type <ZoomAcceleration**> => <ZoomAcceleration*>;
// unnamed enum:
define inline-only constant $kZoomNoAcceleration       = 0;
define inline-only constant $kZoomAccelerate           = 1;
define inline-only constant $kZoomDecelerate           = 2;

define inline constant <FlavorFlags> = <OptionBits>;
define C-pointer-type <FlavorFlags*> => <FlavorFlags>;
define C-pointer-type <FlavorFlags**> => <FlavorFlags*>;
// unnamed enum:
define inline-only constant $flavorSenderOnly          = ash(1, 0);
define inline-only constant $flavorSenderTranslated    = ash(1, 1);
define inline-only constant $flavorNotSaved            = ash(1, 2);
define inline-only constant $flavorSystemTranslated    = ash(1, 8);

// unnamed enum:
define inline-only constant $flavorTypeHFS             = FOUR_CHAR_CODE('h', 'f', 's', ' ');
define inline-only constant $flavorTypePromiseHFS      = FOUR_CHAR_CODE('p', 'h', 'f', 's');
define inline-only constant $flavorTypeDirectory       = FOUR_CHAR_CODE('d', 'i', 'r', 'y');

// unnamed enum:
define inline-only constant $kFlavorTypeClippingName   = FOUR_CHAR_CODE('c', 'l', 'n', 'm');
define inline-only constant $kFlavorTypeClippingFilename = FOUR_CHAR_CODE('c', 'l', 'f', 'n');
define inline-only constant $kFlavorTypeDragToTrashOnly = FOUR_CHAR_CODE('f', 'd', 't', 't');
define inline-only constant $kFlavorTypeFinderNoTrackingBehavior = FOUR_CHAR_CODE('f', 'n', 't', 'b');

define inline constant <DragTrackingMessage> = <SInt16>;
define C-pointer-type <DragTrackingMessage*> => <DragTrackingMessage>;
define C-pointer-type <DragTrackingMessage**> => <DragTrackingMessage*>;
// unnamed enum:
define inline-only constant $kDragTrackingEnterHandler = 1;
define inline-only constant $kDragTrackingEnterWindow  = 2;
define inline-only constant $kDragTrackingInWindow     = 3;
define inline-only constant $kDragTrackingLeaveWindow  = 4;
define inline-only constant $kDragTrackingLeaveHandler = 5;


define C-struct <HFSFlavor>
  sealed inline-only slot fileType-value :: <OSType>;
  sealed inline-only slot fileCreator-value :: <OSType>;
  sealed inline-only slot fdFlags-value  :: <UInt16>;
  sealed inline-only slot fileSpec-value :: <FSSpec>;
  pack: 2;
  c-name: "struct HFSFlavor";
end;
define C-pointer-type <HFSFlavor*> => <HFSFlavor>;
define C-pointer-type <HFSFlavor**> => <HFSFlavor*>;

define C-struct <PromiseHFSFlavor>
  sealed inline-only slot fileType-value :: <OSType>;
  sealed inline-only slot fileCreator-value :: <OSType>;
  sealed inline-only slot fdFlags-value  :: <UInt16>;
  sealed inline-only slot promisedFlavor-value :: <FlavorType>;
  pack: 2;
  c-name: "struct PromiseHFSFlavor";
end;
define C-pointer-type <PromiseHFSFlavor*> => <PromiseHFSFlavor>;
define C-pointer-type <PromiseHFSFlavor**> => <PromiseHFSFlavor*>;
define constant <DragTrackingHandlerProcPtr> = <C-function-pointer>;
define constant <DragReceiveHandlerProcPtr> = <C-function-pointer>;
define constant <DragTrackingHandlerUPP> = <UniversalProcPtr>;
define constant <DragReceiveHandlerUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppDragTrackingHandlerProcInfo = #x00003FA0;

// unnamed enum:
define inline-only constant $uppDragReceiveHandlerProcInfo = #x00000FE0;

define constant <DragSendDataProcPtr> = <C-function-pointer>;
define constant <DragInputProcPtr> = <C-function-pointer>;
define constant <DragDrawingProcPtr> = <C-function-pointer>;
define constant <DragSendDataUPP> = <UniversalProcPtr>;
define constant <DragInputUPP> = <UniversalProcPtr>;
define constant <DragDrawingUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppDragSendDataProcInfo   = #x00003FE0;

// unnamed enum:
define inline-only constant $uppDragInputProcInfo      = #x00003FE0;

// unnamed enum:
define inline-only constant $uppDragDrawingProcInfo    = #x000FFFA0;


define inline-only C-function InstallTrackingHandler
  parameter trackingHandler :: <DragTrackingHandlerUPP>;
  parameter theWindow  :: <WindowPtr>;
  parameter handlerRefCon :: <C-void*>;
  result value :: <OSErr>;
  c-name: "InstallTrackingHandler";
  c-modifiers: "pascal";
end;

define inline-only C-function InstallReceiveHandler
  parameter receiveHandler :: <DragReceiveHandlerUPP>;
  parameter theWindow  :: <WindowPtr>;
  parameter handlerRefCon :: <C-void*>;
  result value :: <OSErr>;
  c-name: "InstallReceiveHandler";
  c-modifiers: "pascal";
end;

define inline-only C-function RemoveTrackingHandler
  parameter trackingHandler :: <DragTrackingHandlerUPP>;
  parameter theWindow  :: <WindowPtr>;
  result value :: <OSErr>;
  c-name: "RemoveTrackingHandler";
  c-modifiers: "pascal";
end;

define inline-only C-function RemoveReceiveHandler
  parameter receiveHandler :: <DragReceiveHandlerUPP>;
  parameter theWindow  :: <WindowPtr>;
  result value :: <OSErr>;
  c-name: "RemoveReceiveHandler";
  c-modifiers: "pascal";
end;

define inline-only C-function NewDrag
  parameter theDrag    :: <DragReference*>;
  result value :: <OSErr>;
  c-name: "NewDrag";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeDrag
  parameter theDrag    :: <DragReference>;
  result value :: <OSErr>;
  c-name: "DisposeDrag";
  c-modifiers: "pascal";
end;

define inline-only C-function AddDragItemFlavor
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter theType    :: <FlavorType>;
  parameter dataPtr    ::  /* const */ <C-void*>;
  parameter dataSize   :: <Size>;
  parameter theFlags   :: <FlavorFlags>;
  result value :: <OSErr>;
  c-name: "AddDragItemFlavor";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDragItemFlavorData
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter theType    :: <FlavorType>;
  parameter dataPtr    ::  /* const */ <C-void*>;
  parameter dataSize   :: <Size>;
  parameter dataOffset :: <UInt32>;
  result value :: <OSErr>;
  c-name: "SetDragItemFlavorData";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDragSendProc
  parameter theDrag    :: <DragReference>;
  parameter sendProc   :: <DragSendDataUPP>;
  parameter dragSendRefCon :: <C-void*>;
  result value :: <OSErr>;
  c-name: "SetDragSendProc";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDragInputProc
  parameter theDrag    :: <DragReference>;
  parameter inputProc  :: <DragInputUPP>;
  parameter dragInputRefCon :: <C-void*>;
  result value :: <OSErr>;
  c-name: "SetDragInputProc";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDragDrawingProc
  parameter theDrag    :: <DragReference>;
  parameter drawingProc :: <DragDrawingUPP>;
  parameter dragDrawingRefCon :: <C-void*>;
  result value :: <OSErr>;
  c-name: "SetDragDrawingProc";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDragImage
  parameter theDrag    :: <DragReference>;
  parameter imagePixMap :: <PixMapHandle>;
  parameter imageRgn   :: <RgnHandle>;
  parameter imageOffsetPt :: <Point>;
  parameter theImageFlags :: <DragImageFlags>;
  result value :: <OSErr>;
  c-name: "SetDragImage";
  c-modifiers: "pascal";
end;

define inline-only C-function TrackDrag
  parameter theDrag    :: <DragReference>;
  parameter theEvent   ::  /* const */ <EventRecord*>;
  parameter theRegion  :: <RgnHandle>;
  result value :: <OSErr>;
  c-name: "TrackDrag";
  c-modifiers: "pascal";
end;

define inline-only C-function CountDragItems
  parameter theDrag    :: <DragReference>;
  parameter numItems   :: <UInt16*>;
  result value :: <OSErr>;
  c-name: "CountDragItems";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDragItemReferenceNumber
  parameter theDrag    :: <DragReference>;
  parameter index      :: <UInt16>;
  parameter theItemRef :: <ItemReference*>;
  result value :: <OSErr>;
  c-name: "GetDragItemReferenceNumber";
  c-modifiers: "pascal";
end;

define inline-only C-function CountDragItemFlavors
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter numFlavors :: <UInt16*>;
  result value :: <OSErr>;
  c-name: "CountDragItemFlavors";
  c-modifiers: "pascal";
end;

define inline-only C-function GetFlavorType
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter index      :: <UInt16>;
  parameter theType    :: <FlavorType*>;
  result value :: <OSErr>;
  c-name: "GetFlavorType";
  c-modifiers: "pascal";
end;

define inline-only C-function GetFlavorFlags
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter theType    :: <FlavorType>;
  parameter theFlags   :: <FlavorFlags*>;
  result value :: <OSErr>;
  c-name: "GetFlavorFlags";
  c-modifiers: "pascal";
end;

define inline-only C-function GetFlavorDataSize
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter theType    :: <FlavorType>;
  parameter dataSize   :: <Size*>;
  result value :: <OSErr>;
  c-name: "GetFlavorDataSize";
  c-modifiers: "pascal";
end;

define inline-only C-function GetFlavorData
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter theType    :: <FlavorType>;
  parameter dataPtr    :: <C-void*>;
  parameter dataSize   :: <Size*>;
  parameter dataOffset :: <UInt32>;
  result value :: <OSErr>;
  c-name: "GetFlavorData";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDragItemBounds
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter itemBounds :: <Rect*>;
  result value :: <OSErr>;
  c-name: "GetDragItemBounds";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDragItemBounds
  parameter theDrag    :: <DragReference>;
  parameter theItemRef :: <ItemReference>;
  parameter itemBounds ::  /* const */ <Rect*>;
  result value :: <OSErr>;
  c-name: "SetDragItemBounds";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDropLocation
  parameter theDrag    :: <DragReference>;
  parameter dropLocation :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "GetDropLocation";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDropLocation
  parameter theDrag    :: <DragReference>;
  parameter dropLocation ::  /* const */ <AEDesc*>;
  result value :: <OSErr>;
  c-name: "SetDropLocation";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDragAttributes
  parameter theDrag    :: <DragReference>;
  parameter flags      :: <DragAttributes*>;
  result value :: <OSErr>;
  c-name: "GetDragAttributes";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDragMouse
  parameter theDrag    :: <DragReference>;
  parameter mouse      :: <Point*>;
  parameter globalPinnedMouse :: <Point*>;
  result value :: <OSErr>;
  c-name: "GetDragMouse";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDragMouse
  parameter theDrag    :: <DragReference>;
  parameter globalPinnedMouse :: <Point>;
  result value :: <OSErr>;
  c-name: "SetDragMouse";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDragOrigin
  parameter theDrag    :: <DragReference>;
  parameter globalInitialMouse :: <Point*>;
  result value :: <OSErr>;
  c-name: "GetDragOrigin";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDragModifiers
  parameter theDrag    :: <DragReference>;
  parameter modifiers  :: <SInt16*>;
  parameter mouseDownModifiers :: <SInt16*>;
  parameter mouseUpModifiers :: <SInt16*>;
  result value :: <OSErr>;
  c-name: "GetDragModifiers";
  c-modifiers: "pascal";
end;

define inline-only C-function ShowDragHilite
  parameter theDrag    :: <DragReference>;
  parameter hiliteFrame :: <RgnHandle>;
  parameter inside     :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ShowDragHilite";
  c-modifiers: "pascal";
end;

define inline-only C-function HideDragHilite
  parameter theDrag    :: <DragReference>;
  result value :: <OSErr>;
  c-name: "HideDragHilite";
  c-modifiers: "pascal";
end;

define inline-only C-function DragPreScroll
  parameter theDrag    :: <DragReference>;
  parameter dH         :: <SInt16>;
  parameter dV         :: <SInt16>;
  result value :: <OSErr>;
  c-name: "DragPreScroll";
  c-modifiers: "pascal";
end;

define inline-only C-function DragPostScroll
  parameter theDrag    :: <DragReference>;
  result value :: <OSErr>;
  c-name: "DragPostScroll";
  c-modifiers: "pascal";
end;

define inline-only C-function UpdateDragHilite
  parameter theDrag    :: <DragReference>;
  parameter updateRgn  :: <RgnHandle>;
  result value :: <OSErr>;
  c-name: "UpdateDragHilite";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDragHiliteColor
  parameter window     :: <WindowPtr>;
  parameter color      :: <RGBColor*>;
  result value :: <OSErr>;
  c-name: "GetDragHiliteColor";
  c-modifiers: "pascal";
end;

define inline-only C-function WaitMouseMoved
  parameter initialMouse :: <Point>;
  result value :: <MacBoolean>;
  c-name: "WaitMouseMoved";
  c-modifiers: "pascal";
end;

define inline-only C-function ZoomRects
  parameter fromRect   ::  /* const */ <Rect*>;
  parameter toRect     ::  /* const */ <Rect*>;
  parameter zoomSteps  :: <SInt16>;
  parameter acceleration :: <ZoomAcceleration>;
  result value :: <OSErr>;
  c-name: "ZoomRects";
  c-modifiers: "pascal";
end;

define inline-only C-function ZoomRegion
  parameter region     :: <RgnHandle>;
  parameter zoomDistance :: <Point>;
  parameter zoomSteps  :: <SInt16>;
  parameter acceleration :: <ZoomAcceleration>;
  result value :: <OSErr>;
  c-name: "ZoomRegion";
  c-modifiers: "pascal";
end;

