
Running suite libraries-test-suite, with options:
   progress-function: none
     report-function: log
              debug?: no
              ignore: {<stretchy-object-vector>: size 0}

Warning: internal test warning
Warning: internal test warning
Hellogot 0, should be 0
got 1, should be 1
got 2, should be 2
got 3, should be 3
got 4, should be 4
got 5, should be 5
got 6, should be 6
got 7, should be 7
got 8, should be 8
got 9, should be 9
got 10, should be 10
got 11, should be 11
got 12, should be 12
got 13, should be 13
got 14, should be 14
got 15, should be 15
got 16, should be 16
got 17, should be 17
got 18, should be 18
got 19, should be 19
got 20, should be 20
got 21, should be 21
got 22, should be 22
got 23, should be 23
got 24, should be 24
got 25, should be 25
got 26, should be 26
got 27, should be 27
got 28, should be 28
got 29, should be 29
got 30, should be 30
got 31, should be 31
got 32, should be 32
got 33, should be 33
got 34, should be 34
got 35, should be 35
got 36, should be 36
got 37, should be 37
got 38, should be 38
got 39, should be 39
got 40, should be 40
got 41, should be 41
got 42, should be 42
got 43, should be 43
got 44, should be 44
got 45, should be 45
got 46, should be 46
got 47, should be 47
got 48, should be 48
got 49, should be 49

--------Test Log Report--------
Object: Suite
Name: libraries-test-suite
Status: failed

Object: Suite
Name: testworks-test-suite
Status: passed

Object: Suite
Name: testworks-check-macros-suite
Status: passed

Object: Test
Name: testworks-check-test
Status: passed

Object: Check
Name: check(always(#t))
Status: passed
end

Object: Check
Name: check(identity, #t)
Status: passed
end

Object: Check
Name: check(\=, 3, 3)
Status: passed
end
end

Object: Test
Name: testworks-check-true-test
Status: passed

Object: Check
Name: check-true(#t) passes
Status: passed
end

Object: Check
Name: check-true(#f) fails
Status: passed
end

Object: Check
Name: check-true of error crashes
Status: passed
end
end

Object: Test
Name: testworks-check-false-test
Status: passed

Object: Check
Name: check-false(#t) fails
Status: passed
end

Object: Check
Name: check-false(#f) passes
Status: passed
end

Object: Check
Name: check-false of error crashes
Status: passed
end
end

Object: Test
Name: testworks-check-equal-test
Status: passed

Object: Check
Name: check-equal(1, 1) passes
Status: passed
end

Object: Check
Name: check-equal("1", "1") passes
Status: passed
end

Object: Check
Name: check-equal(1, 2) fails
Status: passed
end

Object: Check
Name: check-equal of error crashes
Status: passed
end
end

Object: Test
Name: testworks-check-condition-test
Status: passed

Object: Check
Name: check-condition catches <error>
Status: passed
end

Object: Check
Name: check-condition for <error> doesn't catch <warning>
Status: passed
end

Object: Check
Name: check-condition fails if no condition
Status: passed
end

Object: Check
Name: check-condition doesn't catch wrong condition
Status: passed
end
end

Object: Test
Name: testworks-check-no-errors-test
Status: passed

Object: Check
Name: check-no-errors of #t passes
Status: passed
end

Object: Check
Name: check-no-errors of #f passes
Status: passed
end

Object: Check
Name: check-no-errors of error crashes
Status: passed
end
end
end

Object: Suite
Name: testworks-results-suite
Status: passed

Object: Test
Name: testworks-perform-test-results-test
Status: passed

Object: Check
Name: perform-test returns <test-result>
Status: passed
end

Object: Check
Name: perform-test returns #"passed" when passing
Status: passed
end

Object: Check
Name: perform-test sub-results are in a vector
Status: passed
end
end

Object: Test
Name: testworks-perform-suite-results-test
Status: passed

Object: Check
Name: perform-suite returns <suite-result>
Status: passed
end

Object: Check
Name: perform-suite returns #"passed" when passing
Status: passed
end

Object: Check
Name: perform-suite sub-results are in a vector
Status: passed
end
end
end
end

Object: Suite
Name: dylan-test-suite
Status: failed

Object: Suite
Name: dylan-module-test-suite
Status: failed

Object: Suite
Name: dylan-protocol-test-suite
Status: failed

Object: Test
Name: dylan-protocol-constants-test
Status: passed
end

Object: Test
Name: dylan-protocol-variables-test
Status: passed
end

Object: Test
Name: dylan-protocol-classes-test
Status: failed

Object: Check
Name: Variable <generic-function> is a class
Status: passed
end

Object: Check
Name: Variable <generic-function> has the correct superclasses
Status: passed
end

Object: Check
Name: make <generic-function> with required arguments
Status: passed
end

Object: Check
Name: Variable <type> is a class
Status: passed
end

Object: Check
Name: Variable <type> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<type>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <function> is a class
Status: passed
end

Object: Check
Name: Variable <function> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<function>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <object> is a class
Status: passed
end

Object: Check
Name: Variable <object> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<object>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <symbol> is a class
Status: passed
end

Object: Check
Name: Variable <symbol> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<symbol>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <class> is a class
Status: passed
end

Object: Check
Name: Variable <class> has the correct superclasses
Status: passed
end

Object: Check
Name: make <class> with required arguments
Status: passed
end

Object: Check
Name: Variable <character> is a class
Status: passed
end

Object: Check
Name: Variable <character> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<character>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <boolean> is a class
Status: passed
end

Object: Check
Name: Variable <boolean> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<boolean>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: Variable <singleton> is a class
Status: passed
end

Object: Check
Name: Variable <singleton> has the correct superclasses
Status: passed
end

Object: Check
Name: make <singleton> with required arguments
Status: passed
end

Object: Check
Name: Variable <method> is a class
Status: passed
end

Object: Check
Name: Variable <method> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<method>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end
end

Object: Test
Name: dylan-protocol-functions-test
Status: passed

Object: Check
Name: Variable disjoin is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable <= is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable complement is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ~= is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable compose is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-method is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ~== is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable = is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable direct-superclasses is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable find-method is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable object-class is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable == is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ~ is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable applicable-method? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable > is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable function-return-values is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable subtype? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable direct-subclasses is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable function-arguments is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-for-copy is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable all-superclasses is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable >= is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable instance? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable function-specializers is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable shallow-copy is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable limited is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable generic-function-mandatory-keywords is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as-lowercase! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-union is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: type-union(<string>, <integer>) returns a type
Status: passed
end

Object: Check
Name: instance?("string", type-union(<string>, <integer>))
Status: passed
end

Object: Check
Name: instance?(10, type-union(<string>, <integer>))
Status: passed
end

Object: Check
Name: instance?(#t, type-union(<string>, <integer>))
Status: passed
end

Object: Check
Name: Variable range is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable vector is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add-method is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as-lowercase is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable min is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pair is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable singleton is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as-uppercase! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as-uppercase is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable generic-function-methods is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable apply is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable max is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable list is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable < is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable sorted-applicable-methods is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable slot-initialized? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable always is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: always(#f)(#t)
Status: passed
end

Object: Check
Name: always(#f)(10)
Status: passed
end

Object: Check
Name: always(#t)(#t)
Status: passed
end

Object: Check
Name: always(#t)(10)
Status: passed
end

Object: Check
Name: Variable rcurry is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable identity is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable initialize is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable values is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable make is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable conjoin is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable curry is a function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: dylan-protocol-macros-test
Status: passed

Object: Check
Name: select simple
Status: passed
end

Object: Check
Name: select otherwise
Status: passed
end

Object: Check
Name: select student art
Status: passed
end

Object: Check
Name: select student engineering
Status: passed
end

Object: Check
Name: select student nursing
Status: passed
end

Object: Check
Name: select if no consequents false
Status: passed
end

Object: Check
Name: select if no otherwise consequents false
Status: passed
end

Object: Check
Name: select returns multiple values
Status: passed
end

Object: Check
Name: select returns last consequent
Status: passed
end

Object: Check
Name: select otherwise returns last consequent
Status: passed
end

Object: Check
Name: select by <
Status: passed
end

Object: Check
Name: select by < otherwise
Status: passed
end

Object: Check
Name: select by instance?
Status: passed
end

Object: Check
Name: if true
Status: passed
end

Object: Check
Name: if false
Status: passed
end

Object: Check
Name: if empty-list
Status: passed
end

Object: Check
Name: if symbol
Status: passed
end

Object: Check
Name: if vector
Status: passed
end

Object: Check
Name: if even 100
Status: passed
end

Object: Check
Name: if odd 100
Status: passed
end

Object: Check
Name: for simple iteration
Status: passed
end

Object: Check
Name: for parameterize int iteration
Status: passed
end

Object: Check
Name: for = then with lists
Status: passed
end

Object: Check
Name: for multiple vars
Status: passed
end

Object: Check
Name: for summing over let var
Status: passed
end

Object: Check
Name: for summing over let var with lots of iteration vars
Status: passed
end

Object: Check
Name: for doesn't do it the first time if end-test initially true
Status: passed
end

Object: Check
Name: for multiple return forms, do all, return last
Status: passed
end

Object: Check
Name: multiple values return
Status: passed
end

Object: Check
Name: for until true with finally
Status: passed
end

Object: Check
Name: for until true with lots o finally
Status: passed
end

Object: Check
Name: for multiple returns
Status: passed
end

Object: Check
Name: for multiple values return
Status: passed
end

Object: Check
Name: for never true return false
Status: passed
end

Object: Check
Name: for one runs out first return false
Status: passed
end

Object: Check
Name: case stop when test is five = five
Status: passed
end

Object: Check
Name: case else clause is catch all
Status: passed
end

Object: Check
Name: case remaining tests not evaluated
Status: passed
end

Object: Check
Name: case returns false if no test evals to true
Status: passed
end

Object: Check
Name: case no consequents, returns 1st value of test case
Status: passed
end

Object: Check
Name: case returns all values from last consequent
Status: passed
end

Object: Check
Name: begin: no body is false
Status: passed
end

Object: Check
Name: begin: return last expression
Status: passed
end

Object: Check
Name: begin not skipping to last form i hope?
Status: passed
end

Object: Check
Name: begin if last form is multiple values, return them all
Status: passed
end

Object: Check
Name: and simple number
Status: passed
end

Object: Check
Name: and with simple predicate
Status: passed
end

Object: Check
Name: and multiple values as last form returns all vals
Status: passed
end

Object: Check
Name: and 1st value only thing that matters to judge truth
Status: passed
end

Object: Check
Name: and things past 1st false don't get evaled
Status: passed
end

Object: Check
Name: or simple numbers
Status: passed
end

Object: Check
Name: or with simple predicates
Status: passed
end

Object: Check
Name: or none true then false
Status: passed
end

Object: Check
Name: or nothing evaled after one returns true
Status: passed
end

Object: Check
Name: or multiple values before last first val returned
Status: passed
end

Object: Check
Name: or multiple values in last, all vals returned
Status: passed
end

Object: Check
Name: or 1st value only thing that matters to judge truth
Status: passed
end

Object: Check
Name: simple assignment
Status: passed
end

Object: Check
Name: assignment returns the correct value
Status: passed
end

Object: Check
Name: vector assignment
Status: passed
end

Object: Check
Name: array assignment
Status: passed
end

Object: Check
Name: unless true
Status: passed
end

Object: Check
Name: unless even 100
Status: passed
end

Object: Check
Name: unless true doesnt exec body
Status: passed
end

Object: Check
Name: unless false does exec body
Status: passed
end

Object: Check
Name: unless returns ok
Status: passed
end

Object: Check
Name: unless returns last
Status: passed
end

Object: Check
Name: unless no forms returns false
Status: passed
end
end
end

Object: Suite
Name: arithmetic-protocol-test-suite
Status: failed

Object: Test
Name: arithmetic-protocol-constants-test
Status: passed
end

Object: Test
Name: arithmetic-protocol-variables-test
Status: passed
end

Object: Test
Name: arithmetic-protocol-classes-test
Status: failed

Object: Check
Name: Variable <double-float> is a class
Status: passed
end

Object: Check
Name: Variable <double-float> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<double-float>) errors because not instantiable
Status: passed
end

Object: Check
Name: zero?(0.0d0)
Status: passed
end

Object: Check
Name: 0.0d0 * 1 = 0.0d0
Status: passed
end

Object: Check
Name: positive?(0.0d0)
Status: passed
end

Object: Check
Name: negative?(0.0d0)
Status: passed
end

Object: Check
Name: negative(negative(0.0d0)) = 0.0d0
Status: passed
end

Object: Check
Name: zero?(1.0000000d0)
Status: passed
end

Object: Check
Name: 1.0000000d0 * 1 = 1.0000000d0
Status: passed
end

Object: Check
Name: positive?(1.0000000d0)
Status: passed
end

Object: Check
Name: negative?(1.0000000d0)
Status: passed
end

Object: Check
Name: negative(negative(1.0000000d0)) = 1.0000000d0
Status: passed
end

Object: Check
Name: zero?(2.0000000d0)
Status: passed
end

Object: Check
Name: 2.0000000d0 * 1 = 2.0000000d0
Status: passed
end

Object: Check
Name: positive?(2.0000000d0)
Status: passed
end

Object: Check
Name: negative?(2.0000000d0)
Status: passed
end

Object: Check
Name: negative(negative(2.0000000d0)) = 2.0000000d0
Status: passed
end

Object: Check
Name: zero?(-1.0000000d0)
Status: passed
end

Object: Check
Name: -1.0000000d0 * 1 = -1.0000000d0
Status: passed
end

Object: Check
Name: positive?(-1.0000000d0)
Status: passed
end

Object: Check
Name: negative?(-1.0000000d0)
Status: passed
end

Object: Check
Name: negative(negative(-1.0000000d0)) = -1.0000000d0
Status: passed
end

Object: Check
Name: zero?(-2.0000000d0)
Status: passed
end

Object: Check
Name: -2.0000000d0 * 1 = -2.0000000d0
Status: passed
end

Object: Check
Name: positive?(-2.0000000d0)
Status: passed
end

Object: Check
Name: negative?(-2.0000000d0)
Status: passed
end

Object: Check
Name: negative(negative(-2.0000000d0)) = -2.0000000d0
Status: passed
end

Object: Check
Name: zero?(1.5000000d0)
Status: passed
end

Object: Check
Name: 1.5000000d0 * 1 = 1.5000000d0
Status: passed
end

Object: Check
Name: positive?(1.5000000d0)
Status: passed
end

Object: Check
Name: negative?(1.5000000d0)
Status: passed
end

Object: Check
Name: negative(negative(1.5000000d0)) = 1.5000000d0
Status: passed
end

Object: Check
Name: zero?(-1.5000000d0)
Status: passed
end

Object: Check
Name: -1.5000000d0 * 1 = -1.5000000d0
Status: passed
end

Object: Check
Name: positive?(-1.5000000d0)
Status: passed
end

Object: Check
Name: negative?(-1.5000000d0)
Status: passed
end

Object: Check
Name: negative(negative(-1.5000000d0)) = -1.5000000d0
Status: passed
end

Object: Check
Name: Variable <single-float> is a class
Status: passed
end

Object: Check
Name: Variable <single-float> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<single-float>) errors because not instantiable
Status: passed
end

Object: Check
Name: zero?(0.0)
Status: passed
end

Object: Check
Name: 0.0 * 1 = 0.0
Status: passed
end

Object: Check
Name: positive?(0.0)
Status: passed
end

Object: Check
Name: negative?(0.0)
Status: passed
end

Object: Check
Name: negative(negative(0.0)) = 0.0
Status: passed
end

Object: Check
Name: zero?(1.0000000)
Status: passed
end

Object: Check
Name: 1.0000000 * 1 = 1.0000000
Status: passed
end

Object: Check
Name: positive?(1.0000000)
Status: passed
end

Object: Check
Name: negative?(1.0000000)
Status: passed
end

Object: Check
Name: negative(negative(1.0000000)) = 1.0000000
Status: passed
end

Object: Check
Name: zero?(2.0000000)
Status: passed
end

Object: Check
Name: 2.0000000 * 1 = 2.0000000
Status: passed
end

Object: Check
Name: positive?(2.0000000)
Status: passed
end

Object: Check
Name: negative?(2.0000000)
Status: passed
end

Object: Check
Name: negative(negative(2.0000000)) = 2.0000000
Status: passed
end

Object: Check
Name: zero?(-1.0000000)
Status: passed
end

Object: Check
Name: -1.0000000 * 1 = -1.0000000
Status: passed
end

Object: Check
Name: positive?(-1.0000000)
Status: passed
end

Object: Check
Name: negative?(-1.0000000)
Status: passed
end

Object: Check
Name: negative(negative(-1.0000000)) = -1.0000000
Status: passed
end

Object: Check
Name: zero?(-2.0000000)
Status: passed
end

Object: Check
Name: -2.0000000 * 1 = -2.0000000
Status: passed
end

Object: Check
Name: positive?(-2.0000000)
Status: passed
end

Object: Check
Name: negative?(-2.0000000)
Status: passed
end

Object: Check
Name: negative(negative(-2.0000000)) = -2.0000000
Status: passed
end

Object: Check
Name: zero?(1.5000000)
Status: passed
end

Object: Check
Name: 1.5000000 * 1 = 1.5000000
Status: passed
end

Object: Check
Name: positive?(1.5000000)
Status: passed
end

Object: Check
Name: negative?(1.5000000)
Status: passed
end

Object: Check
Name: negative(negative(1.5000000)) = 1.5000000
Status: passed
end

Object: Check
Name: zero?(-1.5000000)
Status: passed
end

Object: Check
Name: -1.5000000 * 1 = -1.5000000
Status: passed
end

Object: Check
Name: positive?(-1.5000000)
Status: passed
end

Object: Check
Name: negative?(-1.5000000)
Status: passed
end

Object: Check
Name: negative(negative(-1.5000000)) = -1.5000000
Status: passed
end

Object: Check
Name: Variable <float> is a class
Status: passed
end

Object: Check
Name: Variable <float> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<float>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <real> is a class
Status: passed
end

Object: Check
Name: Variable <real> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<real>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <complex> is a class
Status: passed
end

Object: Check
Name: Variable <complex> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<complex>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <number> is a class
Status: passed
end

Object: Check
Name: Variable <number> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<number>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <integer> is a class
Status: passed
end

Object: Check
Name: Variable <integer> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<integer>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: zero?(0)
Status: passed
end

Object: Check
Name: 0 * 1 = 0
Status: passed
end

Object: Check
Name: positive?(0)
Status: passed
end

Object: Check
Name: negative?(0)
Status: passed
end

Object: Check
Name: negative(negative(0)) = 0
Status: passed
end

Object: Check
Name: odd?(0)
Status: passed
end

Object: Check
Name: even?(0)
Status: passed
end

Object: Check
Name: zero?(1)
Status: passed
end

Object: Check
Name: 1 * 1 = 1
Status: passed
end

Object: Check
Name: positive?(1)
Status: passed
end

Object: Check
Name: negative?(1)
Status: passed
end

Object: Check
Name: negative(negative(1)) = 1
Status: passed
end

Object: Check
Name: odd?(1)
Status: passed
end

Object: Check
Name: even?(1)
Status: passed
end

Object: Check
Name: zero?(2)
Status: passed
end

Object: Check
Name: 2 * 1 = 2
Status: passed
end

Object: Check
Name: positive?(2)
Status: passed
end

Object: Check
Name: negative?(2)
Status: passed
end

Object: Check
Name: negative(negative(2)) = 2
Status: passed
end

Object: Check
Name: odd?(2)
Status: passed
end

Object: Check
Name: even?(2)
Status: passed
end

Object: Check
Name: zero?(-1)
Status: passed
end

Object: Check
Name: -1 * 1 = -1
Status: passed
end

Object: Check
Name: positive?(-1)
Status: passed
end

Object: Check
Name: negative?(-1)
Status: passed
end

Object: Check
Name: negative(negative(-1)) = -1
Status: passed
end

Object: Check
Name: odd?(-1)
Status: passed
end

Object: Check
Name: even?(-1)
Status: passed
end

Object: Check
Name: zero?(-2)
Status: passed
end

Object: Check
Name: -2 * 1 = -2
Status: passed
end

Object: Check
Name: positive?(-2)
Status: passed
end

Object: Check
Name: negative?(-2)
Status: passed
end

Object: Check
Name: negative(negative(-2)) = -2
Status: passed
end

Object: Check
Name: odd?(-2)
Status: passed
end

Object: Check
Name: even?(-2)
Status: passed
end

Object: Check
Name: Variable <rational> is a class
Status: passed
end

Object: Check
Name: Variable <rational> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<rational>) errors because not instantiable
Status: passed
end
end

Object: Test
Name: arithmetic-protocol-functions-test
Status: passed

Object: Check
Name: Variable / is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable - is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable negative is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ceiling/ is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable lognot is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable integral? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable floor/ is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable logand is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable negative? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable round is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ceiling is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable * is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable logxor is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable zero? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable + is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable abs is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ^ is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable floor is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable gcd is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable even? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remainder is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable odd? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable lcm is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ash is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable modulo is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable logior is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable truncate is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable logbit? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable positive? is a function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: arithmetic-protocol-macros-test
Status: passed
end
end

Object: Suite
Name: collections-protocol-test-suite
Status: failed

Object: Test
Name: collections-protocol-constants-test
Status: passed
end

Object: Test
Name: collections-protocol-variables-test
Status: passed
end

Object: Test
Name: collections-protocol-classes-test
Status: failed

Object: Check
Name: Variable <simple-vector> is a class
Status: passed
end

Object: Check
Name: Variable <simple-vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <simple-vector> creation
Status: passed
end

Object: Check
Name: Empty <simple-vector> empty?
Status: passed
end

Object: Check
Name: Empty <simple-vector> size
Status: passed
end

Object: Check
Name: Empty <simple-vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <array>
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <simple-vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <simple-vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <simple-vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <simple-vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <simple-vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <simple-vector> element default
Status: passed
end

Object: Check
Name: Empty <simple-vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <simple-vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <simple-vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <simple-vector> empty?
Status: passed
end

Object: Check
Name: Empty <simple-vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> reverse
Status: passed
end

Object: Check
Name: Empty <simple-vector> reverse!
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-vector> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> creation
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> creation
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Variable <vector> is a class
Status: passed
end

Object: Check
Name: Variable <vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <vector> creation
Status: passed
end

Object: Check
Name: Empty <vector> empty?
Status: passed
end

Object: Check
Name: Empty <vector> size
Status: passed
end

Object: Check
Name: Empty <vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <vector> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <vector> as <array>
Status: passed
end

Object: Check
Name: Empty <vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <vector> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <vector> element default
Status: passed
end

Object: Check
Name: Empty <vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <vector> empty?
Status: passed
end

Object: Check
Name: Empty <vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <vector> reverse
Status: passed
end

Object: Check
Name: Empty <vector> reverse!
Status: passed
end

Object: Check
Name: Empty <vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <vector> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <vector> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <vector> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <vector> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> creation
Status: passed
end

Object: Check
Name: One item <vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <vector> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: One item <vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Multiple item <vector> creation
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Variable <array> is a class
Status: passed
end

Object: Check
Name: Variable <array> has the correct superclasses
Status: passed
end

Object: Check
Name: make <array> with required arguments
Status: passed
end

Object: Check
Name: Empty <array> creation
Status: passed
end

Object: Check
Name: Empty <array> empty?
Status: passed
end

Object: Check
Name: Empty <array> size
Status: passed
end

Object: Check
Name: Empty <array> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <array> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <array> as <vector>
Status: passed
end

Object: Check
Name: Empty <array> as <array>
Status: passed
end

Object: Check
Name: Empty <array> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <array> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <array> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <array> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <array> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <array> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <array> any? always matching
Status: passed
end

Object: Check
Name: Empty <array> any? never matching
Status: passed
end

Object: Check
Name: Empty <array> every? always matching
Status: passed
end

Object: Check
Name: Empty <array> every? never matching
Status: passed
end

Object: Check
Name: Empty <array> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <array> element of size errors
Status: passed
end

Object: Check
Name: Empty <array> element default
Status: passed
end

Object: Check
Name: Empty <array> key-sequence
Status: passed
end

Object: Check
Name: Empty <array> member? of non-member
Status: passed
end

Object: Check
Name: Empty <array> find-key failure
Status: passed
end

Object: Check
Name: Empty <array> find-key failure value
Status: passed
end

Object: Check
Name: Empty <array> empty?
Status: passed
end

Object: Check
Name: Empty <array> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <array> first generates an error
Status: passed
end

Object: Check
Name: Empty <array> second generates an error
Status: passed
end

Object: Check
Name: Empty <array> third generates an error
Status: passed
end

Object: Check
Name: Empty <array> copy-sequence
Status: passed
end

Object: Check
Name: Empty <array> reverse
Status: passed
end

Object: Check
Name: Empty <array> reverse!
Status: passed
end

Object: Check
Name: Empty <array> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <array> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <array> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <array> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <array> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <array> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <array> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <array> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <array> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <array> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <array> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <array> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <array> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <array> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <array> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <array> type-for-copy
Status: passed
end

Object: Check
Name: Empty <array> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <array> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <array> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <array> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> creation
Status: passed
end

Object: Check
Name: One item <array> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <array> of <integer> size
Status: passed
end

Object: Check
Name: One item <array> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <array> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <array> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <array> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <array> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <array> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <array> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <array> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <array> of <integer> element default
Status: passed
end

Object: Check
Name: One item <array> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <array> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <array> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <array> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <array> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <array> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <array> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <array> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <array> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <array> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <array> of <integer> first
Status: passed
end

Object: Check
Name: One item <array> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <array> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <array> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <array> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <array> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <array> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <array> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> of <integer> last
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: One item <array> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Multiple item <array> creation
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Multiple item <array> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: 2x2 <array> as <array>
Status: passed
end

Object: Check
Name: 2x2 <array> 'do' using collection once
Status: passed
end

Object: Check
Name: 2x2 <array> 'do' using collection twice
Status: passed
end

Object: Check
Name: 2x2 <array> 'map' with identity
Status: passed
end

Object: Check
Name: 2x2 <array> 'map' creates new collection
Status: passed
end

Object: Check
Name: 2x2 <array> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: 2x2 <array> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: 2x2 <array> any? always matching
Status: passed
end

Object: Check
Name: 2x2 <array> any? never matching
Status: passed
end

Object: Check
Name: 2x2 <array> every? always matching
Status: passed
end

Object: Check
Name: 2x2 <array> every? never matching
Status: passed
end

Object: Check
Name: 2x2 <array> element of -1 errors
Status: passed
end

Object: Check
Name: 2x2 <array> element of size errors
Status: passed
end

Object: Check
Name: 2x2 <array> element default
Status: passed
end

Object: Check
Name: 2x2 <array> element 0
Status: passed
end

Object: Check
Name: 2x2 <array> element 1
Status: passed
end

Object: Check
Name: 2x2 <array> element 2
Status: passed
end

Object: Check
Name: 2x2 <array> element 3
Status: passed
end

Object: Check
Name: 2x2 <array> key-sequence
Status: passed
end

Object: Check
Name: 2x2 <array> member? of non-member
Status: passed
end

Object: Check
Name: 2x2 <array> key 0 is member?
Status: passed
end

Object: Check
Name: 2x2 <array> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: 2x2 <array> key 1 is member?
Status: passed
end

Object: Check
Name: 2x2 <array> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: 2x2 <array> key 2 is member?
Status: passed
end

Object: Check
Name: 2x2 <array> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: 2x2 <array> key 3 is member?
Status: passed
end

Object: Check
Name: 2x2 <array> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: 2x2 <array> find-key failure
Status: passed
end

Object: Check
Name: 2x2 <array> find-key failure value
Status: passed
end

Object: Check
Name: 2x2 <array> find-key 1
Status: passed
end

Object: Check
Name: 2x2 <array> find-key 2
Status: passed
end

Object: Check
Name: 2x2 <array> find-key 3
Status: passed
end

Object: Check
Name: 2x2 <array> find-key 4
Status: passed
end

Object: Check
Name: 2x2 <array> empty?
Status: passed
end

Object: Check
Name: 2x2 <array> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: 2x2 <array> shallow-copy creates new object
Status: passed
end

Object: Check
Name: 2x2 <array> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: 2x2 <array> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: 2x2 <array> concatenate-as <array>
Status: passed
end

Object: Check
Name: 2x2 <array> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: 2x2 <array> first
Status: passed
end

Object: Check
Name: 2x2 <array> second
Status: passed
end

Object: Check
Name: 2x2 <array> third
Status: passed
end

Object: Check
Name: 2x2 <array> copy-sequence
Status: passed
end

Object: Check
Name: 2x2 <array> reverse didn't mutate original
Status: passed
end

Object: Check
Name: 2x2 <array> reverse
Status: passed
end

Object: Check
Name: 2x2 <array> reverse!
Status: passed
end

Object: Check
Name: 2x2 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: 2x2 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: 2x2 <array> sort all elements in order
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort all elements in order
Status: passed
end

Object: Check
Name: 2x2 <array> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: 2x2 <array> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: 2x2 <array> sort with > test all elements in order
Status: passed
end

Object: Check
Name: 2x2 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: 2x2 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: 2x2 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: 2x2 <array> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: 2x2 <array> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: 2x2 <array> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: 2x2 <array> 'last' returns last item
Status: passed
end

Object: Check
Name: 2x2 <array> type-for-copy
Status: passed
end

Object: Check
Name: 2x2 <array> first-setter
Status: passed
end

Object: Check
Name: 2x2 <array> second-setter
Status: passed
end

Object: Check
Name: 2x2 <array> third-setter
Status: passed
end

Object: Check
Name: 2x2 <array> last
Status: passed
end

Object: Check
Name: 5x5 <array> as <array>
Status: passed
end

Object: Check
Name: 5x5 <array> 'do' using collection once
Status: passed
end

Object: Check
Name: 5x5 <array> 'do' using collection twice
Status: passed
end

Object: Check
Name: 5x5 <array> 'map' with identity
Status: passed
end

Object: Check
Name: 5x5 <array> 'map' creates new collection
Status: passed
end

Object: Check
Name: 5x5 <array> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: 5x5 <array> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: 5x5 <array> any? always matching
Status: passed
end

Object: Check
Name: 5x5 <array> any? never matching
Status: passed
end

Object: Check
Name: 5x5 <array> every? always matching
Status: passed
end

Object: Check
Name: 5x5 <array> every? never matching
Status: passed
end

Object: Check
Name: 5x5 <array> element of -1 errors
Status: passed
end

Object: Check
Name: 5x5 <array> element of size errors
Status: passed
end

Object: Check
Name: 5x5 <array> element default
Status: passed
end

Object: Check
Name: 5x5 <array> element 0
Status: passed
end

Object: Check
Name: 5x5 <array> element 1
Status: passed
end

Object: Check
Name: 5x5 <array> element 2
Status: passed
end

Object: Check
Name: 5x5 <array> element 3
Status: passed
end

Object: Check
Name: 5x5 <array> element 4
Status: passed
end

Object: Check
Name: 5x5 <array> element 5
Status: passed
end

Object: Check
Name: 5x5 <array> element 6
Status: passed
end

Object: Check
Name: 5x5 <array> element 7
Status: passed
end

Object: Check
Name: 5x5 <array> element 8
Status: passed
end

Object: Check
Name: 5x5 <array> element 9
Status: passed
end

Object: Check
Name: 5x5 <array> element 10
Status: passed
end

Object: Check
Name: 5x5 <array> element 11
Status: passed
end

Object: Check
Name: 5x5 <array> element 12
Status: passed
end

Object: Check
Name: 5x5 <array> element 13
Status: passed
end

Object: Check
Name: 5x5 <array> element 14
Status: passed
end

Object: Check
Name: 5x5 <array> element 15
Status: passed
end

Object: Check
Name: 5x5 <array> element 16
Status: passed
end

Object: Check
Name: 5x5 <array> element 17
Status: passed
end

Object: Check
Name: 5x5 <array> element 18
Status: passed
end

Object: Check
Name: 5x5 <array> element 19
Status: passed
end

Object: Check
Name: 5x5 <array> element 20
Status: passed
end

Object: Check
Name: 5x5 <array> element 21
Status: passed
end

Object: Check
Name: 5x5 <array> element 22
Status: passed
end

Object: Check
Name: 5x5 <array> element 23
Status: passed
end

Object: Check
Name: 5x5 <array> element 24
Status: passed
end

Object: Check
Name: 5x5 <array> key-sequence
Status: passed
end

Object: Check
Name: 5x5 <array> member? of non-member
Status: passed
end

Object: Check
Name: 5x5 <array> key 0 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 1 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 2 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 3 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 4 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 5 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 5 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 6 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 6 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 7 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 7 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 8 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 8 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 9 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 9 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 10 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 10 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 11 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 11 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 12 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 12 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 13 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 13 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 14 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 14 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 15 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 15 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 16 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 16 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 17 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 17 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 18 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 18 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 19 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 19 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 20 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 20 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 21 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 21 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 22 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 22 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 23 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 23 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 24 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 24 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> find-key failure
Status: passed
end

Object: Check
Name: 5x5 <array> find-key failure value
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 1
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 2
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 3
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 4
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 5
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 6
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 7
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 8
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 9
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 10
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 11
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 12
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 13
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 14
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 15
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 16
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 17
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 18
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 19
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 20
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 21
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 22
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 23
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 24
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 25
Status: passed
end

Object: Check
Name: 5x5 <array> empty?
Status: passed
end

Object: Check
Name: 5x5 <array> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: 5x5 <array> shallow-copy creates new object
Status: passed
end

Object: Check
Name: 5x5 <array> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: 5x5 <array> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: 5x5 <array> concatenate-as <array>
Status: passed
end

Object: Check
Name: 5x5 <array> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: 5x5 <array> first
Status: passed
end

Object: Check
Name: 5x5 <array> second
Status: passed
end

Object: Check
Name: 5x5 <array> third
Status: passed
end

Object: Check
Name: 5x5 <array> copy-sequence
Status: passed
end

Object: Check
Name: 5x5 <array> reverse didn't mutate original
Status: passed
end

Object: Check
Name: 5x5 <array> reverse
Status: passed
end

Object: Check
Name: 5x5 <array> reverse!
Status: passed
end

Object: Check
Name: 5x5 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: 5x5 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: 5x5 <array> sort all elements in order
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort all elements in order
Status: passed
end

Object: Check
Name: 5x5 <array> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: 5x5 <array> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: 5x5 <array> sort with > test all elements in order
Status: passed
end

Object: Check
Name: 5x5 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: 5x5 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: 5x5 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: 5x5 <array> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: 5x5 <array> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: 5x5 <array> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: 5x5 <array> 'last' returns last item
Status: passed
end

Object: Check
Name: 5x5 <array> type-for-copy
Status: passed
end

Object: Check
Name: 5x5 <array> first-setter
Status: passed
end

Object: Check
Name: 5x5 <array> second-setter
Status: passed
end

Object: Check
Name: 5x5 <array> third-setter
Status: passed
end

Object: Check
Name: 5x5 <array> last
Status: passed
end

Object: Check
Name: 2x3x4 <array> as <array>
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'do' using collection once
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'do' using collection twice
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'map' with identity
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'map' creates new collection
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: 2x3x4 <array> any? always matching
Status: passed
end

Object: Check
Name: 2x3x4 <array> any? never matching
Status: passed
end

Object: Check
Name: 2x3x4 <array> every? always matching
Status: passed
end

Object: Check
Name: 2x3x4 <array> every? never matching
Status: passed
end

Object: Check
Name: 2x3x4 <array> element of -1 errors
Status: passed
end

Object: Check
Name: 2x3x4 <array> element of size errors
Status: passed
end

Object: Check
Name: 2x3x4 <array> element default
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 0
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 1
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 2
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 3
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 4
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 5
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 6
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 7
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 8
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 9
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 10
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 11
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 12
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 13
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 14
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 15
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 16
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 17
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 18
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 19
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 20
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 21
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 22
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 23
Status: passed
end

Object: Check
Name: 2x3x4 <array> key-sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> member? of non-member
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 0 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 1 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 2 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 3 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 4 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 5 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 5 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 6 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 6 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 7 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 7 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 8 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 8 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 9 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 9 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 10 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 10 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 11 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 11 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 12 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 12 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 13 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 13 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 14 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 14 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 15 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 15 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 16 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 16 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 17 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 17 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 18 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 18 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 19 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 19 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 20 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 20 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 21 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 21 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 22 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 22 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 23 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 23 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key failure
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key failure value
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 1
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 2
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 3
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 4
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 5
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 6
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 7
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 8
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 9
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 10
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 11
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 12
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 13
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 14
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 15
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 16
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 17
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 18
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 19
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 20
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 21
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 22
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 23
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 24
Status: passed
end

Object: Check
Name: 2x3x4 <array> empty?
Status: passed
end

Object: Check
Name: 2x3x4 <array> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: 2x3x4 <array> shallow-copy creates new object
Status: passed
end

Object: Check
Name: 2x3x4 <array> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: 2x3x4 <array> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: 2x3x4 <array> concatenate-as <array>
Status: passed
end

Object: Check
Name: 2x3x4 <array> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: 2x3x4 <array> first
Status: passed
end

Object: Check
Name: 2x3x4 <array> second
Status: passed
end

Object: Check
Name: 2x3x4 <array> third
Status: passed
end

Object: Check
Name: 2x3x4 <array> copy-sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> reverse didn't mutate original
Status: passed
end

Object: Check
Name: 2x3x4 <array> reverse
Status: passed
end

Object: Check
Name: 2x3x4 <array> reverse!
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort all elements in order
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort all elements in order
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort with > test all elements in order
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'last' returns last item
Status: passed
end

Object: Check
Name: 2x3x4 <array> type-for-copy
Status: passed
end

Object: Check
Name: 2x3x4 <array> first-setter
Status: passed
end

Object: Check
Name: 2x3x4 <array> second-setter
Status: passed
end

Object: Check
Name: 2x3x4 <array> third-setter
Status: passed
end

Object: Check
Name: 2x3x4 <array> last
Status: passed
end

Object: Check
Name: Variable <stretchy-collection> is a class
Status: passed
end

Object: Check
Name: Variable <stretchy-collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<stretchy-collection>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <mutable-sequence> is a class
Status: passed
end

Object: Check
Name: Variable <mutable-sequence> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<mutable-sequence>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <mutable-explicit-key-collection> is a class
Status: passed
end

Object: Check
Name: Variable <mutable-explicit-key-collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<mutable-explicit-key-collection>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <mutable-collection> is a class
Status: passed
end

Object: Check
Name: Variable <mutable-collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<mutable-collection>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <sequence> is a class
Status: passed
end

Object: Check
Name: Variable <sequence> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<sequence>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: Variable <explicit-key-collection> is a class
Status: passed
end

Object: Check
Name: Variable <explicit-key-collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<explicit-key-collection>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <object-table> is a class
Status: passed
end

Object: Check
Name: Variable <object-table> has the correct superclasses
Status: passed
end

Object: Check
Name: make <object-table> with required arguments
Status: passed
end

Object: Check
Name: Empty <object-table> creation
Status: passed
end

Object: Check
Name: Empty <object-table> empty?
Status: passed
end

Object: Check
Name: Empty <object-table> size
Status: passed
end

Object: Check
Name: Empty <object-table> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <object-table> as <object-table>
Status: passed
end

Object: Check
Name: Empty <object-table> as <table>
Status: passed
end

Object: Check
Name: Empty <object-table> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <object-table> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Empty <object-table> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Empty <object-table> any? always matching
Status: passed
end

Object: Check
Name: Empty <object-table> any? never matching
Status: passed
end

Object: Check
Name: Empty <object-table> every? always matching
Status: passed
end

Object: Check
Name: Empty <object-table> every? never matching
Status: passed
end

Object: Check
Name: Empty <object-table> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <object-table> element of size errors
Status: passed
end

Object: Check
Name: Empty <object-table> element default
Status: passed
end

Object: Check
Name: Empty <object-table> key-sequence
Status: passed
end

Object: Check
Name: Empty <object-table> member? of non-member
Status: passed
end

Object: Check
Name: Empty <object-table> find-key failure
Status: passed
end

Object: Check
Name: Empty <object-table> find-key failure value
Status: passed
end

Object: Check
Name: Empty <object-table> empty?
Status: passed
end

Object: Check
Name: Empty <object-table> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> empty?
Status: passed
end

Object: Check
Name: Empty <object-table> size
Status: passed
end

Object: Check
Name: Empty <object-table> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <object-table> as <object-table>
Status: passed
end

Object: Check
Name: Empty <object-table> as <table>
Status: passed
end

Object: Check
Name: Empty <object-table> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <object-table> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Empty <object-table> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Empty <object-table> any? always matching
Status: passed
end

Object: Check
Name: Empty <object-table> any? never matching
Status: passed
end

Object: Check
Name: Empty <object-table> every? always matching
Status: passed
end

Object: Check
Name: Empty <object-table> every? never matching
Status: passed
end

Object: Check
Name: Empty <object-table> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <object-table> element of size errors
Status: passed
end

Object: Check
Name: Empty <object-table> element default
Status: passed
end

Object: Check
Name: Empty <object-table> key-sequence
Status: passed
end

Object: Check
Name: Empty <object-table> member? of non-member
Status: passed
end

Object: Check
Name: Empty <object-table> find-key failure
Status: passed
end

Object: Check
Name: Empty <object-table> find-key failure value
Status: passed
end

Object: Check
Name: Empty <object-table> empty?
Status: passed
end

Object: Check
Name: Empty <object-table> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> creation
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> size
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> as <object-table>
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> as <table>
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> element default
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> as <object-table>
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> as <table>
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> creation
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> as <object-table>
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> as <table>
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> as <object-table>
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> as <table>
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Variable <table> is a class
Status: passed
end

Object: Check
Name: Variable <table> has the correct superclasses
Status: passed
end

Object: Check
Name: make <table> with required arguments
Status: passed
end

Object: Check
Name: Empty <table> creation
Status: passed
end

Object: Check
Name: Empty <table> empty?
Status: passed
end

Object: Check
Name: Empty <table> size
Status: passed
end

Object: Check
Name: Empty <table> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <table> as <object-table>
Status: passed
end

Object: Check
Name: Empty <table> as <table>
Status: passed
end

Object: Check
Name: Empty <table> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <table> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <table> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <table> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <table> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Empty <table> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Empty <table> any? always matching
Status: passed
end

Object: Check
Name: Empty <table> any? never matching
Status: passed
end

Object: Check
Name: Empty <table> every? always matching
Status: passed
end

Object: Check
Name: Empty <table> every? never matching
Status: passed
end

Object: Check
Name: Empty <table> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <table> element of size errors
Status: passed
end

Object: Check
Name: Empty <table> element default
Status: passed
end

Object: Check
Name: Empty <table> key-sequence
Status: passed
end

Object: Check
Name: Empty <table> member? of non-member
Status: passed
end

Object: Check
Name: Empty <table> find-key failure
Status: passed
end

Object: Check
Name: Empty <table> find-key failure value
Status: passed
end

Object: Check
Name: Empty <table> empty?
Status: passed
end

Object: Check
Name: Empty <table> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> empty?
Status: passed
end

Object: Check
Name: Empty <table> size
Status: passed
end

Object: Check
Name: Empty <table> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <table> as <object-table>
Status: passed
end

Object: Check
Name: Empty <table> as <table>
Status: passed
end

Object: Check
Name: Empty <table> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <table> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <table> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <table> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <table> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Empty <table> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Empty <table> any? always matching
Status: passed
end

Object: Check
Name: Empty <table> any? never matching
Status: passed
end

Object: Check
Name: Empty <table> every? always matching
Status: passed
end

Object: Check
Name: Empty <table> every? never matching
Status: passed
end

Object: Check
Name: Empty <table> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <table> element of size errors
Status: passed
end

Object: Check
Name: Empty <table> element default
Status: passed
end

Object: Check
Name: Empty <table> key-sequence
Status: passed
end

Object: Check
Name: Empty <table> member? of non-member
Status: passed
end

Object: Check
Name: Empty <table> find-key failure
Status: passed
end

Object: Check
Name: Empty <table> find-key failure value
Status: passed
end

Object: Check
Name: Empty <table> empty?
Status: passed
end

Object: Check
Name: Empty <table> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> type-for-copy
Status: passed
end

Object: Check
Name: One item <table> creation
Status: passed
end

Object: Check
Name: One item <table> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <table> of <integer> size
Status: passed
end

Object: Check
Name: One item <table> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <table> of <integer> as <object-table>
Status: passed
end

Object: Check
Name: One item <table> of <integer> as <table>
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: One item <table> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <table> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <table> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <table> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <table> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <table> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <table> of <integer> element default
Status: passed
end

Object: Check
Name: One item <table> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <table> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <table> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <table> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <table> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <table> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <table> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <table> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <table> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <table> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <table> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <table> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> as <object-table>
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> as <table>
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> creation
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> as <object-table>
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> as <table>
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> as <object-table>
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> as <table>
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Variable <collection> is a class
Status: passed
end

Object: Check
Name: Variable <collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<collection>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: Variable <byte-string> is a class
Status: passed
end

Object: Check
Name: Variable <byte-string> has the correct superclasses
Status: passed
end

Object: Check
Name: make <byte-string> with required arguments
Status: passed
end

Object: Check
Name: Empty <byte-string> creation
Status: passed
end

Object: Check
Name: Empty <byte-string> empty?
Status: passed
end

Object: Check
Name: Empty <byte-string> size
Status: passed
end

Object: Check
Name: Empty <byte-string> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <byte-string> as <vector>
Status: passed
end

Object: Check
Name: Empty <byte-string> as <array>
Status: passed
end

Object: Check
Name: Empty <byte-string> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <byte-string> as <string>
Status: passed
end

Object: Check
Name: Empty <byte-string> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <byte-string> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <byte-string> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> any? always matching
Status: passed
end

Object: Check
Name: Empty <byte-string> any? never matching
Status: passed
end

Object: Check
Name: Empty <byte-string> every? always matching
Status: passed
end

Object: Check
Name: Empty <byte-string> every? never matching
Status: passed
end

Object: Check
Name: Empty <byte-string> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <byte-string> element of size errors
Status: passed
end

Object: Check
Name: Empty <byte-string> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Empty <byte-string> key-sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> member? of non-member
Status: passed
end

Object: Check
Name: Empty <byte-string> find-key failure
Status: passed
end

Object: Check
Name: Empty <byte-string> find-key failure value
Status: passed
end

Object: Check
Name: Empty <byte-string> empty?
Status: passed
end

Object: Check
Name: Empty <byte-string> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> first generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> second generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> third generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> copy-sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> reverse
Status: passed
end

Object: Check
Name: Empty <byte-string> reverse!
Status: passed
end

Object: Check
Name: Empty <byte-string> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <byte-string> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <byte-string> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <byte-string> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <byte-string> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> type-for-copy
Status: passed
end

Object: Check
Name: Empty <byte-string> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> as-lowercase
Status: passed
end

Object: Check
Name: Empty <byte-string> as-lowercase!
Status: passed
end

Object: Check
Name: Empty <byte-string> as-uppercase
Status: passed
end

Object: Check
Name: Empty <byte-string> as-uppercase!
Status: passed
end

Object: Check
Name: One item <byte-string> creation
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: One item <byte-string> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Multiple item <byte-string> creation
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Variable <string> is a class
Status: passed
end

Object: Check
Name: Variable <string> has the correct superclasses
Status: passed
end

Object: Check
Name: make <string> with required arguments
Status: passed
end

Object: Check
Name: Empty <string> creation
Status: passed
end

Object: Check
Name: Empty <string> empty?
Status: passed
end

Object: Check
Name: Empty <string> size
Status: passed
end

Object: Check
Name: Empty <string> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <string> as <vector>
Status: passed
end

Object: Check
Name: Empty <string> as <array>
Status: passed
end

Object: Check
Name: Empty <string> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <string> as <string>
Status: passed
end

Object: Check
Name: Empty <string> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <string> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <string> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <string> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <string> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <string> any? always matching
Status: passed
end

Object: Check
Name: Empty <string> any? never matching
Status: passed
end

Object: Check
Name: Empty <string> every? always matching
Status: passed
end

Object: Check
Name: Empty <string> every? never matching
Status: passed
end

Object: Check
Name: Empty <string> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <string> element of size errors
Status: passed
end

Object: Check
Name: Empty <string> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Empty <string> key-sequence
Status: passed
end

Object: Check
Name: Empty <string> member? of non-member
Status: passed
end

Object: Check
Name: Empty <string> find-key failure
Status: passed
end

Object: Check
Name: Empty <string> find-key failure value
Status: passed
end

Object: Check
Name: Empty <string> empty?
Status: passed
end

Object: Check
Name: Empty <string> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <string> first generates an error
Status: passed
end

Object: Check
Name: Empty <string> second generates an error
Status: passed
end

Object: Check
Name: Empty <string> third generates an error
Status: passed
end

Object: Check
Name: Empty <string> copy-sequence
Status: passed
end

Object: Check
Name: Empty <string> reverse
Status: passed
end

Object: Check
Name: Empty <string> reverse!
Status: passed
end

Object: Check
Name: Empty <string> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <string> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <string> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <string> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <string> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <string> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <string> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <string> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <string> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <string> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <string> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <string> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <string> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <string> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <string> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <string> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <string> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <string> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <string> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <string> type-for-copy
Status: passed
end

Object: Check
Name: Empty <string> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <string> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <string> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <string> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <string> as-lowercase
Status: passed
end

Object: Check
Name: Empty <string> as-lowercase!
Status: passed
end

Object: Check
Name: Empty <string> as-uppercase
Status: passed
end

Object: Check
Name: Empty <string> as-uppercase!
Status: passed
end

Object: Check
Name: One item <string> creation
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: One item <string> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Multiple item <string> creation
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element default
Status: crashed
Reason: #"default" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Multiple item <string> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Variable <range> is a class
Status: passed
end

Object: Check
Name: Variable <range> has the correct superclasses
Status: passed
end

Object: Check
Name: make <range> with required arguments
Status: passed
end

Object: Check
Name: Empty <range> creation
Status: passed
end

Object: Check
Name: Empty <range> empty?
Status: passed
end

Object: Check
Name: Empty <range> size
Status: passed
end

Object: Check
Name: Empty <range> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <range> as <range>
Status: passed
end

Object: Check
Name: Empty <range> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <range> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <range> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <range> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <range> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <range> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <range> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <range> 'map-into' with identity
Status: passed
end

Object: Check
Name: Empty <range> any? always matching
Status: passed
end

Object: Check
Name: Empty <range> any? never matching
Status: passed
end

Object: Check
Name: Empty <range> every? always matching
Status: passed
end

Object: Check
Name: Empty <range> every? never matching
Status: passed
end

Object: Check
Name: Empty <range> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <range> element of size errors
Status: passed
end

Object: Check
Name: Empty <range> element default
Status: passed
end

Object: Check
Name: Empty <range> key-sequence
Status: passed
end

Object: Check
Name: Empty <range> member? of non-member
Status: passed
end

Object: Check
Name: Empty <range> find-key failure
Status: passed
end

Object: Check
Name: Empty <range> find-key failure value
Status: passed
end

Object: Check
Name: Empty <range> empty?
Status: passed
end

Object: Check
Name: Empty <range> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <range> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <range> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <range> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <range> first generates an error
Status: passed
end

Object: Check
Name: Empty <range> second generates an error
Status: passed
end

Object: Check
Name: Empty <range> third generates an error
Status: passed
end

Object: Check
Name: Empty <range> copy-sequence
Status: passed
end

Object: Check
Name: Empty <range> reverse
Status: passed
end

Object: Check
Name: Empty <range> reverse!
Status: passed
end

Object: Check
Name: Empty <range> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <range> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <range> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <range> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <range> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <range> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <range> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <range> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <range> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <range> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <range> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <range> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <range> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <range> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <range> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <range> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <range> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <range> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <range> 'last' generates an error
Status: passed
end

Object: Check
Name: One item <range> creation
Status: passed
end

Object: Check
Name: One item <range> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <range> of <integer> size
Status: passed
end

Object: Check
Name: One item <range> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <range> of <integer> as <range>
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'map-into' with identity
Status: passed
end

Object: Check
Name: One item <range> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <range> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <range> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <range> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <range> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <range> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <range> of <integer> element default
Status: passed
end

Object: Check
Name: One item <range> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <range> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <range> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <range> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <range> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <range> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <range> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <range> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <range> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <range> of <integer> first
Status: passed
end

Object: Check
Name: One item <range> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <range> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <range> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <range> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <range> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <range> creation
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> as <range>
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'map-into' with identity
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Variable <empty-list> is a class
Status: passed
end

Object: Check
Name: Variable <empty-list> has the correct superclasses
Status: passed
end

Object: Check
Name: make <empty-list> with required arguments
Status: passed
end

Object: Check
Name: Empty <empty-list> creation
Status: passed
end

Object: Check
Name: Empty <empty-list> empty?
Status: passed
end

Object: Check
Name: Empty <empty-list> size
Status: passed
end

Object: Check
Name: Empty <empty-list> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <empty-list> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <array>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <string>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <list>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <deque>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <empty-list> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> any? always matching
Status: passed
end

Object: Check
Name: Empty <empty-list> any? never matching
Status: passed
end

Object: Check
Name: Empty <empty-list> every? always matching
Status: passed
end

Object: Check
Name: Empty <empty-list> every? never matching
Status: passed
end

Object: Check
Name: Empty <empty-list> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <empty-list> element of size errors
Status: passed
end

Object: Check
Name: Empty <empty-list> element default
Status: passed
end

Object: Check
Name: Empty <empty-list> key-sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> member? of non-member
Status: passed
end

Object: Check
Name: Empty <empty-list> find-key failure
Status: passed
end

Object: Check
Name: Empty <empty-list> find-key failure value
Status: passed
end

Object: Check
Name: Empty <empty-list> empty?
Status: passed
end

Object: Check
Name: Empty <empty-list> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <list>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> first generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> second generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> third generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> copy-sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> reverse
Status: passed
end

Object: Check
Name: Empty <empty-list> reverse!
Status: passed
end

Object: Check
Name: Empty <empty-list> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <empty-list> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <empty-list> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <empty-list> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <empty-list> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> type-for-copy
Status: passed
end

Object: Check
Name: Empty <empty-list> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <empty-list> creation
Status: passed
end

Object: Check
Name: Multiple item <empty-list> creation
Status: passed
end

Object: Check
Name: Variable <list> is a class
Status: passed
end

Object: Check
Name: Variable <list> has the correct superclasses
Status: passed
end

Object: Check
Name: make <list> with required arguments
Status: passed
end

Object: Check
Name: Empty <list> creation
Status: passed
end

Object: Check
Name: Empty <list> empty?
Status: passed
end

Object: Check
Name: Empty <list> size
Status: passed
end

Object: Check
Name: Empty <list> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <list> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <list> as <vector>
Status: passed
end

Object: Check
Name: Empty <list> as <array>
Status: passed
end

Object: Check
Name: Empty <list> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <list> as <string>
Status: passed
end

Object: Check
Name: Empty <list> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <list> as <list>
Status: passed
end

Object: Check
Name: Empty <list> as <deque>
Status: passed
end

Object: Check
Name: Empty <list> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <list> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <list> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <list> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <list> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <list> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <list> any? always matching
Status: passed
end

Object: Check
Name: Empty <list> any? never matching
Status: passed
end

Object: Check
Name: Empty <list> every? always matching
Status: passed
end

Object: Check
Name: Empty <list> every? never matching
Status: passed
end

Object: Check
Name: Empty <list> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <list> element of size errors
Status: passed
end

Object: Check
Name: Empty <list> element default
Status: passed
end

Object: Check
Name: Empty <list> key-sequence
Status: passed
end

Object: Check
Name: Empty <list> member? of non-member
Status: passed
end

Object: Check
Name: Empty <list> find-key failure
Status: passed
end

Object: Check
Name: Empty <list> find-key failure value
Status: passed
end

Object: Check
Name: Empty <list> empty?
Status: passed
end

Object: Check
Name: Empty <list> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <list>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <list> first generates an error
Status: passed
end

Object: Check
Name: Empty <list> second generates an error
Status: passed
end

Object: Check
Name: Empty <list> third generates an error
Status: passed
end

Object: Check
Name: Empty <list> copy-sequence
Status: passed
end

Object: Check
Name: Empty <list> reverse
Status: passed
end

Object: Check
Name: Empty <list> reverse!
Status: passed
end

Object: Check
Name: Empty <list> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <list> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <list> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <list> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <list> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <list> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <list> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <list> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <list> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <list> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <list> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <list> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <list> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <list> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <list> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <list> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <list> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <list> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <list> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <list> type-for-copy
Status: passed
end

Object: Check
Name: Empty <list> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <list> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <list> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <list> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> creation
Status: passed
end

Object: Check
Name: One item <list> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <list> of <integer> size
Status: passed
end

Object: Check
Name: One item <list> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <list>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <deque>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <pair>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <pair> with identity
Status: crashed
Reason: Taking size of an improper list
end

Object: Check
Name: One item <list> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <list> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <list> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <list> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <list> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <list> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <list> of <integer> element default
Status: passed
end

Object: Check
Name: One item <list> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <list> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <list> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <list> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <list> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <list> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <list> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <list> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <list> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <list> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> first
Status: passed
end

Object: Check
Name: One item <list> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <list> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <list> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <list> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <list> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <list> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <list> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> of <integer> last
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <pair>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <pair> with identity
Status: crashed
Reason: Taking size of an improper list
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <list> creation
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <list>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <pair>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <pair> with identity
Status: crashed
Reason: #f is not of type {<class>: <list>}
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <pair>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <pair> with identity
Status: crashed
Reason: #f is not of type {<class>: <list>}
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> last
Status: passed
end

Object: Check
Name: Variable <deque> is a class
Status: passed
end

Object: Check
Name: Variable <deque> has the correct superclasses
Status: passed
end

Object: Check
Name: make <deque> with required arguments
Status: passed
end

Object: Check
Name: Empty <deque> creation
Status: passed
end

Object: Check
Name: Empty <deque> empty?
Status: passed
end

Object: Check
Name: Empty <deque> size
Status: passed
end

Object: Check
Name: Empty <deque> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <deque> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <deque> as <vector>
Status: passed
end

Object: Check
Name: Empty <deque> as <array>
Status: passed
end

Object: Check
Name: Empty <deque> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <deque> as <string>
Status: passed
end

Object: Check
Name: Empty <deque> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <deque> as <list>
Status: passed
end

Object: Check
Name: Empty <deque> as <deque>
Status: passed
end

Object: Check
Name: Empty <deque> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <deque> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <deque> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <deque> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <deque> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <deque> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <deque> any? always matching
Status: passed
end

Object: Check
Name: Empty <deque> any? never matching
Status: passed
end

Object: Check
Name: Empty <deque> every? always matching
Status: passed
end

Object: Check
Name: Empty <deque> every? never matching
Status: passed
end

Object: Check
Name: Empty <deque> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <deque> element of size errors
Status: passed
end

Object: Check
Name: Empty <deque> element default
Status: passed
end

Object: Check
Name: Empty <deque> key-sequence
Status: passed
end

Object: Check
Name: Empty <deque> member? of non-member
Status: passed
end

Object: Check
Name: Empty <deque> find-key failure
Status: passed
end

Object: Check
Name: Empty <deque> find-key failure value
Status: passed
end

Object: Check
Name: Empty <deque> empty?
Status: passed
end

Object: Check
Name: Empty <deque> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <list>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <deque> first generates an error
Status: passed
end

Object: Check
Name: Empty <deque> second generates an error
Status: passed
end

Object: Check
Name: Empty <deque> third generates an error
Status: passed
end

Object: Check
Name: Empty <deque> copy-sequence
Status: passed
end

Object: Check
Name: Empty <deque> reverse
Status: passed
end

Object: Check
Name: Empty <deque> reverse!
Status: passed
end

Object: Check
Name: Empty <deque> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <deque> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <deque> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <deque> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <deque> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <deque> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <deque> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <deque> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <deque> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <deque> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <deque> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <deque> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <deque> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <deque> type-for-copy
Status: passed
end

Object: Check
Name: Empty <deque> first-setter
Status: passed
end

Object: Check
Name: Empty <deque> second-setter
Status: passed
end

Object: Check
Name: Empty <deque> third-setter
Status: passed
end

Object: Check
Name: Empty <deque> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <deque> resizes
Status: passed
end

Object: Check
Name: Empty <deque> emptied
Status: passed
end

Object: Check
Name: One item <deque> creation
Status: passed
end

Object: Check
Name: One item <deque> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <deque> of <integer> size
Status: passed
end

Object: Check
Name: One item <deque> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <list>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <deque>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <deque> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <deque> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <deque> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <deque> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <deque> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <deque> of <integer> element default
Status: passed
end

Object: Check
Name: One item <deque> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <deque> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <deque> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <deque> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <deque> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <deque> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <deque> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <deque> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <deque> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <deque> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> first
Status: passed
end

Object: Check
Name: One item <deque> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <deque> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <deque> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <deque> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <deque> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <deque> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <deque> of <integer> second-setter
Status: passed
end

Object: Check
Name: One item <deque> of <integer> third-setter
Status: passed
end

Object: Check
Name: One item <deque> of <integer> last
Status: passed
end

Object: Check
Name: One item <deque> of <integer> resizes
Status: passed
end

Object: Check
Name: One item <deque> of <integer> emptied
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> resizes
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Multiple item <deque> creation
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <list>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> resizes
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> emptied
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> resizes
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Variable <stretchy-vector> is a class
Status: passed
end

Object: Check
Name: Variable <stretchy-vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <stretchy-vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> creation
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> empty?
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> size
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> as <array>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> element default
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> empty?
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <stretchy-vector> identity
Status: failed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <stretchy-vector>
Status: failed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <stretchy-vector> three times
Status: failed
end

Object: Check
Name: Empty <stretchy-vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> reverse
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> reverse!
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> first-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> second-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> third-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> resizes
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> emptied
Status: passed
end

Object: Check
Name: One item <stretchy-vector> creation
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> resizes
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> emptied
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> resizes
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> creation
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> resizes
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> emptied
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> resizes
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Variable <pair> is a class
Status: passed
end

Object: Check
Name: Variable <pair> has the correct superclasses
Status: passed
end

Object: Check
Name: make <pair> with required arguments
Status: passed
end

Object: Check
Name: pair(1, #()) as <simple-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) as <vector>
Status: passed
end

Object: Check
Name: pair(1, #()) as <array>
Status: passed
end

Object: Check
Name: pair(1, #()) as <list>
Status: passed
end

Object: Check
Name: pair(1, #()) as <deque>
Status: passed
end

Object: Check
Name: pair(1, #()) as <stretchy-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) as <pair>
Status: passed
end

Object: Check
Name: pair(1, #()) as <simple-object-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) 'do' using collection once
Status: passed
end

Object: Check
Name: pair(1, #()) 'do' using collection twice
Status: passed
end

Object: Check
Name: pair(1, #()) 'map' with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map' creates new collection
Status: passed
end

Object: Check
Name: pair(1, #()) 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <pair> with identity
Status: crashed
Reason: Taking size of an improper list
end

Object: Check
Name: pair(1, #()) 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) any? always matching
Status: passed
end

Object: Check
Name: pair(1, #()) any? never matching
Status: passed
end

Object: Check
Name: pair(1, #()) every? always matching
Status: passed
end

Object: Check
Name: pair(1, #()) every? never matching
Status: passed
end

Object: Check
Name: pair(1, #()) element of -1 errors
Status: passed
end

Object: Check
Name: pair(1, #()) element of size errors
Status: passed
end

Object: Check
Name: pair(1, #()) element default
Status: passed
end

Object: Check
Name: pair(1, #()) element 0
Status: passed
end

Object: Check
Name: pair(1, #()) key-sequence
Status: passed
end

Object: Check
Name: pair(1, #()) member? of non-member
Status: passed
end

Object: Check
Name: pair(1, #()) key 0 is member?
Status: passed
end

Object: Check
Name: pair(1, #()) key 0 is member? with failing test
Status: passed
end

Object: Check
Name: pair(1, #()) find-key failure
Status: passed
end

Object: Check
Name: pair(1, #()) find-key failure value
Status: passed
end

Object: Check
Name: pair(1, #()) find-key 1
Status: passed
end

Object: Check
Name: pair(1, #()) empty?
Status: passed
end

Object: Check
Name: pair(1, #()) shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: pair(1, #()) shallow-copy creates new object
Status: passed
end

Object: Check
Name: pair(1, #()) shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <vector>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <array> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <array>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <array> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <list> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <list>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <list> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <deque>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: pair(1, #()) first
Status: passed
end

Object: Check
Name: pair(1, #()) second generates an error
Status: passed
end

Object: Check
Name: pair(1, #()) third generates an error
Status: passed
end

Object: Check
Name: pair(1, #()) copy-sequence
Status: passed
end

Object: Check
Name: pair(1, #()) reverse didn't mutate original
Status: passed
end

Object: Check
Name: pair(1, #()) reverse
Status: passed
end

Object: Check
Name: pair(1, #()) reverse!
Status: passed
end

Object: Check
Name: pair(1, #()) sort copies if necessary
Status: passed
end

Object: Check
Name: pair(1, #()) sort returns a sequence
Status: passed
end

Object: Check
Name: pair(1, #()) sort all elements in order
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort copies if necessary
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort returns a sequence
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort all elements in order
Status: passed
end

Object: Check
Name: pair(1, #()) sort with > test copies if necessary
Status: passed
end

Object: Check
Name: pair(1, #()) sort with > test returns a sequence
Status: passed
end

Object: Check
Name: pair(1, #()) sort with > test all elements in order
Status: passed
end

Object: Check
Name: pair(1, #()) sort! copies if necessary
Status: passed
end

Object: Check
Name: pair(1, #()) sort! returns a sequence
Status: passed
end

Object: Check
Name: pair(1, #()) sort! all elements in order
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort! all elements in order
Status: passed
end

Object: Check
Name: pair(1, #()) sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: pair(1, #()) sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: pair(1, #()) sort! with > test all elements in order
Status: passed
end

Object: Check
Name: pair(1, #()) 'last' returns last item
Status: passed
end

Object: Check
Name: pair(1, #()) type-for-copy
Status: passed
end

Object: Check
Name: pair(1, #()) first-setter
Status: passed
end

Object: Check
Name: pair(1, #()) second-setter generates an error
Status: passed
end

Object: Check
Name: pair(1, #()) third-setter generates an error
Status: passed
end

Object: Check
Name: pair(1, #()) last
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <simple-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <array>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <list>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <deque>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <stretchy-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <pair>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <simple-object-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'do' using collection once
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'do' using collection twice
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map' with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map' creates new collection
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <pair> with identity
Status: crashed
Reason: #f is not of type {<class>: <list>}
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) any? always matching
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) any? never matching
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) every? always matching
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) every? never matching
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element of -1 errors
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element of size errors
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element default
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element 0
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element 1
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key-sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) member? of non-member
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key 0 is member?
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key 0 is member? with failing test
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key 1 is member?
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key 1 is member? with failing test
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) find-key failure
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) find-key failure value
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) find-key 1
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) find-key 2
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) empty?
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) shallow-copy creates new object
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <array> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <array>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <array> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <list> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <list>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <list> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <deque>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) first
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) second
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) third generates an error
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) copy-sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) reverse didn't mutate original
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) reverse
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) reverse!
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort copies if necessary
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort returns a sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort all elements in order
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort copies if necessary
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort returns a sequence
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort all elements in order
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort with > test copies if necessary
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort with > test returns a sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort with > test all elements in order
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! copies if necessary
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! returns a sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! all elements in order
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort! all elements in order
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! with > test all elements in order
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'last' returns last item
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) type-for-copy
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) first-setter
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) second-setter
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) third-setter generates an error
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) last
Status: passed
end

Object: Check
Name: Test unit Non-list <pair> tests
Status: crashed
Reason: Taking size of an improper list
end

Object: Check
Name: Variable <simple-object-vector> is a class
Status: passed
end

Object: Check
Name: Variable <simple-object-vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-object-vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> creation
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> empty?
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> size
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <array>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> element default
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> empty?
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> reverse
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> reverse!
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> creation
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> creation
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> last
Status: passed
end
end

Object: Test
Name: collections-protocol-functions-test
Status: passed

Object: Check
Name: Variable member? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable choose-by is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable element is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable push is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable key-sequence is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable choose is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable tail is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable replace-subsequence! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable concatenate-as is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable reduce1 is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable dimension is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable reduce is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable second is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable concatenate is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable every? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable sort! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add-new! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable copy-sequence is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add-new is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable any? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable row-major-index is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable map-into is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-duplicates! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-duplicates is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable rank is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable head-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable tail-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable map-as is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable empty? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable subsequence-position is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable last-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable intersection is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable head is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable object-hash is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable dimensions is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable union is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable sort is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable third-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable map is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable merge-hash-ids is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable second-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable table-protocol is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable first-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable backward-iteration-protocol is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable third is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable size-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable reverse is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable forward-iteration-protocol is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable fill! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pop-last is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable last is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable push-last is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable key-test is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable first is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable replace-elements! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable size is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pop is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable aref-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-key! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable find-key is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable aref is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable element-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable reverse! is a generic-function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: collections-protocol-macros-test
Status: passed
end
end

Object: Suite
Name: conditions-protocol-test-suite
Status: failed

Object: Test
Name: conditions-protocol-constants-test
Status: passed
end

Object: Test
Name: conditions-protocol-variables-test
Status: passed
end

Object: Test
Name: conditions-protocol-classes-test
Status: failed

Object: Check
Name: Variable <type-error> is a class
Status: passed
end

Object: Check
Name: Variable <type-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make <type-error> with required arguments
Status: passed
end

Object: Check
Name: Variable <simple-warning> is a class
Status: passed
end

Object: Check
Name: Variable <simple-warning> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-warning> with required arguments
Status: passed
end

Object: Check
Name: <simple-warning> condition-format-string matches specified format string
Status: passed
end

Object: Check
Name: <simple-warning> condition-format-arguments match specified format arguments
Status: passed
end

Object: Check
Name: Variable <simple-error> is a class
Status: passed
end

Object: Check
Name: Variable <simple-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-error> with required arguments
Status: passed
end

Object: Check
Name: <simple-error> condition-format-string matches specified format string
Status: passed
end

Object: Check
Name: <simple-error> condition-format-arguments match specified format arguments
Status: passed
end

Object: Check
Name: Variable <serious-condition> is a class
Status: passed
end

Object: Check
Name: Variable <serious-condition> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<serious-condition>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <sealed-object-error> is a class
Status: passed
end

Object: Check
Name: Variable <sealed-object-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<sealed-object-error>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: Variable <error> is a class
Status: passed
end

Object: Check
Name: Variable <error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<error>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <simple-restart> is a class
Status: passed
end

Object: Check
Name: Variable <simple-restart> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-restart> with required arguments
Status: passed
end

Object: Check
Name: <simple-restart> condition-format-string matches specified format string
Status: passed
end

Object: Check
Name: <simple-restart> condition-format-arguments match specified format arguments
Status: passed
end

Object: Check
Name: Variable <condition> is a class
Status: passed
end

Object: Check
Name: Variable <condition> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<condition>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <restart> is a class
Status: passed
end

Object: Check
Name: Variable <restart> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<restart>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <abort> is a class
Status: passed
end

Object: Check
Name: Variable <abort> has the correct superclasses
Status: passed
end

Object: Check
Name: make <abort> with required arguments
Status: passed
end

Object: Check
Name: Variable <warning> is a class
Status: passed
end

Object: Check
Name: Variable <warning> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<warning>) errors because not instantiable
Status: passed
end
end

Object: Test
Name: conditions-protocol-functions-test
Status: passed

Object: Check
Name: Variable type-error-value is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable check-type is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable break is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable condition-format-arguments is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable condition-format-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable return-description is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable cerror is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable error is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable return-allowed? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-handlers is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable return-query is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable signal is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable restart-query is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-error-expected-type is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable default-handler is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable abort is a function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: conditions-protocol-macros-test
Status: passed
end
end

Object: Suite
Name: dylan-extensions-protocol-test-suite
Status: passed

Object: Test
Name: dylan-extensions-protocol-constants-test
Status: passed

Object: Check
Name: Constant $maximum-integer has the correct type
Status: passed
end

Object: Check
Name: $maximum-integer + 1 overflows
Status: passed
end

Object: Check
Name: Constant $minimum-integer has the correct type
Status: passed
end

Object: Check
Name: $minimum-integer - 1 overflows
Status: passed
end
end

Object: Test
Name: dylan-extensions-protocol-variables-test
Status: passed
end

Object: Test
Name: dylan-extensions-protocol-classes-test
Status: passed
end

Object: Test
Name: dylan-extensions-protocol-functions-test
Status: passed
end

Object: Test
Name: dylan-extensions-protocol-macros-test
Status: passed
end
end
end
end

Object: Suite
Name: harlequin-extensions-test-suite
Status: failed

Object: Suite
Name: harlequin-extensions-module-test-suite
Status: failed

Object: Suite
Name: harlequin-extensions-protocol-test-suite
Status: failed

Object: Test
Name: harlequin-extensions-protocol-constants-test
Status: passed

Object: Check
Name: Constant $unfound has the correct type
Status: passed
end

Object: Check
Name: not-found?($unfound)
Status: passed
end

Object: Check
Name: found?($unfound) is false
Status: passed
end

Object: Check
Name: Constant $unsupplied has the correct type
Status: passed
end

Object: Check
Name: unsupplied?($unsupplied)
Status: passed
end

Object: Check
Name: supplied?($unsupplied) is false
Status: passed
end
end

Object: Test
Name: harlequin-extensions-protocol-variables-test
Status: passed
end

Object: Test
Name: harlequin-extensions-protocol-classes-test
Status: failed

Object: Check
Name: Variable <object-set> is a class
Status: passed
end

Object: Check
Name: Variable <object-set> has the correct superclasses
Status: passed
end

Object: Check
Name: make <object-set> with required arguments
Status: passed
end

Object: Check
Name: Variable <byte-character> is a class
Status: passed
end

Object: Check
Name: Variable <byte-character> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<byte-character>) errors because not instantiable
Status: passed
end

Object: Check
Name: byte-string[0] is a <byte-character>
Status: passed
end

Object: Check
Name: Variable <object-deque> is a class
Status: passed
end

Object: Check
Name: Variable <object-deque> has the correct superclasses
Status: passed
end

Object: Check
Name: make <object-deque> with required arguments
Status: passed
end

Object: Check
Name: Empty <object-deque> creation
Status: passed
end

Object: Check
Name: Empty <object-deque> empty?
Status: passed
end

Object: Check
Name: Empty <object-deque> size
Status: passed
end

Object: Check
Name: Empty <object-deque> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <object-deque> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <vector>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <array>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <string>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <list>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <deque>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <object-deque> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <object-deque> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <object-deque> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <object-deque> any? always matching
Status: passed
end

Object: Check
Name: Empty <object-deque> any? never matching
Status: passed
end

Object: Check
Name: Empty <object-deque> every? always matching
Status: passed
end

Object: Check
Name: Empty <object-deque> every? never matching
Status: passed
end

Object: Check
Name: Empty <object-deque> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <object-deque> element of size errors
Status: passed
end

Object: Check
Name: Empty <object-deque> element default
Status: passed
end

Object: Check
Name: Empty <object-deque> key-sequence
Status: passed
end

Object: Check
Name: Empty <object-deque> member? of non-member
Status: passed
end

Object: Check
Name: Empty <object-deque> find-key failure
Status: passed
end

Object: Check
Name: Empty <object-deque> find-key failure value
Status: passed
end

Object: Check
Name: Empty <object-deque> empty?
Status: passed
end

Object: Check
Name: Empty <object-deque> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <list>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <object-deque> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <object-deque> first generates an error
Status: passed
end

Object: Check
Name: Empty <object-deque> second generates an error
Status: passed
end

Object: Check
Name: Empty <object-deque> third generates an error
Status: passed
end

Object: Check
Name: Empty <object-deque> copy-sequence
Status: passed
end

Object: Check
Name: Empty <object-deque> reverse
Status: passed
end

Object: Check
Name: Empty <object-deque> reverse!
Status: passed
end

Object: Check
Name: Empty <object-deque> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <object-deque> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <object-deque> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <object-deque> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <object-deque> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <object-deque> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <object-deque> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <object-deque> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <object-deque> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <object-deque> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <object-deque> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <object-deque> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <object-deque> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <object-deque> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <object-deque> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <object-deque> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <object-deque> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <object-deque> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <object-deque> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <object-deque> type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-deque> first-setter
Status: passed
end

Object: Check
Name: Empty <object-deque> second-setter
Status: passed
end

Object: Check
Name: Empty <object-deque> third-setter
Status: passed
end

Object: Check
Name: Empty <object-deque> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <object-deque> resizes
Status: passed
end

Object: Check
Name: Empty <object-deque> emptied
Status: passed
end

Object: Check
Name: One item <object-deque> creation
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> size
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> as <list>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> as <deque>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> element default
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> first
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> second-setter
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> third-setter
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> last
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> resizes
Status: passed
end

Object: Check
Name: One item <object-deque> of <integer> emptied
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <object-deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> resizes
Status: passed
end

Object: Check
Name: One item <object-deque> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Multiple item <object-deque> creation
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> as <list>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> resizes
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <integer> emptied
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <object-deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> resizes
Status: passed
end

Object: Check
Name: Multiple item <object-deque> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Variable <stretchy-object-vector> is a class
Status: passed
end

Object: Check
Name: Variable <stretchy-object-vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <stretchy-object-vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> creation
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> empty?
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> size
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> as <array>
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> element default
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> empty?
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <stretchy-vector> identity
Status: failed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <stretchy-vector>
Status: failed
end

Object: Check
Name: Empty <stretchy-object-vector> concatenate-as <stretchy-vector> three times
Status: failed
end

Object: Check
Name: Empty <stretchy-object-vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> reverse
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> reverse!
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-object-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-object-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-object-vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-object-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-object-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-object-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> first-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> second-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> third-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> resizes
Status: passed
end

Object: Check
Name: Empty <stretchy-object-vector> emptied
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> creation
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> resizes
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <integer> emptied
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> resizes
Status: passed
end

Object: Check
Name: One item <stretchy-object-vector> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> creation
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> resizes
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <integer> emptied
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> resizes
Status: passed
end

Object: Check
Name: Multiple item <stretchy-object-vector> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Variable <stretchy-sequence> is a class
Status: passed
end

Object: Check
Name: Variable <stretchy-sequence> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<stretchy-sequence>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <simple-condition> is a class
Status: passed
end

Object: Check
Name: Variable <simple-condition> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<simple-condition>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <set> is a class
Status: passed
end

Object: Check
Name: Variable <set> has the correct superclasses
Status: passed
end

Object: Check
Name: make <set> with required arguments
Status: passed
end
end

Object: Test
Name: harlequin-extensions-protocol-functions-test
Status: failed

Object: Check
Name: Variable remove-all-keys! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable difference is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: test difference #1
Status: passed
end

Object: Check
Name: test difference #2
Status: passed
end

Object: Check
Name: test difference #3
Status: passed
end

Object: Check
Name: test difference with \>
Status: passed
end

Object: Check
Name: Variable unsupplied? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: unsupplied?(unsupplied())
Status: passed
end

Object: Check
Name: unsupplied?(#f) == #f
Status: passed
end

Object: Check
Name: unsupplied?(#t) == #f
Status: passed
end

Object: Check
Name: Variable one-of is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: one-of returns type
Status: passed
end

Object: Check
Name: #"one" is one-of(#"one", #t)
Status: passed
end

Object: Check
Name: #t is one-of(#"one", #t)
Status: passed
end

Object: Check
Name: #f is one-of(#"one", #t)
Status: passed
end

Object: Check
Name: Variable false-or is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: False-or returns type
Status: passed
end

Object: Check
Name: abc is false-or(<string>)
Status: passed
end

Object: Check
Name: #f is false-or(<string>)
Status: passed
end

Object: Check
Name: #t is not false-or(<string>)
Status: passed
end

Object: Check
Name: Variable unsupplied is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable position is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: test position
Status: passed
end

Object: Check
Name: test position with skip of 2
Status: passed
end

Object: Check
Name: test position with wrong item
Status: passed
end

Object: Check
Name: test posision with skip greater than existance
Status: passed
end

Object: Check
Name: test position using test: \<
Status: passed
end

Object: Check
Name: Variable integer-to-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: integer-to-string(0)
Status: passed
end

Object: Check
Name: integer-to-string(10)
Status: passed
end

Object: Check
Name: integer-to-string(10)
Status: passed
end

Object: Check
Name: integer-to-string(-10)
Status: passed
end

Object: Check
Name: integer-to-string(-10)
Status: passed
end

Object: Check
Name: integer-to-string(10, size: 6)
Status: passed
end

Object: Check
Name: integer-to-string(10, size: 6, fill: ' ')
Status: passed
end

Object: Check
Name: integer-to-string(127, base: 2, size: 8)
Status: passed
end

Object: Check
Name: Variable debug-message is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: debug-message doesn't crash
Status: passed
end

Object: Check
Name: debug-message doesn't crash with incorrect format arguments
Status: passed
end

Object: Check
Name: Variable condition-to-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: condition-to-string of an error produces correct string
Status: passed
end

Object: Check
Name: condition-to-string of a type error produces a string
Status: passed
end

Object: Check
Name: condition-to-string of an error with a condition-to-string method
Status: passed
end

Object: Check
Name: Variable unfound? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: unfound?(unfound())
Status: passed
end

Object: Check
Name: unfound?(#f) == #f
Status: passed
end

Object: Check
Name: unfound?(#t) == #f
Status: passed
end

Object: Check
Name: Variable ignore is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: ignore doesn't crash
Status: passed
end

Object: Check
Name: Variable ignorable is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: ignorable doesn't crash
Status: passed
end

Object: Check
Name: Variable concatenate! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: test concatenate! on a list
Status: passed
end

Object: Check
Name: concatenate! should have not affected my-list
Status: failed
Reason: {<pair>: 3, 4, 5, 6} ~= {<pair>: 3, 4}
end

Object: Check
Name: test concatenate! on a stretchy-vector
Status: passed
end

Object: Check
Name: concatenate! should have changed my-stretchy-vector
Status: passed
end

Object: Check
Name: Variable unfound is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable number-to-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable subclass is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: subclass returns type
Status: passed
end

Object: Check
Name: <string> is subclass(<string>)
Status: passed
end

Object: Check
Name: <byte-string> is subclass(<string>)
Status: passed
end

Object: Check
Name: <object> is not subclass(<string>)
Status: passed
end

Object: Check
Name: Variable found? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: found?(unfound()) == #f
Status: passed
end

Object: Check
Name: found?(#f)
Status: passed
end

Object: Check
Name: found?(#t)
Status: passed
end

Object: Check
Name: Variable float-to-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Test unit float-to-string tests
Status: crashed
Reason: ELEMENT outside of range: 2
end

Object: Check
Name: Variable supplied? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: supplied?(unsupplied())
Status: passed
end

Object: Check
Name: supplied?(#f) == #f
Status: passed
end

Object: Check
Name: supplied?(#t) == #f
Status: passed
end

Object: Check
Name: Variable string-to-integer is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: string-to-integer(0)
Status: passed
end

Object: Check
Name: string-to-integer(10)
Status: passed
end

Object: Check
Name: string-to-integer(A)
Status: passed
end

Object: Check
Name: string-to-integer(-10)
Status: passed
end

Object: Check
Name: string-to-integer(-A)
Status: passed
end

Object: Check
Name: Variable find-element is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: test find-element
Status: passed
end

Object: Check
Name: test failure find-element
Status: passed
end

Object: Check
Name: test failure find-element with failure as symbol
Status: passed
end

Object: Check
Name: test find-element with skip: 1
Status: passed
end

Object: Check
Name: skip: is too big
Status: passed
end

Object: Check
Name: Variable fill-table! is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: fill-table(...) returns the table
Status: passed
end

Object: Check
Name: table(...)[0] = "Zero"
Status: passed
end

Object: Check
Name: table(...)[1] = "One"
Status: passed
end
end

Object: Test
Name: harlequin-extensions-protocol-macros-test
Status: passed

Object: Check
Name: timing macro returns two integer values
Status: passed
end

Object: Check
Name: define table produces correct table
Status: passed
end

Object: Check
Name: iterate macro computes factorial 5
Status: passed
end

Object: Check
Name: Assert signals error on #f
Status: passed
end

Object: Check
Name: Assert doesn't signal error on #t
Status: passed
end

Object: Check
Name: Assert doesn't signal error on 10
Status: passed
end

Object: Check
Name: Assert signals error on #f
Status: passed
end

Object: Check
Name: Assert doesn't signal error on #t
Status: passed
end

Object: Check
Name: Assert doesn't signal error on 10
Status: passed
end

Object: Check
Name: when (#t) 10 end returns 10
Status: passed
end

Object: Check
Name: when (#f) 10 end returns #f
Status: passed
end
end
end
end

Object: Suite
Name: simple-format-module-test-suite
Status: failed

Object: Suite
Name: simple-format-protocol-test-suite
Status: failed

Object: Test
Name: simple-format-protocol-constants-test
Status: passed
end

Object: Test
Name: simple-format-protocol-variables-test
Status: passed
end

Object: Test
Name: simple-format-protocol-classes-test
Status: passed
end

Object: Test
Name: simple-format-protocol-functions-test
Status: failed

Object: Check
Name: Variable format-to-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: format-to-string returns a string
Status: passed
end

Object: Check
Name: format-to-string crashes when missing an argument
Status: passed
end

Object: Check
Name: format-to-string crashes with argument of wrong type
Status: passed
end

Object: Check
Name: format-to-string crashes with invalid directive %z
Status: passed
end

Object: Check
Name: format-to-string("%d", 10)
Status: passed
end

Object: Check
Name: format-to-string("%b", 7)
Status: passed
end

Object: Check
Name: format-to-string("%o", 16)
Status: passed
end

Object: Check
Name: format-to-string("%x", 257)
Status: passed
end

Object: Check
Name: format-to-string("%c", 'a')
Status: passed
end

Object: Check
Name: format-to-string("%%")
Status: passed
end

Object: Check
Name: format-to-string("%s", 10)
Status: passed
end

Object: Check
Name: format-to-string("%=", 10)
Status: passed
end

Object: Check
Name: format-to-string("%s", 'a')
Status: passed
end

Object: Check
Name: format-to-string("%=", 'a')
Status: passed
end

Object: Check
Name: format-to-string("%s", 'Z')
Status: passed
end

Object: Check
Name: format-to-string("%=", 'Z')
Status: passed
end

Object: Check
Name: format-to-string("%s", #"symbol")
Status: passed
end

Object: Check
Name: format-to-string("%=", #"symbol")
Status: passed
end

Object: Check
Name: format-to-string("%s", #"symbol")
Status: passed
end

Object: Check
Name: format-to-string("%=", #"symbol")
Status: passed
end

Object: Check
Name: format-to-string("%s", #f)
Status: passed
end

Object: Check
Name: format-to-string("%=", #f)
Status: passed
end

Object: Check
Name: format-to-string("%s", #t)
Status: passed
end

Object: Check
Name: format-to-string("%=", #t)
Status: passed
end

Object: Check
Name: format-to-string("%s", {<class>: <object>})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<class>: <object>})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<generic-function>: find-key})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<generic-function>: find-key})
Status: failed
Reason: "{<incremental-generic-function>: find-key}" ~= "{<generic-function>: find-key}"
end

Object: Check
Name: format-to-string("%s", "10")
Status: passed
end

Object: Check
Name: format-to-string("%=", "10")
Status: passed
end

Object: Check
Name: format-to-string("%s", {<empty-list>: size 0})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<empty-list>: size 0})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<pair>: 1, 2})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<pair>: 1, 2})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<finite-range>: 0 to 10})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<finite-range>: 0 to 10})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<finite-range>: 10 to 1 by -1})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<finite-range>: 10 to 1 by -1})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<infinite-range>: 10 by -1})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<infinite-range>: 10 by -1})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<simple-object-array>: 2 x 3})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<simple-object-array>: 2 x 3})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<simple-object-vector>: 1, 'a', "Hello"})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<simple-object-vector>: 1, 'a', "Hello"})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<singleton>: 10})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<singleton>: 10})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<union>: <integer>, <string>})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<union>: <integer>, <string>})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<union>: #f, <string>})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<union>: #f, <string>})
Status: passed
end

Object: Check
Name: format-to-string("%s", {<union>: <string>, {<union>: 10, <character>}})
Status: passed
end

Object: Check
Name: format-to-string("%=", {<union>: <string>, {<union>: 10, <character>}})
Status: passed
end

Object: Check
Name: Variable format-out is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: format-out doesn't crash
Status: passed
end

Object: Check
Name: format-out crashes when missing an argument
Status: passed
end

Object: Check
Name: format-out crashes with argument of wrong type
Status: passed
end

Object: Check
Name: format-out crashes with invalid directive %z
Status: passed
end
end

Object: Test
Name: simple-format-protocol-macros-test
Status: passed
end
end
end

Object: Suite
Name: simple-random-module-test-suite
Status: passed

Object: Suite
Name: simple-random-protocol-test-suite
Status: passed

Object: Test
Name: simple-random-protocol-constants-test
Status: passed
end

Object: Test
Name: simple-random-protocol-variables-test
Status: passed
end

Object: Test
Name: simple-random-protocol-classes-test
Status: passed

Object: Check
Name: Variable <random> is a class
Status: passed
end

Object: Check
Name: Variable <random> has the correct superclasses
Status: passed
end

Object: Check
Name: make <random> with required arguments
Status: passed
end
end

Object: Test
Name: simple-random-protocol-functions-test
Status: passed

Object: Check
Name: Variable random is a function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: simple-random-protocol-macros-test
Status: passed
end
end
end
end

Object: Suite
Name: collections-test-suite
Status: failed

Object: Suite
Name: bit-set-test-suite
Status: failed

Object: Test
Name: bit-set-equals
Status: passed

Object: Check
Name: empty-set equals itself
Status: passed
end

Object: Check
Name: universal-set equals itself
Status: passed
end

Object: Check
Name: finite-set equals itself
Status: passed
end

Object: Check
Name: infinite-set equals itself
Status: passed
end

Object: Check
Name: empty-set equals another
Status: passed
end

Object: Check
Name: universal-set equals another
Status: passed
end

Object: Check
Name: finite-set equals another
Status: passed
end

Object: Check
Name: infinite-set equals another
Status: passed
end

Object: Check
Name: empty-set not equal to universal-set
Status: passed
end

Object: Check
Name: empty-set not equal to finite-set
Status: passed
end

Object: Check
Name: empty-set not equal to infinite-set
Status: passed
end

Object: Check
Name: universal-set not equal to finite-set
Status: passed
end

Object: Check
Name: universal-set not equal to infinite-set
Status: passed
end

Object: Check
Name: finite-set not equal to infinite-set
Status: passed
end

Object: Check
Name: finite-set not equal to finite-set1
Status: passed
end

Object: Check
Name: infinite-set not equal to infinite-set1
Status: passed
end
end

Object: Test
Name: bit-set-member
Status: passed

Object: Check
Name: 0 not in empty set
Status: passed
end

Object: Check
Name: 100000 not in empty set
Status: passed
end

Object: Check
Name: 0 in universal set
Status: passed
end

Object: Check
Name: 100000 in universal set
Status: passed
end

Object: Check
Name: 0 not in empty set
Status: passed
end

Object: Check
Name: 0 in universal set
Status: passed
end

Object: Check
Name: 0 in finite set
Status: passed
end

Object: Check
Name: 0 not in infinite set
Status: passed
end

Object: Check
Name: 10 not in empty set
Status: passed
end

Object: Check
Name: 10 in universal set
Status: passed
end

Object: Check
Name: 10 in finite set
Status: passed
end

Object: Check
Name: 10 not in infinite set
Status: passed
end

Object: Check
Name: 27 not in empty set
Status: passed
end

Object: Check
Name: 27 in universal set
Status: passed
end

Object: Check
Name: 27 in finite set
Status: passed
end

Object: Check
Name: 27 not in infinite set
Status: passed
end

Object: Check
Name: 30 not in empty set
Status: passed
end

Object: Check
Name: 30 in universal set
Status: passed
end

Object: Check
Name: 30 in finite set
Status: passed
end

Object: Check
Name: 30 not in infinite set
Status: passed
end

Object: Check
Name: 55 not in empty set
Status: passed
end

Object: Check
Name: 55 in universal set
Status: passed
end

Object: Check
Name: 55 in finite set
Status: passed
end

Object: Check
Name: 55 not in infinite set
Status: passed
end

Object: Check
Name: 60 not in empty set
Status: passed
end

Object: Check
Name: 60 in universal set
Status: passed
end

Object: Check
Name: 60 in finite set
Status: passed
end

Object: Check
Name: 60 not in infinite set
Status: passed
end

Object: Check
Name: 69 not in empty set
Status: passed
end

Object: Check
Name: 69 in universal set
Status: passed
end

Object: Check
Name: 69 in finite set
Status: passed
end

Object: Check
Name: 69 not in infinite set
Status: passed
end

Object: Check
Name: 2 not in empty set
Status: passed
end

Object: Check
Name: 2 in universal set
Status: passed
end

Object: Check
Name: 2 not in finite set
Status: passed
end

Object: Check
Name: 2 in infinite set
Status: passed
end

Object: Check
Name: 5 not in empty set
Status: passed
end

Object: Check
Name: 5 in universal set
Status: passed
end

Object: Check
Name: 5 not in finite set
Status: passed
end

Object: Check
Name: 5 in infinite set
Status: passed
end

Object: Check
Name: 7 not in empty set
Status: passed
end

Object: Check
Name: 7 in universal set
Status: passed
end

Object: Check
Name: 7 not in finite set
Status: passed
end

Object: Check
Name: 7 in infinite set
Status: passed
end

Object: Check
Name: 23 not in empty set
Status: passed
end

Object: Check
Name: 23 in universal set
Status: passed
end

Object: Check
Name: 23 not in finite set
Status: passed
end

Object: Check
Name: 23 in infinite set
Status: passed
end

Object: Check
Name: 24 not in empty set
Status: passed
end

Object: Check
Name: 24 in universal set
Status: passed
end

Object: Check
Name: 24 not in finite set
Status: passed
end

Object: Check
Name: 24 in infinite set
Status: passed
end

Object: Check
Name: 45 not in empty set
Status: passed
end

Object: Check
Name: 45 in universal set
Status: passed
end

Object: Check
Name: 45 not in finite set
Status: passed
end

Object: Check
Name: 45 in infinite set
Status: passed
end

Object: Check
Name: 76 not in empty set
Status: passed
end

Object: Check
Name: 76 in universal set
Status: passed
end

Object: Check
Name: 76 not in finite set
Status: passed
end

Object: Check
Name: 76 in infinite set
Status: passed
end
end

Object: Test
Name: bit-set-add
Status: crashed
Reason: {<simple-object-vector>: size 0} is not of type {<class>: <bit-vector>}

Object: Check
Name: Add 0 to empty set: Increases set size by 1
Status: passed
end

Object: Check
Name: Add 0 to empty set: Member of new set
Status: passed
end

Object: Check
Name: Add 0 to empty set: New set not empty
Status: passed
end

Object: Check
Name: Add 0 to empty set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add 100000 to empty set: Increases set size by 1
Status: passed
end

Object: Check
Name: Add 100000 to empty set: Member of new set
Status: passed
end

Object: Check
Name: Add 100000 to empty set: New set not empty
Status: passed
end

Object: Check
Name: Add 100000 to empty set: No change in (in)finiteness of set
Status: passed
end
end

Object: Test
Name: bit-set-add!
Status: passed

Object: Check
Name: Add! 0 to empty set: Modifies set
Status: passed
end

Object: Check
Name: Add! 0 to empty set: Increases set size by 1
Status: passed
end

Object: Check
Name: Add! 0 to empty set: Member of new set
Status: passed
end

Object: Check
Name: Add! 0 to empty set: New set not empty
Status: passed
end

Object: Check
Name: Add! 0 to empty set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 100000 to empty set: Modifies set
Status: passed
end

Object: Check
Name: Add! 100000 to empty set: Increases set size by 1
Status: passed
end

Object: Check
Name: Add! 100000 to empty set: Member of new set
Status: passed
end

Object: Check
Name: Add! 100000 to empty set: New set not empty
Status: passed
end

Object: Check
Name: Add! 100000 to empty set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 0 to universal set: Modifies set
Status: passed
end

Object: Check
Name: Add! 0 to universal set: Set size still #f
Status: passed
end

Object: Check
Name: Add! 0 to universal set: Member of new set
Status: passed
end

Object: Check
Name: Add! 0 to universal set: New set not empty
Status: passed
end

Object: Check
Name: Add! 0 to universal set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 100000 to universal set: Modifies set
Status: passed
end

Object: Check
Name: Add! 100000 to universal set: Set size still #f
Status: passed
end

Object: Check
Name: Add! 100000 to universal set: Member of new set
Status: passed
end

Object: Check
Name: Add! 100000 to universal set: New set not empty
Status: passed
end

Object: Check
Name: Add! 100000 to universal set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 56 to finite-set: Modifies set
Status: passed
end

Object: Check
Name: Add! 56 to finite-set: Increases set size by 1
Status: passed
end

Object: Check
Name: Add! 56 to finite-set: Member of new set
Status: passed
end

Object: Check
Name: Add! 56 to finite-set: New set not empty
Status: passed
end

Object: Check
Name: Add! 56 to finite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 209 to finite-set: Modifies set
Status: passed
end

Object: Check
Name: Add! 209 to finite-set: Increases set size by 1
Status: passed
end

Object: Check
Name: Add! 209 to finite-set: Member of new set
Status: passed
end

Object: Check
Name: Add! 209 to finite-set: New set not empty
Status: passed
end

Object: Check
Name: Add! 209 to finite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 10 to finite-set: Modifies set
Status: passed
end

Object: Check
Name: Add! 10 to finite-set: Doesn't increase set size
Status: passed
end

Object: Check
Name: Add! 10 to finite-set: Member of new set
Status: passed
end

Object: Check
Name: Add! 10 to finite-set: New set not empty
Status: passed
end

Object: Check
Name: Add! 10 to finite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 6 to infinite-set: Modifies set
Status: passed
end

Object: Check
Name: Add! 6 to infinite-set: Set size still #f
Status: passed
end

Object: Check
Name: Add! 6 to infinite-set: Member of new set
Status: passed
end

Object: Check
Name: Add! 6 to infinite-set: New set not empty
Status: passed
end

Object: Check
Name: Add! 6 to infinite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 378 to infinite-set: Modifies set
Status: passed
end

Object: Check
Name: Add! 378 to infinite-set: Set size still #f
Status: passed
end

Object: Check
Name: Add! 378 to infinite-set: Member of new set
Status: passed
end

Object: Check
Name: Add! 378 to infinite-set: New set not empty
Status: passed
end

Object: Check
Name: Add! 378 to infinite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Add! 76 to infinite-set: Modifies set
Status: passed
end

Object: Check
Name: Add! 76 to infinite-set: Set size still #f
Status: passed
end

Object: Check
Name: Add! 76 to infinite-set: Member of new set
Status: passed
end

Object: Check
Name: Add! 76 to infinite-set: New set not empty
Status: passed
end

Object: Check
Name: Add! 76 to infinite-set: No change in (in)finiteness of set
Status: passed
end
end

Object: Test
Name: bit-set-remove
Status: crashed
Reason: {<simple-object-vector>: size 0} is not of type {<class>: <bit-vector>}
end

Object: Test
Name: bit-set-remove!
Status: passed

Object: Check
Name: Remove! 0 from empty set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 0 from empty set: Doesn't decrease set size
Status: passed
end

Object: Check
Name: Remove! 0 from empty set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 0 from empty set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove! 100000 from empty set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 100000 from empty set: Doesn't decrease set size
Status: passed
end

Object: Check
Name: Remove! 100000 from empty set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 100000 from empty set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove! 0 from universal set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 0 from universal set: Set size still #f
Status: passed
end

Object: Check
Name: Remove! 0 from universal set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 0 from universal set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove! 100000 from universal set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 100000 from universal set: Set size still #f
Status: passed
end

Object: Check
Name: Remove! 100000 from universal set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 100000 from universal set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove! 30 from finite-set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 30 from finite-set: Decreases set size by 1
Status: passed
end

Object: Check
Name: Remove! 30 from finite-set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 30 from finite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove! 209 from finite-set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 209 from finite-set: Doesn't decrease set size
Status: passed
end

Object: Check
Name: Remove! 209 from finite-set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 209 from finite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove 5 from finite-set: Modifies set
Status: passed
end

Object: Check
Name: Remove 5 from finite-set: Doesn't decrease set size
Status: passed
end

Object: Check
Name: Remove 5 from finite-set: Not member of new set
Status: passed
end

Object: Check
Name: Remove 5 from finite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove! 2 from infinite-set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 2 from infinite-set: Set size still #f
Status: passed
end

Object: Check
Name: Remove! 2 from infinite-set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 2 from infinite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove! 378 from infinite-set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 378 from infinite-set: Set size still #f
Status: passed
end

Object: Check
Name: Remove! 378 from infinite-set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 378 from infinite-set: No change in (in)finiteness of set
Status: passed
end

Object: Check
Name: Remove! 75 from infinite-set: Modifies set
Status: passed
end

Object: Check
Name: Remove! 75 from infinite-set: Set size still #f
Status: passed
end

Object: Check
Name: Remove! 75 from infinite-set: Not member of new set
Status: passed
end

Object: Check
Name: Remove! 75 from infinite-set: No change in (in)finiteness of set
Status: passed
end
end

Object: Test
Name: bit-set-infinite
Status: passed

Object: Check
Name: Empty bit-set is finite
Status: passed
end

Object: Check
Name: Universal bit-set is infinite
Status: passed
end

Object: Check
Name: Finite bit-set is finite
Status: passed
end

Object: Check
Name: Infinite bit-set is infinite
Status: passed
end
end

Object: Test
Name: bit-set-empty
Status: passed

Object: Check
Name: Empty bit-set is empty
Status: passed
end

Object: Check
Name: Universal bit-set is not empty
Status: passed
end

Object: Check
Name: Finite bit-set is not empty
Status: passed
end

Object: Check
Name: Infinite bit-set is not empty
Status: passed
end
end

Object: Test
Name: bit-set-size
Status: passed

Object: Check
Name: Empty bit-set size is zero
Status: passed
end

Object: Check
Name: Universal bit-set size is #f
Status: passed
end

Object: Check
Name: Finite bit-set size is 7
Status: passed
end

Object: Check
Name: Infinite bit-set size is #f
Status: passed
end
end

Object: Test
Name: bit-set-union
Status: crashed
Reason: No applicable method, applying {<sealed-generic-function>: member-vector-setter} to {<simple-object-vector>: {<simple-object-vector>}, {<bit-set>}}.
end

Object: Test
Name: bit-set-intersection
Status: passed

Object: Check
Name: Intersect empty-set with itself
Status: passed
end

Object: Check
Name: Intersect empty-set with universal-set
Status: passed
end

Object: Check
Name: Intersect empty-set with finite-set
Status: passed
end

Object: Check
Name: Intersect empty-set with infinite-set
Status: passed
end

Object: Check
Name: Intersect universal-set with itself
Status: passed
end

Object: Check
Name: Intersect universal-set with finite-set
Status: passed
end

Object: Check
Name: Intersect universal-set with infinite-set
Status: passed
end

Object: Check
Name: Intersect finite-set with itself
Status: passed
end

Object: Check
Name: Intersect finite-set with infinite-set
Status: passed
end

Object: Check
Name: Intersect infinite-set with itself
Status: passed
end
end

Object: Test
Name: bit-set-difference
Status: passed

Object: Check
Name: Difference empty-set with itself
Status: passed
end

Object: Check
Name: Difference empty-set with universal-set
Status: passed
end

Object: Check
Name: Difference empty-set with finite-set
Status: passed
end

Object: Check
Name: Difference empty-set with infinite-set
Status: passed
end

Object: Check
Name: Difference universal-set with itself
Status: passed
end

Object: Check
Name: Difference universal-set with finite-set
Status: passed
end

Object: Check
Name: Difference universal-set with infinite-set
Status: passed
end

Object: Check
Name: Difference finite-set with itself
Status: passed
end

Object: Check
Name: Difference finite-set with infinite-set
Status: passed
end

Object: Check
Name: Difference infinite-set with itself
Status: passed
end
end

Object: Test
Name: bit-set-complement
Status: passed

Object: Check
Name: Complement of empty-set is the universal set
Status: passed
end

Object: Check
Name: Complement of universal-set is the empty set
Status: passed
end

Object: Check
Name: Complement of finite-set is correct
Status: passed
end

Object: Check
Name: Complement of complement of finite-set is finite-set
Status: passed
end

Object: Check
Name: Complement of infinite-set is correct
Status: passed
end

Object: Check
Name: Complement of complement of infinite-set is infinite-set
Status: passed
end
end

Object: Test
Name: bit-set-union!
Status: crashed
Reason: No applicable method, applying {<sealed-generic-function>: member-vector-setter} to {<simple-object-vector>: {<simple-object-vector>}, {<bit-set>}}.
end

Object: Test
Name: bit-set-intersection!
Status: passed

Object: Check
Name: Intersect! empty-set with itself: =
Status: passed
end

Object: Check
Name: Intersect! empty-set with itself: ==
Status: passed
end

Object: Check
Name: Intersect! empty-set with finite-set: =
Status: passed
end

Object: Check
Name: Intersect! empty-set with finite-set: ==
Status: passed
end

Object: Check
Name: Intersect! empty-set with infinite-set: =
Status: passed
end

Object: Check
Name: Intersect! empty-set with infinite-set: ==
Status: passed
end

Object: Check
Name: Intersect! empty-set with universal-set: =
Status: passed
end

Object: Check
Name: Intersect! empty-set with universal-set: ==
Status: passed
end

Object: Check
Name: Intersect! universal-set with itself: =
Status: passed
end

Object: Check
Name: Intersect! universal-set with itself: ==
Status: passed
end

Object: Check
Name: Intersect! universal-set with finite-set: =
Status: passed
end

Object: Check
Name: Intersect! universal-set with finite-set: ==
Status: passed
end

Object: Check
Name: Intersect! universal-set with infinite-set: =
Status: passed
end

Object: Check
Name: Intersect! universal-set with infinite-set: ==
Status: passed
end

Object: Check
Name: Intersect! finite-set with itself: =
Status: passed
end

Object: Check
Name: Intersect! finite-set with itself: ==
Status: passed
end

Object: Check
Name: Intersect! infinite-set with itself: =
Status: passed
end

Object: Check
Name: Intersect! infinite-set with itself: ==
Status: passed
end
end

Object: Test
Name: bit-set-difference!
Status: passed

Object: Check
Name: Difference! empty-set with itself: =
Status: passed
end

Object: Check
Name: Difference! empty-set with itself: ==
Status: passed
end

Object: Check
Name: Difference! empty-set with finite-set: =
Status: passed
end

Object: Check
Name: Difference! empty-set with finite-set: ==
Status: passed
end

Object: Check
Name: Difference! empty-set with infinite-set: =
Status: passed
end

Object: Check
Name: Difference! empty-set with infinite-set: ==
Status: passed
end

Object: Check
Name: Difference! empty-set with universal-set: =
Status: passed
end

Object: Check
Name: Difference! empty-set with universal-set: ==
Status: passed
end

Object: Check
Name: Difference! universal-set with finite-set: =
Status: passed
end

Object: Check
Name: Difference! universal-set with finite-set: ==
Status: passed
end

Object: Check
Name: Difference! universal-set with infinite-set: =
Status: passed
end

Object: Check
Name: Difference! universal-set with infinite-set: ==
Status: passed
end

Object: Check
Name: Difference! universal-set with itself: =
Status: passed
end

Object: Check
Name: Difference! universal-set with itself: ==
Status: passed
end

Object: Check
Name: Difference! finite-set with itself: =
Status: passed
end

Object: Check
Name: Difference! finite-set with itself: ==
Status: passed
end

Object: Check
Name: Difference! infinite-set with itself: =
Status: passed
end

Object: Check
Name: Difference! infinite-set with itself: ==
Status: passed
end
end

Object: Test
Name: bit-set-complement!
Status: passed

Object: Check
Name: Complement! of empty-set: =
Status: passed
end

Object: Check
Name: Complement! of empty-set: ==
Status: passed
end

Object: Check
Name: Complement of universal-set: =
Status: passed
end

Object: Check
Name: Complement of universal-set: ==
Status: passed
end

Object: Check
Name: Complement of finite-set: =
Status: passed
end

Object: Check
Name: Complement of finite-set: ==
Status: passed
end

Object: Check
Name: Complement of complement of finite-set: =
Status: passed
end

Object: Check
Name: Complement of complement of finite-set: ==
Status: passed
end

Object: Check
Name: Complement of infinite-set is: =
Status: passed
end

Object: Check
Name: Complement of infinite-set is: ==
Status: passed
end

Object: Check
Name: Complement of complement of infinite-set: =
Status: passed
end

Object: Check
Name: Complement of complement of infinite-set: ==
Status: passed
end
end

Object: Test
Name: bit-set-copy
Status: crashed
Reason: No applicable method, applying {<sealed-generic-function>: member-vector-setter} to {<simple-object-vector>: {<simple-object-vector>}, {<bit-set>}}.
end

Object: Test
Name: bit-set-force-empty
Status: passed

Object: Check
Name: empty-set is now empty
Status: passed
end

Object: Check
Name: universal-set is now empty
Status: passed
end

Object: Check
Name: finite-set is now empty
Status: passed
end

Object: Check
Name: infinite-set is now empty
Status: passed
end
end

Object: Test
Name: bit-set-force-universal
Status: passed

Object: Check
Name: empty-set is now universal
Status: passed
end

Object: Check
Name: universal-set is now universal
Status: passed
end

Object: Check
Name: finite-set is now universal
Status: passed
end

Object: Check
Name: infinite-set is now universal
Status: passed
end
end

Object: Test
Name: bit-set-iteration
Status: passed

Object: Check
Name: Iterating over the empty set
Status: passed
end

Object: Check
Name: Iterating over the universal set
Status: passed
end

Object: Check
Name: Iterating over a finite set
Status: passed
end

Object: Check
Name: Iterating over an infinite set
Status: passed
end

Object: Check
Name: Backwards iteration over the empty set
Status: passed
end

Object: Check
Name: Backwards iteration over a finite set
Status: passed
end
end

Object: Test
Name: bit-set-laws
Status: passed

Object: Check
Name: Empty set law 1
Status: passed
end

Object: Check
Name: Empty set law 2
Status: passed
end

Object: Check
Name: Idempotency law 1
Status: passed
end

Object: Check
Name: Idempotency law 2
Status: passed
end

Object: Check
Name: Empty set law 1
Status: passed
end

Object: Check
Name: Empty set law 2
Status: passed
end

Object: Check
Name: Idempotency law 1
Status: passed
end

Object: Check
Name: Idempotency law 2
Status: passed
end

Object: Check
Name: Empty set law 1
Status: passed
end

Object: Check
Name: Empty set law 2
Status: passed
end

Object: Check
Name: Idempotency law 1
Status: passed
end

Object: Check
Name: Idempotency law 2
Status: passed
end

Object: Check
Name: Commutative law 1
Status: passed
end

Object: Check
Name: Commutative law 2
Status: passed
end

Object: Check
Name: Absorption law 1
Status: passed
end

Object: Check
Name: Absorption law 2
Status: passed
end

Object: Check
Name: Commutative law 1
Status: passed
end

Object: Check
Name: Commutative law 2
Status: passed
end

Object: Check
Name: Absorption law 1
Status: passed
end

Object: Check
Name: Absorption law 2
Status: passed
end

Object: Check
Name: Commutative law 1
Status: passed
end

Object: Check
Name: Commutative law 2
Status: passed
end

Object: Check
Name: Absorption law 1
Status: passed
end

Object: Check
Name: Absorption law 2
Status: passed
end

Object: Check
Name: Associative law 1
Status: passed
end

Object: Check
Name: Associative law 2
Status: passed
end

Object: Check
Name: Distributive law 1
Status: passed
end

Object: Check
Name: Distributive law 2
Status: passed
end

Object: Check
Name: DeMorgan's law 1
Status: passed
end

Object: Check
Name: DeMorgan's law 2
Status: passed
end

Object: Check
Name: Associative law 1
Status: passed
end

Object: Check
Name: Associative law 2
Status: passed
end

Object: Check
Name: Distributive law 1
Status: passed
end

Object: Check
Name: Distributive law 2
Status: passed
end

Object: Check
Name: DeMorgan's law 1
Status: passed
end

Object: Check
Name: DeMorgan's law 2
Status: passed
end

Object: Check
Name: Associative law 1
Status: passed
end

Object: Check
Name: Associative law 2
Status: passed
end

Object: Check
Name: Distributive law 1
Status: passed
end

Object: Check
Name: Distributive law 2
Status: passed
end

Object: Check
Name: DeMorgan's law 1
Status: passed
end

Object: Check
Name: DeMorgan's law 2
Status: passed
end

Object: Check
Name: Associative law 1
Status: passed
end

Object: Check
Name: Associative law 2
Status: passed
end

Object: Check
Name: Distributive law 1
Status: passed
end

Object: Check
Name: Distributive law 2
Status: passed
end

Object: Check
Name: DeMorgan's law 1
Status: passed
end

Object: Check
Name: DeMorgan's law 2
Status: passed
end

Object: Check
Name: Associative law 1
Status: passed
end

Object: Check
Name: Associative law 2
Status: passed
end

Object: Check
Name: Distributive law 1
Status: passed
end

Object: Check
Name: Distributive law 2
Status: passed
end

Object: Check
Name: DeMorgan's law 1
Status: passed
end

Object: Check
Name: DeMorgan's law 2
Status: passed
end

Object: Check
Name: Associative law 1
Status: passed
end

Object: Check
Name: Associative law 2
Status: passed
end

Object: Check
Name: Distributive law 1
Status: passed
end

Object: Check
Name: Distributive law 2
Status: passed
end

Object: Check
Name: DeMorgan's law 1
Status: passed
end

Object: Check
Name: DeMorgan's law 2
Status: passed
end
end
end

Object: Suite
Name: bit-vector-test-suite
Status: failed

Object: Suite
Name: bit-vector-elements-suite
Status: passed

Object: Test
Name: bit-vector-elements-tiny-vector
Status: passed

Object: Check
Name: Make tiny vector1: expected size
Status: passed
end

Object: Check
Name: Make tiny vector1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Make tiny vector2: expected size
Status: passed
end

Object: Check
Name: Make tiny vector2: expect all elements to be zero
Status: passed
end

Object: Check
Name: Make tiny vector3: expected size
Status: passed
end

Object: Check
Name: Make tiny vector3: expect all elements to be one
Status: passed
end

Object: Check
Name: Bit 0 of vector1 to 1
Status: passed
end

Object: Check
Name: Only bit 0 set: expected size
Status: passed
end

Object: Check
Name: Only bit 0 set: expected elements
Status: passed
end

Object: Check
Name: Bit 10 of vector1 to 1
Status: passed
end

Object: Check
Name: Only bits 0 and 10 set: expected size
Status: passed
end

Object: Check
Name: Only bits 0 and 10 set: expected elements
Status: passed
end

Object: Check
Name: Bit 7 of vector1 to 1
Status: passed
end

Object: Check
Name: Only bits 0, 10 and 7 set: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 10 and 7 set: expected elements
Status: passed
end

Object: Check
Name: Bit 0 of vector1 to 1 again
Status: passed
end

Object: Check
Name: Only bits 0, 7 and 10 set: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 7 and 10 set: expected elements
Status: passed
end

Object: Check
Name: Bit 2 of vector1 to 0
Status: passed
end

Object: Check
Name: Only bits 0, 7 and 10 set: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 7 and 10 set: expected elements
Status: passed
end

Object: Check
Name: Bit 7 of vector1 to 1 again
Status: passed
end

Object: Check
Name: Only bits 0, 7 and 10 set: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 7 and 10 set: expected elements
Status: passed
end

Object: Check
Name: Bit 10 of vector1 to 1 again
Status: passed
end

Object: Check
Name: Only bits 0, 7 and 10 set: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 7 and 10 set: expected elements
Status: passed
end

Object: Check
Name: Bit 0 of vector3 to 0
Status: passed
end

Object: Check
Name: Only bit 0 unset: expected size
Status: passed
end

Object: Check
Name: Only bit 0 unset: expected elements
Status: passed
end

Object: Check
Name: Bit 10 of vector3 to 0
Status: passed
end

Object: Check
Name: Only bits 0 and 10 unset: expected size
Status: passed
end

Object: Check
Name: Only bits 0 and 10 unset: expected elements
Status: passed
end

Object: Check
Name: Bit 4 of vector3 to 0
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected elements
Status: passed
end

Object: Check
Name: Bit 0 of vector3 to 0 again
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected elements
Status: passed
end

Object: Check
Name: Bit 4 of vector3 to 0 again
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected elements
Status: passed
end

Object: Check
Name: Bit 5 of vector3 to 1
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected elements
Status: passed
end

Object: Check
Name: Bit 10 of vector1 to 0 again
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected size
Status: passed
end

Object: Check
Name: Only bits 0, 4 and 10 unset: expected elements
Status: passed
end
end
end

Object: Suite
Name: fill-suite
Status: passed

Object: Test
Name: fill-tiny-vector
Status: passed

Object: Check
Name: fill!(vector, 1, start: 6, end: 9)
Status: passed
end

Object: Check
Name: fill!(vector, 1, start:6, end: 9): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 1, start:6, end: 9): expected elements
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 4)
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 4: expected size
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 4: expected elements
Status: passed
end

Object: Check
Name: fill!(vector, 0, end: 7)
Status: passed
end

Object: Check
Name: fill!(vector, 0, end: 7): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 0, end: 7): expected elements
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 0, end: $tiny-size)
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 0, end: $tiny-size): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 0, end: $tiny-size): expect all elements to be zero
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 0, end: 8)
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 0, end: 8): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 0, end: 8): expected elements
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 6, end: $tiny-size)
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 6, end: $tiny-size): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 6, end: $tiny-size): expect all elements to be one
Status: passed
end

Object: Check
Name: fill!(vector, 0)
Status: passed
end

Object: Check
Name: fill!(vector, 0): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 0): expect all elements to be zero
Status: passed
end
end

Object: Test
Name: fill-huge-vector
Status: passed

Object: Check
Name: fill!(vector, 1, start: 28, end: 35)
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 28, end: 35): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 28, end: 35): expected elements
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 32)
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 32: expected size
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 32: expected elements
Status: passed
end

Object: Check
Name: fill!(vector, 1, end: 32)
Status: passed
end

Object: Check
Name: fill!(vector, 1, end: 32): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 1, end: 32): expected elements
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 0, end: $huge-size)
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 0, end: $huge-size): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 0, start: 0, end: $huge-size): expect all elements to be zero
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 0, end: 35)
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 0, end: 35): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 0, end: 35): expected elements
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 35, end: $huge-size)
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 35, end: $huge-size): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 1, start: 35, end: $huge-size): expect all elements to be one
Status: passed
end

Object: Check
Name: fill!(vector, 0)
Status: passed
end

Object: Check
Name: fill!(vector, 0): expected size
Status: passed
end

Object: Check
Name: fill!(vector, 0): expect all elements to be zero
Status: passed
end
end
end

Object: Suite
Name: copy-sequence-suite
Status: failed

Object: Test
Name: copy-sequence-tiny-vector
Status: crashed
Reason: {<simple-object-vector>: 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, ...} is not of type {<class>: <bit-vector>}
end

Object: Test
Name: copy-sequence-huge-vector
Status: crashed
Reason: {<simple-object-vector>: 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, ...} is not of type {<class>: <bit-vector>}
end
end

Object: Suite
Name: bit-vector-and-suite
Status: passed

Object: Test
Name: bit-vector-and-tiny-vector
Status: passed

Object: Check
Name: And two all-zero vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And two all-zero vectors, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And two all-one vectors, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And an all-one and all-zero vector, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And an all-zero and all-one vector, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And an all-zero and mixed vector, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And a mixed and all-zero vector, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And an all-one and mixed vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And a mixed and all-one vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: And two vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And two vectors, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: And two vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And two vectors, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: And two vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And two vectors, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: And two vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And two vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And two vectors, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: And two vectors again, arguments reversed, pad1=1, pad2=1: expected elements
Status: passed
end
end
end

Object: Suite
Name: bit-vector-andc2-suite
Status: passed

Object: Test
Name: bit-vector-andc2-tiny-vector
Status: passed

Object: Check
Name: Andc2 two all-zero vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 two all-zero vectors, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 two all-one vectors, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-one and all-zero vector, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-zero and all-one vector, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-zero and mixed vector, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-zero vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 an all-one and mixed vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 a mixed and all-one vector, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 two vectors, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Andc2 two vectors again, arguments reversed, pad1=1, pad2=1: expected elements
Status: passed
end
end
end

Object: Suite
Name: bit-vector-or-suite
Status: passed

Object: Test
Name: bit-vector-or-tiny-vector
Status: passed

Object: Check
Name: Or two all-zero vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or two all-zero vectors, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or two all-one vectors, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or an all-one and all-zero vector, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or an all-zero and all-one vector, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or an all-zero and mixed vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or a mixed and all-zero vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or an all-one and mixed vector, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or a mixed and all-one vector, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Or two vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or two vectors, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Or two vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or two vectors, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Or two vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or two vectors, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Or two vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or two vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or two vectors, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Or two vectors again, arguments reversed, pad1=1, pad2=1: expected elements
Status: passed
end
end
end

Object: Suite
Name: bit-vector-xor-suite
Status: passed

Object: Test
Name: bit-vector-xor-tiny-vector
Status: passed

Object: Check
Name: Xor two all-zero vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor two all-zero vectors, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=0, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=0, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=1, pad2=0: expect all elements to be zero
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor two all-one vectors, pad1=1, pad2=1: expect all elements to be zero
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor an all-one and all-zero vector, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=0, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=0, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=1, pad2=0: expect all elements to be one
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor an all-zero and all-one vector, pad1=1, pad2=1: expect all elements to be one
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor an all-zero and mixed vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor a mixed and all-zero vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor an all-one and mixed vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor a mixed and all-one vector, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor two vectors, pad1=1, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=0, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=0, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=0, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=0, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=0, pad2=1: expected elements
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=1, pad2=0: result pad
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=1, pad2=0: expected size
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=1, pad2=0: expected elements
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=1, pad2=1: result pad
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=1, pad2=1: expected size
Status: passed
end

Object: Check
Name: Xor two vectors again, arguments reversed, pad1=1, pad2=1: expected elements
Status: passed
end
end
end

Object: Suite
Name: bit-vector-not-suite
Status: passed

Object: Test
Name: bit-vector-not-empty-vector
Status: passed

Object: Check
Name: Empty vector with pad 0: size(bit-vector-not(vector)) is 0
Status: passed
end

Object: Check
Name: Empty vector with pad 0, bit-vector-not(vector) pad is 1
Status: passed
end

Object: Check
Name: Empty vector with pad 1, size(bit-vector-not(vector) is 0
Status: passed
end

Object: Check
Name: Empty vector with pad 1, bit-vector-not(vector) pad is 0
Status: passed
end
end

Object: Test
Name: bit-vector-not!-empty-vector
Status: passed

Object: Check
Name: Empty vector with pad 0: bit-vector-not!(vector) == vector
Status: passed
end

Object: Check
Name: Empty vector with pad 0: size(bit-vector-not!(vector)) = 0
Status: passed
end

Object: Check
Name: Empty vector with pad 0: bit-vector-not!(vector), pad is 1
Status: passed
end

Object: Check
Name: Empty vector with pad 1: bit-vector-not!(vector) == vector
Status: passed
end

Object: Check
Name: Empty vector with pad 1: size(bit-vector-not!(vector)) = 0
Status: passed
end

Object: Check
Name: Empty vector with pad 1: bit-vector-not!(vector) pad is 0
Status: passed
end
end

Object: Test
Name: bit-vector-not-tiny-vector
Status: passed

Object: Check
Name: bit-vector-not of an all-zero vector with default pad: expected size
Status: passed
end

Object: Check
Name: bit-vector-not of an all-zero vector with default pad: expect all elements to be one
Status: passed
end

Object: Check
Name: bit-vector-not of an all-zero vector with default pad: expected pad value
Status: passed
end

Object: Check
Name: bit-vector-not of an all-zero vector with pad = 1: expected size
Status: passed
end

Object: Check
Name: bit-vector-not of an all-zero vector with pad = 1: expect all elements to be one
Status: passed
end

Object: Check
Name: bit-vector-not of an all-zero vector with pad = 1: expected pad value
Status: passed
end

Object: Check
Name: bit-vector-not of an all-one vector with pad = 0: expected size
Status: passed
end

Object: Check
Name: bit-vector-not of an all-one vector with pad = 0: expect all elements to be zero
Status: passed
end

Object: Check
Name: bit-vector-not of an all-one vector with pad = 0: expected pad value
Status: passed
end

Object: Check
Name: bit-vector-not of an all-one vector with pad = 1: expected size
Status: passed
end

Object: Check
Name: bit-vector-not of an all-one vector with pad = 1: expect all elements to be zero
Status: passed
end

Object: Check
Name: bit-vector-not of an all-one vector with pad = 1: expected pad value
Status: passed
end

Object: Check
Name: bit-vector-not of a vector with default pad: expected size
Status: passed
end

Object: Check
Name: bit-vector-not of a vector with default pad: expected elements
Status: passed
end

Object: Check
Name: bit-vector-not of a vector with default pad: expected pad value
Status: passed
end

Object: Check
Name: bit-vector-not of a vector with pad = 1: expected size
Status: passed
end

Object: Check
Name: bit-vector-not of a vector with pad = 1: expected elements
Status: passed
end

Object: Check
Name: bit-vector-not of a vector with pad = 1: expected pad value
Status: passed
end
end

Object: Test
Name: bit-vector-not!-tiny-vector
Status: passed

Object: Check
Name: With default pad, bit-vector-not!(vector1) == vector1
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-zero vector with default pad: expected size
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-zero vector with default pad: expect all elements to be one
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-zero vector with default pad: expected pad value
Status: passed
end

Object: Check
Name: With pad = 1, bit-vector-not!(vector2) == vector2
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-zero vector with pad = 1: expected size
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-zero vector with pad = 1: expect all elements to be one
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-zero vector with pad = 1: expected pad value
Status: passed
end

Object: Check
Name: With pad = 0, bit-vector-not!(vector1) == vector1
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-one vector with pad = 0: expected size
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-one vector with pad = 0: expect all elements to be zero
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-one vector with pad = 0: expected pad value
Status: passed
end

Object: Check
Name: With pad = 1, bit-vector-not!(vector2) == vector2
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-one vector with pad = 1: expected size
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-one vector with pad = 1: expect all elements to be zero
Status: passed
end

Object: Check
Name: bit-vector-not! of an all-one vector with pad = 1: expected pad value
Status: passed
end

Object: Check
Name: With default pad, bit-vector-not!(vector3) == vector3
Status: passed
end

Object: Check
Name: bit-vector-not! of a vector with default pad: expected size
Status: passed
end

Object: Check
Name: bit-vector-not! of a vector with default pad: expected elements
Status: passed
end

Object: Check
Name: bit-vector-not! of a vector with default pad: expected pad value
Status: passed
end

Object: Check
Name: With pad = 1, bit-vector-not!(vector3) == vector3
Status: passed
end

Object: Check
Name: bit-vector-not! of a vector with pad = 1: expected size
Status: passed
end

Object: Check
Name: bit-vector-not! of a vector with pad = 1: expected elements
Status: passed
end

Object: Check
Name: bit-vector-not! of a vector with pad = 1: expected pad value
Status: passed
end
end

Object: Test
Name: bit-vector-not-huge-vector
Status: passed
end

Object: Test
Name: bit-vector-not!-huge-vector
Status: passed
end

Object: Test
Name: bit-vector-not-multiple-word-sized-vector
Status: passed
end

Object: Test
Name: bit-vector-not!-multiple-word-sized-vector
Status: passed
end
end

Object: Suite
Name: bit-count-suite
Status: passed

Object: Test
Name: bit-count-empty-vector
Status: passed

Object: Check
Name: bit-count(empty-vector) = 0
Status: passed
end

Object: Check
Name: bit-count(empty-vector, bit-value: 0) = 0
Status: passed
end

Object: Check
Name: bit-count(empty-vector, bit-value: 1) = 0
Status: passed
end
end

Object: Test
Name: bit-count-tiny-vector
Status: passed

Object: Check
Name: Count bits in tiny vector
Status: passed
end

Object: Check
Name: Count zero bits in tiny vector
Status: passed
end

Object: Check
Name: Count one bits in tiny vector
Status: passed
end
end

Object: Test
Name: bit-count-huge-vector
Status: passed

Object: Check
Name: Count bits in huge vector
Status: passed
end

Object: Check
Name: Count zero bits in huge vector
Status: passed
end

Object: Check
Name: Count one bits in huge vector
Status: passed
end
end

Object: Test
Name: bit-count-multiple-word-sized-vector
Status: passed

Object: Check
Name: Count bits in multiple-word sized vector
Status: passed
end

Object: Check
Name: Count zero bits in multiple-word sized vector
Status: passed
end

Object: Check
Name: Count one bits in multiple-word sized vector
Status: passed
end
end
end
end
end

Object: Suite
Name: io-test-suite
Status: passed

Object: Suite
Name: format-test-suite
Status: passed

Object: Test
Name: basic-format
Status: passed

Object: Check
Name: format with no operators
Status: passed
end

Object: Check
Name: format with %%
Status: passed
end

Object: Check
Name: Missing format operator
Status: passed
end

Object: Check
Name: Invalid format operator
Status: passed
end
end

Object: Test
Name: decimal-control-strings
Status: passed

Object: Check
Name: format %d with a positive integer
Status: passed
end

Object: Check
Name: format %d with a negative integer
Status: passed
end
end

Object: Test
Name: binary-control-strings
Status: passed

Object: Check
Name: format %b with a positive integer
Status: passed
end

Object: Check
Name: format %b with a negative integer
Status: passed
end
end

Object: Test
Name: octal-control-strings
Status: passed

Object: Check
Name: format %o with a positive integer
Status: passed
end

Object: Check
Name: format %o with a negative integer
Status: passed
end
end

Object: Test
Name: hex-control-strings
Status: passed

Object: Check
Name: format %x with a positive integer
Status: passed
end

Object: Check
Name: format %x with a negative integer
Status: passed
end
end

Object: Test
Name: multiple-basic-control-strings
Status: passed

Object: Check
Name: multiple control strings 1
Status: passed
end

Object: Check
Name: multiple control strings 2
Status: passed
end

Object: Check
Name: multiple control strings 3
Status: passed
end
end

Object: Test
Name: existing-string-messages
Status: passed

Object: Check
Name: format %s with a string
Status: passed
end

Object: Check
Name: format %s with a symbol
Status: passed
end

Object: Check
Name: format %s with a character
Status: passed
end
end
end

Object: Suite
Name: print-test-suite
Status: passed

Object: Suite
Name: print-module-test-suite
Status: passed

Object: Suite
Name: print-protocol-test-suite
Status: passed

Object: Test
Name: print-protocol-constants-test
Status: passed
end

Object: Test
Name: print-protocol-variables-test
Status: passed

Object: Check
Name: Variable *print-circle?* has the correct type
Status: passed
end

Object: Check
Name: Variable *print-circle?* can be set to itself
Status: passed
end

Object: Check
Name: Variable *print-escape?* has the correct type
Status: passed
end

Object: Check
Name: Variable *print-escape?* can be set to itself
Status: passed
end

Object: Check
Name: Variable *print-pretty?* has the correct type
Status: passed
end

Object: Check
Name: Variable *print-pretty?* can be set to itself
Status: passed
end

Object: Check
Name: Variable *print-level* has the correct type
Status: passed
end

Object: Check
Name: Variable *print-level* can be set to itself
Status: passed
end

Object: Check
Name: Variable *print-length* has the correct type
Status: passed
end

Object: Check
Name: Variable *print-length* can be set to itself
Status: passed
end
end

Object: Test
Name: print-protocol-classes-test
Status: passed
end

Object: Test
Name: print-protocol-functions-test
Status: passed

Object: Check
Name: Variable print-to-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: a character
Status: passed
end

Object: Check
Name: an escape character
Status: passed
end

Object: Check
Name: \
Status: passed
end

Object: Check
Name: a string
Status: passed
end

Object: Check
Name: a string with escape character
Status: passed
end

Object: Check
Name: \ for strings
Status: passed
end

Object: Check
Name: #t
Status: passed
end

Object: Check
Name: #f
Status: passed
end

Object: Check
Name: integer
Status: passed
end

Object: Check
Name: negative integer
Status: passed
end

Object: Check
Name: print-to-string <object> returns string
Status: passed
end

Object: Check
Name: print <object> matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string class returns string
Status: passed
end

Object: Check
Name: print class matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string make(class) returns string
Status: passed
end

Object: Check
Name: print make(class) matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string list returns string
Status: passed
end

Object: Check
Name: print list matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string list returns string
Status: passed
end

Object: Check
Name: print list matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string function returns string
Status: passed
end

Object: Check
Name: print function matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string range returns string
Status: passed
end

Object: Check
Name: print range matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string symbol returns string
Status: passed
end

Object: Check
Name: print symbol matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string singleton(3) returns string
Status: passed
end

Object: Check
Name: print singleton(3) matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string false-or(<integer>) returns string
Status: passed
end

Object: Check
Name: print false-or(<integer>) matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string limited <integer> returns string
Status: passed
end

Object: Check
Name: print limited <integer> matches print-to-string
Status: passed
end

Object: Check
Name: print-to-string type-union returns string
Status: passed
end

Object: Check
Name: print type-union matches print-to-string
Status: passed
end

Object: Check
Name: testing print-object for <test-class>
Status: passed
end

Object: Check
Name: test empty <test-class>
Status: passed
end

Object: Check
Name: print-to-string print circular list returns string
Status: passed
end

Object: Check
Name: print print circular list matches print-to-string
Status: passed
end

Object: Check
Name: Variable print-object is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable print is a function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: print-protocol-macros-test
Status: passed
end
end
end

Object: Suite
Name: pprint-module-test-suite
Status: passed

Object: Suite
Name: pprint-protocol-test-suite
Status: passed

Object: Test
Name: pprint-protocol-constants-test
Status: passed
end

Object: Test
Name: pprint-protocol-variables-test
Status: passed

Object: Check
Name: Variable *print-miser-width* has the correct type
Status: passed
end

Object: Check
Name: Variable *print-miser-width* can be set to itself
Status: passed
end

Object: Check
Name: Variable *default-line-length* has the correct type
Status: passed
end

Object: Check
Name: Variable *default-line-length* can be set to itself
Status: passed
end
end

Object: Test
Name: pprint-protocol-classes-test
Status: passed

Object: Check
Name: Variable <pretty-stream> is a class
Status: passed
end

Object: Check
Name: Variable <pretty-stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<pretty-stream>) errors because not instantiable
Status: passed
end
end

Object: Test
Name: pprint-protocol-functions-test
Status: passed

Object: Check
Name: Variable pprint-logical-block is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pprint-tab is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pprint-indent is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pprint-newline is a function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: pprint-protocol-macros-test
Status: passed
end
end
end
end

Object: Suite
Name: streams-test-suite
Status: passed

Object: Suite
Name: streams-module-test-suite
Status: passed

Object: Suite
Name: streams-protocol-test-suite
Status: passed

Object: Test
Name: streams-protocol-constants-test
Status: passed

Object: Check
Name: Constant <byte> has the correct type
Status: passed
end

Object: Check
Name: Constant <buffer-index> has the correct type
Status: passed
end

Object: Check
Name: Constant <byte-character> has the correct type
Status: passed
end
end

Object: Test
Name: streams-protocol-variables-test
Status: passed
end

Object: Test
Name: streams-protocol-classes-test
Status: passed

Object: Check
Name: Variable <byte-vector> is a class
Status: passed
end

Object: Check
Name: Variable <byte-vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <byte-vector> with required arguments
Status: passed
end

Object: Check
Name: Variable <wrapper-stream> is a class
Status: passed
end

Object: Check
Name: Variable <wrapper-stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make <wrapper-stream> with required arguments
Status: passed
end

Object: Check
Name: Variable <invalid-file-permissions-error> is a class
Status: passed
end

Object: Check
Name: Variable <invalid-file-permissions-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<invalid-file-permissions-error>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <buffer> is a class
Status: passed
end

Object: Check
Name: Variable <buffer> has the correct superclasses
Status: passed
end

Object: Check
Name: make <buffer> with required arguments
Status: passed
end

Object: Check
Name: Variable <file-does-not-exist-error> is a class
Status: passed
end

Object: Check
Name: Variable <file-does-not-exist-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<file-does-not-exist-error>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <file-exists-error> is a class
Status: passed
end

Object: Check
Name: Variable <file-exists-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<file-exists-error>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <stream-position> is a class
Status: passed
end

Object: Check
Name: Variable <stream-position> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<stream-position>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <end-of-stream-error> is a class
Status: passed
end

Object: Check
Name: Variable <end-of-stream-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<end-of-stream-error>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <incomplete-read-error> is a class
Status: passed
end

Object: Check
Name: Variable <incomplete-read-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<incomplete-read-error>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <file-error> is a class
Status: passed
end

Object: Check
Name: Variable <file-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<file-error>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <byte-string-stream> is a class
Status: passed
end

Object: Check
Name: Variable <byte-string-stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make <byte-string-stream> with required arguments
Status: passed
end

Object: Check
Name: Variable <string-stream> is a class
Status: passed
end

Object: Check
Name: Variable <string-stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make <string-stream> with required arguments
Status: passed
end

Object: Check
Name: Variable <sequence-stream> is a class
Status: passed
end

Object: Check
Name: Variable <sequence-stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make <sequence-stream> with required arguments
Status: passed
end

Object: Check
Name: Variable <buffered-stream> is a class
Status: passed
end

Object: Check
Name: Variable <buffered-stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<buffered-stream>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <file-stream> is a class
Status: passed
end

Object: Check
Name: Variable <file-stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make <file-stream> with required arguments
Status: passed
end

Object: Check
Name: Variable <positionable-stream> is a class
Status: passed
end

Object: Check
Name: Variable <positionable-stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<positionable-stream>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <stream> is a class
Status: passed
end

Object: Check
Name: Variable <stream> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<stream>) errors because not instantiable
Status: passed
end
end

Object: Test
Name: streams-protocol-functions-test
Status: passed

Object: Check
Name: Variable stream-at-end? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-lock-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-element-type is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-lock is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable peek is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable discard-output is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable discard-input is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable read-to-end is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable unread-element is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable read-to is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable read-through is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable get-input-buffer is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable outer-stream is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable new-line is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-for-file-stream is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-contents is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable read-line-into! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-size is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable read-line is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable synchronize-output is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-position-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable write-line is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-release-output-buffer is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-for-sequence-stream is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-position is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable write-element is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable release-output-buffer is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable inner-stream is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable adjust-stream-position is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-release-input-buffer is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable buffer-end is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable skip-through is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable buffer-next is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable read-into! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable release-input-buffer is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-next-output-buffer is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable copy-into-buffer! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable write is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable read-element is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable next-output-buffer is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-next-input-buffer is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable close is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable next-input-buffer is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable buffer-subsequence is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable copy-from-buffer! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable buffer-next-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable buffer-end-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable force-output is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable outer-stream-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-input-available-at-source? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable input-available-at-source? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-open? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-get-output-buffer is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable stream-input-available? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable inner-stream-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable get-output-buffer is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable read is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-get-input-buffer is a generic-function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: streams-protocol-macros-test
Status: passed
end
end
end

Object: Suite
Name: universal-streams-suite
Status: passed

Object: Test
Name: test-line-functions
Status: passed

Object: Check
Name: read-line
Status: passed
end

Object: Check
Name: write line worked?
Status: passed
end

Object: Check
Name: read-write read check
Status: passed
end

Object: Check
Name: read-write write check
Status: passed
end

Object: Check
Name: read-line
Status: passed
end

Object: Check
Name: write line worked?
Status: passed
end

Object: Check
Name: read-write read check
Status: passed
end

Object: Check
Name: read-write write check
Status: passed
end
end

Object: Test
Name: test-string-stream
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: test-empty-string-stream
Status: passed

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end
end

Object: Test
Name: test-sequence-stream
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: test-empty-sequence-stream
Status: passed

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end
end

Object: Test
Name: test-byte-string-stream
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: test-file-stream
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: test-empty-file-stream
Status: passed

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end
end

Object: Test
Name: test-closed-external-streams
Status: passed

Object: Check
Name: read-element from closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: unread-element from closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: read-line from closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: read from closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: read-to-end from closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: peek from closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: write-element to closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: write-line to closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: write to closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: set position in closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: new-line position in closed stream, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: close closed file, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: force-output on closed file, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: stream-open? on closed file, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, file-stream, input, byte-character
Status: passed
end

Object: Check
Name: read-element from closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: unread-element from closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: read-line from closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: read from closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: read-to-end from closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: peek from closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: write-element to closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: write-line to closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: write to closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: set position in closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: new-line position in closed stream, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: close closed file, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: force-output on closed file, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: stream-open? on closed file, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, file-stream, output, byte-character
Status: passed
end

Object: Check
Name: read-element from closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: unread-element from closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: read-line from closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: read from closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: read-to-end from closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: peek from closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: write-element to closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: write-line to closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: write to closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: set position in closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: new-line position in closed stream, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: close closed file, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: force-output on closed file, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: stream-open? on closed file, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, file-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: read-element from closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: unread-element from closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: read-line from closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: read from closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: read-to-end from closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: peek from closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: write-element to closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: write-line to closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: write to closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: set position in closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: new-line position in closed stream, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: close closed file, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: force-output on closed file, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: stream-open? on closed file, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, multi-buffered-stream, input-output, byte-character
Status: passed
end

Object: Check
Name: read-element from closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: unread-element from closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: read-line from closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: read from closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: read-to-end from closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: peek from closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: write-element to closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: write-line to closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: write to closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: set position in closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: new-line position in closed stream, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: close closed file, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: force-output on closed file, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: stream-open? on closed file, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, multi-buffered-stream, input, byte-character
Status: passed
end

Object: Check
Name: read-element from closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: unread-element from closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: read-line from closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: read from closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: read-to-end from closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: peek from closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: write-element to closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: write-line to closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: write to closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: set position in closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: new-line position in closed stream, file-stream, input, byte
Status: passed
end

Object: Check
Name: close closed file, file-stream, input, byte
Status: passed
end

Object: Check
Name: force-output on closed file, file-stream, input, byte
Status: passed
end

Object: Check
Name: stream-open? on closed file, file-stream, input, byte
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, file-stream, input, byte
Status: passed
end

Object: Check
Name: read-element from closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: unread-element from closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: read-line from closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: read from closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: read-to-end from closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: peek from closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: write-element to closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: write-line to closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: write to closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: set position in closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: new-line position in closed stream, file-stream, output, byte
Status: passed
end

Object: Check
Name: close closed file, file-stream, output, byte
Status: passed
end

Object: Check
Name: force-output on closed file, file-stream, output, byte
Status: passed
end

Object: Check
Name: stream-open? on closed file, file-stream, output, byte
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, file-stream, output, byte
Status: passed
end

Object: Check
Name: read-element from closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: unread-element from closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: read-line from closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: read from closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: read-to-end from closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: peek from closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: write-element to closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: write-line to closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: write to closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: set position in closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: new-line position in closed stream, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: close closed file, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: force-output on closed file, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: stream-open? on closed file, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, file-stream, input-output, byte
Status: passed
end

Object: Check
Name: read-element from closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: unread-element from closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: read-line from closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: read from closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: read-to-end from closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: peek from closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: write-element to closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: write-line to closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: write to closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: set position in closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: new-line position in closed stream, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: close closed file, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: force-output on closed file, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: stream-open? on closed file, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, multi-buffered-stream, input-output, byte
Status: passed
end

Object: Check
Name: read-element from closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: unread-element from closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: read-line from closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: read from closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: read-to-end from closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: peek from closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: write-element to closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: write-line to closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: write to closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: set position in closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: new-line position in closed stream, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: close closed file, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: force-output on closed file, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: stream-open? on closed file, multi-buffered-stream, input, byte
Status: passed
end

Object: Check
Name: stream-input-available? on closed file, multi-buffered-stream, input, byte
Status: passed
end
end

Object: Test
Name: test-file-stream-exclusive
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: test-empty-file-stream-exclusive
Status: passed

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end
end

Object: Test
Name: bogus-test-file-stream-using-input-output-streams
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: bogus-test-empty-file-stream-using-input-output-streams
Status: passed

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end
end

Object: Test
Name: test-multi-buffered-file-stream
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: test-empty-multi-buffered-file-stream
Status: passed

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end
end

Object: Test
Name: test-multi-buffered-file-stream-with-long-input
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: test-sync-stream-async-tests
Status: passed

Object: Check
Name: buffer read after writes
Status: passed
end

Object: Check
Name: changed buffer read
Status: passed
end

Object: Check
Name: all buffer read
Status: passed
end
end

Object: Test
Name: test-async-stream-async-tests
Status: passed

Object: Check
Name: buffer read after writes
Status: passed
end

Object: Check
Name: changed buffer read
Status: passed
end

Object: Check
Name: all buffer read
Status: passed
end
end

Object: Test
Name: test-multi-buffered-file-stream-exclusive
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end

Object: Test
Name: test-empty-multi-buffered-file-stream-exclusive
Status: passed

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: end of stream should be reached
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: empty error
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end
end

Object: Test
Name: test-multi-buffered-file-stream-with-long-input-exclusive
Status: passed

Object: Check
Name: read first element
Status: passed
end

Object: Check
Name: unread first element
Status: passed
end

Object: Check
Name: peeks first element
Status: passed
end

Object: Check
Name: read first element again
Status: passed
end

Object: Check
Name: should be on second element
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: first element matched?
Status: passed
end

Object: Check
Name: second element matched?
Status: passed
end

Object: Check
Name: third element matched?
Status: passed
end

Object: Check
Name: read-to returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-to second
Status: passed
end

Object: Check
Name: read-through returns correct result
Status: passed
end

Object: Check
Name: read should be on third after read-through second
Status: passed
end

Object: Check
Name: is stream open?
Status: passed
end

Object: Check
Name: read-to-end
Status: passed
end

Object: Check
Name: stream-at-end?
Status: passed
end

Object: Check
Name: find second element
Status: passed
end

Object: Check
Name: should be on third element
Status: passed
end

Object: Check
Name: write first element?
Status: passed
end

Object: Check
Name: write work?
Status: passed
end
end
end

Object: Test
Name: test-position-string-streams
Status: passed

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream position works?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end

Object: Check
Name: clear contents
Status: passed
end

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end

Object: Check
Name: clear contents
Status: passed
end
end

Object: Test
Name: test-position-sequence-stream
Status: passed

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream position works?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end

Object: Check
Name: clear contents
Status: passed
end

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end

Object: Check
Name: clear contents
Status: passed
end
end

Object: Test
Name: test-position-alt-string-streams
Status: passed

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream position works?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end

Object: Check
Name: clear contents
Status: passed
end
end

Object: Test
Name: test-position-file-streams
Status: passed

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream position works?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end
end

Object: Test
Name: bogus-test-position-file-streams-using-input-output-streams
Status: passed

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream position works?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end
end

Object: Test
Name: test-position-multi-buffered-file-streams
Status: passed

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream position works?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end

Object: Check
Name: stream position is zero?
Status: passed
end

Object: Check
Name: stream position is end?
Status: passed
end

Object: Check
Name: stream-size works?
Status: passed
end
end

Object: Test
Name: test-stretchy-stream
Status: passed

Object: Check
Name: stretchy vector streched
Status: passed
end

Object: Check
Name: stretchy vector
Status: passed
end

Object: Check
Name: test vector
Status: passed
end

Object: Check
Name: test stream with vector
Status: passed
end

Object: Check
Name: test stream with stretchy vector
Status: passed
end

Object: Check
Name: test vector #2
Status: passed
end

Object: Check
Name: test stream vector
Status: passed
end
end

Object: Test
Name: test-stream-hierarchy
Status: passed

Object: Check
Name: <buffered-stream> is a subtype of <stream>
Status: passed
end

Object: Check
Name: <positionable-stream> is a subtype of <stream>
Status: passed
end

Object: Check
Name: <file-stream> is a subtype of <buffered-stream>
Status: passed
end

Object: Check
Name: <file-stream> is a subtype of <positionable-stream>
Status: passed
end

Object: Check
Name: <sequence-stream> is a subtype of <positionable-stream>
Status: passed
end

Object: Check
Name: <string-stream> is a subtype of <sequence-stream>
Status: passed
end

Object: Check
Name: <byte-string-stream> is a subtype of <string-stream>
Status: passed
end

Object: Check
Name: <unicode-string-stream> is a subtype of <string-stream>
Status: passed
end

Object: Check
Name: <sequence-stream> is a subtype of <buffered-stream>
Status: passed
end
end

Object: Test
Name: test-file-stream-creation
Status: passed

Object: Check
Name: make <file-stream> - create or overwrite
Status: passed
end

Object: Check
Name: make <file-stream> - replace or signal
Status: passed
end

Object: Check
Name: make <file-stream> - append or signal
Status: passed
end

Object: Check
Name: make <file-stream> - truncate or signal
Status: passed
end

Object: Check
Name: file does not exist error
Status: passed
end
end

Object: Test
Name: test-file-read-stream
Status: passed

Object: Check
Name: Is stream size correct?
Status: passed
end

Object: Check
Name: Is stream hello world?
Status: passed
end

Object: Check
Name: <file-stream> should not be at end
Status: passed
end

Object: Check
Name: read hello world a stream of 11
Status: passed
end

Object: Check
Name: Stream should STILL not be at end
Status: passed
end

Object: Check
Name: <string> should not be at end
Status: passed
end

Object: Check
Name: read chars into string str
Status: passed
end

Object: Check
Name: Str should be old hello world
Status: passed
end

Object: Check
Name: Now stream should be-at-end
Status: passed
end

Object: Check
Name: This file-stream should not be at end
Status: passed
end

Object: Check
Name: Read hello world into the string
Status: passed
end

Object: Check
Name: Is the string hello world
Status: passed
end

Object: Check
Name: The stream should still not be at end
Status: passed
end

Object: Check
Name: is hello world read-to-end(s)
Status: passed
end

Object: Check
Name: The first element is h
Status: passed
end

Object: Check
Name: The peek is e
Status: passed
end

Object: Check
Name: The next element is e
Status: passed
end

Object: Check
Name: The unread element is e
Status: passed
end

Object: Check
Name: The next element is now again e
Status: passed
end

Object: Check
Name: skip the 'o'
Status: passed
end

Object: Check
Name: The next element should be a space
Status: passed
end
end

Object: Test
Name: test-file-write-stream
Status: passed

Object: Check
Name: Stream contents = hello there world
Status: passed
end

Object: Check
Name: Open output file with if-exists = append and write
Status: passed
end

Object: Check
Name: Open output file with if-exists = append and write
Status: passed
end

Object: Check
Name: Contents hello there world
Status: passed
end

Object: Check
Name: Stream position should be n
Status: passed
end

Object: Check
Name: Contents still hello there world
Status: passed
end
end

Object: Test
Name: test-file-read-write-stream
Status: passed

Object: Check
Name: Stream size should now be n
Status: passed
end

Object: Check
Name: Contents are still hello world
Status: passed
end

Object: Check
Name: Stream cant be at the end
Status: passed
end

Object: Check
Name: Read 11 chars of hello world
Status: passed
end

Object: Check
Name: Stream still cant be at the end
Status: passed
end

Object: Check
Name: String stream isnt at the end
Status: passed
end

Object: Check
Name: Reading 12 chars into it
Status: passed
end

Object: Check
Name: String is same as hello world
Status: passed
end

Object: Check
Name: Now at the end of stream
Status: passed
end

Object: Check
Name: Stream should not be at the end
Status: passed
end

Object: Check
Name: Reading 11 chars into str
Status: passed
end

Object: Check
Name: Hello world should be the str
Status: passed
end

Object: Check
Name: Still not at the end
Status: passed
end

Object: Check
Name: read-to-end hello world
Status: passed
end

Object: Check
Name: The position is now new-n
Status: passed
end

Object: Check
Name: The contents are hello there world
Status: passed
end

Object: Check
Name: The position is still new-n
Status: passed
end

Object: Check
Name: The contents are still hello there world
Status: passed
end

Object: Check
Name: contents: 01234ABCDEFG23456789
Status: passed
end
end

Object: Test
Name: test-file-stream-functions
Status: passed

Object: Check
Name: coercing contents to string yummy there
Status: passed
end

Object: Check
Name: yummy there is the contents as a <string>
Status: passed
end

Object: Check
Name: Signals file exists error
Status: passed
end

Object: Check
Name: Signals file does not exist error
Status: passed
end
end

Object: Test
Name: test-write-to-multi-buffered-file-stream
Status: passed

Object: Check
Name: Stream contents = hello there world
Status: passed
end

Object: Check
Name: Open output file with if-exists = append and write
Status: passed
end

Object: Check
Name: Contents hello there world
Status: passed
end

Object: Check
Name: Stream position should be n
Status: passed
end

Object: Check
Name: Contents still hello there world
Status: passed
end
end

Object: Test
Name: test-multi-buffered-read-only
Status: passed

Object: Check
Name: Is stream size correct?
Status: passed
end

Object: Check
Name: Is stream hello world?
Status: passed
end

Object: Check
Name: <multi-buffered-stream> should not be at end
Status: passed
end

Object: Check
Name: read hello world a stream of 11
Status: passed
end

Object: Check
Name: Stream should STILL not be at end
Status: passed
end

Object: Check
Name: <string> should not be at end
Status: passed
end

Object: Check
Name: read chars into string str
Status: passed
end

Object: Check
Name: Str should be old hello world
Status: passed
end

Object: Check
Name: Now stream should be-at-end
Status: passed
end

Object: Check
Name: This file-stream should not be at end
Status: passed
end

Object: Check
Name: Read hello world into the string
Status: passed
end

Object: Check
Name: Is the string hello world
Status: passed
end

Object: Check
Name: The stream should still not be at end
Status: passed
end

Object: Check
Name: is hello world read-to-end(s)
Status: passed
end

Object: Check
Name: The first element is h
Status: passed
end

Object: Check
Name: The peek is e
Status: passed
end

Object: Check
Name: The next element is e
Status: passed
end

Object: Check
Name: The unread element is e
Status: passed
end

Object: Check
Name: The next element is now again e
Status: passed
end

Object: Check
Name: skip the 'o'
Status: passed
end

Object: Check
Name: The next element should be a space
Status: passed
end
end
end
end

Object: Suite
Name: system-test-suite
Status: failed

Object: Suite
Name: date-test-suite
Status: failed

Object: Suite
Name: date-module-test-suite
Status: failed

Object: Suite
Name: date-protocol-test-suite
Status: failed

Object: Test
Name: date-protocol-constants-test
Status: passed

Object: Check
Name: Constant <day-of-week> has the correct type
Status: passed
end

Object: Check
Name: <day-of-week> is a <type>?
Status: passed
end
end

Object: Test
Name: date-protocol-variables-test
Status: passed
end

Object: Test
Name: date-protocol-classes-test
Status: passed

Object: Check
Name: Variable <date> is a class
Status: passed
end

Object: Check
Name: Variable <date> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<date>) errors because not instantiable
Status: passed
end

Object: Check
Name: Make date with illegal #"year" = 1798 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"year" = 1799 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"year" = 2200 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"year" = 2201 errs
Status: passed
end

Object: Check
Name: Make date with legal #"year" = 1800
Status: passed
end

Object: Check
Name: Make date with legal #"year" = 1801
Status: passed
end

Object: Check
Name: Make date with legal #"year" = 2000
Status: passed
end

Object: Check
Name: Make date with legal #"year" = 2198
Status: passed
end

Object: Check
Name: Make date with legal #"year" = 2199
Status: passed
end

Object: Check
Name: Make date with illegal #"month" = -1 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"month" = 0 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"month" = 13 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"month" = 14 errs
Status: passed
end

Object: Check
Name: Make date with legal #"month" = 1
Status: passed
end

Object: Check
Name: Make date with legal #"month" = 2
Status: passed
end

Object: Check
Name: Make date with legal #"month" = 6
Status: passed
end

Object: Check
Name: Make date with legal #"month" = 11
Status: passed
end

Object: Check
Name: Make date with legal #"month" = 12
Status: passed
end

Object: Check
Name: Make date with illegal #"day" = -1 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"day" = 0 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"day" = 32 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"day" = 33 errs
Status: passed
end

Object: Check
Name: Make date with legal #"day" = 1
Status: passed
end

Object: Check
Name: Make date with legal #"day" = 2
Status: passed
end

Object: Check
Name: Make date with legal #"day" = 16
Status: passed
end

Object: Check
Name: Make date with legal #"day" = 30
Status: passed
end

Object: Check
Name: Make date with legal #"day" = 31
Status: passed
end

Object: Check
Name: Make date with illegal #"hours" = -2 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"hours" = -1 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"hours" = 24 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"hours" = 25 errs
Status: passed
end

Object: Check
Name: Make date with legal #"hours" = 0
Status: passed
end

Object: Check
Name: Make date with legal #"hours" = 1
Status: passed
end

Object: Check
Name: Make date with legal #"hours" = 12
Status: passed
end

Object: Check
Name: Make date with legal #"hours" = 22
Status: passed
end

Object: Check
Name: Make date with legal #"hours" = 23
Status: passed
end

Object: Check
Name: Make date with illegal #"minutes" = -2 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"minutes" = -1 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"minutes" = 60 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"minutes" = 61 errs
Status: passed
end

Object: Check
Name: Make date with legal #"minutes" = 0
Status: passed
end

Object: Check
Name: Make date with legal #"minutes" = 1
Status: passed
end

Object: Check
Name: Make date with legal #"minutes" = 30
Status: passed
end

Object: Check
Name: Make date with legal #"minutes" = 58
Status: passed
end

Object: Check
Name: Make date with legal #"minutes" = 59
Status: passed
end

Object: Check
Name: Make date with illegal #"seconds" = -2 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"seconds" = -1 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"seconds" = 60 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"seconds" = 61 errs
Status: passed
end

Object: Check
Name: Make date with legal #"seconds" = 0
Status: passed
end

Object: Check
Name: Make date with legal #"seconds" = 1
Status: passed
end

Object: Check
Name: Make date with legal #"seconds" = 30
Status: passed
end

Object: Check
Name: Make date with legal #"seconds" = 58
Status: passed
end

Object: Check
Name: Make date with legal #"seconds" = 59
Status: passed
end

Object: Check
Name: Make date with illegal #"microseconds" = -2 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"microseconds" = -1 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"microseconds" = 1000000 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"microseconds" = 1000001 errs
Status: passed
end

Object: Check
Name: Make date with legal #"microseconds" = 0
Status: passed
end

Object: Check
Name: Make date with legal #"microseconds" = 1
Status: passed
end

Object: Check
Name: Make date with legal #"microseconds" = 500000
Status: passed
end

Object: Check
Name: Make date with legal #"microseconds" = 999998
Status: passed
end

Object: Check
Name: Make date with legal #"microseconds" = 999999
Status: passed
end

Object: Check
Name: Make date with illegal #"time-zone-offset" = -1442 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"time-zone-offset" = -1441 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"time-zone-offset" = 1441 errs
Status: passed
end

Object: Check
Name: Make date with illegal #"time-zone-offset" = 1442 errs
Status: passed
end

Object: Check
Name: Make date with legal #"time-zone-offset" = -1440
Status: passed
end

Object: Check
Name: Make date with legal #"time-zone-offset" = -1439
Status: passed
end

Object: Check
Name: Make date with legal #"time-zone-offset" = 0
Status: passed
end

Object: Check
Name: Make date with legal #"time-zone-offset" = 1439
Status: passed
end

Object: Check
Name: Make date with legal #"time-zone-offset" = 1440
Status: passed
end

Object: Check
Name: Make date with day = 31
Status: passed
end

Object: Check
Name: Make a date with illegal month/day combo = 2/30.
Status: passed
end

Object: Check
Name: Make a date with Feb 29 on a leap year ok?
Status: passed
end
end

Object: Test
Name: date-protocol-functions-test
Status: failed

Object: Check
Name: Variable date-time-zone-offset is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable date-minutes is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as-iso8601-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: ISO8601 string format
Status: passed
end

Object: Check
Name: Variable local-time-zone-offset is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable date-day-of-week is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: date-day-of-week
Status: passed
end

Object: Check
Name: Variable encode-date is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable date-year is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable = is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Basic date1 = date2 check
Status: passed
end

Object: Check
Name: date1 = date2 ignores microseconds?
Status: passed
end

Object: Check
Name: Variable date-month is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable date-day is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable local-time-zone-name is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable date-hours is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable date-time-zone-offset-setter is a generic-function and all of its specializer types are bound
Status: failed
end

Object: Check
Name: Change of time zone modifies date components correctly
Status: passed
end

Object: Check
Name: Change of time zone doesn't modify actual time represented
Status: passed
end

Object: Check
Name: Variable local-daylight-savings-time? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable current-date is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable < is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Max date < min date?
Status: passed
end

Object: Check
Name: Current date later than when this test was written?
Status: passed
end

Object: Check
Name: Variable date-microseconds is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable decode-date is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable date-seconds is a generic-function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: date-protocol-macros-test
Status: passed
end
end
end
end

Object: Suite
Name: file-system-test-suite
Status: passed

Object: Suite
Name: file-system-module-test-suite
Status: passed

Object: Suite
Name: file-system-protocol-test-suite
Status: passed

Object: Test
Name: file-system-protocol-constants-test
Status: passed

Object: Check
Name: Constant <copy/rename-disposition> has the correct type
Status: passed
end

Object: Check
Name: Constant $pathname-separator-as-string has the correct type
Status: passed
end

Object: Check
Name: Constant <file-type> has the correct type
Status: passed
end

Object: Check
Name: Constant $pathname-separator has the correct type
Status: passed
end

Object: Check
Name: Constant <pathname> has the correct type
Status: passed
end

Object: Check
Name: A string is a pathname?
Status: passed
end
end

Object: Test
Name: file-system-protocol-variables-test
Status: passed
end

Object: Test
Name: file-system-protocol-classes-test
Status: passed
end

Object: Test
Name: file-system-protocol-functions-test
Status: passed

Object: Check
Name: Variable create-directory is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable file-exists? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable file-property-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable file-type is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-directory is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable directory-contents is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable delete-file is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable copy-file is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable home-directory is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable delete-directory is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable root-directories is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable file-properties is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ensure-directories-exist is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable file-property is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable temp-directory is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable rename-file is a function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: file-system-protocol-macros-test
Status: passed
end
end
end
end
end

Object: Suite
Name: locators-test-suite
Status: failed

Object: Suite
Name: locators-module-test-suite
Status: failed

Object: Suite
Name: locators-protocol-test-suite
Status: failed

Object: Test
Name: locators-protocol-constants-test
Status: passed
end

Object: Test
Name: locators-protocol-variables-test
Status: passed

Object: Check
Name: Variable *abstract-host-table* has the correct type
Status: passed
end

Object: Check
Name: Variable *abstract-host-table* can be set to itself
Status: passed
end
end

Object: Test
Name: locators-protocol-classes-test
Status: failed

Object: Check
Name: Variable <posix-locator> is a class
Status: passed
end

Object: Check
Name: Variable <posix-locator> has the correct superclasses
Status: passed
end

Object: Check
Name: make <posix-locator> with required arguments
Status: passed
end

Object: Check
Name: Variable <physical-locator> is a class
Status: passed
end

Object: Check
Name: Variable <physical-locator> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<physical-locator>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <abstract-locator> is a class
Status: passed
end

Object: Check
Name: Variable <abstract-locator> has the correct superclasses
Status: passed
end

Object: Check
Name: make <abstract-locator> with required arguments
Status: passed
end

Object: Check
Name: Variable <directory-locator> is a class
Status: passed
end

Object: Check
Name: Variable <directory-locator> has the correct superclasses
Status: passed
end

Object: Check
Name: make <directory-locator> with required arguments
Status: crashed
Reason: Cannot instantiate an abstract class - {<class>: <directory-locator>}
end

Object: Check
Name: Variable <type-path> is a class
Status: passed
end

Object: Check
Name: Variable <type-path> has the correct superclasses
Status: passed
end

Object: Check
Name: make <type-path> with required arguments
Status: passed
end

Object: Check
Name: Variable <file-locator> is a class
Status: passed
end

Object: Check
Name: Variable <file-locator> has the correct superclasses
Status: passed
end

Object: Check
Name: make <file-locator> with required arguments
Status: crashed
Reason: Cannot instantiate an abstract class - {<class>: <file-locator>}
end

Object: Check
Name: Variable <locator> is a class
Status: passed
end

Object: Check
Name: Variable <locator> has the correct superclasses
Status: passed
end

Object: Check
Name: make <locator> with required arguments
Status: passed
end

Object: Check
Name: Variable <host-path> is a class
Status: passed
end

Object: Check
Name: Variable <host-path> has the correct superclasses
Status: passed
end

Object: Check
Name: make <host-path> with required arguments
Status: crashed
Reason: #f is not of type {<class>: <host-path>}
end

Object: Check
Name: Variable <path> is a class
Status: passed
end

Object: Check
Name: Variable <path> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<path>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <microsoft-locator> is a class
Status: passed
end

Object: Check
Name: Variable <microsoft-locator> has the correct superclasses
Status: passed
end

Object: Check
Name: make <microsoft-locator> with required arguments
Status: passed
end

Object: Check
Name: as(<microsoft-locator>, "/users/dylan/hello/") returns valid locator
Status: passed
end

Object: Check
Name: /users/dylan/hello/ insensitive to case
Status: passed
end

Object: Check
Name: locator "/users/dylan/hello/" = locator "\users\dylan\hello\"
Status: passed
end

Object: Check
Name: as(<microsoft-locator>, "c:/Program Files/Harlequin/Dylan/bin/harlequin-dylan.exe") returns valid locator
Status: passed
end

Object: Check
Name: c:/Program Files/Harlequin/Dylan/bin/harlequin-dylan.exe insensitive to case
Status: passed
end

Object: Check
Name: locator "c:/Program Files/Harlequin/Dylan/bin/harlequin-dylan.exe" = locator "c:\Program Files\Harlequin\Dylan\bin\harlequin-dylan.exe"
Status: passed
end

Object: Check
Name: as(<microsoft-locator>, "//machine/users/dylan/test.dylan") returns valid locator
Status: passed
end

Object: Check
Name: //machine/users/dylan/test.dylan insensitive to case
Status: passed
end

Object: Check
Name: locator "//machine/users/dylan/test.dylan" = locator "\\machine\users\dylan\test.dylan"
Status: passed
end

Object: Check
Name: Variable <url-locator> is a class
Status: passed
end

Object: Check
Name: Variable <url-locator> has the correct superclasses
Status: passed
end

Object: Check
Name: make <url-locator> with required arguments
Status: passed
end
end

Object: Test
Name: locators-protocol-functions-test
Status: failed

Object: Check
Name: Variable locator-type is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-abstract-host is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-suffix is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add-abstract-host is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable relative-locator? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-user-id is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-transfer-type is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable clear-abstract-host-table is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable absolute-locator? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-base is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-directory is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable path-elements is a generic-function and all of its specializer types are bound
Status: failed
end

Object: Check
Name: Variable make-abstract-host-table is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-prefix is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable default-locator is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable wild-locator? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-password is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locators-match? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-extension is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable override-locator is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-volume is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-port is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable simplify-locator is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: <microsoft-locator>: simplify(a) = a
Status: passed
end

Object: Check
Name: <microsoft-locator>: simplify(a.t) = a.t
Status: passed
end

Object: Check
Name: <microsoft-locator>: simplify(./) = ./
Status: passed
end

Object: Check
Name: <microsoft-locator>: simplify(./a.t) = a.t
Status: passed
end

Object: Check
Name: <microsoft-locator>: simplify(a/./b.t) = a/b.t
Status: passed
end

Object: Check
Name: <microsoft-locator>: simplify(a/../b.t) = b.t
Status: passed
end

Object: Check
Name: <microsoft-locator>: simplify(/a/../b.t) = /b.t
Status: passed
end

Object: Check
Name: simplify-locator("/../../") errors
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: <posix-locator>: simplify(a) = a
Status: passed
end

Object: Check
Name: <posix-locator>: simplify(a.t) = a.t
Status: passed
end

Object: Check
Name: <posix-locator>: simplify(./) = ./
Status: passed
end

Object: Check
Name: <posix-locator>: simplify(./a.t) = a.t
Status: passed
end

Object: Check
Name: <posix-locator>: simplify(a/./b.t) = a/b.t
Status: passed
end

Object: Check
Name: <posix-locator>: simplify(a/../b.t) = b.t
Status: passed
end

Object: Check
Name: <posix-locator>: simplify(/a/../b.t) = /b.t
Status: passed
end

Object: Check
Name: simplify-locator("/../../") errors
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: <url-locator>: simplify(a) = a
Status: crashed
Reason: {<ms-dos-file-locator>: a} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: simplify(a.t) = a.t
Status: crashed
Reason: {<ms-dos-file-locator>: a.t} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: simplify(./) = ./
Status: crashed
Reason: {<ms-dos-directory-locator>: .\} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: simplify(./a.t) = a.t
Status: crashed
Reason: {<ms-dos-file-locator>: .\a.t} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: simplify(a/./b.t) = a/b.t
Status: crashed
Reason: {<ms-dos-file-locator>: a\.\b.t} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: simplify(a/../b.t) = b.t
Status: crashed
Reason: {<ms-dos-file-locator>: a\..\b.t} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: simplify(/a/../b.t) = /b.t
Status: crashed
Reason: {<ms-dos-file-locator>: \a\..\b.t} is not of type {<class>: <url-locator>}
end

Object: Check
Name: simplify-locator("/../../") errors
Status: passed
end

Object: Check
Name: Variable abbreviate-locator is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(a, a) = a
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(a, b) = a
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(a/, a/) = ./
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(a/b, a/) = b
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(a/./b, a/) = b
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(b/c, a/) = b/c
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(/a/b/c, /a/b/) = c
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(/a/b/c, /a/) = b/c
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(/a/b/, /a/b/c/) = ../
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(/a/b/c, /d/e/f/) = ../../../a/b/c
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(h:/a/b/c, h:/a/b/) = c
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(h:/a/b/c, i:/a/b/c/) = h:/a/b/c
Status: passed
end

Object: Check
Name: <microsoft-locator>: abbreviate(host:/a/b, /a/b/c) = host:/a/b
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(a, a) = a
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(a, b) = a
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(a/, a/) = ./
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(a/b, a/) = b
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(a/./b, a/) = b
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(b/c, a/) = b/c
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(/a/b/c, /a/b/) = c
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(/a/b/c, /a/) = b/c
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(/a/b/, /a/b/c/) = ../
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(/a/b/c, /d/e/f/) = ../../../a/b/c
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(h:/a/b/c, h:/a/b/) = c
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(h:/a/b/c, i:/a/b/c/) = h:/a/b/c
Status: passed
end

Object: Check
Name: <posix-locator>: abbreviate(host:/a/b, /a/b/c) = host:/a/b
Status: passed
end

Object: Check
Name: <url-locator>: abbreviate(a, a) = a
Status: crashed
Reason: {<ms-dos-file-locator>: a} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(a, b) = a
Status: crashed
Reason: {<ms-dos-file-locator>: a} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(a/, a/) = ./
Status: crashed
Reason: {<ms-dos-directory-locator>: a\} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(a/b, a/) = b
Status: crashed
Reason: {<ms-dos-file-locator>: a\b} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(a/./b, a/) = b
Status: crashed
Reason: {<ms-dos-file-locator>: a\.\b} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(b/c, a/) = b/c
Status: crashed
Reason: {<ms-dos-file-locator>: b\c} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(/a/b/c, /a/b/) = c
Status: crashed
Reason: {<ms-dos-file-locator>: \a\b\c} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(/a/b/c, /a/) = b/c
Status: crashed
Reason: {<ms-dos-file-locator>: \a\b\c} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(/a/b/, /a/b/c/) = ../
Status: crashed
Reason: {<ms-dos-directory-locator>: \a\b\} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(/a/b/c, /d/e/f/) = ../../../a/b/c
Status: crashed
Reason: {<ms-dos-file-locator>: \a\b\c} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(h:/a/b/c, h:/a/b/) = c
Status: crashed
Reason: {<ms-dos-file-locator>: h:\a\b\c} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(h:/a/b/c, i:/a/b/c/) = h:/a/b/c
Status: crashed
Reason: {<ms-dos-file-locator>: h:\a\b\c} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(host:/a/b, /a/b/c) = host:/a/b
Status: crashed
Reason: {<ms-dos-file-locator>: host:\a\b} is not of type {<class>: <url-locator>}
end

Object: Check
Name: <url-locator>: abbreviate(http://www.harlequin.com/hello.html, http://www.harlequin.com/hello.html) = hello.html
Status: crashed
Reason: {<ms-dos-file-locator>: hello.html} is not of type {<class>: <url-locator>}
end

Object: Check
Name: Variable locator-host is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-name is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable merge-locators is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-search-keys is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable translate-locator is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-version is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable locator-scheme is a generic-function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: locators-protocol-macros-test
Status: passed
end
end
end

Object: Suite
Name: old-locators-test-suite
Status: failed

Object: Suite
Name: basic-locators-test-suite
Status: failed

Object: Test
Name: PATH-TESTS
Status: passed

Object: Check
Name: make a posix-directory-path
Status: passed
end
end

Object: Test
Name: PATH-MATCH-TESTS
Status: passed

Object: Check
Name: match a locator-directory with <match-path>
Status: passed
end

Object: Check
Name: another <match-path> test
Status: passed
end

Object: Check
Name: this match should fail
Status: passed
end

Object: Check
Name: Does match fail when it is supposed to?
Status: passed
end

Object: Check
Name: Match a locator-directory with a wildcard
Status: passed
end

Object: Check
Name: Match locator-directory with nested wildcards
Status: passed
end

Object: Check
Name: Match locator-directory with 2 wildcards
Status: passed
end
end

Object: Test
Name: PATH-INSTANTIATE-TESTS
Status: passed

Object: Check
Name: instantiate a <locator>
Status: passed
end

Object: Check
Name: should signal a locator error
Status: passed
end

Object: Check
Name: instantiate locator with match-path-1 
Status: passed
end

Object: Check
Name: another instantiate locator with match-path-1
Status: passed
end

Object: Check
Name: instantiate locator with match-path-2
Status: passed
end

Object: Check
Name: another instantiate locator with match-path-2
Status: passed
end

Object: Check
Name: Yet another instantiate <locator> with match-path-2
Status: passed
end

Object: Check
Name: Signals a locator error
Status: passed
end
end

Object: Test
Name: MORE-PATH-INSTANTIATE-TESTS
Status: passed

Object: Check
Name: <locator> instantiation with no match-path
Status: passed
end

Object: Check
Name: <locator> instantiation with one match-path
Status: passed
end

Object: Check
Name: <locator> instantiation with two match-path's
Status: passed
end

Object: Check
Name: Another <locator> instantiation with no match-path
Status: passed
end

Object: Check
Name: Yet another <locator> instantiation with no match-path
Status: passed
end

Object: Check
Name: A <locator> with match-path-0 (still going)
Status: passed
end

Object: Check
Name: An instance of <locator> with a single match path
Status: passed
end

Object: Check
Name: An instance of <locator> with match-path-1
Status: passed
end

Object: Check
Name: Another instance of <locator> with match-path-1
Status: passed
end

Object: Check
Name: An instance of <locator> with match-path-2
Status: passed
end

Object: Check
Name: Another instance of <locator> with match-path-2
Status: passed
end

Object: Check
Name: Finally the final instance of <locator> with match path 2
Status: passed
end
end

Object: Test
Name: POSIX-LOCATOR-TESTS
Status: passed

Object: Check
Name: make a <posix-locator>
Status: passed
end

Object: Check
Name: make a <posix-directory-locator>
Status: passed
end

Object: Check
Name: make a <posix-file-locator>
Status: passed
end

Object: Check
Name: make another <posix-file-locator>
Status: passed
end

Object: Check
Name: make <posix-file-locator> with relative-path?
Status: passed
end

Object: Check
Name: Instantiate another <posix-file-locator>
Status: passed
end

Object: Check
Name: Instantiate <posix-file-locator>
Status: passed
end

Object: Check
Name: Instantiate another <posix-file-locator>
Status: passed
end

Object: Check
Name: Make a <posix-file-locator> as a <posix-locator>
Status: passed
end

Object: Check
Name: instance of <posix-file-locator> with a type: <posix-type-path>
Status: passed
end

Object: Check
Name: Yet another instantiation of <posix-file-locator>
Status: passed
end

Object: Check
Name: make a simple <posix-locator>
Status: passed
end

Object: Check
Name: make another <posix-locator>, with a prefix:
Status: passed
end

Object: Check
Name: make another <posix-locator>, with a prefix: & a name:
Status: passed
end

Object: Check
Name: make another <posix-locator>, with a relative-path?: 
Status: passed
end

Object: Check
Name: Simple instance of <posix-locator> with name: and prefix:
Status: passed
end

Object: Check
Name: Another simple instance of <posix-locator> with name: and prefix:
Status: passed
end

Object: Check
Name: How about without a null prefix
Status: passed
end

Object: Check
Name: And now with bar/ prefix:
Status: passed
end

Object: Check
Name: Cool -> a <posix-locator> with a base: and extension:
Status: passed
end

Object: Check
Name: Another <posix-locator> with a prefix and yes a name too!
Status: passed
end

Object: Check
Name: I am so glad this is the last <posix-locator> with prefix and a name
Status: passed
end
end

Object: Test
Name: ABSTRACT-LOCATOR-TESTS
Status: failed

Object: Check
Name: make an <abstract-locator>
Status: passed
end

Object: Check
Name: make an <abstract-file-locator>
Status: passed
end

Object: Check
Name: make another <abstract-file-locator>
Status: passed
end

Object: Check
Name: make an <abstract-directory-locator>
Status: passed
end

Object: Check
Name: make an <abstract-file-locator> with an #oldest version
Status: passed
end

Object: Check
Name: How about another <abstract-file-locator>
Status: passed
end

Object: Check
Name: Yet another <abstract-file-locator> with some funky keywords
Status: passed
end

Object: Check
Name: An instance of <abstract-directory-locator>
Status: passed
end

Object: Check
Name: An <abstract-locator> instance with a base: and extension:
Status: passed
end

Object: Check
Name: a <locator> as an <abstract-locator>
Status: passed
end

Object: Check
Name: an <abstract-locator> as an <abstract-locator>
Status: passed
end

Object: Check
Name: a simple <locator> with a prefix:
Status: passed
end

Object: Check
Name: another simple <locator> with a name: and a version:
Status: passed
end

Object: Check
Name: an <abstract-locator> with elements: and directory:
Status: passed
end

Object: Check
Name: another <abstract-locator> as a <locator>
Status: crashed
Reason: #"wild" is not of type {<class>: <string>}
end

Object: Check
Name: the final and the inverse of the above - cool huh!
Status: passed
end
end

Object: Test
Name: EQUIVALENCE-TESTS
Status: passed

Object: Check
Name: Instantiate a <posix-directory-path> with lots of slots
Status: passed
end

Object: Check
Name: Are two identical <posix-locators> really identical?
Status: passed
end

Object: Check
Name: Are two different <posix-locators> really different?
Status: passed
end
end

Object: Test
Name: GENERIC-PARSING-TESTS
Status: passed

Object: Check
Name: A general parsing test
Status: passed
end
end

Object: Test
Name: COMPOSITE-TYPE-TESTS
Status: passed

Object: Check
Name: Composite type test
Status: passed
end
end

Object: Test
Name: IP-HOST-TESTS
Status: passed

Object: Check
Name: An IP host test
Status: passed
end
end

Object: Test
Name: POSIX-AS-STRING-TESTS
Status: passed

Object: Check
Name: Posix-as-string test #1
Status: passed
end

Object: Check
Name: Posix-as-string test #2
Status: passed
end

Object: Check
Name: Posix-as-string test #3
Status: passed
end

Object: Check
Name: Posix-as-string test #4
Status: passed
end

Object: Check
Name: Posix-as-string test #5
Status: passed
end

Object: Check
Name: Posix-as-string test #6
Status: passed
end

Object: Check
Name: Posix-as-string test #7
Status: passed
end

Object: Check
Name: Posix-as-string test #8
Status: passed
end

Object: Check
Name: Posix-as-string test #9
Status: passed
end

Object: Check
Name: Posix-as-string test #10
Status: passed
end

Object: Check
Name: Posix-as-string test #11
Status: passed
end

Object: Check
Name: This is a locator error dude!
Status: passed
end
end

Object: Test
Name: ABSTRACT-AS-STRING-TESTS
Status: passed

Object: Check
Name: <abstract-locator> as a <string> test #1
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #2
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #3
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #4
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #5
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #6
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #7
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #8
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #9
Status: passed
end

Object: Check
Name: <abstract-locator> as a <string> test #10
Status: passed
end
end

Object: Test
Name: LOCATOR-MATCH-TESTS
Status: passed

Object: Check
Name: Do the <locator>'s match
Status: passed
end

Object: Check
Name: This <locator> matching should fail for sure
Status: passed
end
end

Object: Test
Name: LOCATOR-INSTANTIATE-TESTS
Status: passed

Object: Check
Name: And still going - another <locator> instantiation
Status: passed
end
end
end

Object: Suite
Name: more-locators-test-suite
Status: failed

Object: Test
Name: AS-DIRECTORY-LOCATOR-TESTS
Status: failed

Object: Check
Name: as <directory-locator> tests
Status: failed
end
end

Object: Test
Name: AS-FILE-LOCATOR-TESTS
Status: failed

Object: Check
Name: as <file-locator> tests
Status: failed
end
end

Object: Test
Name: ABBREVIATE-TESTS
Status: passed
end

Object: Test
Name: ABBREVIATE-MERGE-TESTS
Status: failed

Object: Check
Name: merge-abbrev-test #1
Status: passed
end

Object: Check
Name: merge-abbrev-test #2
Status: passed
end

Object: Check
Name: merge-abbrev-test #3
Status: passed
end

Object: Check
Name: merge-abbrev-test #4
Status: passed
end

Object: Check
Name: merge-abbrev-test #5
Status: passed
end

Object: Check
Name: merge-abbrev-test #6
Status: passed
end

Object: Check
Name: merge-abbrev-test #7
Status: passed
end

Object: Check
Name: merge-abbrev-test #8
Status: passed
end

Object: Check
Name: merge-abbrev-test #9
Status: passed
end

Object: Check
Name: merge-abbrev-test #10
Status: failed
end
end

Object: Test
Name: HTTP-LOCATOR-TESTS
Status: crashed
Reason: No applicable method, applying {<incremental-generic-function>: +} to {<simple-object-vector>: #f, 1}.

Object: Check
Name: <http-locator> test #1
Status: passed
end

Object: Check
Name: <http-locator> test #2
Status: crashed
Reason: #f is not of type {<class>: <string>}
end

Object: Check
Name: <http-locator> test #3
Status: passed
end

Object: Check
Name: <http-locator> test #4
Status: passed
end

Object: Check
Name: <http-locator> test #5
Status: passed
end

Object: Check
Name: <http-locator> test #6
Status: passed
end

Object: Check
Name: <http-locator> test #7
Status: crashed
Reason: #f is not of type {<class>: <string>}
end

Object: Check
Name: <http-locator> test #8
Status: passed
end

Object: Check
Name: <http-locator> test #9
Status: failed
end

Object: Check
Name: <http-locator> test #10
Status: crashed
Reason: No applicable method, applying {<incremental-generic-function>: +} to {<simple-object-vector>: #f, 1}.
end
end

Object: Test
Name: FTP-LOCATOR-TESTS
Status: failed

Object: Check
Name: <ftp-locator> test #1
Status: passed
end

Object: Check
Name: <ftp-locator> test #2
Status: passed
end

Object: Check
Name: <ftp-locator> test #3
Status: passed
end

Object: Check
Name: <ftp-locator> test #4
Status: passed
end

Object: Check
Name: <ftp-locator> test #5
Status: passed
end

Object: Check
Name: <ftp-locator> test #6
Status: passed
end

Object: Check
Name: <ftp-locator> test #7
Status: passed
end

Object: Check
Name: <ftp-locator> test #8
Status: passed
end

Object: Check
Name: <ftp-locator> test #9
Status: passed
end

Object: Check
Name: <ftp-locator> test #10
Status: passed
end

Object: Check
Name: <ftp-locator> test #11
Status: passed
end

Object: Check
Name: <ftp-locator> test #12
Status: passed
end

Object: Check
Name: <ftp-locator> test #13
Status: crashed
Reason: No applicable method, applying {<incremental-generic-function>: +} to {<simple-object-vector>: #f, 1}.
end

Object: Check
Name: <ftp-locator> test #14
Status: passed
end

Object: Check
Name: <ftp-locator> test #15
Status: passed
end

Object: Check
Name: <ftp-locator> test #16
Status: passed
end

Object: Check
Name: <ftp-locator> test #17
Status: failed
end

Object: Check
Name: <ftp-locator> test #18
Status: passed
end

Object: Check
Name: <ftp-locator> test #19
Status: failed
end

Object: Check
Name: <ftp-locator> test #20
Status: passed
end
end

Object: Test
Name: MERGE-TESTS
Status: failed

Object: Check
Name: merge locators test #1
Status: passed
end

Object: Check
Name: merge locators test #2
Status: failed
end

Object: Check
Name: merge locators test #3
Status: failed
end
end

Object: Test
Name: MICROSOFT-LOCATOR-TESTS
Status: passed

Object: Check
Name: <microsoft-locator> test #1
Status: passed
end

Object: Check
Name: <microsoft-locator> test #2
Status: passed
end

Object: Check
Name: <microsoft-locator> test #3
Status: passed
end

Object: Check
Name: <microsoft-locator> test #4
Status: passed
end

Object: Check
Name: <microsoft-locator> test #5
Status: passed
end

Object: Check
Name: <microsoft-locator> test #6
Status: passed
end

Object: Check
Name: <microsoft-locator> test #7
Status: passed
end

Object: Check
Name: <microsoft-locator> test #8
Status: passed
end

Object: Check
Name: <microsoft-locator> test #9
Status: passed
end

Object: Check
Name: <microsoft-locator> test #10
Status: passed
end

Object: Check
Name: <microsoft-locator> test #11
Status: passed
end
end

Object: Test
Name: DOC-EXAMPLES-TESTS
Status: failed

Object: Check
Name: Doc examples tests #1
Status: passed
end

Object: Check
Name: Doc examples tests #2
Status: failed
end

Object: Check
Name: Doc examples tests #3
Status: passed
end

Object: Check
Name: Doc examples tests #4
Status: failed
end
end
end

Object: Suite
Name: translation-test-suite
Status: failed

Object: Test
Name: MATCH-ABSTRACT-HOST-TEST
Status: crashed
Reason: #f is not of type {<union>: <string>, #"fail"}

Object: Check
Name: Match abstract host test
Status: crashed
Reason: #f is not of type {<union>: <string>, #"fail"}
end
end

Object: Test
Name: FORWARD-TRANSLATION-TESTS
Status: failed

Object: Check
Name: forward translation tests #1
Status: passed
end

Object: Check
Name: forward translation tests #2
Status: failed
end

Object: Check
Name: forward translation tests #3
Status: passed
end
end

Object: Test
Name: BACK-TRANSLATION-TESTS
Status: crashed
Reason: #f is not of type {<union>: <match-path>, #"fail"}

Object: Check
Name: Back translation tests #1
Status: crashed
Reason: #f is not of type {<union>: <match-path>, #"fail"}
end

Object: Check
Name: Back translation tests #2
Status: crashed
Reason: #f is not of type {<union>: <match-path>, #"fail"}
end

Object: Check
Name: Back translation tests #3
Status: crashed
Reason: #f is not of type {<union>: <match-path>, #"fail"}
end
end
end
end
end
end

--------End Log Report---------


libraries-test-suite failed
  dylan-test-suite failed
    dylan-module-test-suite failed
      dylan-protocol-test-suite failed
        dylan-protocol-classes-test failed
          make(<boolean>) errors because not instantiable failed [expected condition not signaled]
          make(<method>) errors because not instantiable failed [expected condition not signaled]
      arithmetic-protocol-test-suite failed
        arithmetic-protocol-classes-test failed
          make(<integer>) errors because not instantiable failed [expected condition not signaled]
      collections-protocol-test-suite failed
        collections-protocol-classes-test failed
          One item <vector> of <byte-character> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          Multiple item <vector> of <byte-character> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          One item <array> of <byte-character> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          Multiple item <array> of <byte-character> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          make(<sequence>) errors because not instantiable failed [expected condition not signaled]
          make(<collection>) errors because not instantiable failed [expected condition not signaled]
          Empty <byte-string> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          One item <byte-string> of <byte-character> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          Multiple item <byte-string> of <byte-character> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          Empty <string> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          One item <string> of <byte-character> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          Multiple item <string> of <byte-character> element default crashed [#"default" is not of type {<union>: #f, <byte-character>}]
          One item <list> of <integer> 'map-as' <pair> with identity crashed [Taking size of an improper list]
          One item <list> of <byte-character> 'map-as' <pair> with identity crashed [Taking size of an improper list]
          Multiple item <list> of <integer> 'map-as' <pair> with identity crashed [#f is not of type {<class>: <list>}]
          Multiple item <list> of <byte-character> 'map-as' <pair> with identity crashed [#f is not of type {<class>: <list>}]
          Empty <stretchy-vector> concatenate-as <stretchy-vector> identity failed
          Empty <stretchy-vector> concatenate-as <stretchy-vector> failed
          Empty <stretchy-vector> concatenate-as <stretchy-vector> three times failed
          pair(1, #()) 'map-as' <pair> with identity crashed [Taking size of an improper list]
          pair(1, pair(2, #())) 'map-as' <pair> with identity crashed [#f is not of type {<class>: <list>}]
          Test unit Non-list <pair> tests crashed [Taking size of an improper list]
      conditions-protocol-test-suite failed
        conditions-protocol-classes-test failed
          make(<sealed-object-error>) errors because not instantiable failed [expected condition not signaled]
  harlequin-extensions-test-suite failed
    harlequin-extensions-module-test-suite failed
      harlequin-extensions-protocol-test-suite failed
        harlequin-extensions-protocol-classes-test failed
          Empty <stretchy-object-vector> concatenate-as <stretchy-vector> identity failed
          Empty <stretchy-object-vector> concatenate-as <stretchy-vector> failed
          Empty <stretchy-object-vector> concatenate-as <stretchy-vector> three times failed
        harlequin-extensions-protocol-functions-test failed
          concatenate! should have not affected my-list failed [{<pair>: 3, 4, 5, 6} ~= {<pair>: 3, 4}]
          Test unit float-to-string tests crashed [ELEMENT outside of range: 2]
    simple-format-module-test-suite failed
      simple-format-protocol-test-suite failed
        simple-format-protocol-functions-test failed
          format-to-string("%=", {<generic-function>: find-key}) failed ["{<incremental-generic-function>: find-key}" ~= "{<generic-function>: find-key}"]
  collections-test-suite failed
    bit-set-test-suite failed
      bit-set-add crashed [{<simple-object-vector>: size 0} is not of type {<class>: <bit-vector>}]
      bit-set-remove crashed [{<simple-object-vector>: size 0} is not of type {<class>: <bit-vector>}]
      bit-set-union crashed [No applicable method, applying {<sealed-generic-function>: member-vector-setter} to {<simple-object-vector>: {<simple-object-vector>}, {<bit-set>}}.]
      bit-set-union! crashed [No applicable method, applying {<sealed-generic-function>: member-vector-setter} to {<simple-object-vector>: {<simple-object-vector>}, {<bit-set>}}.]
      bit-set-copy crashed [No applicable method, applying {<sealed-generic-function>: member-vector-setter} to {<simple-object-vector>: {<simple-object-vector>}, {<bit-set>}}.]
    bit-vector-test-suite failed
      copy-sequence-suite failed
        copy-sequence-tiny-vector crashed [{<simple-object-vector>: 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, ...} is not of type {<class>: <bit-vector>}]
        copy-sequence-huge-vector crashed [{<simple-object-vector>: 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, ...} is not of type {<class>: <bit-vector>}]
  system-test-suite failed
    date-test-suite failed
      date-module-test-suite failed
        date-protocol-test-suite failed
          date-protocol-functions-test failed
            Variable date-time-zone-offset-setter is a generic-function and all of its specializer types are bound failed
  locators-test-suite failed
    locators-module-test-suite failed
      locators-protocol-test-suite failed
        locators-protocol-classes-test failed
          make <directory-locator> with required arguments crashed [Cannot instantiate an abstract class - {<class>: <directory-locator>}]
          make <file-locator> with required arguments crashed [Cannot instantiate an abstract class - {<class>: <file-locator>}]
          make <host-path> with required arguments crashed [#f is not of type {<class>: <host-path>}]
        locators-protocol-functions-test failed
          Variable path-elements is a generic-function and all of its specializer types are bound failed
          simplify-locator("/../../") errors failed [expected condition not signaled]
          simplify-locator("/../../") errors failed [expected condition not signaled]
          <url-locator>: simplify(a) = a crashed [{<ms-dos-file-locator>: a} is not of type {<class>: <url-locator>}]
          <url-locator>: simplify(a.t) = a.t crashed [{<ms-dos-file-locator>: a.t} is not of type {<class>: <url-locator>}]
          <url-locator>: simplify(./) = ./ crashed [{<ms-dos-directory-locator>: .\} is not of type {<class>: <url-locator>}]
          <url-locator>: simplify(./a.t) = a.t crashed [{<ms-dos-file-locator>: .\a.t} is not of type {<class>: <url-locator>}]
          <url-locator>: simplify(a/./b.t) = a/b.t crashed [{<ms-dos-file-locator>: a\.\b.t} is not of type {<class>: <url-locator>}]
          <url-locator>: simplify(a/../b.t) = b.t crashed [{<ms-dos-file-locator>: a\..\b.t} is not of type {<class>: <url-locator>}]
          <url-locator>: simplify(/a/../b.t) = /b.t crashed [{<ms-dos-file-locator>: \a\..\b.t} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(a, a) = a crashed [{<ms-dos-file-locator>: a} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(a, b) = a crashed [{<ms-dos-file-locator>: a} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(a/, a/) = ./ crashed [{<ms-dos-directory-locator>: a\} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(a/b, a/) = b crashed [{<ms-dos-file-locator>: a\b} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(a/./b, a/) = b crashed [{<ms-dos-file-locator>: a\.\b} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(b/c, a/) = b/c crashed [{<ms-dos-file-locator>: b\c} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(/a/b/c, /a/b/) = c crashed [{<ms-dos-file-locator>: \a\b\c} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(/a/b/c, /a/) = b/c crashed [{<ms-dos-file-locator>: \a\b\c} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(/a/b/, /a/b/c/) = ../ crashed [{<ms-dos-directory-locator>: \a\b\} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(/a/b/c, /d/e/f/) = ../../../a/b/c crashed [{<ms-dos-file-locator>: \a\b\c} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(h:/a/b/c, h:/a/b/) = c crashed [{<ms-dos-file-locator>: h:\a\b\c} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(h:/a/b/c, i:/a/b/c/) = h:/a/b/c crashed [{<ms-dos-file-locator>: h:\a\b\c} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(host:/a/b, /a/b/c) = host:/a/b crashed [{<ms-dos-file-locator>: host:\a\b} is not of type {<class>: <url-locator>}]
          <url-locator>: abbreviate(http://www.harlequin.com/hello.html, http://www.harlequin.com/hello.html) = hello.html crashed [{<ms-dos-file-locator>: hello.html} is not of type {<class>: <url-locator>}]
    old-locators-test-suite failed
      basic-locators-test-suite failed
        ABSTRACT-LOCATOR-TESTS failed
          another <abstract-locator> as a <locator> crashed [#"wild" is not of type {<class>: <string>}]
      more-locators-test-suite failed
        AS-DIRECTORY-LOCATOR-TESTS failed
          as <directory-locator> tests failed
        AS-FILE-LOCATOR-TESTS failed
          as <file-locator> tests failed
        ABBREVIATE-MERGE-TESTS failed
          merge-abbrev-test #10 failed
        HTTP-LOCATOR-TESTS crashed [No applicable method, applying {<incremental-generic-function>: +} to {<simple-object-vector>: #f, 1}.]
          <http-locator> test #2 crashed [#f is not of type {<class>: <string>}]
          <http-locator> test #7 crashed [#f is not of type {<class>: <string>}]
          <http-locator> test #9 failed
          <http-locator> test #10 crashed [No applicable method, applying {<incremental-generic-function>: +} to {<simple-object-vector>: #f, 1}.]
        FTP-LOCATOR-TESTS failed
          <ftp-locator> test #13 crashed [No applicable method, applying {<incremental-generic-function>: +} to {<simple-object-vector>: #f, 1}.]
          <ftp-locator> test #17 failed
          <ftp-locator> test #19 failed
        MERGE-TESTS failed
          merge locators test #2 failed
          merge locators test #3 failed
        DOC-EXAMPLES-TESTS failed
          Doc examples tests #2 failed
          Doc examples tests #4 failed
      translation-test-suite failed
        MATCH-ABSTRACT-HOST-TEST crashed [#f is not of type {<union>: <string>, #"fail"}]
          Match abstract host test crashed [#f is not of type {<union>: <string>, #"fail"}]
        FORWARD-TRANSLATION-TESTS failed
          forward translation tests #2 failed
        BACK-TRANSLATION-TESTS crashed [#f is not of type {<union>: <match-path>, #"fail"}]
          Back translation tests #1 crashed [#f is not of type {<union>: <match-path>, #"fail"}]
          Back translation tests #2 crashed [#f is not of type {<union>: <match-path>, #"fail"}]
          Back translation tests #3 crashed [#f is not of type {<union>: <match-path>, #"fail"}]

libraries-test-suite summary:
  Ran 55 suites: 28 passed (51.0%), 27 failed, 0 not executed, 0 crashed
  Ran 190 tests: 162 passed (85.3%), 18 failed, 0 not executed, 10 crashed
  Ran 8845 checks: 8765 passed (99.1%), 29 failed, 0 not executed, 51 crashed
