Module:    Xt
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Xutil.h"; do not edit.

//	XConsortium: Xutil.h,v 11.73 91/07/30 16:21:37 rws Exp 
define inline-only constant $NoValue                    = #x0000;
define inline-only constant $XValue                     = #x0001;
define inline-only constant $YValue                     = #x0002;
define inline-only constant $WidthValue                 = #x0004;
define inline-only constant $HeightValue                = #x0008;
define inline-only constant $AllValues                  = #x000F;
define inline-only constant $XNegative                  = #x0010;
define inline-only constant $YNegative                  = #x0020;
define C-struct <min_aspect%1>
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
end;

define C-struct <XSizeHints>
  sealed inline-only slot flags-value    :: <C-both-long>;
  sealed inline-only slot x-value        :: <C-int>;
  sealed inline-only slot y-value        :: <C-int>;
  sealed inline-only slot width-value    :: <C-int>;
  sealed inline-only slot height-value   :: <C-int>;
  sealed inline-only slot min-width-value :: <C-int>;
  sealed inline-only slot min-height-value :: <C-int>;
  sealed inline-only slot max-width-value :: <C-int>;
  sealed inline-only slot max-height-value :: <C-int>;
  sealed inline-only slot width-inc-value :: <C-int>;
  sealed inline-only slot height-inc-value :: <C-int>;
  sealed inline-only slot min-aspect-value :: <min_aspect%1>, setter: #f;
  sealed inline-only slot max-aspect-value :: <min_aspect%1>, setter: #f;
  sealed inline-only slot base-width-value :: <C-int>;
  sealed inline-only slot base-height-value :: <C-int>;
  sealed inline-only slot win-gravity-value :: <C-int>;
  pointer-type-name: <XSizeHints*>;
end C-struct <XSizeHints>;
define inline-only constant $USPosition                 = ash(1,0);
define inline-only constant $USSize                     = ash(1,1);
define inline-only constant $PPosition                  = ash(1,2);
define inline-only constant $PSize                      = ash(1,3);
define inline-only constant $PMinSize                   = ash(1,4);
define inline-only constant $PMaxSize                   = ash(1,5);
define inline-only constant $PResizeInc                 = ash(1,6);
define inline-only constant $PAspect                    = ash(1,7);
define inline-only constant $PBaseSize                  = ash(1,8);
define inline-only constant $PWinGravity                = ash(1,9);

define C-struct <XWMHints>
  sealed inline-only slot flags-value    :: <C-both-long>;
  sealed inline-only slot input-value    :: <C-Bool>;
  sealed inline-only slot initial-state-value :: <C-int>;
  sealed inline-only slot icon-pixmap-value :: <C-Pixmap>;
  sealed inline-only slot icon-window-value :: <C-Window>;
  sealed inline-only slot icon-x-value   :: <C-int>;
  sealed inline-only slot icon-y-value   :: <C-int>;
  sealed inline-only slot icon-mask-value :: <C-Pixmap>;
  sealed inline-only slot window-group-value :: <C-XID>;
  pointer-type-name: <XWMHints*>;
end C-struct <XWMHints>;
define inline-only constant $InputHint                  = ash(1,0);
define inline-only constant $StateHint                  = ash(1,1);
define inline-only constant $IconPixmapHint             = ash(1,2);
define inline-only constant $IconWindowHint             = ash(1,3);
define inline-only constant $IconPositionHint           = ash(1,4);
define inline-only constant $IconMaskHint               = ash(1,5);
define inline-only constant $WindowGroupHint            = ash(1,6);
define inline-only constant $AllHints                   =
	logior($InputHint, $StateHint, $IconPixmapHint, $IconWindowHint, $IconPositionHint, $IconMaskHint, $WindowGroupHint);
define inline-only constant $WithdrawnState             =    0;
define inline-only constant $NormalState                =    1;
define inline-only constant $IconicState                =    3;
define inline-only constant $DontCareState              =    0;
define inline-only constant $ZoomState                  =    2;
define inline-only constant $InactiveState              =    4;

define C-struct <XTextProperty>
  sealed inline-only slot value-value    :: <C-unsigned-char*>;
  sealed inline-only slot encoding-value :: <C-Atom>;
  sealed inline-only slot format-value   :: <C-int>;
  sealed inline-only slot nitems-value   :: <C-both-unsigned-long>;
  pointer-type-name: <XTextProperty*>;
end C-struct <XTextProperty>;
define inline-only constant $XNoMemory                  =   -1;
define inline-only constant $XLocaleNotSupported        =   -2;
define inline-only constant $XConverterNotFound         =   -3;
// enum XICCEncodingStyle:
define inline-only constant $XStringStyle = -1 + 1;
define inline-only constant $XCompoundTextStyle = $XStringStyle + 1;
define inline-only constant $XTextStyle = $XCompoundTextStyle + 1;
define inline-only constant $XStdICCTextStyle = $XTextStyle + 1;


define C-struct <XIconSize>
  sealed inline-only slot min-width-value :: <C-int>;
  sealed inline-only slot min-height-value :: <C-int>;
  sealed inline-only slot max-width-value :: <C-int>;
  sealed inline-only slot max-height-value :: <C-int>;
  sealed inline-only slot width-inc-value :: <C-int>;
  sealed inline-only slot height-inc-value :: <C-int>;
  pointer-type-name: <XIconSize*>;
end C-struct <XIconSize>;

define C-struct <XClassHint>
  sealed inline-only slot res-name-value :: <C-string>;
  sealed inline-only slot res-class-value :: <C-string>;
  pointer-type-name: <XClassHint*>;
end C-struct <XClassHint>;

define C-struct <XComposeStatus>
  sealed inline-only slot compose-ptr-value :: <XPointer>;
  sealed inline-only slot chars-matched-value :: <C-int>;
  pointer-type-name: <XComposeStatus*>;
  c-name: "struct _XComposeStatus";
end C-struct <XComposeStatus>;

define inline-only function IsKeypadKey (keysym);
   ((keysym >= $XK-KP-Space) & (keysym <= $XK-KP-Equal))
end;

define inline-only function IsCursorKey (keysym);
   ((keysym >= $XK-Home)     & (keysym < $XK-Select))
end;

define inline-only function IsPFKey (keysym);
   ((keysym >= $XK-KP-F1)     & (keysym <= $XK-KP-F4))
end;

define inline-only function IsFunctionKey (keysym);
   ((keysym >= $XK-F1)       & (keysym <= $XK-F35))
end;

define inline-only function IsMiscFunctionKey (keysym);
   ((keysym >= $XK-Select)   & (keysym <= $XK-Break))
end;

define inline-only function IsModifierKey (keysym);
   (((keysym >= $XK-Shift-L) & (keysym <= $XK-Hyper-R)) |
	(keysym = $XK-Mode-switch) | (keysym = $XK-Num-Lock))
end;
define C-subtype <Region> ( <C-void*> ) end;
define inline-only constant $RectangleOut               =    0;
define inline-only constant $RectangleIn                =    1;
define inline-only constant $RectanglePart              =    2;

define C-struct <XVisualInfo>
  sealed inline-only slot visual-value   :: <Visual*>;
  sealed inline-only slot visualid-value :: <C-VisualID>;
  sealed inline-only slot screen-value   :: <C-int>;
  sealed inline-only slot depth-value    :: <C-int>;
  sealed inline-only slot class-value    :: <C-int>;
  sealed inline-only slot red-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot green-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot blue-mask-value :: <C-both-unsigned-long>;
  sealed inline-only slot colormap-size-value :: <C-int>;
  sealed inline-only slot bits-per-rgb-value :: <C-int>;
  pointer-type-name: <XVisualInfo*>;
end C-struct <XVisualInfo>;
define inline-only constant $VisualNoMask               =  #x0;
define inline-only constant $VisualIDMask               =  #x1;
define inline-only constant $VisualScreenMask           =  #x2;
define inline-only constant $VisualDepthMask            =  #x4;
define inline-only constant $VisualClassMask            =  #x8;
define inline-only constant $VisualRedMaskMask          = #x10;
define inline-only constant $VisualGreenMaskMask        = #x20;
define inline-only constant $VisualBlueMaskMask         = #x40;
define inline-only constant $VisualColormapSizeMask     = #x80;
define inline-only constant $VisualBitsPerRGBMask       = #x100;
define inline-only constant $VisualAllMask              = #x1FF;

define C-struct <XStandardColormap>
  sealed inline-only slot colormap-value :: <C-Colormap>;
  sealed inline-only slot red-max-value  :: <C-both-unsigned-long>;
  sealed inline-only slot red-mult-value :: <C-both-unsigned-long>;
  sealed inline-only slot green-max-value :: <C-both-unsigned-long>;
  sealed inline-only slot green-mult-value :: <C-both-unsigned-long>;
  sealed inline-only slot blue-max-value :: <C-both-unsigned-long>;
  sealed inline-only slot blue-mult-value :: <C-both-unsigned-long>;
  sealed inline-only slot base-pixel-value :: <C-both-unsigned-long>;
  sealed inline-only slot visualid-value :: <C-VisualID>;
  sealed inline-only slot killid-value   :: <C-XID>;
  pointer-type-name: <XStandardColormap*>;
end C-struct <XStandardColormap>;
define inline-only constant $ReleaseByFreeingColormap   =
	c-type-cast(<C-XID>,1);
define inline-only constant $BitmapSuccess              =    0;
define inline-only constant $BitmapOpenFailed           =    1;
define inline-only constant $BitmapFileInvalid          =    2;
define inline-only constant $BitmapNoMemory             =    3;
define inline-only constant $XCSUCCESS                  =    0;
define inline-only constant $XCNOMEM                    =    1;
define inline-only constant $XCNOENT                    =    2;
define inline constant <C-XContext> = <C-int>;
define inline constant <XContext> = <integer>;
define inline constant <XContext*> = <C-int*>;

define inline-only function XUniqueContext ();
  (c-type-cast(<C-XContext>, XrmUniqueQuark()))
end;

define inline-only function XStringToContext (string);
  (c-type-cast(<C-XContext>, XrmStringToQuark(string)))
end;

define inline-only C-function XAllocClassHint
  result value :: <XClassHint*>;
  c-name: "XAllocClassHint";
end;

define inline-only C-function XAllocIconSize
  result value :: <XIconSize*>;
  c-name: "XAllocIconSize";
end;

define inline-only C-function XAllocSizeHints
  result value :: <XSizeHints*>;
  c-name: "XAllocSizeHints";
end;

define inline-only C-function XAllocStandardColormap
  result value :: <XStandardColormap*>;
  c-name: "XAllocStandardColormap";
end;

define inline-only C-function XAllocWMHints
  result value :: <XWMHints*>;
  c-name: "XAllocWMHints";
end;

define inline-only C-function XClipBox
  parameter r          :: <Region>;
  parameter rect-return :: <XRectangle*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XClipBox";
end;

define inline-only C-function XCreateRegion
  result value :: <Region>;
  c-name: "XCreateRegion";
end;

define inline-only C-function XDefaultString
  result value :: <C-string>;
  c-name: "XDefaultString";
end;

define inline-only C-function XDeleteContext
  parameter display    :: <Display*>;
  parameter rid        :: <C-XID>;
  parameter context    :: <C-XContext>;
  result value :: <C-int>;
  c-name: "XDeleteContext";
end;

define inline-only C-function XDestroyRegion
  parameter r          :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XDestroyRegion";
end;

define inline-only C-function XEmptyRegion
  parameter r          :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XEmptyRegion";
end;

define inline-only C-function XEqualRegion
  parameter r1         :: <Region>;
  parameter r2         :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XEqualRegion";
end;

define inline-only C-function XFindContext
  parameter display    :: <Display*>;
  parameter rid        :: <C-XID>;
  parameter context    :: <C-XContext>;
  parameter data-return :: <XPointer*>;
  result value :: <C-int>;
  c-name: "XFindContext";
end;

define inline-only C-function XGetClassHint
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter class-hints-return :: <XClassHint*>;
  result value :: <C-Status>;
  c-name: "XGetClassHint";
end;

define inline-only C-function XGetIconSizes
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter size-list-return :: <XIconSize**>;
  output parameter count-return :: <C-int*>;
  result value :: <C-Status>;
  c-name: "XGetIconSizes";
end;

define inline-only C-function XGetNormalHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter hints-return :: <XSizeHints*>;
  result value :: <C-Status>;
  c-name: "XGetNormalHints";
end;

define inline-only C-function XGetRGBColormaps
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  output parameter stdcmap-return :: <XStandardColormap**>;
  output parameter count-return :: <C-int*>;
  parameter property   :: <C-Atom>;
  result value :: <C-Status>;
  c-name: "XGetRGBColormaps";
end;

define inline-only C-function XGetSizeHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter hints-return :: <XSizeHints*>;
  parameter property   :: <C-Atom>;
  result value :: <C-Status>;
  c-name: "XGetSizeHints";
end;

define inline-only C-function XGetStandardColormap
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter colormap-return :: <XStandardColormap*>;
  parameter property   :: <C-Atom>;
  result value :: <C-Status>;
  c-name: "XGetStandardColormap";
end;

define inline-only C-function XGetTextProperty
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter text-prop-return :: <XTextProperty*>;
  parameter property   :: <C-Atom>;
  result value :: <C-Status>;
  c-name: "XGetTextProperty";
end;

define inline-only C-function XGetVisualInfo
  parameter display    :: <Display*>;
  parameter vinfo-mask :: <C-both-long>;
  parameter vinfo-template :: <XVisualInfo*>;
  output parameter nitems-return :: <C-int*>;
  result value :: <XVisualInfo*>;
  c-name: "XGetVisualInfo";
end;

define inline-only C-function XGetWMClientMachine
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter text-prop-return :: <XTextProperty*>;
  result value :: <C-Status>;
  c-name: "XGetWMClientMachine";
end;

define inline-only C-function XGetWMHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  result value :: <XWMHints*>;
  c-name: "XGetWMHints";
end;

define inline-only C-function XGetWMIconName
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter text-prop-return :: <XTextProperty*>;
  result value :: <C-Status>;
  c-name: "XGetWMIconName";
end;

define inline-only C-function XGetWMName
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter text-prop-return :: <XTextProperty*>;
  result value :: <C-Status>;
  c-name: "XGetWMName";
end;

define inline-only C-function XGetWMNormalHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter hints-return :: <XSizeHints*>;
  output parameter supplied-return :: <C-both-long*>;
  result value :: <C-Status>;
  c-name: "XGetWMNormalHints";
end;

define inline-only C-function XGetWMSizeHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter hints-return :: <XSizeHints*>;
  output parameter supplied-return :: <C-both-long*>;
  parameter property   :: <C-Atom>;
  result value :: <C-Status>;
  c-name: "XGetWMSizeHints";
end;

define inline-only C-function XGetZoomHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter zhints-return :: <XSizeHints*>;
  result value :: <C-Status>;
  c-name: "XGetZoomHints";
end;

define inline-only C-function XIntersectRegion
  parameter sra        :: <Region>;
  parameter srb        :: <Region>;
  parameter dr-return  :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XIntersectRegion";
end;

define inline-only C-function XLookupString
  parameter event-struct :: <XKeyEvent*>;
  parameter buffer-return :: <C-string>;
  parameter bytes-buffer :: <C-int>;
  output parameter keysym-return :: <KeySym*>;
  parameter status-in-out :: <XComposeStatus*>;
  result value :: <C-int>;
  c-name: "XLookupString";
end;

define inline-only C-function XMatchVisualInfo
  parameter display    :: <Display*>;
  parameter screen     :: <C-int>;
  parameter depth      :: <C-int>;
  parameter class      :: <C-int>;
  parameter vinfo-return :: <XVisualInfo*>;
  result value :: <C-Status>;
  c-name: "XMatchVisualInfo";
end;

define inline-only C-function XOffsetRegion
  parameter r          :: <Region>;
  parameter dx         :: <C-int>;
  parameter dy         :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XOffsetRegion";
end;

define inline-only C-function XPointInRegion
  parameter r          :: <Region>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  result value :: <C-Bool>;
  c-name: "XPointInRegion";
end;

define inline-only C-function XPolygonRegion
  parameter points     :: <XPoint*>;
  parameter n          :: <C-int>;
  parameter fill-rule  :: <C-int>;
  result value :: <Region>;
  c-name: "XPolygonRegion";
end;

define inline-only C-function XRectInRegion
  parameter r          :: <Region>;
  parameter x          :: <C-int>;
  parameter y          :: <C-int>;
  parameter width      :: <C-unsigned-int>;
  parameter height     :: <C-unsigned-int>;
  result value :: <C-int>;
  c-name: "XRectInRegion";
end;

define inline-only C-function XSaveContext
  parameter display    :: <Display*>;
  parameter rid        :: <C-XID>;
  parameter context    :: <C-XContext>;
  parameter data       ::  /* const */ <C-string>;
  result value :: <C-int>;
  c-name: "XSaveContext";
end;

define inline-only C-function XSetClassHint
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter class-hints :: <XClassHint*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetClassHint";
end;

define inline-only C-function XSetIconSizes
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter size-list  :: <XIconSize*>;
  parameter count      :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetIconSizes";
end;

define inline-only C-function XSetNormalHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter hints      :: <XSizeHints*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetNormalHints";
end;

define inline-only C-function XSetRGBColormaps
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter stdcmaps   :: <XStandardColormap*>;
  parameter count      :: <C-int>;
  parameter property   :: <C-Atom>;
  c-name: "XSetRGBColormaps";
end;

define inline-only C-function XSetSizeHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter hints      :: <XSizeHints*>;
  parameter property   :: <C-Atom>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetSizeHints";
end;

define inline-only C-function XSetStandardProperties
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter window-name ::  /* const */ <C-string>;
  parameter icon-name  ::  /* const */ <C-string>;
  parameter icon-pixmap :: <C-Pixmap>;
  parameter argv       :: <C-string*>;
  parameter argc       :: <C-int>;
  parameter hints      :: <XSizeHints*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetStandardProperties";
end;

define inline-only C-function XSetTextProperty
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter text-prop  :: <XTextProperty*>;
  parameter property   :: <C-Atom>;
  c-name: "XSetTextProperty";
end;

define inline-only C-function XSetWMClientMachine
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter text-prop  :: <XTextProperty*>;
  c-name: "XSetWMClientMachine";
end;

define inline-only C-function XSetWMHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter wm-hints   :: <XWMHints*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetWMHints";
end;

define inline-only C-function XSetWMIconName
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter text-prop  :: <XTextProperty*>;
  c-name: "XSetWMIconName";
end;

define inline-only C-function XSetWMName
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter text-prop  :: <XTextProperty*>;
  c-name: "XSetWMName";
end;

define inline-only C-function XSetWMNormalHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter hints      :: <XSizeHints*>;
  c-name: "XSetWMNormalHints";
end;

define inline-only C-function XSetWMProperties
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter window-name :: <XTextProperty*>;
  parameter icon-name  :: <XTextProperty*>;
  parameter argv       :: <C-string*>;
  parameter argc       :: <C-int>;
  parameter normal-hints :: <XSizeHints*>;
  parameter wm-hints   :: <XWMHints*>;
  parameter class-hints :: <XClassHint*>;
  c-name: "XSetWMProperties";
end;

define inline-only C-function XmbSetWMProperties
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter window-name ::  /* const */ <C-string>;
  parameter icon-name  ::  /* const */ <C-string>;
  parameter argv       :: <C-string*>;
  parameter argc       :: <C-int>;
  parameter normal-hints :: <XSizeHints*>;
  parameter wm-hints   :: <XWMHints*>;
  parameter class-hints :: <XClassHint*>;
  c-name: "XmbSetWMProperties";
end;

define inline-only C-function XSetWMSizeHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter hints      :: <XSizeHints*>;
  parameter property   :: <C-Atom>;
  c-name: "XSetWMSizeHints";
end;

define inline-only C-function XSetRegion
  parameter display    :: <Display*>;
  parameter gc         :: <GC>;
  parameter r          :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetRegion";
end;

define inline-only C-function XSetStandardColormap
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter colormap   :: <XStandardColormap*>;
  parameter property   :: <C-Atom>;
  c-name: "XSetStandardColormap";
end;

define inline-only C-function XSetZoomHints
  parameter display    :: <Display*>;
  parameter w          :: <C-Window>;
  parameter zhints     :: <XSizeHints*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSetZoomHints";
end;

define inline-only C-function XShrinkRegion
  parameter r          :: <Region>;
  parameter dx         :: <C-int>;
  parameter dy         :: <C-int>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XShrinkRegion";
end;

define inline-only C-function XStringListToTextProperty
  parameter list       :: <C-string*>;
  parameter count      :: <C-int>;
  parameter text-prop-return :: <XTextProperty*>;
  result value :: <C-Status>;
  c-name: "XStringListToTextProperty";
end;

define inline-only C-function XSubtractRegion
  parameter sra        :: <Region>;
  parameter srb        :: <Region>;
  parameter dr-return  :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XSubtractRegion";
end;

define inline-only C-function XmbTextListToTextProperty
  parameter display    :: <Display*>;
  parameter list       :: <C-string*>;
  parameter count      :: <C-int>;
  parameter style      :: <C-int>;
  parameter text-prop-return :: <XTextProperty*>;
  result value :: <C-int>;
  c-name: "XmbTextListToTextProperty";
end;

define inline-only C-function XwcTextListToTextProperty
  parameter display    :: <Display*>;
  parameter list       :: <C-unicode-string*>;
  parameter count      :: <C-int>;
  parameter style      :: <C-int>;
  parameter text-prop-return :: <XTextProperty*>;
  result value :: <C-int>;
  c-name: "XwcTextListToTextProperty";
end;

define inline-only C-function XwcFreeStringList
  parameter list       :: <C-unicode-string*>;
  c-name: "XwcFreeStringList";
end;

define inline-only C-function XTextPropertyToStringList
  parameter text-prop  :: <XTextProperty*>;
  output parameter list-return :: <C-string**>;
  output parameter count-return :: <C-int*>;
  result value :: <C-Status>;
  c-name: "XTextPropertyToStringList";
end;

define inline-only C-function XmbTextPropertyToTextList
  parameter display    :: <Display*>;
  parameter text-prop  :: <XTextProperty*>;
  output parameter list-return :: <C-string**>;
  output parameter count-return :: <C-int*>;
  result value :: <C-int>;
  c-name: "XmbTextPropertyToTextList";
end;

define inline-only C-function XwcTextPropertyToTextList
  parameter display    :: <Display*>;
  parameter text-prop  :: <XTextProperty*>;
  parameter list-return :: <C-unicode-string**>;
  output parameter count-return :: <C-int*>;
  result value :: <C-int>;
  c-name: "XwcTextPropertyToTextList";
end;

define inline-only C-function XUnionRectWithRegion
  parameter rectangle  :: <XRectangle*>;
  parameter src-region :: <Region>;
  parameter dest-region-return :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUnionRectWithRegion";
end;

define inline-only C-function XUnionRegion
  parameter sra        :: <Region>;
  parameter srb        :: <Region>;
  parameter dr-return  :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XUnionRegion";
end;

define inline-only C-function XWMGeometry
  parameter display    :: <Display*>;
  parameter screen-number :: <C-int>;
  parameter user-geometry ::  /* const */ <C-string>;
  parameter default-geometry ::  /* const */ <C-string>;
  parameter border-width :: <C-unsigned-int>;
  parameter hints      :: <XSizeHints*>;
  output parameter x-return :: <C-int*>;
  output parameter y-return :: <C-int*>;
  output parameter width-return :: <C-int*>;
  output parameter height-return :: <C-int*>;
  output parameter gravity-return :: <C-int*>;
  result value :: <C-int>;
  c-name: "XWMGeometry";
end;

define inline-only C-function XXorRegion
  parameter sra        :: <Region>;
  parameter srb        :: <Region>;
  parameter dr-return  :: <Region>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XXorRegion";
end;

define sealed domain make (singleton(<XSizeHints*>));
define sealed domain initialize (<XSizeHints*>);
define sealed domain make (singleton(<XWMHints*>));
define sealed domain initialize (<XWMHints*>);
define sealed domain make (singleton(<XTextProperty*>));
define sealed domain initialize (<XTextProperty*>);
define sealed domain make (singleton(<XIconSize*>));
define sealed domain initialize (<XIconSize*>);
define sealed domain make (singleton(<XClassHint*>));
define sealed domain initialize (<XClassHint*>);
define sealed domain make (singleton(<XComposeStatus*>));
define sealed domain initialize (<XComposeStatus*>);
define sealed domain make (singleton(<XVisualInfo*>));
define sealed domain initialize (<XVisualInfo*>);
define sealed domain make (singleton(<XStandardColormap*>));
define sealed domain initialize (<XStandardColormap*>);
