Module:    Motif
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Xm.h"; do not edit.

//	RCSfile: Xm.h,v 
//	Revision: 1.100 
//	Date: 95/02/14 06:22:25 
define inline-only constant $XmVERSION                  =    1;
define inline-only constant $XmREVISION                 =    2;
define inline-only constant $XmUPDATE-LEVEL             =    4;
define inline-only constant $XmVERSION-STRING           =
	"@(#)OSF/Motif Version 1.2.4";
define C-variable xmUseVersion :: <C-int>
  c-name: "xmUseVersion";
end;
define inline-only constant $XmUNSPECIFIED-PIXMAP       =    2;
define inline-only constant $XmSTRING-OS-CHARSET        =
	$XmSTRING-ISO8859-1;
define inline-only constant $XmFALLBACK-CHARSET         =
	$XmSTRING-ISO8859-1;
define inline-only constant $XmDEFAULT-DARK-THRESHOLD   =   15;
define inline-only constant $XmDEFAULT-LIGHT-THRESHOLD  =   77;
define inline-only constant $XmDEFAULT-FOREGROUND-THRESHOLD =   35;
define C-variable %XmSDEFAULT-FONT :: <C-string>
  c-name: "_XmSDEFAULT_FONT";
end;
define C-variable %XmSDEFAULT-BACKGROUND :: <C-string>
  c-name: "_XmSDEFAULT_BACKGROUND";
end;
// enum XmFontType:
define inline-only constant $XmFONT-IS-FONT = -1 + 1;
define inline-only constant $XmFONT-IS-FONTSET = $XmFONT-IS-FONT + 1;

define inline-only constant $XmSTRING-DIRECTION-L-TO-R = -1 + 1;
define inline-only constant $XmSTRING-DIRECTION-R-TO-L = $XmSTRING-DIRECTION-L-TO-R + 1;
define inline-only constant $XmSTRING-DIRECTION-DEFAULT = 255;

define inline constant <XmStringDirection> = <C-unsigned-char>;
define inline constant <XmString> = <C-unsigned-char*>;
define inline constant <XmStringTable> = <XmString*>;
define inline constant <XmStringCharSet> = <C-string>;
define inline constant <XmStringComponentType> = <C-unsigned-char>;
define C-subtype <XmFontListEntry> ( <C-void*> ) end;
define C-subtype <XmFontList> ( <C-void*> ) end;
define C-subtype <XmStringContext> ( <C-void*> ) end;
define C-subtype <XmFontContext> ( <C-void*> ) end;
define inline-only constant $XmSTRING-COMPONENT-UNKNOWN = -1 + 1;
define inline-only constant $XmSTRING-COMPONENT-CHARSET = $XmSTRING-COMPONENT-UNKNOWN + 1;
define inline-only constant $XmSTRING-COMPONENT-TEXT = $XmSTRING-COMPONENT-CHARSET + 1;
define inline-only constant $XmSTRING-COMPONENT-DIRECTION = $XmSTRING-COMPONENT-TEXT + 1;
define inline-only constant $XmSTRING-COMPONENT-SEPARATOR = $XmSTRING-COMPONENT-DIRECTION + 1;
define inline-only constant $XmSTRING-COMPONENT-LOCALE-TEXT = $XmSTRING-COMPONENT-SEPARATOR + 1;

define inline-only constant $XmSTRING-COMPONENT-END     =
	c-type-cast(<XmStringComponentType>,126);
define inline-only constant $XmSTRING-COMPONENT-USER-BEGIN =
	c-type-cast(<XmStringComponentType>,128);
define inline-only constant $XmSTRING-COMPONENT-USER-END =
	c-type-cast(<XmStringComponentType>,255);
define C-variable xmPrimitiveWidgetClass :: <WidgetClass>
  c-name: "xmPrimitiveWidgetClass";
end;
define C-subtype <XmPrimitiveWidgetClass> ( <C-void*> ) end;
define C-subtype <XmPrimitiveWidget> ( <C-void*> ) end;
define C-variable xmGadgetClass :: <WidgetClass>
  c-name: "xmGadgetClass";
end;
define C-subtype <XmGadgetClass> ( <C-void*> ) end;
define C-subtype <XmGadget> ( <C-void*> ) end;
define C-variable xmManagerWidgetClass :: <WidgetClass>
  c-name: "xmManagerWidgetClass";
end;
define C-subtype <XmManagerWidgetClass> ( <C-void*> ) end;
define C-subtype <XmManagerWidget> ( <C-void*> ) end;
// Class Test Macros (fast subclassing is in XmP.h)

define inline-only function XmIsPrimitive (w);
  XtIsSubclass(w, xmPrimitiveWidgetClass())
end;

define inline-only function XmIsGadget (w);
  XtIsSubclass(w, xmGadgetClass())
end;

define inline-only function XmIsManager (w);
  XtIsSubclass(w, xmManagerWidgetClass())
end;
// Primitive Resources and define values
define inline-only constant $XmCHANGE-ALL = -1 + 1;
define inline-only constant $XmCHANGE-NONE = $XmCHANGE-ALL + 1;
define inline-only constant $XmCHANGE-WIDTH = $XmCHANGE-NONE + 1;
define inline-only constant $XmCHANGE-HEIGHT = $XmCHANGE-WIDTH + 1;

define inline-only constant $XmPIXELS = -1 + 1;
define inline-only constant $Xm100TH-MILLIMETERS = $XmPIXELS + 1;
define inline-only constant $Xm1000TH-INCHES = $Xm100TH-MILLIMETERS + 1;
define inline-only constant $Xm100TH-POINTS = $Xm1000TH-INCHES + 1;
define inline-only constant $Xm100TH-FONT-UNITS = $Xm100TH-POINTS + 1;

define inline-only constant $XmDESTROY = -1 + 1;
define inline-only constant $XmUNMAP = $XmDESTROY + 1;
define inline-only constant $XmDO-NOTHING = $XmUNMAP + 1;

define inline-only constant $XmEXPLICIT = -1 + 1;
define inline-only constant $XmPOINTER = $XmEXPLICIT + 1;

// Navigation defines 
define inline-only constant $XmNONE = -1 + 1;
define inline-only constant $XmTAB-GROUP = $XmNONE + 1;
define inline-only constant $XmSTICKY-TAB-GROUP = $XmTAB-GROUP + 1;
define inline-only constant $XmEXCLUSIVE-TAB-GROUP = $XmSTICKY-TAB-GROUP + 1;

define inline-only constant $XmDYNAMIC-DEFAULT-TAB-GROUP =  255;
// Audible warning
define inline-only constant $XmBELL = 1;

// Menu defines
define inline-only constant $XmNO-ORIENTATION = -1 + 1;
define inline-only constant $XmVERTICAL = $XmNO-ORIENTATION + 1;
define inline-only constant $XmHORIZONTAL = $XmVERTICAL + 1;

define inline-only constant $XmWORK-AREA = -1 + 1;
define inline-only constant $XmMENU-BAR = $XmWORK-AREA + 1;
define inline-only constant $XmMENU-PULLDOWN = $XmMENU-BAR + 1;
define inline-only constant $XmMENU-POPUP = $XmMENU-PULLDOWN + 1;
define inline-only constant $XmMENU-OPTION = $XmMENU-POPUP + 1;

define inline-only constant $XmNO-PACKING = -1 + 1;
define inline-only constant $XmPACK-TIGHT = $XmNO-PACKING + 1;
define inline-only constant $XmPACK-COLUMN = $XmPACK-TIGHT + 1;
define inline-only constant $XmPACK-NONE = $XmPACK-COLUMN + 1;

define inline-only constant $XmALIGNMENT-CONTENTS-TOP = 3;
define inline-only constant $XmALIGNMENT-CONTENTS-BOTTOM = 3 + 1;

define inline-only constant $XmTEAR-OFF-ENABLED = -1 + 1;
define inline-only constant $XmTEAR-OFF-DISABLED = $XmTEAR-OFF-ENABLED + 1;

define inline-only constant $XmUNPOST = -1 + 1;
define inline-only constant $XmUNPOST-AND-REPLAY = $XmUNPOST + 1;

define inline-only constant $XmLAST-POSITION = -1;
define inline-only constant $XmFIRST-POSITION = -1 + 1;

// Label/Frame defines
define inline-only constant $XmALIGNMENT-BEGINNING = -1 + 1;
define inline-only constant $XmALIGNMENT-CENTER = $XmALIGNMENT-BEGINNING + 1;
define inline-only constant $XmALIGNMENT-END = $XmALIGNMENT-CENTER + 1;

define inline-only constant $XmALIGNMENT-BASELINE-TOP = -1 + 1;
define inline-only constant $XmALIGNMENT-BASELINE-BOTTOM = 2;
define inline-only constant $XmALIGNMENT-WIDGET-TOP = 2 + 1;
define inline-only constant $XmALIGNMENT-WIDGET-BOTTOM = $XmALIGNMENT-WIDGET-TOP + 1;

// Frame defines
define inline-only constant $XmFRAME-GENERIC-CHILD = -1 + 1;
define inline-only constant $XmFRAME-WORKAREA-CHILD = $XmFRAME-GENERIC-CHILD + 1;
define inline-only constant $XmFRAME-TITLE-CHILD = $XmFRAME-WORKAREA-CHILD + 1;

// ToggleButton  defines
define inline-only constant $XmN-OF-MANY = 1;
define inline-only constant $XmONE-OF-MANY = 1 + 1;

// Form defines
define inline-only constant $XmATTACH-NONE = -1 + 1;
define inline-only constant $XmATTACH-FORM = $XmATTACH-NONE + 1;
define inline-only constant $XmATTACH-OPPOSITE-FORM = $XmATTACH-FORM + 1;
define inline-only constant $XmATTACH-WIDGET = $XmATTACH-OPPOSITE-FORM + 1;
define inline-only constant $XmATTACH-OPPOSITE-WIDGET = $XmATTACH-WIDGET + 1;
define inline-only constant $XmATTACH-POSITION = $XmATTACH-OPPOSITE-WIDGET + 1;
define inline-only constant $XmATTACH-SELF = $XmATTACH-POSITION + 1;

define inline-only constant $XmRESIZE-NONE = -1 + 1;
define inline-only constant $XmRESIZE-GROW = $XmRESIZE-NONE + 1;
define inline-only constant $XmRESIZE-ANY = $XmRESIZE-GROW + 1;

// Callback reasons 
define inline-only constant $XmCR-NONE = -1 + 1;
define inline-only constant $XmCR-HELP = $XmCR-NONE + 1;
define inline-only constant $XmCR-VALUE-CHANGED = $XmCR-HELP + 1;
define inline-only constant $XmCR-INCREMENT = $XmCR-VALUE-CHANGED + 1;
define inline-only constant $XmCR-DECREMENT = $XmCR-INCREMENT + 1;
define inline-only constant $XmCR-PAGE-INCREMENT = $XmCR-DECREMENT + 1;
define inline-only constant $XmCR-PAGE-DECREMENT = $XmCR-PAGE-INCREMENT + 1;
define inline-only constant $XmCR-TO-TOP = $XmCR-PAGE-DECREMENT + 1;
define inline-only constant $XmCR-TO-BOTTOM = $XmCR-TO-TOP + 1;
define inline-only constant $XmCR-DRAG = $XmCR-TO-BOTTOM + 1;
define inline-only constant $XmCR-ACTIVATE = $XmCR-DRAG + 1;
define inline-only constant $XmCR-ARM = $XmCR-ACTIVATE + 1;
define inline-only constant $XmCR-DISARM = $XmCR-ARM + 1;
define inline-only constant $XmCR-MAP = 16;
define inline-only constant $XmCR-UNMAP = 16 + 1;
define inline-only constant $XmCR-FOCUS = $XmCR-UNMAP + 1;
define inline-only constant $XmCR-LOSING-FOCUS = $XmCR-FOCUS + 1;
define inline-only constant $XmCR-MODIFYING-TEXT-VALUE = $XmCR-LOSING-FOCUS + 1;
define inline-only constant $XmCR-MOVING-INSERT-CURSOR = $XmCR-MODIFYING-TEXT-VALUE + 1;
define inline-only constant $XmCR-EXECUTE = $XmCR-MOVING-INSERT-CURSOR + 1;
define inline-only constant $XmCR-SINGLE-SELECT = $XmCR-EXECUTE + 1;
define inline-only constant $XmCR-MULTIPLE-SELECT = $XmCR-SINGLE-SELECT + 1;
define inline-only constant $XmCR-EXTENDED-SELECT = $XmCR-MULTIPLE-SELECT + 1;
define inline-only constant $XmCR-BROWSE-SELECT = $XmCR-EXTENDED-SELECT + 1;
define inline-only constant $XmCR-DEFAULT-ACTION = $XmCR-BROWSE-SELECT + 1;
define inline-only constant $XmCR-CLIPBOARD-DATA-REQUEST = $XmCR-DEFAULT-ACTION + 1;
define inline-only constant $XmCR-CLIPBOARD-DATA-DELETE = $XmCR-CLIPBOARD-DATA-REQUEST + 1;
define inline-only constant $XmCR-CASCADING = $XmCR-CLIPBOARD-DATA-DELETE + 1;
define inline-only constant $XmCR-OK = $XmCR-CASCADING + 1;
define inline-only constant $XmCR-CANCEL = $XmCR-OK + 1;
define inline-only constant $XmCR-APPLY = 34;
define inline-only constant $XmCR-NO-MATCH = 34 + 1;
define inline-only constant $XmCR-COMMAND-ENTERED = $XmCR-NO-MATCH + 1;
define inline-only constant $XmCR-COMMAND-CHANGED = $XmCR-COMMAND-ENTERED + 1;
define inline-only constant $XmCR-EXPOSE = $XmCR-COMMAND-CHANGED + 1;
define inline-only constant $XmCR-RESIZE = $XmCR-EXPOSE + 1;
define inline-only constant $XmCR-INPUT = $XmCR-RESIZE + 1;
define inline-only constant $XmCR-GAIN-PRIMARY = $XmCR-INPUT + 1;
define inline-only constant $XmCR-LOSE-PRIMARY = $XmCR-GAIN-PRIMARY + 1;
define inline-only constant $XmCR-CREATE = $XmCR-LOSE-PRIMARY + 1;
define inline-only constant $XmCR-TEAR-OFF-ACTIVATE = $XmCR-CREATE + 1;
define inline-only constant $XmCR-TEAR-OFF-DEACTIVATE = $XmCR-TEAR-OFF-ACTIVATE + 1;
define inline-only constant $XmCR-OBSCURED-TRAVERSAL = $XmCR-TEAR-OFF-DEACTIVATE + 1;
define inline-only constant $XmCR-PROTOCOLS = $XmCR-OBSCURED-TRAVERSAL + 1;

// Callback structures 

define C-struct <XmAnyCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  pointer-type-name: <XmAnyCallbackStruct*>;
end C-struct <XmAnyCallbackStruct>;

define C-struct <XmArrowButtonCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot click-count-value :: <C-int>;
  pointer-type-name: <XmArrowButtonCallbackStruct*>;
end C-struct <XmArrowButtonCallbackStruct>;

define C-struct <XmDrawingAreaCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot window-value   :: <C-Window>;
  pointer-type-name: <XmDrawingAreaCallbackStruct*>;
end C-struct <XmDrawingAreaCallbackStruct>;

define C-struct <XmDrawnButtonCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot window-value   :: <C-Window>;
  sealed inline-only slot click-count-value :: <C-int>;
  pointer-type-name: <XmDrawnButtonCallbackStruct*>;
end C-struct <XmDrawnButtonCallbackStruct>;

define C-struct <XmPushButtonCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot click-count-value :: <C-int>;
  pointer-type-name: <XmPushButtonCallbackStruct*>;
end C-struct <XmPushButtonCallbackStruct>;

define C-struct <XmRowColumnCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot widget-value   :: <Widget>;
  sealed inline-only slot data-value     :: <C-string>;
  sealed inline-only slot callbackstruct-value :: <C-string>;
  pointer-type-name: <XmRowColumnCallbackStruct*>;
end C-struct <XmRowColumnCallbackStruct>;

define C-struct <XmScrollBarCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot value-value    :: <C-int>;
  sealed inline-only slot pixel-value    :: <C-int>;
  pointer-type-name: <XmScrollBarCallbackStruct*>;
end C-struct <XmScrollBarCallbackStruct>;

define C-struct <XmToggleButtonCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot set-value      :: <C-int>;
  pointer-type-name: <XmToggleButtonCallbackStruct*>;
end C-struct <XmToggleButtonCallbackStruct>;

define C-struct <XmListCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot item-value     :: <XmString>;
  sealed inline-only slot item-length-value :: <C-int>;
  sealed inline-only slot item-position-value :: <C-int>;
  sealed inline-only slot selected-items-value :: <XmString*>;
  sealed inline-only slot selected-item-count-value :: <C-int>;
  sealed inline-only slot selected-item-positions-value :: <C-int*>;
  sealed inline-only slot selection-type-value :: <C-char>;
  pointer-type-name: <XmListCallbackStruct*>;
end C-struct <XmListCallbackStruct>;

define C-struct <XmSelectionBoxCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot value-value    :: <XmString>;
  sealed inline-only slot length-value   :: <C-int>;
  pointer-type-name: <XmSelectionBoxCallbackStruct*>;
end C-struct <XmSelectionBoxCallbackStruct>;

define C-struct <XmCommandCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot value-value    :: <XmString>;
  sealed inline-only slot length-value   :: <C-int>;
  pointer-type-name: <XmCommandCallbackStruct*>;
end C-struct <XmCommandCallbackStruct>;

define C-struct <XmFileSelectionBoxCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot value-value    :: <XmString>;
  sealed inline-only slot length-value   :: <C-int>;
  sealed inline-only slot mask-value     :: <XmString>;
  sealed inline-only slot mask-length-value :: <C-int>;
  sealed inline-only slot dir-value      :: <XmString>;
  sealed inline-only slot dir-length-value :: <C-int>;
  sealed inline-only slot pattern-value  :: <XmString>;
  sealed inline-only slot pattern-length-value :: <C-int>;
  pointer-type-name: <XmFileSelectionBoxCallbackStruct*>;
end C-struct <XmFileSelectionBoxCallbackStruct>;

define C-struct <XmScaleCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot value-value    :: <C-int>;
  pointer-type-name: <XmScaleCallbackStruct*>;
end C-struct <XmScaleCallbackStruct>;
// PushButton defines
define inline-only constant $XmMULTICLICK-DISCARD = -1 + 1;
define inline-only constant $XmMULTICLICK-KEEP = $XmMULTICLICK-DISCARD + 1;

// DrawnButton defines
define inline-only constant $XmSHADOW-IN = 7;
define inline-only constant $XmSHADOW-OUT = 7 + 1;

// Arrow defines
define inline-only constant $XmARROW-UP = -1 + 1;
define inline-only constant $XmARROW-DOWN = $XmARROW-UP + 1;
define inline-only constant $XmARROW-LEFT = $XmARROW-DOWN + 1;
define inline-only constant $XmARROW-RIGHT = $XmARROW-LEFT + 1;

define inline-only constant $XmNO-LINE = -1 + 1;
define inline-only constant $XmSINGLE-LINE = $XmNO-LINE + 1;
define inline-only constant $XmDOUBLE-LINE = $XmSINGLE-LINE + 1;
define inline-only constant $XmSINGLE-DASHED-LINE = $XmDOUBLE-LINE + 1;
define inline-only constant $XmDOUBLE-DASHED-LINE = $XmSINGLE-DASHED-LINE + 1;
define inline-only constant $XmSHADOW-ETCHED-IN = $XmDOUBLE-DASHED-LINE + 1;
define inline-only constant $XmSHADOW-ETCHED-OUT = $XmSHADOW-ETCHED-IN + 1;
define inline-only constant $XmSHADOW-ETCHED-IN-DASH = $XmSHADOW-ETCHED-OUT + 1;
define inline-only constant $XmSHADOW-ETCHED-OUT-DASH = $XmSHADOW-ETCHED-IN-DASH + 1;
define inline-only constant $XmINVALID-SEPARATOR-TYPE = $XmSHADOW-ETCHED-OUT-DASH + 1;

define inline-only constant $XmPIXMAP = 1;
define inline-only constant $XmSTRING = 1 + 1;

// Drag and Drop #defines
define inline-only constant $XmWINDOW = -1 + 1;
define inline-only constant $XmCURSOR = 2;

// ScrollBar #defines
define inline-only constant $XmMAX-ON-TOP = -1 + 1;
define inline-only constant $XmMAX-ON-BOTTOM = $XmMAX-ON-TOP + 1;
define inline-only constant $XmMAX-ON-LEFT = $XmMAX-ON-BOTTOM + 1;
define inline-only constant $XmMAX-ON-RIGHT = $XmMAX-ON-LEFT + 1;

define inline-only constant $XmSINGLE-SELECT = -1 + 1;
define inline-only constant $XmMULTIPLE-SELECT = $XmSINGLE-SELECT + 1;
define inline-only constant $XmEXTENDED-SELECT = $XmMULTIPLE-SELECT + 1;
define inline-only constant $XmBROWSE-SELECT = $XmEXTENDED-SELECT + 1;

define inline-only constant $XmSTATIC = -1 + 1;
define inline-only constant $XmDYNAMIC = $XmSTATIC + 1;

define inline-only constant $XmVARIABLE = -1 + 1;
define inline-only constant $XmCONSTANT = $XmVARIABLE + 1;
define inline-only constant $XmRESIZE-IF-POSSIBLE = $XmCONSTANT + 1;

define inline-only constant $XmAUTOMATIC = -1 + 1;
define inline-only constant $XmAPPLICATION-DEFINED = $XmAUTOMATIC + 1;

define inline-only constant $XmAS-NEEDED = 1;

define inline-only constant $SW-TOP                     =    1;
define inline-only constant $SW-BOTTOM                  =    0;
define inline-only constant $SW-LEFT                    =    2;
define inline-only constant $SW-RIGHT                   =    0;
define inline-only constant $XmTOP-LEFT                 =
	logior($SW-TOP, $SW-LEFT);
define inline-only constant $XmBOTTOM-LEFT              =
	logior($SW-BOTTOM, $SW-LEFT);
define inline-only constant $XmTOP-RIGHT                =
	logior($SW-TOP, $SW-RIGHT);
define inline-only constant $XmBOTTOM-RIGHT             =
	logior($SW-BOTTOM, $SW-RIGHT);
define inline-only constant $XmCOMMAND-ABOVE-WORKSPACE = -1 + 1;
define inline-only constant $XmCOMMAND-BELOW-WORKSPACE = $XmCOMMAND-ABOVE-WORKSPACE + 1;

define inline-only constant $XmMULTI-LINE-EDIT = -1 + 1;
define inline-only constant $XmSINGLE-LINE-EDIT = $XmMULTI-LINE-EDIT + 1;

// enum XmTextDirection:
define inline-only constant $XmTEXT-FORWARD = -1 + 1;
define inline-only constant $XmTEXT-BACKWARD = $XmTEXT-FORWARD + 1;

define inline constant <C-XmTextPosition> = <C-long>;
define inline constant <XmTextPosition> = <integer>;
define inline constant <XmTextFormat> = <C-Atom>;
define inline-only constant $XmFMT-8-BIT                =
	c-type-cast(<XmTextFormat>,$XA-STRING);
define inline-only constant $XmFMT-16-BIT               =
	c-type-cast(<XmTextFormat>,2);
// enum XmTextScanType:
define inline-only constant $XmSELECT-POSITION = -1 + 1;
define inline-only constant $XmSELECT-WHITESPACE = $XmSELECT-POSITION + 1;
define inline-only constant $XmSELECT-WORD = $XmSELECT-WHITESPACE + 1;
define inline-only constant $XmSELECT-LINE = $XmSELECT-WORD + 1;
define inline-only constant $XmSELECT-ALL = $XmSELECT-LINE + 1;
define inline-only constant $XmSELECT-PARAGRAPH = $XmSELECT-ALL + 1;

// enum XmHighlightMode:
define inline-only constant $XmHIGHLIGHT-NORMAL = -1 + 1;
define inline-only constant $XmHIGHLIGHT-SELECTED = $XmHIGHLIGHT-NORMAL + 1;
define inline-only constant $XmHIGHLIGHT-SECONDARY-SELECTED = $XmHIGHLIGHT-SELECTED + 1;


define C-struct <XmTextBlockRec>
  sealed inline-only slot ptr-value      :: <C-string>;
  sealed inline-only slot length-value   :: <C-int>;
  sealed inline-only slot format-value   :: <XmTextFormat>;
  pointer-type-name: <XmTextBlockRec*>;
end C-struct <XmTextBlockRec>;
define inline constant <XmTextBlock> = <XmTextBlockRec*>;

define C-struct <XmTextVerifyCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot doit-value     :: <X-Boolean>;
  sealed inline-only slot currInsert-value :: <C-both-long>;
  sealed inline-only slot newInsert-value :: <C-both-long>;
  sealed inline-only slot startPos-value :: <C-both-long>;
  sealed inline-only slot endPos-value   :: <C-both-long>;
  sealed inline-only slot text-value     :: <XmTextBlock>;
  pointer-type-name: <XmTextVerifyCallbackStruct*>;
end C-struct <XmTextVerifyCallbackStruct>;
define inline constant <XmTextVerifyPtr> = <XmTextVerifyCallbackStruct*>;

define C-struct <XmTextBlockRecWcs>
  sealed inline-only slot wcsptr-value   :: <C-unicode-string>;
  sealed inline-only slot length-value   :: <C-int>;
  pointer-type-name: <XmTextBlockRecWcs*>;
end C-struct <XmTextBlockRecWcs>;
define inline constant <XmTextBlockWcs> = <XmTextBlockRecWcs*>;

define C-struct <XmTextVerifyCallbackStructWcs>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot doit-value     :: <X-Boolean>;
  sealed inline-only slot currInsert-value :: <C-both-long>;
  sealed inline-only slot newInsert-value :: <C-both-long>;
  sealed inline-only slot startPos-value :: <C-both-long>;
  sealed inline-only slot endPos-value   :: <C-both-long>;
  sealed inline-only slot text-value     :: <XmTextBlockWcs>;
  pointer-type-name: <XmTextVerifyCallbackStructWcs*>;
end C-struct <XmTextVerifyCallbackStructWcs>;
define inline constant <XmTextVerifyPtrWcs> = <XmTextVerifyCallbackStructWcs*>;
define inline-only constant XmTextGetTopPosition =
	XmTextGetTopCharacter;
define inline-only constant XmTextSetTopPosition =
	XmTextSetTopCharacter;
define inline-only constant $XmCOPY-FAILED              =    0;
define inline-only constant $XmCOPY-SUCCEEDED           =    1;
define inline-only constant $XmCOPY-TRUNCATED           =    2;
define inline-only constant $XmDIALOG-NONE = -1 + 1;
define inline-only constant $XmDIALOG-APPLY-BUTTON = $XmDIALOG-NONE + 1;
define inline-only constant $XmDIALOG-CANCEL-BUTTON = $XmDIALOG-APPLY-BUTTON + 1;
define inline-only constant $XmDIALOG-DEFAULT-BUTTON = $XmDIALOG-CANCEL-BUTTON + 1;
define inline-only constant $XmDIALOG-OK-BUTTON = $XmDIALOG-DEFAULT-BUTTON + 1;
define inline-only constant $XmDIALOG-FILTER-LABEL = $XmDIALOG-OK-BUTTON + 1;
define inline-only constant $XmDIALOG-FILTER-TEXT = $XmDIALOG-FILTER-LABEL + 1;
define inline-only constant $XmDIALOG-HELP-BUTTON = $XmDIALOG-FILTER-TEXT + 1;
define inline-only constant $XmDIALOG-LIST = $XmDIALOG-HELP-BUTTON + 1;
define inline-only constant $XmDIALOG-LIST-LABEL = $XmDIALOG-LIST + 1;
define inline-only constant $XmDIALOG-MESSAGE-LABEL = $XmDIALOG-LIST-LABEL + 1;
define inline-only constant $XmDIALOG-SELECTION-LABEL = $XmDIALOG-MESSAGE-LABEL + 1;
define inline-only constant $XmDIALOG-SYMBOL-LABEL = $XmDIALOG-SELECTION-LABEL + 1;
define inline-only constant $XmDIALOG-TEXT = $XmDIALOG-SYMBOL-LABEL + 1;
define inline-only constant $XmDIALOG-SEPARATOR = $XmDIALOG-TEXT + 1;
define inline-only constant $XmDIALOG-DIR-LIST = $XmDIALOG-SEPARATOR + 1;
define inline-only constant $XmDIALOG-DIR-LIST-LABEL = $XmDIALOG-DIR-LIST + 1;

define inline-only constant $XmDIALOG-HISTORY-LIST      =
	$XmDIALOG-LIST;
define inline-only constant $XmDIALOG-PROMPT-LABEL      =
	$XmDIALOG-SELECTION-LABEL;
define inline-only constant $XmDIALOG-VALUE-TEXT        =
	$XmDIALOG-TEXT;
define inline-only constant $XmDIALOG-COMMAND-TEXT      =
	$XmDIALOG-TEXT;
define inline-only constant $XmDIALOG-FILE-LIST         =
	$XmDIALOG-LIST;
define inline-only constant $XmDIALOG-FILE-LIST-LABEL   =
	$XmDIALOG-LIST-LABEL;
define inline-only constant $XmDIALOG-MODELESS = -1 + 1;
define inline-only constant $XmDIALOG-PRIMARY-APPLICATION-MODAL = $XmDIALOG-MODELESS + 1;
define inline-only constant $XmDIALOG-FULL-APPLICATION-MODAL = $XmDIALOG-PRIMARY-APPLICATION-MODAL + 1;
define inline-only constant $XmDIALOG-SYSTEM-MODAL = $XmDIALOG-FULL-APPLICATION-MODAL + 1;

define inline-only constant $XmDIALOG-APPLICATION-MODAL =
	$XmDIALOG-PRIMARY-APPLICATION-MODAL;
// XmSelectionBox, XmFileSelectionBox and XmCommand - misc. stuff       *
define inline-only constant $XmPLACE-TOP = -1 + 1;
define inline-only constant $XmPLACE-ABOVE-SELECTION = $XmPLACE-TOP + 1;
define inline-only constant $XmPLACE-BELOW-SELECTION = $XmPLACE-ABOVE-SELECTION + 1;

define inline-only constant $XmFILE-DIRECTORY           = ash(1,0);
define inline-only constant $XmFILE-REGULAR             = ash(1,1);
define inline-only constant $XmFILE-ANY-TYPE            =
	logior($XmFILE-DIRECTORY, $XmFILE-REGULAR);
define inline-only constant $XmDIALOG-WORK-AREA = -1 + 1;
define inline-only constant $XmDIALOG-PROMPT = $XmDIALOG-WORK-AREA + 1;
define inline-only constant $XmDIALOG-SELECTION = $XmDIALOG-PROMPT + 1;
define inline-only constant $XmDIALOG-COMMAND = $XmDIALOG-SELECTION + 1;
define inline-only constant $XmDIALOG-FILE-SELECTION = $XmDIALOG-COMMAND + 1;

// XmMessageBox           stuff not common to other dialogs            *
define inline-only constant $XmDIALOG-TEMPLATE = -1 + 1;
define inline-only constant $XmDIALOG-ERROR = $XmDIALOG-TEMPLATE + 1;
define inline-only constant $XmDIALOG-INFORMATION = $XmDIALOG-ERROR + 1;
define inline-only constant $XmDIALOG-MESSAGE = $XmDIALOG-INFORMATION + 1;
define inline-only constant $XmDIALOG-QUESTION = $XmDIALOG-MESSAGE + 1;
define inline-only constant $XmDIALOG-WARNING = $XmDIALOG-QUESTION + 1;
define inline-only constant $XmDIALOG-WORKING = $XmDIALOG-WARNING + 1;

// enum XmVisibility:
define inline-only constant $XmVISIBILITY-UNOBSCURED = -1 + 1;
define inline-only constant $XmVISIBILITY-PARTIALLY-OBSCURED = $XmVISIBILITY-UNOBSCURED + 1;
define inline-only constant $XmVISIBILITY-FULLY-OBSCURED = $XmVISIBILITY-PARTIALLY-OBSCURED + 1;

// enum XmTraversalDirection:
define inline-only constant $XmTRAVERSE-CURRENT = -1 + 1;
define inline-only constant $XmTRAVERSE-NEXT = $XmTRAVERSE-CURRENT + 1;
define inline-only constant $XmTRAVERSE-PREV = $XmTRAVERSE-NEXT + 1;
define inline-only constant $XmTRAVERSE-HOME = $XmTRAVERSE-PREV + 1;
define inline-only constant $XmTRAVERSE-NEXT-TAB-GROUP = $XmTRAVERSE-HOME + 1;
define inline-only constant $XmTRAVERSE-PREV-TAB-GROUP = $XmTRAVERSE-NEXT-TAB-GROUP + 1;
define inline-only constant $XmTRAVERSE-UP = $XmTRAVERSE-PREV-TAB-GROUP + 1;
define inline-only constant $XmTRAVERSE-DOWN = $XmTRAVERSE-UP + 1;
define inline-only constant $XmTRAVERSE-LEFT = $XmTRAVERSE-DOWN + 1;
define inline-only constant $XmTRAVERSE-RIGHT = $XmTRAVERSE-LEFT + 1;


define C-struct <XmTraverseObscuredCallbackStruct>
  sealed inline-only slot reason-value   :: <C-int>;
  sealed inline-only slot event-value    :: <XEvent*>;
  sealed inline-only slot traversal-destination-value :: <Widget>;
  sealed inline-only slot direction-value :: <C-int>;
  pointer-type-name: <XmTraverseObscuredCallbackStruct*>;
  c-name: "struct _XmTraverseObscuredCallbackStruct";
end C-struct <XmTraverseObscuredCallbackStruct>;
define inline constant <XmNavigationType> = <C-unsigned-char>;
define inline constant <XmButtonType> = <C-unsigned-char>;
define inline constant <XmButtonTypeTable> = <XmButtonType*>;
define inline constant <XmKeySymTable> = <KeySym*>;
define inline constant <XmStringCharSetTable> = <XmStringCharSet*>;
define inline-only constant $XmPUSHBUTTON = 1;
define inline-only constant $XmTOGGLEBUTTON = 1 + 1;
define inline-only constant $XmRADIOBUTTON = $XmTOGGLEBUTTON + 1;
define inline-only constant $XmCASCADEBUTTON = $XmRADIOBUTTON + 1;
define inline-only constant $XmSEPARATOR = $XmCASCADEBUTTON + 1;
define inline-only constant $XmDOUBLE-SEPARATOR = $XmSEPARATOR + 1;
define inline-only constant $XmTITLE = $XmDOUBLE-SEPARATOR + 1;

define inline-only constant $XmCHECKBUTTON              =
	$XmTOGGLEBUTTON;

define C-subtype <XmResourceBaseProc> ( <C-function-pointer> ) end;
define macro <XmResourceBaseProc>-callback-wrapper
 { <XmResourceBaseProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter widget1    :: <Widget>;
  parameter xtpointer2 :: <XtPointer>;
  result value :: <XtPointer>;
 end C-callable-wrapper }
end macro;

define C-struct <XmSecondaryResourceDataRec>
  sealed inline-only slot base-proc-value :: <XmResourceBaseProc>;
  sealed inline-only slot client-data-value :: <XtPointer>;
  sealed inline-only slot name-value     :: <X-String>;
  sealed inline-only slot res-class-value :: <X-String>;
  sealed inline-only slot resources-value :: <XtResourceList>;
  sealed inline-only slot num-resources-value :: <C-Cardinal>;
  pointer-type-name: <XmSecondaryResourceDataRec*>;
  c-name: "struct _XmSecondaryResourceDataRec";
end C-struct <XmSecondaryResourceDataRec>;
define inline constant <XmSecondaryResourceData> = <XmSecondaryResourceDataRec*>;

define inline-only C-function XmGetSecondaryResourceData
  parameter w-class    :: <WidgetClass>;
  parameter secondaryDataRtn :: <XmSecondaryResourceData**>;
  result value :: <C-Cardinal>;
  c-name: "XmGetSecondaryResourceData";
end;

define inline-only C-function XmInstallImage
  parameter image      :: <XImage*>;
  parameter image-name :: <C-string>;
  result value :: <X-Boolean>;
  c-name: "XmInstallImage";
end;

define inline-only C-function XmUninstallImage
  parameter image      :: <XImage*>;
  result value :: <X-Boolean>;
  c-name: "XmUninstallImage";
end;

define inline-only C-function XmGetPixmap
  parameter screen     :: <Screen*>;
  parameter image-name :: <C-string>;
  parameter foreground :: <C-Pixel>;
  parameter background :: <C-Pixel>;
  result value :: <C-Pixmap>;
  c-name: "XmGetPixmap";
end;

define inline-only C-function XmGetPixmapByDepth
  parameter screen     :: <Screen*>;
  parameter image-name :: <C-string>;
  parameter foreground :: <C-Pixel>;
  parameter background :: <C-Pixel>;
  parameter depth      :: <C-int>;
  result value :: <C-Pixmap>;
  c-name: "XmGetPixmapByDepth";
end;

define inline-only C-function XmDestroyPixmap
  parameter screen     :: <Screen*>;
  parameter pixmap     :: <C-Pixmap>;
  result value :: <X-Boolean>;
  c-name: "XmDestroyPixmap";
end;

define inline-only C-function XmUpdateDisplay
  parameter w          :: <Widget>;
  c-name: "XmUpdateDisplay";
end;
define inline constant <XmOffset> = <C-both-long>;
define inline constant <XmOffsetPtr> = <XmOffset*>;

define inline-only C-function XmResolvePartOffsets
  parameter w-class    :: <WidgetClass>;
  parameter offset     :: <XmOffsetPtr*>;
  c-name: "XmResolvePartOffsets";
end;

define inline-only C-function XmResolveAllPartOffsets
  parameter w-class    :: <WidgetClass>;
  parameter offset     :: <XmOffsetPtr*>;
  parameter constraint-offset :: <XmOffsetPtr*>;
  c-name: "XmResolveAllPartOffsets";
end;

define inline-only C-function XmWidgetGetBaselines
  parameter wid        :: <Widget>;
  parameter baselines  :: <Dimension**>;
  output parameter line-count :: <C-int*>;
  result value :: <X-Boolean>;
  c-name: "XmWidgetGetBaselines";
end;

define inline-only C-function XmWidgetGetDisplayRect
  parameter wid        :: <Widget>;
  parameter displayrect :: <XRectangle*>;
  result value :: <X-Boolean>;
  c-name: "XmWidgetGetDisplayRect";
end;

define inline-only C-function XmRegisterConverters
  c-name: "XmRegisterConverters";
end;

define inline-only C-function XmCvtStringToUnitType
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter from-val   :: <XrmValue*>;
  parameter to-val     :: <XrmValue*>;
  c-name: "XmCvtStringToUnitType";
end;

define inline-only C-function XmRegisterSegmentEncoding
  parameter fontlist-tag :: <C-string>;
  parameter ct-encoding :: <C-string>;
  result value :: <C-string>;
  c-name: "XmRegisterSegmentEncoding";
end;

define inline-only C-function XmMapSegmentEncoding
  parameter fontlist-tag :: <C-string>;
  result value :: <C-string>;
  c-name: "XmMapSegmentEncoding";
end;

define inline-only C-function XmCvtCTToXmString
  parameter text       :: <C-string>;
  result value :: <XmString>;
  c-name: "XmCvtCTToXmString";
end;

define inline-only C-function XmCvtTextToXmString
  parameter display    :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter from-val   :: <XrmValue*>;
  parameter to-val     :: <XrmValue*>;
  output parameter converter-data :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XmCvtTextToXmString";
end;

define inline-only C-function XmCvtXmStringToCT
  parameter string     :: <XmString>;
  result value :: <C-string>;
  c-name: "XmCvtXmStringToCT";
end;

define inline-only C-function XmCvtXmStringToText
  parameter display    :: <Display*>;
  parameter args       :: <XrmValuePtr>;
  output parameter num-args :: <Cardinal*>;
  parameter from-val   :: <XrmValue*>;
  parameter to-val     :: <XrmValue*>;
  output parameter converter-data :: <XtPointer*>;
  result value :: <X-Boolean>;
  c-name: "XmCvtXmStringToText";
end;

define inline-only C-function XmConvertUnits
  parameter widget     :: <Widget>;
  parameter dimension  :: <C-int>;
  parameter from-type  ::  /* register */ <C-int>;
  parameter from-val   ::  /* register */ <C-int>;
  parameter to-type    ::  /* register */ <C-int>;
  result value :: <C-int>;
  c-name: "XmConvertUnits";
end;

define inline-only C-function XmCvtToHorizontalPixels
  parameter screen     :: <Screen*>;
  parameter from-val   ::  /* register */ <C-int>;
  parameter from-type  ::  /* register */ <C-int>;
  result value :: <C-int>;
  c-name: "XmCvtToHorizontalPixels";
end;

define inline-only C-function XmCvtToVerticalPixels
  parameter screen     :: <Screen*>;
  parameter from-val   ::  /* register */ <C-int>;
  parameter from-type  ::  /* register */ <C-int>;
  result value :: <C-int>;
  c-name: "XmCvtToVerticalPixels";
end;

define inline-only C-function XmCvtFromHorizontalPixels
  parameter screen     :: <Screen*>;
  parameter from-val   ::  /* register */ <C-int>;
  parameter to-type    ::  /* register */ <C-int>;
  result value :: <C-int>;
  c-name: "XmCvtFromHorizontalPixels";
end;

define inline-only C-function XmCvtFromVerticalPixels
  parameter screen     :: <Screen*>;
  parameter from-val   ::  /* register */ <C-int>;
  parameter to-type    ::  /* register */ <C-int>;
  result value :: <C-int>;
  c-name: "XmCvtFromVerticalPixels";
end;

define inline-only C-function XmSetFontUnits
  parameter display    :: <Display*>;
  parameter h-value    :: <C-int>;
  parameter v-value    :: <C-int>;
  c-name: "XmSetFontUnits";
end;

define inline-only C-function XmSetFontUnit
  parameter display    :: <Display*>;
  parameter value      :: <C-int>;
  c-name: "XmSetFontUnit";
end;

define inline-only C-function XmSetMenuCursor
  parameter display    :: <Display*>;
  parameter cursorId   :: <C-Cursor>;
  c-name: "XmSetMenuCursor";
end;

define inline-only C-function XmGetMenuCursor
  parameter display    :: <Display*>;
  result value :: <C-Cursor>;
  c-name: "XmGetMenuCursor";
end;

define inline-only C-function XmCreateSimpleMenuBar
  parameter parent     :: <Widget>;
  parameter name       :: <X-String>;
  parameter args       :: <ArgList>;
  parameter arg-count  :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XmCreateSimpleMenuBar";
end;

define inline-only C-function XmCreateSimplePopupMenu
  parameter parent     :: <Widget>;
  parameter name       :: <X-String>;
  parameter args       :: <ArgList>;
  parameter arg-count  :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XmCreateSimplePopupMenu";
end;

define inline-only C-function XmCreateSimplePulldownMenu
  parameter parent     :: <Widget>;
  parameter name       :: <X-String>;
  parameter args       :: <ArgList>;
  parameter arg-count  :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XmCreateSimplePulldownMenu";
end;

define inline-only C-function XmCreateSimpleOptionMenu
  parameter parent     :: <Widget>;
  parameter name       :: <X-String>;
  parameter args       :: <ArgList>;
  parameter arg-count  :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XmCreateSimpleOptionMenu";
end;

define inline-only C-function XmCreateSimpleRadioBox
  parameter parent     :: <Widget>;
  parameter name       :: <X-String>;
  parameter args       :: <ArgList>;
  parameter arg-count  :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XmCreateSimpleRadioBox";
end;

define inline-only C-function XmCreateSimpleCheckBox
  parameter parent     :: <Widget>;
  parameter name       :: <X-String>;
  parameter args       :: <ArgList>;
  parameter arg-count  :: <C-Cardinal>;
  result value :: <Widget>;
  c-name: "XmCreateSimpleCheckBox";
end;

define inline-only C-function XmTrackingEvent
  parameter widget     :: <Widget>;
  parameter cursor     :: <C-Cursor>;
  parameter confineTo  :: <X-Boolean>;
  parameter pev        :: <XEvent*>;
  result value :: <Widget>;
  c-name: "XmTrackingEvent";
end;

define inline-only C-function XmTrackingLocate
  parameter widget     :: <Widget>;
  parameter cursor     :: <C-Cursor>;
  parameter confineTo  :: <X-Boolean>;
  result value :: <Widget>;
  c-name: "XmTrackingLocate";
end;

define C-subtype <XmColorProc> ( <C-function-pointer> ) end;
define macro <XmColorProc>-callback-wrapper
 { <XmColorProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter bg-color   :: <XColor*>;
  parameter fg-color   :: <XColor*>;
  parameter sel-color  :: <XColor*>;
  parameter ts-color   :: <XColor*>;
  parameter bs-color   :: <XColor*>;
 end C-callable-wrapper }
end macro;

define inline-only C-function XmSetColorCalculation
  parameter proc       :: <XmColorProc>;
  result value :: <XmColorProc>;
  c-name: "XmSetColorCalculation";
end;

define inline-only C-function XmGetColorCalculation
  result value :: <XmColorProc>;
  c-name: "XmGetColorCalculation";
end;

define inline-only C-function XmGetColors
  parameter screen     :: <Screen*>;
  parameter color-map  :: <C-Colormap>;
  parameter background :: <C-Pixel>;
  output parameter foreground-ret :: <Pixel*>;
  output parameter top-shadow-ret :: <Pixel*>;
  output parameter bottom-shadow-ret :: <Pixel*>;
  output parameter select-ret :: <Pixel*>;
  c-name: "XmGetColors";
end;

define inline-only C-function XmChangeColor
  parameter widget     :: <Widget>;
  parameter background :: <C-Pixel>;
  c-name: "XmChangeColor";
end;

define inline-only C-function XmStringCreate
  parameter text       :: <C-string>;
  parameter charset    :: <XmStringCharSet>;
  result value :: <XmString>;
  c-name: "XmStringCreate";
end;

define inline-only C-function XmStringCreateSimple
  parameter text       :: <C-string>;
  result value :: <XmString>;
  c-name: "XmStringCreateSimple";
end;

define inline-only C-function XmStringCreateLocalized
  parameter text       :: <X-String>;
  result value :: <XmString>;
  c-name: "XmStringCreateLocalized";
end;

define inline-only C-function XmStringDirectionCreate
  parameter direction  :: <XmStringDirection>;
  result value :: <XmString>;
  c-name: "XmStringDirectionCreate";
end;

define inline-only C-function XmStringSeparatorCreate
  result value :: <XmString>;
  c-name: "XmStringSeparatorCreate";
end;

define inline-only C-function XmStringSegmentCreate
  parameter text       :: <C-string>;
  parameter charset    :: <XmStringCharSet>;
  parameter direction  :: <XmStringDirection>;
  parameter separator  :: <X-Boolean>;
  result value :: <XmString>;
  c-name: "XmStringSegmentCreate";
end;

define inline-only C-function XmStringLtoRCreate
  parameter text       :: <C-string>;
  parameter charset    :: <XmStringCharSet>;
  result value :: <XmString>;
  c-name: "XmStringLtoRCreate";
end;

define inline-only C-function XmStringCreateLtoR
  parameter text       :: <C-string>;
  parameter charset    :: <XmStringCharSet>;
  result value :: <XmString>;
  c-name: "XmStringCreateLtoR";
end;

define inline-only C-function XmStringInitContext
  output parameter context :: <XmStringContext*>;
  parameter string     :: <XmString>;
  result value :: <X-Boolean>;
  c-name: "XmStringInitContext";
end;

define inline-only C-function XmStringFreeContext
  parameter context    :: <XmStringContext>;
  c-name: "XmStringFreeContext";
end;

define inline-only C-function XmStringGetNextComponent
  parameter context    :: <XmStringContext>;
  parameter text       :: <C-string*>;
  parameter charset    :: <XmStringCharSet*>;
  parameter direction  :: <XmStringDirection*>;
  parameter unknown-tag :: <XmStringComponentType*>;
  output parameter unknown-length :: <C-unsigned-short*>;
  parameter unknown-value :: <C-unsigned-char**>;
  result value :: <XmStringComponentType>;
  c-name: "XmStringGetNextComponent";
end;

define inline-only C-function XmStringPeekNextComponent
  parameter context    :: <XmStringContext>;
  result value :: <XmStringComponentType>;
  c-name: "XmStringPeekNextComponent";
end;

define inline-only C-function XmStringGetNextSegment
  parameter context    :: <XmStringContext>;
  parameter text       :: <C-string*>;
  parameter charset    :: <XmStringCharSet*>;
  parameter direction  :: <XmStringDirection*>;
  parameter separator  :: <X-Boolean*>;
  result value :: <X-Boolean>;
  c-name: "XmStringGetNextSegment";
end;

define inline-only C-function XmStringGetLtoR
  parameter string     :: <XmString>;
  parameter charset    :: <XmStringCharSet>;
  parameter text       :: <C-string*>;
  result value :: <X-Boolean>;
  c-name: "XmStringGetLtoR";
end;

define inline-only C-function XmFontListEntryCreate
  parameter tag        :: <C-string>;
  parameter type       :: <C-int>;
  parameter font       :: <XtPointer>;
  result value :: <XmFontListEntry>;
  c-name: "XmFontListEntryCreate";
end;

define inline-only C-function XmFontListEntryFree
  output parameter entry :: <XmFontListEntry*>;
  c-name: "XmFontListEntryFree";
end;

define inline-only C-function XmFontListEntryGetFont
  parameter entry      :: <XmFontListEntry>;
  parameter typeReturn :: <C-int*>;
  result value :: <XtPointer>;
  c-name: "XmFontListEntryGetFont";
end;

define inline-only C-function XmFontListEntryGetTag
  parameter entry      :: <XmFontListEntry>;
  result value :: <C-string>;
  c-name: "XmFontListEntryGetTag";
end;

define inline-only C-function XmFontListAppendEntry
  parameter old        :: <XmFontList>;
  parameter entry      :: <XmFontListEntry>;
  result value :: <XmFontList>;
  c-name: "XmFontListAppendEntry";
end;

define inline-only C-function XmFontListNextEntry
  parameter context    :: <XmFontContext>;
  result value :: <XmFontListEntry>;
  c-name: "XmFontListNextEntry";
end;

define inline-only C-function XmFontListRemoveEntry
  parameter old        :: <XmFontList>;
  parameter entry      :: <XmFontListEntry>;
  result value :: <XmFontList>;
  c-name: "XmFontListRemoveEntry";
end;

define inline-only C-function XmFontListEntryLoad
  parameter display    :: <Display*>;
  parameter fontName   :: <C-string>;
  parameter type       :: <C-int>;
  parameter tag        :: <C-string>;
  result value :: <XmFontListEntry>;
  c-name: "XmFontListEntryLoad";
end;

define inline-only C-function XmFontListCreate
  parameter font       :: <XFontStruct*>;
  parameter charset    :: <XmStringCharSet>;
  result value :: <XmFontList>;
  c-name: "XmFontListCreate";
end;

define inline-only C-function XmStringCreateFontList
  parameter font       :: <XFontStruct*>;
  parameter charset    :: <XmStringCharSet>;
  result value :: <XmFontList>;
  c-name: "XmStringCreateFontList";
end;

define inline-only C-function XmFontListFree
  parameter fontlist   :: <XmFontList>;
  c-name: "XmFontListFree";
end;

define inline-only C-function XmFontListAdd
  parameter old        :: <XmFontList>;
  parameter font       :: <XFontStruct*>;
  parameter charset    :: <XmStringCharSet>;
  result value :: <XmFontList>;
  c-name: "XmFontListAdd";
end;

define inline-only C-function XmFontListCopy
  parameter fontlist   :: <XmFontList>;
  result value :: <XmFontList>;
  c-name: "XmFontListCopy";
end;

define inline-only C-function XmFontListInitFontContext
  output parameter context :: <XmFontContext*>;
  parameter fontlist   :: <XmFontList>;
  result value :: <X-Boolean>;
  c-name: "XmFontListInitFontContext";
end;

define inline-only C-function XmFontListGetNextFont
  parameter context    :: <XmFontContext>;
  parameter charset    :: <XmStringCharSet*>;
  parameter font       :: <XFontStruct**>;
  result value :: <X-Boolean>;
  c-name: "XmFontListGetNextFont";
end;

define inline-only C-function XmFontListFreeFontContext
  parameter context    :: <XmFontContext>;
  c-name: "XmFontListFreeFontContext";
end;

define inline-only C-function XmStringConcat
  parameter a          :: <XmString>;
  parameter b          :: <XmString>;
  result value :: <XmString>;
  c-name: "XmStringConcat";
end;

define inline-only C-function XmStringNConcat
  parameter first      :: <XmString>;
  parameter second     :: <XmString>;
  parameter n          :: <C-int>;
  result value :: <XmString>;
  c-name: "XmStringNConcat";
end;

define inline-only C-function XmStringCopy
  parameter string     :: <XmString>;
  result value :: <XmString>;
  c-name: "XmStringCopy";
end;

define inline-only C-function XmStringNCopy
  parameter str        :: <XmString>;
  parameter n          :: <C-int>;
  result value :: <XmString>;
  c-name: "XmStringNCopy";
end;

define inline-only C-function XmStringByteCompare
  parameter a1         :: <XmString>;
  parameter b1         :: <XmString>;
  result value :: <X-Boolean>;
  c-name: "XmStringByteCompare";
end;

define inline-only C-function XmStringCompare
  parameter a          :: <XmString>;
  parameter b          :: <XmString>;
  result value :: <X-Boolean>;
  c-name: "XmStringCompare";
end;

define inline-only C-function XmStringLength
  parameter string     :: <XmString>;
  result value :: <C-int>;
  c-name: "XmStringLength";
end;

define inline-only C-function XmStringEmpty
  parameter string     :: <XmString>;
  result value :: <X-Boolean>;
  c-name: "XmStringEmpty";
end;

define inline-only C-function XmStringHasSubstring
  parameter string     :: <XmString>;
  parameter substring  :: <XmString>;
  result value :: <X-Boolean>;
  c-name: "XmStringHasSubstring";
end;

define inline-only C-function XmStringFree
  parameter string     :: <XmString>;
  c-name: "XmStringFree";
end;

define inline-only C-function XmStringBaseline
  parameter fontlist   :: <XmFontList>;
  parameter string     :: <XmString>;
  result value :: <C-Dimension>;
  c-name: "XmStringBaseline";
end;

define inline-only C-function XmStringWidth
  parameter fontlist   :: <XmFontList>;
  parameter string     :: <XmString>;
  result value :: <C-Dimension>;
  c-name: "XmStringWidth";
end;

define inline-only C-function XmStringHeight
  parameter fontlist   :: <XmFontList>;
  parameter string     :: <XmString>;
  result value :: <C-Dimension>;
  c-name: "XmStringHeight";
end;

define inline-only C-function XmStringExtent
  parameter fontlist   :: <XmFontList>;
  parameter string     :: <XmString>;
  output parameter width :: <Dimension*>;
  output parameter height :: <Dimension*>;
  c-name: "XmStringExtent";
end;

define inline-only C-function XmStringLineCount
  parameter string     :: <XmString>;
  result value :: <C-int>;
  c-name: "XmStringLineCount";
end;

define inline-only C-function XmStringDraw
  parameter d          :: <Display*>;
  parameter w          :: <C-Window>;
  parameter fontlist   :: <XmFontList>;
  parameter string     :: <XmString>;
  parameter gc         :: <GC>;
  parameter x          :: <C-Position>;
  parameter y          :: <C-Position>;
  parameter width      :: <C-Dimension>;
  parameter align      :: <C-unsigned-char>;
  parameter lay-dir    :: <C-unsigned-char>;
  parameter clip       :: <XRectangle*>;
  c-name: "XmStringDraw";
end;

define inline-only C-function XmStringDrawImage
  parameter d          :: <Display*>;
  parameter w          :: <C-Window>;
  parameter fontlist   :: <XmFontList>;
  parameter string     :: <XmString>;
  parameter gc         :: <GC>;
  parameter x          :: <C-Position>;
  parameter y          :: <C-Position>;
  parameter width      :: <C-Dimension>;
  parameter align      :: <C-unsigned-char>;
  parameter lay-dir    :: <C-unsigned-char>;
  parameter clip       :: <XRectangle*>;
  c-name: "XmStringDrawImage";
end;

define inline-only C-function XmStringDrawUnderline
  parameter d          :: <Display*>;
  parameter w          :: <C-Window>;
  parameter fntlst     :: <XmFontList>;
  parameter str        :: <XmString>;
  parameter gc         :: <GC>;
  parameter x          :: <C-Position>;
  parameter y          :: <C-Position>;
  parameter width      :: <C-Dimension>;
  parameter align      :: <C-unsigned-char>;
  parameter lay-dir    :: <C-unsigned-char>;
  parameter clip       :: <XRectangle*>;
  parameter under      :: <XmString>;
  c-name: "XmStringDrawUnderline";
end;

define inline-only C-function XmGetDestination
  parameter display    :: <Display*>;
  result value :: <Widget>;
  c-name: "XmGetDestination";
end;

define inline-only C-function XmIsTraversable
  parameter wid        :: <Widget>;
  result value :: <X-Boolean>;
  c-name: "XmIsTraversable";
end;

define inline-only C-function XmGetVisibility
  parameter wid        :: <Widget>;
  result value :: <C-int>;
  c-name: "XmGetVisibility";
end;

define inline-only C-function XmGetTabGroup
  parameter wid        :: <Widget>;
  result value :: <Widget>;
  c-name: "XmGetTabGroup";
end;

define inline-only C-function XmGetFocusWidget
  parameter wid        :: <Widget>;
  result value :: <Widget>;
  c-name: "XmGetFocusWidget";
end;

define inline-only C-function XmProcessTraversal
  parameter w          :: <Widget>;
  parameter dir        :: <C-int>;
  result value :: <X-Boolean>;
  c-name: "XmProcessTraversal";
end;

define inline-only C-function XmAddTabGroup
  parameter tabGroup   :: <Widget>;
  c-name: "XmAddTabGroup";
end;

define inline-only C-function XmRemoveTabGroup
  parameter w          :: <Widget>;
  c-name: "XmRemoveTabGroup";
end;

define inline-only C-function XmImRegister
  parameter w          :: <Widget>;
  parameter reserved   :: <C-unsigned-int>;
  c-name: "XmImRegister";
end;

define inline-only C-function XmImUnregister
  parameter w          :: <Widget>;
  c-name: "XmImUnregister";
end;

define inline-only C-function XmImSetFocusValues
  parameter w          :: <Widget>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  c-name: "XmImSetFocusValues";
end;

define inline-only C-function XmImSetValues
  parameter w          :: <Widget>;
  parameter args       :: <ArgList>;
  parameter num-args   :: <C-Cardinal>;
  c-name: "XmImSetValues";
end;

define inline-only C-function XmImUnsetFocus
  parameter w          :: <Widget>;
  c-name: "XmImUnsetFocus";
end;

define inline-only C-function XmImGetXIM
  parameter w          :: <Widget>;
  result value :: <XIM>;
  c-name: "XmImGetXIM";
end;

define inline-only C-function XmImMbLookupString
  parameter w          :: <Widget>;
  parameter event      :: <XKeyPressedEvent*>;
  parameter buf        :: <C-string>;
  parameter nbytes     :: <C-int>;
  output parameter keysym :: <KeySym*>;
  output parameter status :: <C-int*>;
  result value :: <C-int>;
  c-name: "XmImMbLookupString";
end;

define inline-only constant $XmDEFAULT-FONT = %XmSDEFAULT-FONT();
define inline-only constant $XmDEFAULT-BACKGROUND =
	%XmSDEFAULT-BACKGROUND();
define sealed domain make (singleton(<XmAnyCallbackStruct*>));
define sealed domain initialize (<XmAnyCallbackStruct*>);
define sealed domain make (singleton(<XmArrowButtonCallbackStruct*>));
define sealed domain initialize (<XmArrowButtonCallbackStruct*>);
define sealed domain make (singleton(<XmDrawingAreaCallbackStruct*>));
define sealed domain initialize (<XmDrawingAreaCallbackStruct*>);
define sealed domain make (singleton(<XmDrawnButtonCallbackStruct*>));
define sealed domain initialize (<XmDrawnButtonCallbackStruct*>);
define sealed domain make (singleton(<XmPushButtonCallbackStruct*>));
define sealed domain initialize (<XmPushButtonCallbackStruct*>);
define sealed domain make (singleton(<XmRowColumnCallbackStruct*>));
define sealed domain initialize (<XmRowColumnCallbackStruct*>);
define sealed domain make (singleton(<XmScrollBarCallbackStruct*>));
define sealed domain initialize (<XmScrollBarCallbackStruct*>);
define sealed domain make (singleton(<XmToggleButtonCallbackStruct*>));
define sealed domain initialize (<XmToggleButtonCallbackStruct*>);
define sealed domain make (singleton(<XmListCallbackStruct*>));
define sealed domain initialize (<XmListCallbackStruct*>);
define sealed domain make (singleton(<XmSelectionBoxCallbackStruct*>));
define sealed domain initialize (<XmSelectionBoxCallbackStruct*>);
define sealed domain make (singleton(<XmCommandCallbackStruct*>));
define sealed domain initialize (<XmCommandCallbackStruct*>);
define sealed domain make (singleton(<XmFileSelectionBoxCallbackStruct*>));
define sealed domain initialize (<XmFileSelectionBoxCallbackStruct*>);
define sealed domain make (singleton(<XmScaleCallbackStruct*>));
define sealed domain initialize (<XmScaleCallbackStruct*>);
define sealed domain make (singleton(<XmTextBlockRec*>));
define sealed domain initialize (<XmTextBlockRec*>);
define sealed domain make (singleton(<XmTextVerifyCallbackStruct*>));
define sealed domain initialize (<XmTextVerifyCallbackStruct*>);
define sealed domain make (singleton(<XmTextBlockRecWcs*>));
define sealed domain initialize (<XmTextBlockRecWcs*>);
define sealed domain make (singleton(<XmTextVerifyCallbackStructWcs*>));
define sealed domain initialize (<XmTextVerifyCallbackStructWcs*>);
define sealed domain make (singleton(<XmTraverseObscuredCallbackStruct*>));
define sealed domain initialize (<XmTraverseObscuredCallbackStruct*>);
define sealed domain make (singleton(<XmSecondaryResourceDataRec*>));
define sealed domain initialize (<XmSecondaryResourceDataRec*>);
