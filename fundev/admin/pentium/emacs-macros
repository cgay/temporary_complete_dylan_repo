;;(defalias 'kbdmac (read-kbd-macro
;;"C-s (define- RET C-s SPC RET C-SPC M-C-f ESC w C-z C-s RET C-y RET ESC
;; < C-z"))
;;
;;; this causes infinite loop
;;;(defalias 'M-redo (read-kbd-macro
;;;"ESC xrepeat-complex-command RET M-p RET"))
;;
;;(defalias 'dylan-co (read-kbd-macro
;;"C-x 4 b *scratch* RET C-a C-SPC C-e ESC w
;; C-x o <<shell-command>> dylan-co SPC -claim SPC soft SPC -reason SPC \" C-y \"
;; SPC C-x o C-x C-b C-x o 2*<down> C-e C-r / C-s RET ESC w C-x o C-y C-x o C-x 1
;; C-x o RET <<revert-buffer>> yes RET C-z C-x q C-z C-x q"))
;;
;;(global-set-key "\C-co" 'dylan-co)
;;(global-set-key "\C-ce" 'kbdmac)
;;
;;(defalias 'kbdmac (read-kbd-macro
;;"C-s (define- RET C-s SPC RET C-SPC M-C-f ESC w C-z C-s define-harp-primitive(# C-a 2*C-k 2*C-y 2*<up> C-s #\" RET C-y M-y
;; C-s \" C-r RET C-w C-s op-- RET C-y 2*M-y C-s ) C-r RET C-w C-s end SPC
;; method SPC define-harp-pri <down> 2*RET <up> define SPC method SPC
;; op-- C-y 3*M-y RET (#rest SPC args) SPC => SPC () RET SPC break(format(#t, SPC
;; \"~%Unimplemented SPC primitive: SPC ~a~%\", SPC C-y C-x C-x \" C-e \"));
;; RET SPC apply(dummy-implementation, SPC args); RET
;; end SPC method SPC op-- C-y ; RET ESC < C-z"))
;;
;;(defalias 'kbdmac (read-kbd-macro
;;"ESC C-s define-.*(#\" RET C-s \" C-r RET ESC w 2*<right> SPC C-x b RET
;; C-s RET C-y RET C-s < C-r RET C-x / 1 C-r (define- RET ESC C-f C-SPC C-x j 1
;; ESC w ESC < C-z C-y ,"))
;;
;;;; recursive kbdmac
;;(defalias 'kbdmac (read-kbd-macro
;;"ESC C-s define-.*(#\" RET C-s ); RET C-r > C-f C-s , C-b C-w C-r < RET ), SPC
;; 3*<left> C-r > C-f C-w C-r \", C-s RET SPC #(
;; M-x narrow-to-region RET
;; M-x replace-regexp RET \\([^<>]\\)*\\(<\\([^<>]\\)*>\\) RET C-x g 1 C-e RET
;; C-x C-x M-x replace-string RET >< RET >, SPC < RET
;; M-x widen RET C-l C-c e"))
;;
;;(defalias 'kbdmac (read-kbd-macro
;;"ESC C-s define-.*(#\" RET C-s \" C-r RET ESC w C-z C-s RET C-y RET
;; C-r define SPC method SPC C-s RET C-s ( C-b C-SPC M-C-f C-x x 1
;; C-s => RET C-s < C-b C-s > RET C-x x 2 ESC < C-z 2*<right> SPC C-x g 1 C-x C-x C-x g 2"))
;;
;;;; query-replace-regexp "\(define-\([^#]\)*#\([^#<]\)*\)#(\(\([^)]\)*\))" "\1list(\4)" nil
;;
;;(defalias 'kbdmac (read-kbd-macro
;;"ESC C-s define- \\ ([^#] \\ )*harp-primitive(#\" C-s C-r RET C-w C-x / 0
;; ESC > C-a C-k C-y M-y C-x C-x M-f C-d SPC C-s ( C-r RET SPC C-s \"
;; C-x C-x C-w C-s \" C-b SPC C-s list C-x C-x C-w C-SPC ESC C-f
;; <<narrow-to-region>> C-x C-x <<replace-regexp>> #\"< DEL \\ (< \\ ([^>] \\
;; )*>\" DEL \\ )\" RET \\ 1 RET <<widen>> <right> C-s < C-b C-x C-x C-w SPC
;; DEL RET SPC => SPC C-s \" C-b C-s SPC C-x C-x C-w RET with SPC C-s );
;; C-r RET C-k SPC end; C-e RET C-x j 0 C-c e"))
;;
;;
;;(defalias 'kbdmac (read-kbd-macro
;;"C-s C-j C-j C-j <up> C-d C-c e"))
;;
;;
;;;; define-\(\([^#]\)*harp-primitive\)(#"\(\([^"]\)*\)".*list\(\([^)]\)*)\).*#"\(<\([^>]\)*>\)\([^a-z]\)*\(\([^)]\)*\));
;;
;;;; define \1 \3 \5 => \7 with \10 end;
;;
;;(defalias 'dylan-find-word (read-kbd-macro
;;"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \) \\) RET C-b
;; ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC \*.dylan RET"))
;;
;;(global-set-key "\C-c1" 'dylan-find-word)
;;
;;(defalias 'rename-dylan-methods (read-kbd-macro
;;"C-s SPC DD SPC dylanXinternalX_L_pair_G__wrapper@ <down> C-e <left>
;; C-r SPC C-s RET M-w C-z foreach SPC file SPC (*/*.asm) RET sed SPC -e
;; SPC 's/ C-y / C-y C-r _ RET _HS C-e /' SPC $file SPC > SPC $file.new
;; RET mv SPC $file.new SPC $file RET end 2*RET C-z"))
;;
;;(fset 'dylan-check-log
;;   [102 escape 120 114 101 112 108 97 99 101 45 115 116 114 return 108 105 118 101 return 108 105 118 101 return escape 120 114 101 112 108 97 99 101 45 115 116 114 return 69 114 114 111 114 58 return 69 114 114 111 114 58 return escape 120 114 101 112 108 97 99 101 45 115 116 114 return 105 115 32 117 110 return 105 115 32 117 110 return escape 62 26 down 26])
;;
;;(setq last-kbd-macro (read-kbd-macro
;;"C-SPC C-e M-w <down> M-m C-x C-f C-y .asm RET ESC < C-s DD SPC
;; dylanXinternalX_P_empty_list LFD C-x C-x ESC xreplace-str RET C-x g 1
;; RET C-x g 1 <right> C-e @ RET C-x C-x C-s EXTRN TAB
;; dylanXinternalX_P_empty_list: <left> @ C-x C-s C-x k RET C-x b *sc TAB
;; RET masm SPC C-y RET C-z"))
;;
;;(setq last-kbd-macro (read-kbd-macro
;;"C-e C-r / C-s RET C-x C-x M-w <down> C-a C-x C-f C-y RET ESC < ESC
;; xreplace-str RET error: RET error: RET ESC xreplace-str RET is SPC und
;; RET is SPC und RET ESC xreplace-str RET live RET live RET ESC >"))
;;
;;(setq last-kbd-macro (read-kbd-macro
;;"C-SPC C-s SPC C-r RET M-w C-x C-x 4*<down> C-x o ESC < C-s od SPC cg-
;; C-y RET C-s end SPC method RET M-w C-x o C-x g 1 C-x C-x RET C-y
;; C-x C-x <down> C-a C-s , C-s <right> <left> <right> C-x C-x C-w ( C-a
;; C-k C-d <up> 6*<right> C-y 2*M-d C-d C-l C-r define SPC method SPC RET
;; 2*M-f <right> C-k C-y 5*M-y C-x C-x cg- 3*<left> C-k C-y ESC > SPC C-y
;; ; 2*RET C-r define SPC method <right> <left> M-C-\\ C-x C-x C-x o"))
;;|#


(global-set-key "\C-cc" 'compare-windows)

(global-set-key "\C-cl" 'list-matching-lines)

(global-set-key "\C-ce" 'eval-region)

;; for use in grep buffers

(defalias 'goto-point (read-kbd-macro
"C-a C-s : <right> <left> 2*C-s C-r <right> <left> M-w C-x C-x <left>
 C-SPC C-a M-w <down> C-x C-f C-y RET C-x ! C-y M-y RET"))
(global-set-key "\C-cp" 'goto-point)


(defalias 'dylan-find-word (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \) \\| ; \\| \\[ \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC \*.dylan RET"))
(global-set-key "\C-c1" 'dylan-find-word)

(defalias 'dylan-find-word-1 (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \) \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC ../\*/\*.dylan RET"))
(global-set-key "\C-c8" 'dylan-find-word-1)

(defalias 'dylan-find-word-2 (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \) \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC ../../\*/\*.dylan RET"))
(global-set-key "\C-c9" 'dylan-find-word-2)

(defalias 'dylan-find-word-3 (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \) \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC \*.c SPC \*.h SPC \*.lisp RET"))
(global-set-key "\C-c0" 'dylan-find-word-3)

(defalias 'dylan-dfmc-find-word (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC /u/nosa/dylan/sources/dfmc/\*/\*.dylan RET"))
(global-set-key "\C-c2" 'dylan-dfmc-find-word)

(defalias 'dylan-lib-find-word (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC /u/nosa/dylan/sources/lib/\*/\*.dylan RET"))
(global-set-key "\C-c3" 'dylan-lib-find-word)

(defalias 'dylan-lib-dylan-find-word (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC /u/nosa/dylan/lib/dylan/\*.dylan RET"))
(global-set-key "\C-c6" 'dylan-lib-dylan-find-word)

(defalias 'dylan-duim-find-word (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC /u/nosa/dylan/duim/\*/\*.dylan RET"))
(global-set-key "\C-c7" 'dylan-duim-find-word)

(defalias 'dylan-harp-find-word (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC /u/nosa/dylan/sources/harp/\*/\*.dylan RET"))
(global-set-key "\C-c4" 'dylan-harp-find-word)

(defalias 'dylan-dfmc-lib-find-word (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' C-y ' SPC /u/nosa/dylan/dfmc/\*/\*.dylan SPC /u/nosa/dylan/lib/\*/\*.dylan RET"))
(global-set-key "\C-c5" 'dylan-dfmc-lib-find-word)

(defalias 'delete-big-file (read-kbd-macro
"C-a C-s /u/ C-r RET <right> <left> C-SPC C-e M-w C-x C-x C-x o rm
 SPC C-y RET C-x o <down>"))
(global-set-key "\C-cd" 'delete-big-file)

(defalias 'dylan-find-definition (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \) \\| ;  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' define.\* C-y ' SPC \*.dylan RET"))
(global-set-key "\C-c!" 'dylan-find-definition)

(defalias 'dylan-dfmc-find-definition (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' define.\* C-y ' SPC /u/nosa/dylan/dfmc/\*/\*.dylan RET"))
(global-set-key "\C-c@" 'dylan-dfmc-find-definition)

(defalias 'dylan-lib-find-definition (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' define.\* C-y ' SPC /u/nosa/dylan/sources/lib/\*/\*.dylan RET"))
(global-set-key "\C-c#" 'dylan-lib-find-definition)

(defalias 'dylan-harp-find-definition (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' define.\* C-y ' SPC /u/nosa/dylan/harp/\*/\*.dylan RET"))
(global-set-key "\C-c$" 'dylan-harp-find-definition)

(defalias 'dylan-duim-find-definition (read-kbd-macro
"ESC C-s \\(,\\| C-j \\| SPC \\| \( \\| \)  \\| ; \\) RET C-b
 ESC w C-u C-SPC ESC x grep RET ' define.\* C-y ' SPC /u/nosa/dylan/duim/\*/\*.dylan RET"))
(global-set-key "\C-c&" 'dylan-duim-find-definition)

(defalias 'hope-co (read-kbd-macro
"C-x C-b 4*<right> C-s . RET <right> <left> M-f M-w C-s /u C-r RET
 <right> <left> C-SPC C-e C-r / C-s RET <left> <right> C-x C-x
 C-u C-SPC M-w C-x q C-x 4 b hope RET ESC > cd SPC C-y RET hope SPC co SPC
 -claim SPC soft SPC -comp SPC `dylan-local-compound` SPC -diff-branch SPC force SPC -unit SPC C-y M-y RET
 M-x kbd-macro-query RET RET . RET M-x kbd-macro-query RET C-x q C-x o M-x revert-buffer RET yes RET"))
(global-set-key "\C-co" 'hope-co)

(defalias 'hope-ci (read-kbd-macro
"C-x C-b 4*<right> C-s . RET <right> <left> M-f M-w C-s /u C-r RET
 <right> <left> C-SPC C-e C-r / C-s RET <left> <right> C-x C-x
 C-u C-SPC M-w C-x q C-x 4 b hope RET ESC > cd SPC C-y RET hope SPC ci SPC
 -use-claim SPC -comp SPC `dylan-local-compound` SPC -unit SPC C-y M-y RET
 M-x kbd-macro-query RET C-x q C-x o M-x revert-buffer RET yes RET"))
(global-set-key "\C-ci" 'hope-ci)

(defalias 'hope-diff (read-kbd-macro
"C-x C-b 4*<right> C-s . RET <right> <left> M-f M-w C-s /u C-r RET
 <right> <left> C-SPC C-e C-r / C-s RET <left> <right> C-x C-x
 C-u C-SPC M-w C-x q C-x 4 b hope RET ESC > cd SPC C-y RET hope SPC diff SPC
 -comp SPC `dylan-local-compound` SPC -unit SPC C-y M-y RET
 C-x o"))

(defalias 'hope-report (read-kbd-macro
"C-x C-b 4*<right> C-s . RET <right> <left> M-f M-w C-s /u C-r RET
 <right> <left> C-SPC C-e C-r / C-s RET <left> <right> C-x C-x
 C-u C-SPC M-w C-x q C-x 4 b hope RET ESC > cd SPC C-y RET hope-report-one SPC C-y M-y RET
 C-x o"))

(setq last-kbd-macro (read-kbd-macro
"C-s ENTRY: SPC #f RET <right> <left> C-a C-s \" RET <right> 3*<left> <right> C-s \" C-s RET <right> <left> M-w C-a
 2*<down> ESC xlist-matching-lines RET C-y C-x C-x \\ C-x C-x <left> \\
 RET"))

(setq last-kbd-macro (read-kbd-macro
"C-s ENTRY: SPC #f RET <right> <left> C-a C-s \" RET <right> 3*<left> <right> C-s \" C-s RET <right> <left> M-w C-a
 2*<down> ESC xlist-matching-lines RET C-y C-x C-x \\ C-x C-x <left> \\
 RET C-x o ESC > ESC w C-x b RET C-y RET RET RET C-x b RET ESC < C-x o"))

(defalias 'bootstrap-dylan-library
   [?\C-  ?\C-e ?\M-w ?\C-x ?\C-x down ?\C-x ?\C-f backspace backspace backspace backspace backspace backspace ?l ?i ?b ?/ ?b ?o ?o ?t ?s ?t ?r ?a ?p ?/ ?\C-y ?. ?d ?y ?l ?a ?n return ?M ?o ?d ?u ?l ?e ?: ?  ?c ?o ?m ?p ?i ?l ?e ?- ?\C-y return return ?c ?o ?m ?p ?i ?l ?e ?- ?l ?i ?b ?r ?a ?r ?y ?( ?# ?" ?\C-y ?" ?, ?  ?f ?o ?r ?c ?e ?- ?p ?a ?r ?s ?e ?? ?: ?  ?# ?t ?) ?; return ?\C-x ?\C-s ?\C-x ?\C-f ?\C-y ?. ?l ?i ?d return ?L ?i ?b ?r ?a ?r ?y ?: ?  ?  ?  ?c ?o ?m ?p ?i ?l ?e ?- ?\C-y return ?F ?i ?l ?e ?s ?: ?  ?  ?  ?  ?  ?\C-y ?- ?l ?i ?b ?r ?a ?r ?y return ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?\C-y ?\C-x ?\C-s ?\C-x ?\C-f ?\C-y ?- ?l ?i ?b ?r ?a ?r ?y ?. ?d ?y ?l ?a ?n return ?\C-x ?g ?1 down down ?\C-e backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace ?\C-y down down down down down down down down down down down down down down down down down down ?\C-e backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace ?\C-y ?\C-x ?\C-s ?\C-x ?\C-f backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace backspace ?r ?e ?g ?i ?s ?t ?r ?y ?/ ?g ?e ?n ?e ?r ?i ?c ?/ ?c ?o ?m ?p ?i ?l ?e ?- ?\C-y return ?\C-x ?g ?2 ?\C-e ?\C-y ?. ?l ?i ?d ?\C-x ?\C-s ?\C-x ?k return ?\C-x ?k return ?\C-x ?k return ?\C-x ?k return])


(defalias 'rename-file-buffer-uniquely (read-kbd-macro
"C-x C-b <home> 2*<down> C-e C-r / C-s RET <right> <left> ESC w
 <left> C-r / C-s RET <right> <left> ESC w ESC x bury-buffer RET
 <<rename-buffer>> ( C-y ) C-x C-x <left> C-y M-y C-e RET"))
(global-set-key "\C-cf" 'rename-file-buffer-uniquely)

(defalias 'rename-dired-buffer-uniquely (read-kbd-macro
"C-x C-b <home> 2*<down> C-e <left> C-r / C-s RET <right> <left> ESC w
 <left> C-r / C-s RET <right> <left> ESC w ESC x bury-buffer RET
 <<rename-buffer>> ( C-y ) C-x C-x <left> C-y M-y C-e RET"))
(global-set-key "\C-cd" 'rename-dired-buffer-uniquely)

(defalias 'goto-point-of-grep-dylan (read-kbd-macro
"C-x / 1 C-a C-s : C-r RET <right> <left> ESC w C-s ./ RET <right>
 <left> C-a NUL C-e ESC w C-a C-x j 1 <down> C-x 4 C-f C-y C-x C-x 2*C-d C-e
 RET C-x ! C-y ESC y RET"))
(global-set-key "\C-cg" 'goto-point-of-grep-dylan)

(defalias 'revert-buffer-at-point
  (read-kbd-macro "NUL <<revert-buffer>> yes RET"))
(global-set-key "\C-cr" 'revert-buffer-at-point)

;; strip line
(setq last-kbd-macro 
   [?\C-  down ?\C-x ?/ ?1 ?\C-x ?\C-x ?\C-  ?\C-a ?\C-w ?\C-x ?j ?1])

(defalias 'indent-to-prev-column (read-kbd-macro
"<up> ESC m NUL C-a ESC w C-x C-x <down> ESC m C-y C-x C-x NUL C-a C-w
 ESC m <down>"))
(global-set-key "\C-ct" 'indent-to-prev-column)


;; find names in buffer
(setq last-kbd-macro (read-kbd-macro
"C-s name: SPC 6*<left> NUL C-e ESC w <<list-matching-lines>> C-y
 C-x C-x 6*<right> \\ C-e <left> \\ RET C-x o ESC < ESC > ESC w C-x b
 matches RET C-y RET C-x o"))

;; find ieps in buffer
(setq last-kbd-macro (read-kbd-macro
"C-s \\ C-r ESC w C-x C-x <down> C-z <<list-matching-lines>> name: SPC \\
 \" C-y RET C-z"))

;; replace name in buffer
(setq last-kbd-macro (read-kbd-macro
"C-c p 2*<right> ESC % < cg-symbol> RET < symbol-object> RET
 ! C-z"))

;; Hope Checkin with Appended Reasons
(setq last-kbd-macro
   [?h ?o ?p ?e ?- ?c ?i ?  ?\C-e ?  ?< ?< ?I ?N ?P ?U ?T return ?. return ?I ?N ?P ?U ?T return up up up down return up])


;; generate numbers
(setq last-kbd-macro
   "\C-xg1\C-[xkbd-macro-query\C-m\C-@\C-a\C-[w\C-[OB\C-y\C-a\C-[OB\C-y\C-a\C-[OB\C-y\C-a\C-[OB\C-y\C-a\C-[OB\C-y\C-a\C-[OB\C-y\C-a\C-[OB\C-y\C-a\C-[OB\C-y\C-a\C-[OB")

(defalias 'make-file-writable (read-kbd-macro
"C-x C-b C-e C-r / <right> ESC w C-x q ESC ! chmod SPC u+w SPC C-y RET C-x C-q"))
(global-set-key "\C-cw" 'make-file-writable)

(setq last-kbd-macro (read-kbd-macro
"NUL C-e ESC w C-a C-x o ESC > grep SPC -in SPC \" 2*\\ C-y 2*\\ \" SPC */*.mkf
 RET C-c C-r C-x o"))

(setq last-kbd-macro (read-kbd-macro
"C-x C-b C-e C-r /u C-SPC C-e ESC w C-x C-f ~/hope/hope-template.new RET
 cd SPC C-y C-r / C-d C-k 2*RET $1 SPC C-y 2*RET C-x C-s C-x q C-x q
 ESC xtoggle-read-only RET ESC !chmod SPC u+w SPC C-y RET"))


(defalias 'convert-to-stdcall-name
 (read-kbd-macro
"C-s __imp__ RET <right> 2*<left> C-x C-x C-w <down>"))
(setq last-kbd-macro 'convert-to-stdcall-name)

(setq last-kbd-macro (read-kbd-macro
"NUL C-e 3*<left> ESC w C-x C-x <down> C-x o C-x g 1 C-e C-y .lib C-x g
 2 C-e C-y .dump RET C-x o"))

(setq last-kbd-macro (read-kbd-macro
"NUL C-e ESC w <down> C-a C-x o C-x g 1 C-e C-y RET DEL C-x g 1 C-e C-y
 ESC b <left> C-k RET DEL C-x o"))

(setq last-kbd-macro (read-kbd-macro
"NUL C-e ESC w C-a <down> C-x o .global SPC C-y RET .global SPC __imp_
 C-y RET .global SPC C-y ESC b <left> C-k RET C-x o"))

(setq last-kbd-macro (read-kbd-macro
"NUL C-e C-x x 1 <down> C-a C-x o DEL C-x g 1 C-e : TAB jmp TAB *__imp_ C-x g 1
 C-e ESC b <left> C-k RET DEL __imp_ C-x g 1 C-e :jmp TAB *__imp_ C-x g
 1 C-e ESC b <left> C-k RET C-x o"))

(setq last-kbd-macro (read-kbd-macro
"<<search-forward-regexp>> __imp_.* C-q i DEL C-q TAB / \\ * RET 3*<left>
 C-r __imp_ RET C-w 3 C-e 4*<left> C-y"))


;; (global-set-key "\C-co" 'other-frame)

(setq last-kbd-macro (read-kbd-macro
"NUL ESC f ESC w C-x C-x <down> ESC > C-x g 1 C-e / C-y 4*RET C-x C-x
 C-u NUL C-x C-x C-u NUL C-x C-x"))

(setq last-kbd-macro (read-kbd-macro
"C-x o NUL C-e ESC w C-x C-x <down> C-x o C-x g 1 C-e C-y RET"))

(setq last-kbd-macro (read-kbd-macro
"C-x o NUL C-e ESC w C-x C-x <down> C-x o hope-create SPC C-y SPC C-x g
 1 C-e RET"))

;; constant slots
(setq last-kbd-macro (read-kbd-macro
"C-s -setter SPC is SPC defined SPC but SPC not SPC referenced SPC or
 SPC exported C-r RET C-r SPC C-s RET ESC w C-x o C-x o C-r warning SPC
 at SPC C-s RET C-s : C-r RET C-x x 1 C-x o C-x C-f C-x g 1 RET ESC <
 <<search-forward-regexp>> slot.* C-y RET ESC m constant SPC C-x C-s C-x o 2*<down>"))


(setq last-kbd-macro (read-kbd-macro
"C-s define SPC spread-function SPC RET C-SPC ESC f ESC w C-s end;
 <down> C-x n n C-x C-x ESC x replace-string RET def( RET C-y -def( RET C-x C-x ESC x replace-string RET uze(
 RET C-y -uze( RET 2*<down> C-x n w"))

(setq last-kbd-macro (read-kbd-macro
"C-s end SPC pentium-method RET C-e C-x n n C-x C-x C-s pentium-method RET
 C-s ( RET C-s ) C-r RET ESC w C-e ESC xreplace-string RET def( RET C-y
 -def( RET C-x C-x ESC xreplace-string RET uze( RET C-y -uze( RET
 C-s end SPC pentium-method RET C-x n w"))

(setq last-kbd-macro (read-kbd-macro
"C-SPC C-e ESC w C-x C-x C-r jul RET C-x C-x C-x x 1 ESC xrename-file
 RET C-y RET interact-cmu- C-x g 1 ESC f C-d - ESC f C-d - ESC f C-d -
 C-e DEL RET g <down>"))

;; find variable defs
(setq last-kbd-macro (read-kbd-macro
"C-s in SPC section SPC variables RET C-s \" RET C-s \" C-r RET ESC w
 C-x / 1 C-s RET defining SPC \" C-y \" RET <up> NUL 2*<down> C-e ESC w
 C-x 4 b objects-variables RET C-y 2*RET C-x o C-x j 1"))

(setq last-kbd-macro (read-kbd-macro
"C-s \"/u/nosa/dylan/trunk/sources/ RET C-s / C-s RET <left> ESC w C-x o mkdir SPC C-y
 RET cp SPC -p SPC C-y C-x C-x ~/dylan/ C-e /\.version SPC C-y RET C-x o C-e"))

(setq last-kbd-macro
   [?\C-s ?s ?e ?r ?i ?o ?u ?s ?  ?w ?a ?r ?n ?i ?n ?g ?  ?a ?t ?\C-m down down down down ?\C-a ?\C-s ?: ?\C-r ?\C-m escape ?w ?\C-x ?4 ?b ?\C-y return ?\C-x ?o right ?\C-  escape ?f escape ?w ?\C-x ?o ?\C-x ?! ?\C-y return ?\C-x ?o escape ?f escape ?f right ?\C-  escape ?\C-f escape ?w ?\C-x ?4 ?b ?n ?u ?b ?- ?f ?f ?i ?- ?d ?e ?f ?s ?. ?d ?y ?l ?a ?n return home escape ?x ?s ?e ?a ?r ?c ?h ?- ?f ?o ?r ?w ?a ?r ?d return ?d ?e ?b ?u ?g ?g ?e ?r ?- ?n ?u ?b ?- ?i ?n ?t ?e ?r ?a ?f backspace backspace ?f ?a ?c ?e ?  ?n ?u ?b ?- ?\C-y return escape ?\C-b ?\C-k ?\C-s ?" ?\C-m ?\C-s ?\C-s ?\C-r ?\C-m escape ?w ?\C-u ?\C-  ?\C-u ?\C-  ?\C-y ?\C-x ?\C-x ?n ?u ?b ?- ?\C-x ?n ?n escape ?% ?_ return ?- return ?! ?\C-x ?n ?w ?\C-x ?\C-x ?\C-  escape ?\C-f escape ?w ?\C-z home escape ?% ?r ?n ?u ?b ?/ ?\C-y ?\M-y ?\M-y ?\C-x ?\C-x ?\C-d ?\C-d ?\C-d ?\C-d return ?r ?n ?u ?b ?/ M-backspace ?\C-y ?\C-y ?\M-y return ?! home escape ?% ?n ?u ?b ?- ?\C-y ?\M-y ?\M-y ?\C-x ?\C-x M-backspace return ?n ?u ?b ?- ?\C-y ?\M-y ?\M-y return ?! ?\C-x ?o])

(setq last-kbd-macro
   [?\C-s ?d ?e ?f ?i ?n ?e ?  ?o ?p ?e ?n ?  ?g ?e ?n ?e ?r ?i ?c ?  ?\C-m ?\C-a ?\C-  ?\C-e down ?\C-e escape ?w ?\C-x ?o end return ?\C-y ?\C-x ?\C-x escape ?f escape ?f escape ?f escape backspace escape backspace ?m ?e ?t ?h ?o ?d ?\C-s ?  ?\C-s ?\C-m backspace return tab ?\C-e down ?\C-e backspace return ?e ?n ?d ?  ?m ?e ?t ?h ?o ?d ?; return ?\C-r ?d ?e ?f ?i ?n ?e ?  ?m ?e ?t ?h ?o ?d ?\C-m down escape ?m escape ?f right right right right ?\C-s ?> ?\C-m ?\C-w ?< ?r ?n ?u ?b ?- ?i ?m ?p ?l ?e ?m ?e ?n ?t ?a ?t ?i ?o ?n ?> escape ?m right escape ?d ?r ?n ?u ?b end ?\C-x ?o])

(setq last-kbd-macro
   [?\C-s ?d ?e ?f ?i ?n ?e ?  ?m ?e ?t ?h ?o ?d ?\C-m down escape ?m ?\C-  ?\C-e escape ?w down return tab ?\C-y ?\C-x ?n ?n home escape ?x ?q ?u ?e ?r ?y ?- ?r ?e ?p ?l ?a ?c ?e ?- ?r ?e ?g ?e ?x ?p return ?  ?; ?; backspace backspace ?: ?: ?  ?\\ ?( ?[ ?^ ?> ?] ?\\ ?) ?* ?> return return ?! home right escape ?d ?p ?r ?o ?c ?e ?s ?s ?\C-x ?n ?w up ?\C-e return tab ?l ?e ?t ?  ?p ?r ?o ?c ?e ?s ?s ?  ?= ?  ?r ?t ?m ?g ?r ?/ ?r ?n ?u ?b ?/ ?p ?r ?o ?c ?e ?s ?s ?( ?r ?n ?u ?b ?) ?; ?\C-r ?d ?e ?f ?i ?n ?e ?  ?m ?e ?t ?h ?o ?d ?\C-s ?  ?\C-m ?\M-f ?\M-f right ?\C-  ?\C-e escape ?w ?\C-u ?\C-  ?\C-u ?\C-  return tab ?n ?u ?b ?- ?\C-y down ?\C-e ?;])

(setq last-kbd-macro
   [?\C-s ?s ?e ?r ?i ?o ?u ?s ?  ?w ?a ?r ?n ?i ?n ?g ?  ?a ?t ?\C-m ?\C-s ?: ?\C-m ?\C-  escape ?f escape ?w ?\C-x ?4 ?b ?r ?n ?u ?b ?- ?d ?e ?f ?s ?. ?d ?y ?l ?a ?n return ?\C-x ?! ?\C-y return ?\C-x ?o ?\C-s ?r ?n ?u ?b ?- ?d ?e ?f ?s ?. ?d ?y ?l ?a ?n ?: ?\C-m ?\C-s ?n ?u ?b ?- ?\C-x ?\C-x ?\C-s ?  ?n ?u ?b ?- ?\C-m escape ?b ?\C-  ?\C-e left escape ?w ?\C-x ?b ?m ?e ?m ?o ?r ?y ?- ?a ?c ?c ?e ?s ?s ?. ?d ?y ?l ?a ?n return escape ?x ?g ?r ?e ?p return ?\C-y ?  ?* ?. ?d ?y ?l ?a ?n return ?\C-x ?q ?\C-x ?b return])

(setq last-kbd-macro (read-kbd-macro
"C-s rtmgr/rnub RET C-x C-x C-x n n ESC % < abstract-integer> RET <
 RTARGET-ADDRESS> RET ! C-x n w"))

(setq last-kbd-macro
   [?\C-s ?d ?e ?f ?i ?n ?e ?  ?m ?e ?t ?h ?o ?d ?  ?r ?t ?m ?g ?r ?\C-m down ?\C-e return ?  ?  ?b ?l ?o ?c ?k ?( ?) return ?  ?  ?i ?f ?  ?( ?* ?a ?l ?r ?e ?a escape ?/ ?) ?  ?e ?r ?r ?o ?r ?( ?" ?a ?l ?r ?e ?a ?d ?y ?  ?e ?n ?t ?e ?r ?e ?d ?  ?r ?e ?q ?u ?e ?s ?t ?" ?) ?  ?e ?n ?d ?; return ?  ?  ?* ?a ?l ?r ?e escape ?/ ?  ?: ?= ?  ?# ?t ?; ?\C-s ?c ?o ?r ?b ?a ?/ ?r ?e ?q ?u ?e ?s ?t ?/ ?i ?n ?v ?o ?k ?e ?\C-m ?\C-e return ?  ?  ?e backspace ?c ?l ?e ?a ?n ?u ?p return ?  ?  ?* ?a ?l ?r ?e ?a ?d ?y escape ?/ ?  ?: ?= ?  ?# ?f ?; return ?e ?n ?d ?; down ?\C-a ?\C-k ?\C-k up up up ?\C-y])


(setq last-kbd-macro
   [?\C-s ?. ?s ?\C-q ?\C-j ?\C-m left return escape ?x ?r ?e ?p ?l ?a ?c ?e ?- ?r ?e ?g ?e ?x ?p return ?. ?s ?e ?c ?t ?i ?o ?n ?  ?. ?d ?y ?. ?* return ?. ?s ?e ?c ?t ?i ?o ?n ?  ?. ?d ?a ?t ?a return ?\C-x ?\C-s ?\C-x ?k return])

(setq last-kbd-macro (read-kbd-macro
"C-s }: SPC RET C-s SPC C-r RET ESC w <down> C-a ESC
 xdelete-matching-lines RET : SPC C-y SPC in SPC H: RET"))

(setq last-kbd-macro (read-kbd-macro
"C-s define SPC method SPC RET C-SPC C-e <left> ESC w C-r warning SPC at
 SPC C-s RET C-s : C-r RET ESC w C-x 4 C-f
 ~/dylan/runtime-manager/access -path/ C-y RET C-s define SPC method
 SPC RET <home> ESC xsearch SPC forward RET C-y ESC y C-x C-x define
 SPC method SPC RET <up> C-x 4 C-f module.dy TAB <S-return> C-s end SPC
 RET 9*<up> C-e C-y , RET 4*SPC C-x o"))

(setq last-kbd-macro (read-kbd-macro
"C-SPC ESC C-f C-x n n C-x C-x C-d C-s SPC C-r RET ( C-d ESC % SPC RET ,
 SPC RET ! C-e C-x n w"))

;; Lisp 2 Dylan
(setq last-kbd-macro (read-kbd-macro
"C-SPC ESC C-f ESC w C-x C-x M-C-o C-x 4 b ltd RET <end> C-y RET ESC
 :(sleep-for SPC 4) RET 2*<up> C-e C-c C-r 2*<down> C-a ESC w <end>
 C-x q C-x o C-y C-x C-x C-a C-x n n C-SPC ESC m ESC w ESC xreplace-string RET C-q LFD
 RET C-q LFD C-y RET C-e C-x n w C-l"))

;; Lisp 2 Dylan on Region
(setq last-kbd-macro (read-kbd-macro
"C-SPC C-x C-x M-C-o C-x 4 b ltd RET <end> C-y RET ESC
 :(sleep-for SPC 3) RET 2*<up> C-e C-c C-r 2*<down> C-a ESC w <end>
 C-x q C-x o C-y C-x C-x C-a C-x n n C-SPC ESC m ESC w ESC % C-q LFD
 RET C-q LFD C-y RET ! C-e C-x n w C-l"))

;; harp-out
(setq last-kbd-macro (read-kbd-macro
"C-s harp-out( RET <left> C-SPC ESC C-f C-x / 1 C-x C-x <right> be) SPC
 C-s ( RET be, SPC C-x j 1 DEL SPC end"))

;; strip begin .. end 
(setq last-kbd-macro (read-kbd-macro
"C-s C-q LFD 4*SPC begin RET C-a 2*C-k C-s C-q LFD 4*SPC end; C-q LFD
 RET <up> 2*C-k C-x n n <home> ESC % 2*SPC 2*DEL C-q LFD 6*SPC RET SPC
 DEL C-q LFD 4*SPC RET ! <home> 2*C-d C-x n w C-l"))

;; def-op-frag
(setq last-kbd-macro (read-kbd-macro
"C-s C-q LFD (def-op-frag SPC RET C-a define SPC opcode SPC C-SPC ESC
 C-f DEL ; C-x C-x C-s (def-op-frag SPC RET C-w C-e"))

;; def-rs6k-register
(setq last-kbd-macro (read-kbd-macro
"C-s (def-rs6k-register SPC RET C-SPC C-a C-w define SPC
 constant SPC reg-- C-s SPC C-r RET SPC = SPC ESC C-s [^ SPC ] C-r RET
 C-w C-s ) C-r RET C-d ; <down> C-a"))

;; replace string in dylan directory
(setq last-kbd-macro (read-kbd-macro
"C-s .dylan C-q LFD RET <left> RET <home> ESC xreplace-string RET
 op--copy-words-setting-end RET op--copy-words-with-update RET C-x q"))

(setq last-kbd-macro (read-kbd-macro
"C-SPC ESC f ESC w C-s f RET <left> C-x / 1 ESC xsearch-backward RET C-y
 SPC = SPC C-a define SPC constant SPC C-e RET <right> <left> C-e C-r
 ); RET , SPC cpmask: SPC C-x o C-SPC ESC f <right> ESC w C-x o C-y DEL
 C-x j 1"))


;; GDB

(global-unset-key "\C-t")

(defalias 'dylan-gdb-backtrace
 (read-kbd-macro
   "\C-xi~/dylan/admin/backtrace\C-m\C-[>\C-w\C-y\C-m"))
(global-set-key "\C-tb"    'dylan-gdb-backtrace)

(defalias 'dylan-gdb-backtrace2
 (read-kbd-macro
   "\C-xi~/dylan/admin/backtrace2\C-m\C-[>\C-w\C-y\C-m"))
(global-set-key "\C-t\M-b"    'dylan-gdb-backtrace2)

(defalias 'dylan-gdb-disassemble (read-kbd-macro
"<up> C-a C-s 0x RET ESC b C-SPC ESC f ESC w ESC > C-x o ESC > C-x / 1disass SPC C-y SPC
 C-y 2*<left> DEL f C-e 5*RET q RET C-x j 1 C-u 0 C-l C-x o"))
(global-set-key "\C-td"    'dylan-gdb-disassemble)

(defalias 'dylan-gdb-link-register
  (read-kbd-macro "inf SPC sym SPC $lr RET"))
(global-set-key "\C-t0"    'dylan-gdb-link-register)

(defalias 'dylan-gdb-print-r1
  (read-kbd-macro "p/x SPC $r1 RET"))
(global-set-key "\C-t1"    'dylan-gdb-print-r1)

(defalias 'dylan-gdb-des-r1
  (read-kbd-macro "x/16 SPC $r1 RET"))
(global-set-key "\C-t!"    'dylan-gdb-des-r1)

(defalias 'dylan-gdb-print-r3
  (read-kbd-macro "p/x SPC $r3 RET"))
(global-set-key "\C-t3"    'dylan-gdb-print-r3)

(defalias 'dylan-gdb-des-r3
  (read-kbd-macro "x/12 SPC $r3 RET"))
(global-set-key "\C-t#"    'dylan-gdb-des-r3)

(defalias 'dylan-gdb-print-r4
  (read-kbd-macro "p/x SPC $r4 RET"))
(global-set-key "\C-t4"    'dylan-gdb-print-r4)

(defalias 'dylan-gdb-des-r4
  (read-kbd-macro "x/12 SPC $r4 RET"))
(global-set-key "\C-t$"    'dylan-gdb-des-r4)

(defalias 'dylan-gdb-print-r5
  (read-kbd-macro "p/x SPC $r5 RET"))
(global-set-key "\C-t5"    'dylan-gdb-print-r5)

(defalias 'dylan-gdb-des-r5
  (read-kbd-macro "x/12 SPC $r5 RET"))
(global-set-key "\C-t%"    'dylan-gdb-des-r5)

(defalias 'dylan-gdb-print-r6
  (read-kbd-macro "p/x SPC $r6 RET"))
(global-set-key "\C-t6"    'dylan-gdb-print-r6)

(defalias 'dylan-gdb-des-r6
  (read-kbd-macro "x/12 SPC $r6 RET"))
(global-set-key "\C-t^"    'dylan-gdb-des-r6)

(defalias 'dylan-gdb-step-over
  (read-kbd-macro "b *$pc+4\C-mni\C-mdel SPC"))
(global-set-key "\C-tn"    'dylan-gdb-step-over)

(defalias 'dylan-gdb-run
  (read-kbd-macro "gdb SPC $dylan_compile\C-mset SPC args SPC /save SPC /messages:internal SPC /nocombine SPC /assemble:elf SPC /elf SPC /dll SPC dylan\C-mr\C-mdisplay/i SPC $pc\C-m"))
(global-set-key "\C-tr"    'dylan-gdb-run)

;; Replace system with personal library in dylanmakefile.mkf
(setq last-kbd-macro
   "\C-[\C-s\C-idummy\C-q\C-j\C-isystem\C-q\C-j\C-r\C-m\C-[OB\C-[m\C-k..\\\C-[OA\C-[OA\C-e\C-r\C-i\C-s\C-m\C-[w\C-[OB\C-[OB\C-e\C-y\\\C-x\C-s")
