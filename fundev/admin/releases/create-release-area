#!/usr/local/bin/perl
#       Script: create-release-area
#       Author: Shri Amit(amit), Andy Armstrong(andrewa)
$usage=" Usage: create-release-area -name <Name> -log <logfile>";
#  Opts & Args: -name: Long Path Name of new release
#               -log: Name of logfile. 
#                     Defaults to create-release-areas-log.$suffix"
#     Synopsis: A script to create a Dylan release area
#               At each site specified by <Filename>:
#               . Creates new release space
#               . syncs the admin dir from the trunk
#               . Launches the sync and ensures success
#               The result will be a directory with all sources
#               checked out, from which builds can now be done.
#############################################################
## Application exit codes ##
## 0: Instigation successful
## 1: Invalid command line argument
## 2: Name of release not specified
## 3: Hope sync failed

require '/u/dylan/admin/releases/env.perl';
## Parse command line arguments ##
##
$name = $log_file  = "not specified";
$no_of_args = @ARGV;
for ($i = 0; $i < $no_of_args; $i++) {
    $arg = @ARGV[$i];
    $i++;
    if ($arg eq "-name") {
	$name = @ARGV[$i];
    } elsif ($arg eq "-log") {
	$log_file = @ARGV[$i];
    } else {
	&application_error("Invalid command line argument: $arg.", 1,
			   $0, $usage);
    }
}

## Initialize all variables ##
##
if ($name eq "not specified") {
    &application_error
	("Arg to -name: The release pathname required.", 
	 2, $0, $usage);
}
$OUTPUT_TYPE  = "both";
$start_time   = `date`; chop($start_time);
@kan_keywords = ("all", "emu", "emu_lib", "dfmc", "dfmc_lib", "x86_c", "env", "x86_c_lib", "x86_p", "x86_p_lib", "test");
$admindir     = "/u/dylan/admin";
$releasesdir  = "$admindir/releases";
$logsdir      = "$name/admin/logs";
$qadir        = "$name/qa";
$sync_script  = "$releasesdir/sync-release -r $name";
if ($log_file eq "not specified") {
    $log_file = "$logsdir/create-release-area-log";
}

## Setup all the other directories needed in the release area ##
##
mkdir($name, 0777);
@dirs_to_create = ("qa", "admin", "admin/logs", "local",  "databases", 
		   "qa/admin", "qa/admin/logs", "qa/local", "qa/local/logs", 
                   "qa/local/diffs", "qa/local/reports");
foreach $dir_to_create (@dirs_to_create) {
    mkdir("$name/$dir_to_create", 0777);
}
open(THELOG, ">$log_file");

## Create a QA build area
##
&execute("$admindir/scripts/create-personal-dylan $qadir/local");

## Put in all README files desired ##
##
open(README_FILE, ">$name/qa/local/diffs/README");
print README_FILE "This directory contains the diffs generated by the test-report tool from the reports in $name/qa/local/reports. These are comparisons between reports of this release vs. previous releases or cross-platform comparisons within the release";
close(README_FILE);

open(README_FILE, ">$name/qa/local/logs/README");
print README_FILE "This directory contains the logs generated by the test-suite runs using the testworks log-report-function. These are primarly used as input for the test-report tool which can present this information in various different ways, or compare it to other logs.";
close(README_FILE);

open(README_FILE, ">$name/qa/local/reports/README");
print README_FILE "This directory contains the reports generated by the test-report tool from the test-suites logs in $name/qa/local/logs. These are intended to serve as records of the Kan releases testing.";
close(README_FILE);

&running_with_options();

## Perform sync and proceed only if successful ##
##
&execute("$sync_script");
unless ($status == 0) {
    &application_error("The sync failed, exited with an error code: $status!",
		       3, $0, $usage);
}

## Close the logfile ##
##
$end_time = `date`; chop($end_time);
&output("Ending at: $end_time\n\n");
close(THELOG);

## Logical end of the script
## All subroutines under here ##
   
## Output all the options ##
##
sub running_with_options {
    &output("Starting at: $start_time");
    &output("Running $0 with options:");
    &output(" The release name is: $name");
    &output("      The logfile is: $log_file\n\n");
}

#eof
