#!/usr/local/bin/perl
#       Script: instigate-build
#       Author: Shri Amit(amit)
$usage=" Usage: instigate-build";
#     Synopsis: . Parses build-machines.txt
#               . Starts nightly-sync on the first machine found
#               . nohup's all the nightly-build entries accordingly
#################################################################
## Application exit codes ##
## 0: Instigation successful
## 1: Could not open $build_file
## 2: No machines specified
## 3: The sync failed
## 4: Unable to create the coroutine script

## Initialize command line arguments and platform ##
##
require '/u/dylan/admin/builds/env.perl';
@build_keywords = ("all", "emu", "env", "libs", "dfmc", "tags", "dfmc_image", "byte");
@spl_keywords   = ("Clean", "No Report");
$OUTPUT_TYPE    = "log";
$start_time     = `date`; chop($start_time);
$sync_script    = "$admindir/nightly-sync";
$build_script   = "$admindir/nightly-build -";
$build_file     = "$admindir/build-machines.txt";
$coroutine      = "$admindir/execute-coroutines";
$log_file       = "$logsdir/instigate-build-log-$host-$platform.$suffix";
$cleanword      = "Clean";
$clean          = "No";
$report         = "Yes";
$reportword     = "No Report";
open(THELOG, ">$log_file");

## Do a checkout of D-admin-builds, the scripts compound, to bootstrap
## any newly changed scripts
##
&execute("/usr/local/bin/hope co -writable-files force -missing-dir create -extra-files force -diff-unit-files force -diff-branch-files force -branch trunk -c D-admin-builds -filename $admindir");


## Execute all subroutines according to options
##
@machines = &parse_build_file($build_file, $site);
$no_of_machines = @machines;
if ($no_of_machines < 2) {
    &application_error("No machines specified.", 2, $0, $usage);
}

## Perform sync and proceed only if successful ##
##
&running_with_options();
&execute("$sync_script");
unless ($? == 0) {
    &application_error("The sync failed!", 3, $0, $usage);
}

## Cleanup the fasls if required and start the builds ##
## 
@cleandirs = split(' ', $dirs_to_clean);
$no_of_clean_dirs = @cleandirs;
&output("\nThe clean dirs are: --@cleandirs---");

if ($clean eq "Yes") {
    if ($no_of_clean_dirs == 0) {
	&output("Removing all fasls in $dylandir ...");
        &execute("find $dylandir -name \\*.\\*fasl -exec rm -f {} \\;");
	&output("... done");
   } else {
	foreach $dir_to_clean (@cleandirs) {
	    @junk = split(' ', $dir_to_clean);
	    &output("Removing all fasls in $dylandir/$junk[0] ...");
	    &execute("find $dylandir/$junk[0] -name \\*.\\*fasl -exec rm -f {} \\;");
	    &output(".... done");
	}
    }
}
&launch_build(@machines);
&remove_stale_comps("D -br trunk");

## Close the logfile and remove old logs ##
##
$end_time = `date`; chop($end_time);
&output("Ending at: $end_time\n\n");
close(THELOG);
&execute("$admindir/remove-old-files $logsdir/instigate-build-log-$host-$platform 2");


## Send out the build report ##
##
unless ($report eq "No") {
    &output("Debug info: The mailing alias to send the report to is: --$send_report--");
    &execute("$admindir/build-report -m $send_report");
    &execute("$admindir/remove-old-files $logsdir/build_summary 2");
}

exit(0);

## Logical end of the script
## All subroutines under here ##
   
## Output all the options ##
##
sub running_with_options {
    &output("Starting at: $start_time");
    &output("Running instigate-build with options:");
    &output("     The build file is: $build_file");
    &output("   The sync machine is: $host");
    &output("          Clean build?: $clean");
    &output("Generate build report?: $report");
    &output("        The logfile is: $log_file\n\n");

}

## A bash script is dynamically generated which ##
## launches all the build processes in parallel ##
## as coroutines and then returns control to    ##
## instigate build
##
sub launch_build {
    local(@machines) = @_;
    local($no_of_machines, $host_name, $cmd, $build_cmd);
    $no_of_machines = @machines;
    open(COROUTINE, ">$coroutine")
	|| &application_error("Unable to create $coroutine", 4,
			      $0, $usage);
    print COROUTINE "#!/usr/local/bin/bash\n";
    while ($no_of_machines > 0) {
	$host_name = shift(@machines);
	$build_cmd = $build_script . shift(@machines);
	$cmd = "rsh $host_name -n $build_cmd &";
	print COROUTINE "$cmd\n";
	$no_of_machines = @machines;
    }
    print COROUTINE "wait\n";
    print COROUTINE "# eof\n";
    close(COROUTINE);
    &output("The following coroutine script has been generated:");
    &execute("cat $coroutine");
    &execute("chmod +x $coroutine");
    &execute("$coroutine");
    &execute("rm -f $coroutine");
}

## Translate all the build_keywords into ##
## flags for nightly-build               ##
##
sub convert_to_flags {
    local(@keywords) = @_;
    local($i, $flags);
    foreach $i (@keywords) {
	if ($i =~ /all/) {
	    $flags = $flags . "a";
	} elsif ($i =~ /emu/) {
	    $flags = $flags . "e";
	} elsif ($i =~ /lib/) {
	    $flags = $flags . "l";
	} elsif ($i =~ /env/) {
	    $flags = $flags . "v";
	} elsif ($i =~ /dfmc_build/) {
	    $flags = $flags . "d";
	} elsif ($i =~ /dfmc_image/) {
	    $flags = $flags . "i";
	} elsif ($i =~ /tags/) {
	    $flags = $flags . "t";
	} elsif ($i =~ /byte/) {
	    $flags = $flags . "b";
	}
    }
    return(@keywords[0], $flags);
}

## Parse the file containing the build description. ##
## The nightly build uses build_machines.txt which  ##
## contains information about the machines, the     ##
## build-keywords and the special-keywords          ##
##
sub parse_build_file {
    local($build_file, $site) = ($_[0], $_[1]);
    local($line, $site_flag, @machines, $the_site);
    open (BUILD, "<$build_file")
	|| &application_error("Could not open $build_file", 1, $0, $usage);
    foreach $line (<BUILD>) {
	unless ($line =~ /^#/) { 
		if ($line !~ /Site:/ && $line =~ /$cleanword/) {
			$clean = "Yes";
			$dirs_to_clean = $';
		}
		if ($line =~ /Site:/) {
		    $the_site = $';
		    if ($the_site =~ /$site/) {
			$site_flag = "true";
			if ($the_site =~ /$cleanword/) {
			    $clean = "Yes";
			    $dirs_to_clean = $';
			} elsif ($line =~ /$reportword/) {
			    $report = "No";
			}
		    } else {
			$site_flag = "false";
		    }
		}
		if ($site_flag eq "true" && $line !~ /$site/ && $line ne "\n") {
		    push(@machines, &convert_to_flags(split(" ", $line)));
		}
	} 
    }
    close(BUILD);
    return(@machines);
}

## Function: remove_stale_comps                                    ##
##    Usage: &remove_stale_comps(<Compound>)                       ##
## Synopsis: All the stale subcompounds from within the past day   ##
##           are found using the HOPE report command and then      ##
##           are translated to directories which are then noted in ##
##           mail to $rel_eng, which _might_ want to delete them   ##
##
sub remove_stale_comps {
    local($start_comp) = $_[0];
    local(@hope_report, @junk, @more_junk, @junk_report, @comp_junk);
    local($i, $sub_compound, $dir);
    local($message, $report_length, $subject, $comp_name);

    @hope_report=`/usr/local/bin/hope rep -c $start_comp -rec -type remove -format \"%c %r\" -date \">= yesterday\" 2>&1`;
    &output("--@hope_report--\n");
    foreach $i (@hope_report) {
        if ($i =~ /removed subcompound/) {
            &output("The stuff is: $i");
            @junk = split(' ', $i);
            &output("The junk is: @junk");
            $sub_compound = $junk[3];
            &output("The sub compound is: ---$sub_compound---");
            @more_junk = split(/[(:]/, $sub_compound);
            $sub_compound = $more_junk[0];
            &output("The sub compound really is: ---$sub_compound---");
            $dir = &translate_comp_to_dir($sub_compound);
            &output("The directory to remove is: $dir");
            if (-d $dir) {
                push(@junk_report, $dir);
            } else {
                &output("The directory: $dir does not exist");
            }
        }
    }
    $report_length = @junk_report;
    if ($report_length >= 1) {
        @comp_junk = split(' ', $start_comp);
        $comp_name = @comp_junk[0];
        if (@comp_junk > 2) {
            $comp_name = $comp_name . "\(" .  @comp_junk[2] . "\)" ;
        }
        $subject = "Directories of removed subcompounds of $comp_name, which might need deleting";

        $message = "These directories seem to need removal:\n  " . join("\n  ", @junk_report) ;
        &send_mail($message, $rel_eng, $subject);
        &output("Mail sent to $rel_eng.\n")
        }
}

## Function: translate_comp_to_dir                          ##
##    Usage: &translate_comp_to_dir(<Compound>)             ##
## Synopsis: This function takes a <Compound> in the        ##
##           standard format used by the dylan group        ##
##           D-* and returns the corresponding directory    ##
##           name. However in the case of hyphenated dir    ##
##           names it won't return the correct name. Such   ##
##           support may be added at a later time if needed ##
##
sub translate_comp_to_dir {
    local($comp) = ($_[0]);
    local (@junk);

    @junk    = split('-', $comp);
    $junk[0] = "/u/dylan";
    return(join('/', @junk));
}    

# eof
