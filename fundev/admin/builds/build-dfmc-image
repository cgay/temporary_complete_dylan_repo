#!/usr/local/bin/bash
#       Script: build-dfmc-image
#       Author: Shri Amit(amit)
usage="  Usage: $0 -i <Image> -t <Target> -f <ListofLibs> -r <Root> -m <usernames> -l <LogFile> -cepx"
#  Opts & Flgs: -i: Source image. Default: $root/install/$platform/bin/lw+dylan-$platform
#               -t: Target Image, Default:
#                   $root/install/$platform/bin/lw+dylan+dfmc-$platform
#               -f: List of libraries, default: $admindir/loaded-libs for
#                   unix and $admindir/loaded-pc-libs for pc
#               -r: Dfmc source root, Default: /u/dylan
#               -c: Loads the c back end. Both log and image name get a 
#                   "-c" tacked on, if this is enabled.
#               -p: Loads the pentium back end. Both log and image name get
#                   a "-pentium" tacked on. Assumes that pentium-xxx exists
#               -m: Sends mail upon completion. (eg: -m foo,bar,foobar)
#               -e: Flag, sends mail to usernames ONLY if an error occurs
#               -x: Flag, disables library cross compilation, default: enabled
#               -l: Logfile, default: $logsdir/$0-log-$host-$platform
#    Synopsis: . Loads dfmc onto <Image>
#              . Loads all libs in <File>, targetting the image for <Platform> 
#                and using sources from <Root> and then save to <Target>
#              . Compiles all libraries using compile-dfmc-libs unless -x
#                flag is specified.
#              . If -m option has arg(s), sends mail upon completion.
#              . If -e flag is enabled, sends mail only upon error
###########################################################################
## Application exit status legend ##
##  0: Build successful
##  1: Invalid command line argument
##  2: The build exited abnormally from within lispworks
##  3: The library compilation failed

## Parse the options & flags on the command line ##
while getopts i:t:f:r:m:l:cepx option
do case $option in
     i) image=$OPTARG;;
     t) target=$OPTARG;;
     f) libs=$OPTARG;;
     r) root=$OPTARG;;
     m) usernames=$OPTARG;;
     l) log_file=$OPTARG;;
     c) target_for_pc=C;;
     e) error_only=Yes;;
     p) target_for_pc=pentium;;
     x) compile_libs=No;;
    \?) echo $usage
        exit 1;;
   esac
done
shift `expr $OPTIND - 1`

## source env.bash and set other variables ##
##
source /u/dylan/admin/builds/env.bash
root=${root:-$dylandir}

## Assign defaults to options & flags ##
##
target_for_pc=${target_for_pc:-No}
usernames=${usernames:-"unspecified"}
error_only=${error_only:-No}
compile_libs=${compile_libs:-Yes}
image=${image:-"$admindir/lw-dylan -r $root"}

case $target_for_pc in
     No) target=${target:-$root/install/$platform/bin/lw+dylan+dfmc-$platform}
         libs=${libs:-$admindir/loaded-libs}
         log_file=${log_file:-$logsdir/build-dfmc-image-log-$host-$platform.$suffix}
         back_end_flag=${back_end_flag:-""}
         target_platform=${target_platform:-$platform} ;;

      C) log_file=${log_file:-$logsdir/build-dfmc-image-c-log-$host-$platform.$suffix}
         back_end_flag=${back_end_flag:-"-c"} ;;

pentium) log_file=${log_file:-$logsdir/build-dfmc-image-pentium-log-$host-$platform.$suffix}
	 load_dfmc="$admindir/load-dfmc-native.lisp"
         back_end_flag=${back_end_flag:-"-p"} ;;
esac
target_platform=${target_platform:-"x86-win32"}
target=${target:-$root/install/$platform/bin/lw+dylan+dfmc-pc-$platform}
load_dfmc=${load_dfmc:-"$admindir/load-dfmc.lisp"}
libs=${libs:-$admindir/loaded-pc-libs}

## Everything from here goes to the logfile ##
## Prompt the options                       ##
##
{
	echo "Starting at: `date`"
	echo "Running $0 with options:"
	echo "    The starting image is: $image"
	echo " The target image name is: $target"
	echo " The list of libs file is: $libs"
	echo "              The root is: $root"
        echo "             Send mail to: $usernames"
        echo " Send mail on error only?: $error_only"
        echo "   Compile the libraries?: $compile_libs"
	echo "       Target for the pc?: $target_for_pc"
        echo "           The logfile is: $log_file"

source $admindir/set-build-variables.bash -r "$root" -l "$target_platform"
printenv

## Build the image ##
##
$image <<SCRIPT
(user::with-build-handler
  (extend-current-stack 300)
  (load "$load_dfmc")
  (in-package dylan)
  (dylan::load-libraries "$libs")
  (dylan::set-name)
  (format t "~&Saving dfmc emulator image in ~a~%" "$target")
  (user::save-emulator-image "$target")
  (bye 0))
SCRIPT
    status=$?
    echo "Ending at: `date`"
    subject="Report for $0 on $host-$platform"
    if [ "$status" != 0 ]; then
	message="The dfmc build exited with an exit status $status"
	case $usernames in
	   unspecified) echo $message;;
	   *) send-mail "$message" "$usernames" "$log_file" "$subject" ;;
	esac
	exit 2;
    else
	echo The dfmc build completed successfully.
	if [ "$compile_libs" = "Yes" ]; then
	    echo Compiling the libs now...	    
	    $admindir/compile-dfmc-libs -r $root $back_end_flag
	    teststatus=$?
	    if [ $teststatus != 0 ]; then
		message="Lib compilation exited with an exit status $status"
		case $usernames in
		 unspecified) echo $message;;
		 *) send-mail "$message" "$usernames" "$log_file" "$subject" ;;
		esac
		exit 3;
	    fi
        else
	    echo Skipping the library compilation
	fi
	message="The dfmc build completed successfully"
	if [ "$usernames" != "unspecified" -a "$error_only" = "No" ]; then
	    send-mail "$message" "$usernames" "$log_file" "$subject"
	else
	    echo $message
	fi
	if test -f $target; then
	    $admindir/remove-old-files $root/install/$platform/bin/lw+dylan+dfmc-$platform $imagestokeep
	    $admindir/remove-old-files $logsdir/build-dfmc-image-log-$host-$platform $logstokeep
        fi
    fi
} 2>&1 | tee $log_file

exit 0

#eof
