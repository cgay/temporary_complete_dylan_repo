#!/usr/local/bin/bash

###
### Author: Steve Rowley <sgr@Harlequin.COM>
###
### Synopsis: Full recompile of DFM from sources, compile of dylan library, 
###   compile of CMU test suite, run DFMC test suite, compile & run CMU test suite.
###   Arrange for all output to be piped to a log file.  Makes a good "smoke test."
###
### Usage: build-dfmc -p PersonalDylanRoot -e EmulatorRegistry -g GenericRegistry 
###                   -l Log -m Mailto -b Branch -tcdk
###
### * -p: personal Dylan root; defaults to ~/dylan (NB: no trailing slash)
### * -e: Emulator registry; defaults to $personal_dylan_root/registry/emulator 
### * -g: Generic registry; defaults to $personal_dylan_root/registry/generic
### * -i: LispWorks image to use; defaults to /u/dylan/local/lw+dylan-$machine
### * -s: Save the image (after compiling the Dylan library) to this image file.
### * -l: LogFile; defaults to $personal_dylan_root/build-dfmc-log.text.
### * -m: Username(s); By specifying this option, the tail of the logfile is
###       mailed to Username(s) upon completion of the entire script.  Arg is 
###       string of comma-separated mail addresses, e.g., -m "sgr, cassels, gz".
###       [Added by Shri Amit(amit) on September 04 1996.  Edited by sgr.]
### * -b: Hope branch to use; defaults to trunk.
### * -v: Script to setup the build variables;
###       defaults to /u/dylan/admin/builds/set-build-variables.bash
### * -t: create TAGS files for DFMC & Dylan lib
### * -c: Hope checkout of DFMC & Dylan lib & CMU test suite
### * -d: delete old fasls; default is to keep them for faster loading
### * -k: keep old _dude.c, .o, .so, .a files and app files; default is to delete 
###       such compiler products from any previous runs to get a clean build.
###       (NB: .c & .h files from c-run-time are not deleted, as they're source.
###       But their compilation products are deleted.)
### * -x: skip the DFMC build, i.e., only compile and run the CMU testsuite
###

## Remember how long this flying circus takes.
starttime=`date`

## Parse the options & flags on the command line
while getopts p:e:g:i:s:l:m:b:v:tcdkx option
do case $option in
     p) personal_dylan_root=$OPTARG;;
     e) emulator_registry=$OPTARG;;
     g) generic_registry=$OPTARG;;
     i) image=$OPTARG;;
     s) save=$OPTARG;;
     l) log_file=$OPTARG;;
     m) send_mail_to=$OPTARG;;
     b) branch=$OPTARG;;
     v) env_script=$OPTARG;;
     t) tags=1;;
     c) checkout=1;;
     d) delete_fasls=1;;
     k) keep_products=1;;
     x) skip_build=1;;
    \?) echo "Usage: build-dfmc -p PersonalDylanRoot -e EmulatorRegistry -g GenericRegistry -i Image -s SaveImageToFile -l LogFile -m Username(s) -b Branch -tcdk"
        exit 2;;
   esac
done
shift `expr $OPTIND - 1`

## Figure out platform, for platform-dependent stuff.
hostname=`hostname`
machine=`/u/dylan/tools/scripts/dylan-platform`
case $machine in
    sparc-sunos4 | sparc-solaris2) fasl="wfasl";;
    alpha-osf3)                    fasl="afasl";;
    *)                             echo "No fasl extension for $machine platforms."; exit 2;;
esac

## Assign defaults to options & flags
personal_dylan_root=${personal_dylan_root:-~/dylan}
image=${image:-/u/dylan/local/lw+dylan-$machine}
save=${save:-"No"}
log_file=${log_file:-$personal_dylan_root/build-dfmc-log.text}
send_mail_to=${send_mail_to:-"No"}
branch=${branch:-"trunk"}
env_script=${env_script:-/u/dylan/admin/builds/set-build-variables.bash}
tags=${tags:-0}
checkout=${checkout:-0}
delete_fasls=${delete_fasls:-0}
keep_products=${keep_products:-0}
skip_build=${skip_build:-0}

## Set up PATH so we can find commands.  This isn't strictly necessary for interactive use,
## but it is necessary for running from a cron job, where your personal $PATH isn't available!
## See crontab documentation for PATH given to a cron job.
PATH=.:/usr/etc:/usr/local/bin:/usr/local/new/bin:/usr/ucb:/usr/bsd:/usr/bin/bsd:/bin:/usr/bin:/usr/ccs/bin:/usr/share/all/scripts:/etc:/usr/etc:/usr/lib:/usr/new:/u/dylan/tools/gnuemacs:/u/dylan/tools/scripts:/u/dylan/tools/admin

## Invoke the script to setup the build variables.
## Must source, not directly call it, to get variables set in _this_ shell!
## Do it early, so we get variables set and can figure out where binaries,
## libs, & apps went.
source $env_script -r $personal_dylan_root -pr $personal_dylan_root

## Useful locations
sources_directory=$FUNCTIONAL_DEVELOPER_USER_ROOT/sources
emulator_registry=${emulator_registry:-$sources_directory/registry/emulator}
generic_registry=${generic_registry:-$sources_directory/registry/generic}
build_directory=$FUNCTIONAL_DEVELOPER_USER_BUILD
bin_directory=$FUNCTIONAL_DEVELOPER_USER_INSTALL/bin
include_directory=$FUNCTIONAL_DEVELOPER_USER_INSTALL/include
lib_directory=$FUNCTIONAL_DEVELOPER_USER_INSTALL/lib

## Words for printing out in the preamble.
case $tags in
  0) tagsword=No;;
  1) tagsword=Yes;;
esac

case $checkout in
  0) checkoutword=No;;
  1) checkoutword=Yes;;
esac

case $delete_fasls in
  0) delete_faslsword=No;;
  1) delete_faslsword=Yes;;
esac

case $keep_products in
  0) keep_productsword=No;;
  1) keep_productsword=Yes;;
esac

case $skip_build in
  0) skip_buildword=No;;
  1) skip_buildword=Yes;;
esac

## Sources of DFMC, its relatives, and test suite.  The complete list is:
## dfmc, these guys, and cmu-test-suite.  These guys all live under $personal_dylan_root/lib.
DFMC_LIB_COMPOUNDS='D-lib-date D-lib-dood D-lib-file-system D-lib-memory-manager D-lib-ppml D-lib-source-records D-lib-threads D-lib-variable-search D-lib-walker D-lib-big-integers D-lib-generic-arithmetic D-lib-dylan D-lib-harlequin-extensions D-lib-functional-dylan D-lib-format-out D-lib-collectors D-lib-metering D-lib-build-system'

## Libraries of DFMC whose registies are GENERIC:
DFMC_GENERIC_REGISTRIES='dfmc-back-end dfmc-browser-support dfmc-c-back-end dfmc-c-compiler dfmc-c-ffi dfmc-c-file-compiler dfmc-c-linker dfmc-common dfmc-conditions dfmc-conversion dfmc-core dfmc-debug-back-end dfmc-definitions dfmc-execution dfmc-flow-graph dfmc-harp-browser-support dfmc-harp-cg dfmc-harp-cg-linker dfmc-linker dfmc-macro-expander dfmc-management dfmc-mangling dfmc-modeling dfmc-namespace dfmc-optimization dfmc-pentium-harp-cg dfmc-reader dfmc-testing dfmc-typist dfmc-webster projects registry-projects source-records file-source-records walker variable-search memory-manager ppml threads big-integers generic-arithmetic dylan functional-dylan cmu-test-suite format-out collectors metering build-system user-projects'

## Libraries of DFMC which have EMULATOR-SPECIFIC registry files.
DFMC_EMULATOR_REGISTRIES='dfmc-conditions dfmc-macro-expander dfmc-reader dfmc-typist dood variable-search walker memory-manager date file-system threads functional-extensions big-integers generic-arithmetic metering build-system'

## Libraries of DFMC which have UNIX-SPECIFIC registry files.
DFMC_UNIX_REGISTRIES='date dood file-system functional-extensions variable-search'

## Libraries of DFMC which have WIN32-SPECIFIC registry files.
DFMC_WIN32_REGISTRIES='date dood file-system functional-extensions variable-search'

## Dirs relative to $personal_dylan_root/dfmc/ to search for .lids, for TAGS file builds.
## Includes everything under dfmc, and pop up a level to look in lib, as well.  (Except dylan lib.)
DFMC_TAGS_DIRS="*/"
for comp in $DFMC_LIB_COMPOUNDS; do
  if test $comp != D-lib-dylan; then
    DFMC_TAGS_DIRS="$DFMC_TAGS_DIRS ../lib/${comp#D-lib-*}"
  fi
done

## By: amit On: Jan 06 97 Re: gcc failure at seattle
## The following kludge is being done for seattle because gcc is not officially
## installed there. It is just present in this pub dir and sysadmins say that it
## will be installed in some more logical place like /usr/local/bin. Once that is
## done then this hack can be removed
##
site=`domainname | cut -f1 -d "."`
case $site in
   seattle) PATH=$PATH:/u/pub/osf3.2_alpha/bin ;;
   *) ;;
esac

function send-mail() {
  ## if -m mail-addr(s) was given, mail them the informative part of the log.

  ## Platform-dependent mailing commands.
  case $machine in
    sparc-sunos4 | sparc-solaris2) mailer="mail";;
    alpha-osf3)                    mailer="mailx";; # OSF has to be different, of course!
    *)                             echo "No mailer specified for $machine platforms."; exit 2;;
  esac

  ## Echo summary info into a mail pipe
  if test -f $log_file; then
    fgrep -s "*** Bailing" $log_file    # bailout during emulator-based build
    if test $? -eq 0; then
      echo "Lines around the failure:"
      /u/dylan/admin/builds/fabs $log_file "\*\*\* Bailing" -a 20 -b 50
      echo ""
      echo ""
      echo "Tail of build-dfmc log file $log_file:"
      /u/dylan/admin/builds/fabs $log_file -a 13 -t
    else
      echo "Last 50 lines of build-dfmc log file $log_file:"
      /u/dylan/admin/builds/fabs $log_file -a 50 -t
    fi
  else
    echo "Log file $log_file for build-dfmc not found.  Go find out why!"
  fi | $mailer -s "build-dfmc report on $hostname ($machine platform)" $send_mail_to
}

function checkout-registries(){
  ## checkout-registries registry-type lib1 ... libN
  ## Check out registry file to DFMC generic/emulator/unix/win32 registry.
  ## Save some Hope cycles by bunching up all the registry checkouts with -and.
  registry=$1
  shift
  all="$@"
  conjuncts="-unit $1"
  shift
  for lib in $@; do
    conjuncts="$conjuncts -and -unit $lib"
  done
  echo ""
  echo "Checking out $registry registry(-ies) for: $all..."
  case $registry in
    generic)  pushd $generic_registry
              hope co -branch $branch -writ skip -extra delete -miss create -comp D-registry-$registry $conjuncts
              popd;;
    emulator) pushd $emulator_registry
              hope co -branch $branch -writ skip -extra delete -miss create -comp D-registry-$registry $conjuncts
              popd;;
    unix)     for unix_platform in alpha-osf3 mips-irix5 sparc-solaris2 sparc-sunos4; do
                pushd $generic_registry/../$unix_platform/
                hope co -branch $branch -writ skip -extra delete -miss create -comp D-registry-$unix_platform $conjuncts
                popd
              done;;
    win32)    pushd $generic_registry/../x86-win32/
              hope co -branch $branch -writ skip -extra delete -miss create -comp D-registry-x86-win32 $conjuncts
              popd;;
  esac
}

function checkout-sources(){
  ## checkout-sources directory-under-personal-root compound1 ... compoundN
  ## Checks out HOPE compound to a directory under personal root, recursively.
  ## Save some HOPE cycles by bunching up compounds with -and.
  dir=$1
  shift
  all="$@"
  conjuncts="-comp $1"
  shift
  for lib in $@; do
    conjuncts="$conjuncts -and -comp $lib"
  done
  echo ""
  echo "Checking out compounds below $sources_directory/$dir for: $all ..."

  pushd $sources_directory/$dir
  hope co -branch $branch -rec -writ skip -extra delete -miss create $conjuncts
  popd
}

function build-tags(){
  ## build-tags lib-name TAGS-dir-under-personal-root lidexpr-under-TAGS-dir
  ## Builds a TAGS file in directory under personal root, from .lid expression.
  case $machine in
    alpha-osf3) echo ""
                echo "Can't build $1 TAGS file from an Alpha, because gema isn't compiled there.";;
    *)          echo ""
                echo "Building $1 TAGS file in $sources_directory/$2/TAGS..."
                ## Using -o option led to unusable TAGS files with relative pathnames
                pushd $sources_directory/$2/
                dtags `lib-files -r $3`
                popd;;
  esac
}

function rip-out-fasls(){
  ## Removes Lisp fasl files for DFMC under the emulator
  echo ""
  echo "Ripping out *.$fasl's in $sources_directory/dfmc/*/..."
  rm -f $sources_directory/dfmc/*/*.$fasl

  echo "Ripping out *.$fasl's in $sources_directory/project-manager/*/..."
  rm -f $sources_directory/project-manager/*/*.$fasl

  echo "Ripping out *.$fasl's under $sources_directory/lib/ for $DFMC_LIB_COMPOUNDS..."
  for comp in $DFMC_LIB_COMPOUNDS; do
    # The ${comp#D-lib-*} strips off the pattern D-lib-* from $comp.
    rm -f $sources_directory/lib/${comp#D-lib-*}/*.$fasl
  done


}

function rip-out-run-time(){
  ## Rip out the compiled version of the C run-time.
  echo ""
  echo "Ripping out *.o & lib files for C run-time from $sources_directory/dfmc/c-run-time/..."
  rm -f $sources_directory/dfmc/c-run-time/*.o
  rm -f $sources_directory/dfmc/c-run-time/lib_run-time.$FUNCTIONAL_DEVELOPER_LIB_SUFFIX
  
  echo "Ripping out old lib for C run-time from $lib_directory..."
  rm -f $lib_directory/lib_run-time.$FUNCTIONAL_DEVELOPER_LIB_SUFFIX

  echo "Ripping out old include for C run-time from $include_directory..."
  rm -f $include_directory/run-time.h
}

function rip-out-compilation-products(){
  ## rip-out-compilation-products lib-name
  ## Removes .c files, .o files, .el files, library files (.a/.so), and application (if any).
  echo ""
  echo "Ripping out old builds in $build_directory/$1/*..."
  rm -fr $build_directory/$1

  echo "Ripping out old lib $lib_directory/lib_$1.$FUNCTIONAL_DEVELOPER_LIB_SUFFIX..."
  rm -f $lib_directory/lib_$1.$FUNCTIONAL_DEVELOPER_LIB_SUFFIX

  echo "Ripping out old application $bin_directory/$1..."
  rm -f $bin_directory/$1
}

function OSF-loader-muzzle(){
  ## The OSF loader writes directly to /dev/tty!  This gets it to write to a 
  ## (separate) log file.  Pick up the contents later.  If you try to make it
  ## go directly to the log file, it gets a "permission denied" error.
  ## Do man loader on an alpha to see what this is all about.
  echo "Muzzling the OSF loader..."
  loader_log=/tmp/loader-log-`whoami`-`hostname -s`-`date +%T` # Funky unique name?
  export _RLD_ARGS="-log $loader_log" # Make loader write here instead of /dev/tty
  rm -f $loader_log                   # Remove it if it already exists.
}

function OSF-loader-unmuzzle(){
  ## If the dog barfed into the muzzle, log the contents.
  echo "Unmuzzling the OSF loader..."
  if test -f $loader_log; then
    echo "Muzzled OSF loader messages from $loader_log:"
    cat $loader_log
    rm -f $loader_log
  else
    echo "No muzzled OSF loader messages found in $loader_log."
  fi
}

## Everything (stdout and stderr) from here on out is teed to the logfile.
{
echo "******************************************************************************************"
echo "* Complete DFM rebuild from source, Dylan library recompile, and reports of test suites. *"
echo "******************************************************************************************"
echo ""
echo "********************************************"
echo "Start time:            $starttime"
echo "Started by:            `whoami`"
echo "Compilation machine:   $hostname@$site (`uname` `uname -r` `uname -v` `uname -m`)"
echo "Lisp image:            $image"
echo "Save image:            $save"
echo "Root Directory:        $personal_dylan_root"
echo "Emulator Registry:     $emulator_registry"
echo "Generic Registry:      $generic_registry"
echo "Sources Directory:     $sources_directory"
echo "Build Directory:       $build_directory"
echo "Bin Directory:         $bin_directory"
echo "Lib Directory:         $lib_directory"
echo "Include Directory:     $include_directory"
echo "Log file:              $log_file"
echo "Send mail:             $send_mail_to"
echo "TAGS file builds:      $tagsword"
echo "Checkout sources:      $checkoutword"
echo "Branch:                $branch"
echo "Delete .$fasl files:   $delete_faslsword"
echo "Keep old .c &c files:  $keep_productsword"
echo "Skip the DFMC build:   $skip_buildword"
echo "********************************************"

dstatus=0

## If we're skipping the build, also skip the checkouts and fasl deletions
##
if test $skip_build -eq 0; then

  ## Do checkouts first, to get sources & registries synch'd up
  if test $checkout -ne 0; then
    echo ""
    echo "********************"
    echo "* Source checkouts *"
    echo "********************"
    checkout-sources dfmc/                        D-dfmc
    checkout-sources lib/                         $DFMC_LIB_COMPOUNDS
    checkout-sources partners/cmu/cmu-test-suite/ D-partners-cmu-cmu-test-suite
    checkout-sources project-manager/             D-project-manager

    echo ""
    echo "**********************"
    echo "* Registry checkouts *"
    echo "**********************"
    checkout-registries generic  $DFMC_GENERIC_REGISTRIES
    checkout-registries emulator $DFMC_EMULATOR_REGISTRIES
    checkout-registries unix     $DFMC_UNIX_REGISTRIES
    checkout-registries win32    $DFMC_WIN32_REGISTRIES

    echo ""
    echo "*****************************"
    echo "* Boehm GC library checkout *"
    echo "*****************************"
    pushd $lib_directory
    hope co -comp D-install-$machine-lib -unit lib_gc.$FUNCTIONAL_DEVELOPER_LIB_SUFFIX -branch $branch -writ skip -extra delete -miss create
    if test $machine=sparc-sunos4; then
      ## Magic RThor & Jonathan say we gotta do on SunOS.  NB: gets a warning about no symbol table.
      chmod u+w $lib_directory/lib_gc.$FUNCTIONAL_DEVELOPER_LIB_SUFFIX # make it writeable
      ranlib $lib_directory/lib_gc.$FUNCTIONAL_DEVELOPER_LIB_SUFFIX    # update table of contents
      chmod u-w $lib_directory/lib_gc.$FUNCTIONAL_DEVELOPER_LIB_SUFFIX # make it unwriteable
    fi
    popd
  fi

  ## Build tags file early, so you can go play in the editor in the meantime.
  if test $tags -ne 0; then
    echo ""
    echo "********************"
    echo "* TAGS file builds *"
    echo "********************"
    build-tags DFMC  dfmc      "$DFMC_TAGS_DIRS" # ""'s prevent early pathname expansion
    build-tags Dylan lib/dylan dylan.lid
  fi

  ## Rip out fasls so compiler will be rebuilt from source
  if test $delete_fasls -ne 0; then
    echo ""
    echo "******************"
    echo "* FASL deletions *"
    echo "******************"
    rip-out-fasls
  fi

fi

## Rip out compilation products, so libraries get a clean DFM recompile.
if test $keep_products -ne 1; then
  echo ""
  echo "*********************************"
  echo "* Compilation product deletions *"
  echo "*********************************"
  rip-out-run-time
  rip-out-compilation-products dylan
  rip-out-compilation-products functional-dylan
  rip-out-compilation-products functional-extensions
  rip-out-compilation-products cmu-test-suite
##  rip-out-compilation-products unified-cmu-test-suite
fi

if test $skip_build -eq 0; then

  ## Now the ~3 hour rebuild, compilation, and test suite.
  echo ""
  echo "********************************************************************************"
  echo "* Compiling the DFMC, Dylan library, CMU test suite, and associated libraries. *"
  echo "********************************************************************************"

  $image -init - -multiprocessing <<SCRIPTORIUM
(in-package "DYLAN")
;;(load-all-patches) ;Not your best idea ever.
(setq *sg-default-size* (* 4 *sg-default-size*))
(setq *emulator-compiler-print-message-level* nil) ;Roman gags the compiler
(push "$generic_registry"  dylan::*library-registries*)
(push "$emulator_registry" dylan::*library-registries*) ;takes precedence over generic
(defun funcall-with-backtrace (fn)
  ;; fn is a body function to be called.  If it errors, a backtrace will
  ;; be printed and the image exited.  (Bactrace stuff stolen from AndrewA.)
  ;; Also report elapsed time and number of lines/minute compiled. 
  (declare (dynamic-extent fn))
  (labels ((backtrace-&-bail (condition)
             ;; Any condition that gets this far and isn't otherwise handled
             ;; does a backtrace to the log file and exits abnormally.
             (format t "~&*** Bailing out after unhandled signal: ~A" condition)
             (let ((dbg::*debugger-stack* (funcall #'dbg::grab-stack nil)))
               ;; See dbg:with-debugger-stack, in System 1.147.
               (dbg:bug-backtrace nil))
             (bye 1)))
    (handler-bind ((error #'backtrace-&-bail))
      ;; Call body with rubber gloves and kludge goggles on.
      (funcall fn))))
(compile 'funcall-with-backtrace)
(defun maybe-save-image ()
  ;; Maybe save this image to disk.
  (declare (values))
  (unless (string= "$save" "No")
    ;; Plausible that the user wants to save the image.
    (cond ((null (parse-namestring "$save" nil *default-pathname-defaults* :junk-allowed t))
           ;; Invalid pathname, so don't error, but report it to the log.
           (format t "~%Save to $save failed, because it's not a valid pathname."))
          (t
           ;; Syntactically valid pathname
           (when (probe-file "$save") (delete-file "$save"))
           (format t "~%Saving image to $save...")
           (user::save-emulator-image "$save")      ;written by Amit (somewhere or other)
           (system::call-system "chmod go-w $save") ;make non-writeable by group and others
           (format t " done."))))
  (values))
(compile 'maybe-save-image)
;; Used to be require: dfmc-c-file-compiler.  This way we get a backtrace if there's
;; a problem while emulator-compiling/loading the compiler.
(funcall-with-backtrace #'(lambda () (dylan::ensure-library :dfmc-c-file-compiler)))
(dylan:tty-infix-dylan-listen)
in: dfmc-debug;
import-cl-functions(dylan(funcall-with-backtrace)(as: funcall-with-backtrace));
import-cl-functions(dylan(maybe-save-image)(as: maybe-save-image));
funcall-with-backtrace(method ()  
                         compile-library-metering(*top-level-metering*, #"dylan")
                       end);
funcall-with-backtrace(method () update-libraries(#"cmu-test-suite") end);
funcall-with-backtrace(method ()
			 execute-string("define function frotz (x) "
					" head(list(1,2,3)) + 2 "
					"end;",
					module: "internal",
					library: "dylan",
					skip-link?: #t)
		       end);


maybe-save-image();
bye:;
(bye 0)
SCRIPTORIUM

  ### Taken out of the above because it's been useless for so long.
  ##in: dfmc-testing;
  ##run-tests(lift-rocks?: #t);

  dstatus=$? # Dylan compilation exit status

fi

## Postludi: compile, link, and run the dudes.
cd $build_directory/cmu-test-suite/       && rm _SRV                # Don't reuse build
if test $dstatus -eq 0; then

  ## Rely on recursive make install's of used libraries.  The &&'s mean that
  ## you only get to go on if previous command returned a 0 exit code.  The 
  ## cleans are redundant if compilation products were not kept (no -k given).
  echo ""
  echo "*************************************"
  echo "* Making CMU test suite app & libs. *"
  echo "*************************************"
  cd $sources_directory/dfmc/c-run-time        && make clean && make install && # For JB.
  cd $build_directory/dylan/                && make clean &&          # Force clean dirs
  cd $build_directory/functional-dylan/      && make clean &&          #  of used libs for
  cd $build_directory/functional-extensions/ && make clean &&          #  clean recompile.
  cd $build_directory/cmu-test-suite/       && make clean install-app # Gen & install app.
  cstatus=$? # C compilation exit status

  if test $cstatus -eq 0; then

    echo ""
    echo "*****************************"
    echo "* CMU test suite app sizes: *"
    echo "*****************************"
    size $bin_directory/cmu-test-suite
    echo ""
    echo "The size of the actual app file installed in $bin_directory/:"
    ls -l $bin_directory/cmu-test-suite

    echo ""
    echo "************************************"
    echo "* Executing the CMU test suite app *"
    echo "************************************"

    case $machine in
      ## Deal with loader lossage in OSF: capture messages sent to /dev/tty.
      ## No workaround for Solaris yet; doesn't appear to have same flags?
      alpha-osf3)    OSF-loader-muzzle ;;
      sparc-solaris) echo "Warning: some Solaris ld.so output to /dev/tty might not be logged.";;
    esac

    ## time  # remove time because it returns its own status, not the
             # wrapped command's.  And it's different on diff. Unices.
    $bin_directory/cmu-test-suite
    tstatus=$? 

    case $machine in
      ## Log the captured messages sent to /dev/tty by showing them to stdout.
      alpha-osf3) OSF-loader-unmuzzle ;;
    esac

  else
  
    echo ""
    echo "C compilation exit status = $cstatus; won't attempt execution!"

  fi

else

  echo ""
  echo "Dylan compilation exit status = $dstatus; won't attempt C compilation!"

fi

## Figure out some way to print the elapsed time?
echo ""
echo "********************************************"
echo "Build, recompile, and test run completed."
echo "Start time:                      $starttime."
echo "Completion time:                 `date`."
echo "Build Directory:                 $build_directory"
echo "Log file:                        $log_file"
if test -z $dstatus; then
  echo "Dylan compilation exit status:   (not attempted, for obscure reasons)"
else
  echo "Dylan compilation exit status:   $dstatus"
fi
if test -z $cstatus; then
  echo "C compilation exit status:       (not attempted, due to earlier errors)"
else
  echo "C compilation exit status:       $cstatus"
fi
if test -z $tstatus; then
  echo "CMU test suite execution status: (not attempted, due to earlier errors)"
else
  echo "CMU test suite execution status: $tstatus"
fi
echo "********************************************"

## This flying circus arranges for stderr to be piped to stdout, and then teed to the logfile.
} 2>&1 | tee $log_file

## Log file writing is now complete.  Send mail if the -m option was specified.
case $send_mail_to in
   No) ;;
   *) send-mail;;
esac
