Document: README
  Author: Shri Amit(amit)
Synopsis: A quick overview of the scripts and files in D-admin-builds and
	  pointers to more information.
-------------------------------------------------------------------------

Introduction:
------------
The scripts and files contained in the D-admin-builds compound are
responsible for executing a nightly sync and build of the Project
Dylan sources at any sites used by Dylan developers. It
is the responsibility of the release manager to maintain all of
these scripts, this README file and all the other documentation
mentioned below to fulfill the needs of the Dylan Group.

Current Release Manager(s):
--------------------------
Shri Amit(amit)
Russell Prince(princew)

Note: Please do not modify anything within this compound without
the knowledge of the release manager unless there is a very good
reason for it and the release manager is unavailable. Do not
ignore this message as inconsistancies in these admin scripts may
easily cause serious problems in the dylan devo.

Pointers to more information:
----------------------------
. Nightly Build Documentation:
    This doc can be found in Notes in the Dylan Notebook database
    at the following location: Infrastructure\Nightly Builds

Synopsis of scripts:
-------------------
1. build-clim:
    Builds the lw+dylan+clim image by loading clim and load-clim-env.lisp. 
    This is not run as part of the nightly builds, but runs as a seperate 
    cron job every Sunday and Wednesday.

2. build-emulator:
    Builds the lw+dylan emulator image, by loading the demand-compiler
    and the main-resources onto a lispworks image.

3. build-env:
    Builds the lw+dylan+env image, by loading load-env.lisp

4. build-machines.txt:
    Contains the infomation about which builds are to be run on which
    machines at what sites and other related information. It is parsed
    by instigate-build to start the nightly builds.

5. build-prolog.lisp:
    A bunch of useful lisp functions and patches that are loaded onto
    lispworks images before anything else is built. Note that since
    we are currently using our own frozen lisp images (in ~dylan/local)
    build-prolog.lisp is used only when a frozen image needs to be
    created (to load stuff on the lispworks image).

6. build-report:
    Sends a report to the interested people after completing the builds.

7. compile-libs:
    Compiles all libraries specified in libs2compile in the dylan emulator
    image to produce the fasl files.

8. dylan-cron-jobs.txt:
    Contains the crontab entries for all machines at all sites. It is parsed
    by schedule-cron to set the crontab entries everywhere.

9. env.bash:
    Sets up the bash environment and other common variables and functions
    for all the bash scripts.

10. env.perl:
     Sets up the perl environment and other common variables and functions
     for all the perl scripts.

11. get-host-name:
     Returns the name of the host without the domain name attached. Very
     useful for remote shells.

12. instigate-build:
     The parent script that gets croned to start the builds. It uses the file
     build-machines.txt to decide what to build, runs the sync, the build and
     then a report.

13. libs2compile:
     The list of libraries that are "active" or being developed on, for which
     fasl files need to be generated nightly.

14. load-clim-env.lisp:
     Loads the clim environment and the clim dylan environment. Used by build-clim

15. load-libs.lisp:
     Compiles all the libraries in the emulator. Used by compile-libs.

16. nightly-build:
     A wrapper script around all the possible builds. Command line options
     allow easy regulation what builds to execute.

17. nightly-sync:
     Performs a checkout of the D compound recursively into the ~dylan area.

18. nightly-tag-file:
     Builds the TAGS files for all dirs specified in source-dirs2tag

19. remove-old-files:
     A neat little perl utility which allows automatic deletion of old logfiles
     and old images. All the scripts that save images or logfiles use this at
     the end to purge the old files.

20. schedule-cron:
     Sets the dylan crontab entry by parsing the file dylan-cron-jobs.txt at
     all the Functional Developer sites. It is always better to use this script
     and the related file to maintain the crontab so that there are no descrepancies
     between what really happens and what is represented in the admin.

21. lw-license-variables:
     This script sets and exports the license server variables for lispworks images
     for all sites. All dylan builds and the dylan account .bashrc source this
     script to set the right variables. Release manager must pay special attention
     to this and keep this uptodate with the changes in the lisp group licensing
     stuff.

#eof
