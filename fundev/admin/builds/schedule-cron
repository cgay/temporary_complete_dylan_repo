#!/usr/local/bin/perl
#       Script: schedule-cron
#       Author: Shri Amit(amit)
$usage=" Usage: schedule-cron [-s] [<CronFile>]";
#  Opts & Args: -s : force a nightly-sync run only the machines listed
#		in CronFile.
#		<CronFile>: a file containing a list of cron entries
#               and machine names sorted according to site. Defaults
#               to /u/dylan/admin/builds/dylan-cron-jobs.txt
#     Synopsis: . Generates and submits a crontab file based
#                 on <CronFile>.
#		When -s is used, wherever the CronFile calls for
#		running /u/dylan/admin/builds/instigate-build, run
#		/u/dylan/admin/builds/nightly-sync instead; where
#		CronFile calls for any other file, do no cron action.
#         Note: This script needs to be executed only once from
#               any of the sites listed in <CronFile>.
#               It will cron all entries at those sites.
#     Revision: By: dodds. On: 15 May 1997. Rea: Add -s option
#		to turn on sync-only operating protocol.
#################################################################
## Application exit codes ##
## 0: Schedule successful
## 1: Unable to open cronfile
## 2: Unable to open tmp file to submit crontab

require '/u/dylan/admin/builds/env.perl';
$OUTPUT_TYPE = "both";
$start_time = `date`; chop($start_time);
$log_file = "$admindir/logs/schedule-cron-log.$suffix";
$cron_file = $ARGV[0];
$sync_only = 0;

if ($cron_file eq "-s") {
    $sync_only = 1;
    $cron_file = $ARGV[1];
}

if ($cron_file eq "") {
    $cron_file = "$admindir/dylan-cron-jobs.txt";
}
open(THELOG, ">$log_file");


## Execute all subroutines according to options
##
&running_with_options();
%cronnies = &parse_cron_file($cron_file, $site);

foreach $machine (sort keys(%cronnies)) {
    $temp_cronnie = $cronnies{$machine};
    chop($machine);
    chop($temp_cronnie);
    &output("the machine: $machine");
    &output("$temp_cronnie\n");
}

&cron_entries(%cronnies);

## Close the logfile ##
##
$end_time = `date`; chop($end_time);
&output("Ending at: $end_time\n");
close(THELOG);
&execute("$admindir/remove-old-files $logsdir/schedule-cron-log 2");

## Logical end of the script
## All subroutines under here ##
   
## Output all the options ##
##
sub running_with_options {
    &output("Starting at: $start_time");
    &output("Running $0 with options:");
    &output("   The cron file is: $cron_file");
    if ($sync_only) {
	&output("    NOTE: Sync-only jobs are being run");
	}
    &output("      The logfile is: $log_file\n\n");
}

## rsh into each of the machines and set the  ##
## crontab entries after clearing the old one ##
##
sub cron_entries {
    local(%cronnies) = @_;
    local($machine);
    foreach $machine (sort keys(%cronnies)) {
        $temp_cronnie = $cronnies{$machine};
        chop($machine);
        chop($temp_cronnie);
	&output("Processing crontab for $machine...");
        &output("  $machine: Removing crontab entries...");
	&execute("rsh $machine -n crontab -r");
	if ($sync_only) {
	    &output("  $host: Setting sync-only run...");
	    $temp_cronnie =~ /(.+)\s+(\S+$)/;
	    if ($2 eq "/u/dylan/admin/builds/instigate-build") {
		$temp_cronnie = $1 . " /u/dylan/admin/builds/nightly-sync";
	    } else {
		$temp_cronnie = "";
	    }
        }
        unless ($temp_cronnie eq "") {
	    &output("  $host: Creating temporary crontab file...");
	    open(TMP, ">/tmp/dylan-temp-crontab")
		|| &application_error("Unable to create temp file", 2,
				      $0, $usage);
	    print TMP "$temp_cronnie\n";
	    close(TMP);
	    &output("  $host: Copying crontab file to $machine...");
	    &execute("rcp /tmp/dylan-temp-crontab $machine:/tmp/dylan-crontab");
	    &output("  $host: Removing temp crontab file...");
	    &execute("rm -f /tmp/dylan-temp-crontab");
	    &output("  $machine: Cronning new crontab file...\n");
	    &execute("rsh $machine -n crontab /tmp/dylan-crontab");
	} else {
	    &output("  $machine: No new crontab file...\n");
	}
    }
}

## Parse a file of the format described in ##
## dylan-cron-jobs.txt and determines the  ##
## machines and their cron entries         ##
##
sub parse_cron_file {
    local($cron_file, $site) = ($_[0], $_[1]);
    local($line, $domain, $site, %cronnies);
    open (CRONFILE, "<$cron_file")
	|| &application_error("Unable to open $cron_file", 1,
			      $0, $usage);
    foreach $line (<CRONFILE>) {
	if ($line =~ /Site: /) {
	    $domain = $';
	} else {
	    chop($line);			
	    unless ($line =~ /^\s*#.*|^\s*$/) {
		 $line =~ /^(\w+)\s+(.*$)/;
                 $one = "$1.$domain";
	         $cronnies{$one} .= "$2\n";
            }
        }
    }
    close(CRONFILE);
    return(%cronnies);
}
#eof
