Schedule for Dylan Environment Work
===================================

The following is a preliminary outline of the Dylan Environment
Project Plan. This schedule aims to provide a work plan to bring into
effect the goals of the DylanWorks team. These goals are as follows :

To provide a State-Of-The-Art development environment, capitalising on
the best that an OODL such as Dylan can offer.
To make optimal use of resources and existing software development
components.
To better existing programming environments for other programming
languages (including those in the highly competitive market of C++
environments under Windows NT).
To provide as complete a framework as possible for an extensible
environment, for both our customers (internal and external) and
DylanWorks 2.0.
To make effective use of appropriate OODB technology.
To provide a compelling development environment for the production of
software components and middleware.

The work is divided into three major phases, namely :

Initial : Design work, OODB and protocol investigation, Competitor Analysis

Pre-May : Initial (low resource) 
	design and implementation work of OODB, protocols and file integration.

May - File based compiler releases.

Post-May : Finalisation of implementations and full component based
	environment.

These three phases are partitioned so as to allow maximum benefit from
other Harlequin staff as and when the resources become available from
Dylan compiler effort and other sp-env staff.

In greater detail, these phases are outlined as follows :

Initial
-------

Since there is a much greater amount of work to do than can possibly
be done by any team in the given timescale, and since one of our
initial goals is to provide a development environment that is
customisable and extendable by future users / developers, it is deemed
essential that the initial DylanWorks design, OODB integration and
protocol definition be carefully designed and reviewed.

Our initial target platform to support is Windows NT, with an aim to
support applications generated under DylanWorks to be runnable on
Win32s. With this in mind, any OODB we select must be supported on NT,
any components or technologies we borrow from LispWorks must be
supported and ported to PC Lispworks. 

Work Package		Description

   1010			Competitor Analysis
   1020			OODB investigation and Selection
   1030			Middleware / Protocol design (Ken)
   1031				Object-Manager Design
   1032				Design Reviews
   1040			Prototype Object Manager and Environment Look-and-Feel

Pre-May
-------

Much of this work will be governed by availability of resources, in
particular bearing in mind the pre-May push of the file compiler
release.  However, it will be important at this time to integrate the
results of the previous initial work with the compiler, so that the
right information can be generated and placed into the OODB from the
compilers output. In particular file-OODB exchange of programs will be
established, so that standard text based editors (such as emacs) can
be used, allowing both the testing of OODB based development and
OODB-text exchange mechanism. Also using this information will be the
environment version of the debugger which will use this OODB stored
compiler information. Encompassing all this at this stage is the
production of the outline user interface to the development
environment (the Navigator or Minimal Project Manager, since
DylanWorks is envisaged as a multi-developer, multi-platform
environment. At this time some work can also be done on other
components of the development environment - these are currently
scheduled as Post-May activities, but can easily be brought forward.


Work Package		Description

   2010			File<->OODB exchange interface design and implementation
   2020			Debugger
   2030			Minimal Project Manager / Env. Navigator
   2040			Compiler<->Environment Integration

Post-May
--------

After the may file based compiler delivery work can continue in
earnest in the Development Environment, working on the other
components which will have been developed. The design and
specification of these components is incomplete at the moment.

Work Package

   3100			Final Debugger
   3210			Inspectors
   3220			Browsers
   3230			Listeners
   3300			Hypertext Editor Integration
   3400			Interface Builders / Classworks
   3500			Full Project Manager / Navigator
   3510			Versioning Control			
   3600			Profilers
   3700			Libraries (some designed and written in tandem
			with the above components, to make their
			development  more effective)
