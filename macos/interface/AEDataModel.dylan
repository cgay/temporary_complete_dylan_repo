Module:    macos-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "AEDataModel.h"; do not edit.

// unnamed enum:
define inline-only constant $typeBoolean               = FOUR_CHAR_CODE('b', 'o', 'o', 'l');
define inline-only constant $typeChar                  = FOUR_CHAR_CODE('T', 'E', 'X', 'T');

// unnamed enum:
define inline-only constant $typeSInt16                = FOUR_CHAR_CODE('s', 'h', 'o', 'r');
define inline-only constant $typeSInt32                = FOUR_CHAR_CODE('l', 'o', 'n', 'g');
define inline-only constant $typeUInt32                = FOUR_CHAR_CODE('m', 'a', 'g', 'n');
define inline-only constant $typeSInt64                = FOUR_CHAR_CODE('c', 'o', 'm', 'p');
define inline-only constant $typeIEEE32BitFloatingPoint = FOUR_CHAR_CODE('s', 'i', 'n', 'g');
define inline-only constant $typeIEEE64BitFloatingPoint = FOUR_CHAR_CODE('d', 'o', 'u', 'b');
define inline-only constant $type128BitFloatingPoint   = FOUR_CHAR_CODE('l', 'd', 'b', 'l');
define inline-only constant $typeDecimalStruct         = FOUR_CHAR_CODE('d', 'e', 'c', 'm');

// unnamed enum:
define inline-only constant $typeSMInt                 = $typeSInt16;
define inline-only constant $typeShortInteger          = $typeSInt16;
define inline-only constant $typeInteger               = $typeSInt32;
define inline-only constant $typeLongInteger           = $typeSInt32;
define inline-only constant $typeMagnitude             = $typeUInt32;
define inline-only constant $typeComp                  = $typeSInt64;
define inline-only constant $typeSMFloat               = $typeIEEE32BitFloatingPoint;
define inline-only constant $typeShortFloat            = $typeIEEE32BitFloatingPoint;
define inline-only constant $typeFloat                 = $typeIEEE64BitFloatingPoint;
define inline-only constant $typeLongFloat             = $typeIEEE64BitFloatingPoint;
define inline-only constant $typeExtended              = FOUR_CHAR_CODE('e', 'x', 't', 'e');

// unnamed enum:
define inline-only constant $typeAEList                = FOUR_CHAR_CODE('l', 'i', 's', 't');
define inline-only constant $typeAERecord              = FOUR_CHAR_CODE('r', 'e', 'c', 'o');
define inline-only constant $typeAppleEvent            = FOUR_CHAR_CODE('a', 'e', 'v', 't');
define inline-only constant $typeEventRecord           = FOUR_CHAR_CODE('e', 'v', 'r', 'c');
define inline-only constant $typeTrue                  = FOUR_CHAR_CODE('t', 'r', 'u', 'e');
define inline-only constant $typeFalse                 = FOUR_CHAR_CODE('f', 'a', 'l', 's');
define inline-only constant $typeAlias                 = FOUR_CHAR_CODE('a', 'l', 'i', 's');
define inline-only constant $typeEnumerated            = FOUR_CHAR_CODE('e', 'n', 'u', 'm');
define inline-only constant $typeType                  = FOUR_CHAR_CODE('t', 'y', 'p', 'e');
define inline-only constant $typeAppParameters         = FOUR_CHAR_CODE('a', 'p', 'p', 'a');
define inline-only constant $typeProperty              = FOUR_CHAR_CODE('p', 'r', 'o', 'p');
define inline-only constant $typeFSS                   = FOUR_CHAR_CODE('f', 's', 's', ' ');
define inline-only constant $typeKeyword               = FOUR_CHAR_CODE('k', 'e', 'y', 'w');
define inline-only constant $typeSectionH              = FOUR_CHAR_CODE('s', 'e', 'c', 't');
define inline-only constant $typeWildCard              = FOUR_CHAR_CODE('*', '*', '*', '*');
define inline-only constant $typeApplSignature         = FOUR_CHAR_CODE('s', 'i', 'g', 'n');
define inline-only constant $typeQDRectangle           = FOUR_CHAR_CODE('q', 'd', 'r', 't');
define inline-only constant $typeFixed                 = FOUR_CHAR_CODE('f', 'i', 'x', 'd');
define inline-only constant $typeSessionID             = FOUR_CHAR_CODE('s', 's', 'i', 'd');
define inline-only constant $typeTargetID              = FOUR_CHAR_CODE('t', 'a', 'r', 'g');
define inline-only constant $typeProcessSerialNumber   = FOUR_CHAR_CODE('p', 's', 'n', ' ');
define inline-only constant $typeKernelProcessID       = FOUR_CHAR_CODE('k', 'p', 'i', 'd');
define inline-only constant $typeDispatcherID          = FOUR_CHAR_CODE('d', 's', 'p', 't');
define inline-only constant $typeNull                  = FOUR_CHAR_CODE('n', 'u', 'l', 'l');

// unnamed enum:
define inline-only constant $keyTransactionIDAttr      = FOUR_CHAR_CODE('t', 'r', 'a', 'n');
define inline-only constant $keyReturnIDAttr           = FOUR_CHAR_CODE('r', 't', 'i', 'd');
define inline-only constant $keyEventClassAttr         = FOUR_CHAR_CODE('e', 'v', 'c', 'l');
define inline-only constant $keyEventIDAttr            = FOUR_CHAR_CODE('e', 'v', 'i', 'd');
define inline-only constant $keyAddressAttr            = FOUR_CHAR_CODE('a', 'd', 'd', 'r');
define inline-only constant $keyOptionalKeywordAttr    = FOUR_CHAR_CODE('o', 'p', 't', 'k');
define inline-only constant $keyTimeoutAttr            = FOUR_CHAR_CODE('t', 'i', 'm', 'o');
define inline-only constant $keyInteractLevelAttr      = FOUR_CHAR_CODE('i', 'n', 't', 'e');
define inline-only constant $keyEventSourceAttr        = FOUR_CHAR_CODE('e', 's', 'r', 'c');
define inline-only constant $keyMissedKeywordAttr      = FOUR_CHAR_CODE('m', 'i', 's', 's');
define inline-only constant $keyOriginalAddressAttr    = FOUR_CHAR_CODE('f', 'r', 'o', 'm');

// unnamed enum:
define inline-only constant $kAEDescListFactorNone     = 0;
define inline-only constant $kAEDescListFactorType     = 4;
define inline-only constant $kAEDescListFactorTypeAndSize = 8;

// unnamed enum:
define inline-only constant $kAutoGenerateReturnID     = -1;
define inline-only constant $kAnyTransactionID         = 0;

define inline constant <DescType> = <ResType>;
define C-pointer-type <DescType*> => <DescType>;
define C-pointer-type <DescType**> => <DescType*>;
define inline constant <AEKeyword> = <FourCharCode>;
define C-pointer-type <AEKeyword*> => <AEKeyword>;
define C-pointer-type <AEKeyword**> => <AEKeyword*>;

define C-struct <AEDesc>
  sealed inline-only slot descriptorType-value :: <DescType>;
  sealed inline-only slot dataHandle-value :: <Handle>;
  pack: 2;
  c-name: "struct AEDesc";
end;
define C-pointer-type <AEDesc*> => <AEDesc>;
define C-pointer-type <AEDesc**> => <AEDesc*>;
define C-pointer-type <AEDescPtr> => <AEDesc>;

define C-struct <AEKeyDesc>
  sealed inline-only slot descKey-value  :: <AEKeyword>;
  sealed inline-only slot descContent-value :: <AEDesc>;
  pack: 2;
  c-name: "struct AEKeyDesc";
end;
define C-pointer-type <AEKeyDesc*> => <AEKeyDesc>;
define C-pointer-type <AEKeyDesc**> => <AEKeyDesc*>;
define inline constant <AEDescList> = <AEDesc>;
define C-pointer-type <AEDescList*> => <AEDescList>;
define C-pointer-type <AEDescList**> => <AEDescList*>;
define inline constant <AERecord> = <AEDescList>;
define C-pointer-type <AERecord*> => <AERecord>;
define C-pointer-type <AERecord**> => <AERecord*>;
define inline constant <AEAddressDesc> = <AEDesc>;
define C-pointer-type <AEAddressDesc*> => <AEAddressDesc>;
define C-pointer-type <AEAddressDesc**> => <AEAddressDesc*>;
define inline constant <AppleEvent> = <AERecord>;
define C-pointer-type <AppleEvent*> => <AppleEvent>;
define C-pointer-type <AppleEvent**> => <AppleEvent*>;
define C-pointer-type <AppleEventPtr> => <AppleEvent>;
define inline constant <AEReturnID> = <SInt16>;
define C-pointer-type <AEReturnID*> => <AEReturnID>;
define C-pointer-type <AEReturnID**> => <AEReturnID*>;
define inline constant <AETransactionID> = <SInt32>;
define C-pointer-type <AETransactionID*> => <AETransactionID>;
define C-pointer-type <AETransactionID**> => <AETransactionID*>;
define inline constant <AEEventClass> = <FourCharCode>;
define C-pointer-type <AEEventClass*> => <AEEventClass>;
define C-pointer-type <AEEventClass**> => <AEEventClass*>;
define inline constant <AEEventID> = <FourCharCode>;
define C-pointer-type <AEEventID*> => <AEEventID>;
define C-pointer-type <AEEventID**> => <AEEventID*>;
define inline constant <AEArrayType> = <SInt8>;
define C-pointer-type <AEArrayType*> => <AEArrayType>;
define C-pointer-type <AEArrayType**> => <AEArrayType*>;
// unnamed enum:
define inline-only constant $kAEDataArray              = 0;
define inline-only constant $kAEPackedArray            = 1;
define inline-only constant $kAEDescArray              = 3;
define inline-only constant $kAEKeyDescArray           = 4;

// unnamed enum:
define inline-only constant $kAEHandleArray            = 2;


define C-union <AEArrayData>
  sealed inline-only array slot kAEDataArray-array :: <C-short>,
    length: 1,
    address-getter: kAEDataArray-value;
  sealed inline-only array slot kAEPackedArray-array :: <C-char>,
    length: 1,
    address-getter: kAEPackedArray-value;
  sealed inline-only array slot kAEHandleArray-array :: <Handle>,
    length: 1,
    address-getter: kAEHandleArray-value;
  sealed inline-only array slot kAEDescArray-array :: <AEDesc>,
    length: 1,
    address-getter: kAEDescArray-value;
  sealed inline-only array slot kAEKeyDescArray-array :: <AEKeyDesc>,
    length: 1,
    address-getter: kAEKeyDescArray-value;
  pack: 2;
end;
define C-pointer-type <AEArrayData*> => <AEArrayData>;
define C-pointer-type <AEArrayData**> => <AEArrayData*>;
define C-pointer-type <AEArrayDataPointer> => <AEArrayData>;
define constant <AECoerceDescProcPtr> = <C-function-pointer>;
define constant <AECoercePtrProcPtr> = <C-function-pointer>;
define constant <AECoerceDescUPP> = <UniversalProcPtr>;
define constant <AECoercePtrUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppAECoerceDescProcInfo   = #x00003FE0;

// unnamed enum:
define inline-only constant $uppAECoercePtrProcInfo    = #x0003FFE0;

define inline constant <AECoercionHandlerUPP> = <UniversalProcPtr>;
define C-pointer-type <AECoercionHandlerUPP*> => <AECoercionHandlerUPP>;
define C-pointer-type <AECoercionHandlerUPP**> => <AECoercionHandlerUPP*>;

define inline-only C-function AEInstallCoercionHandler
  parameter fromType   :: <DescType>;
  parameter toType     :: <DescType>;
  parameter handler    :: <AECoercionHandlerUPP>;
  parameter handlerRefcon :: <C-both-long>;
  parameter fromTypeIsDesc :: <MacBoolean>;
  parameter isSysHandler :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "AEInstallCoercionHandler";
  c-modifiers: "pascal";
end;

define inline-only C-function AERemoveCoercionHandler
  parameter fromType   :: <DescType>;
  parameter toType     :: <DescType>;
  parameter handler    :: <AECoercionHandlerUPP>;
  parameter isSysHandler :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "AERemoveCoercionHandler";
  c-modifiers: "pascal";
end;

define inline-only C-function AEGetCoercionHandler
  parameter fromType   :: <DescType>;
  parameter toType     :: <DescType>;
  parameter handler    :: <AECoercionHandlerUPP*>;
  parameter handlerRefcon :: <C-both-long*>;
  parameter fromTypeIsDesc :: <MacBoolean*>;
  parameter isSysHandler :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "AEGetCoercionHandler";
  c-modifiers: "pascal";
end;

define inline-only C-function AECoercePtr
  parameter typeCode   :: <DescType>;
  parameter dataPtr    ::  /* const */ <C-void*>;
  parameter dataSize   :: <Size>;
  parameter toType     :: <DescType>;
  parameter result     :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AECoercePtr";
  c-modifiers: "pascal";
end;

define inline-only C-function AECoerceDesc
  parameter theAEDesc  ::  /* const */ <AEDesc*>;
  parameter toType     :: <DescType>;
  parameter result     :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AECoerceDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AECreateDesc
  parameter typeCode   :: <DescType>;
  parameter dataPtr    ::  /* const */ <C-void*>;
  parameter dataSize   :: <Size>;
  parameter result     :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AECreateDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AEDisposeDesc
  parameter theAEDesc  :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AEDisposeDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AEDuplicateDesc
  parameter theAEDesc  ::  /* const */ <AEDesc*>;
  parameter result     :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AEDuplicateDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AECreateList
  parameter factoringPtr ::  /* const */ <C-void*>;
  parameter factoredSize :: <Size>;
  parameter isRecord   :: <MacBoolean>;
  parameter resultList :: <AEDescList*>;
  result value :: <OSErr>;
  c-name: "AECreateList";
  c-modifiers: "pascal";
end;

define inline-only C-function AECountItems
  parameter theAEDescList ::  /* const */ <AEDescList*>;
  parameter theCount   :: <C-both-long*>;
  result value :: <OSErr>;
  c-name: "AECountItems";
  c-modifiers: "pascal";
end;

define inline-only C-function AEPutPtr
  parameter theAEDescList :: <AEDescList*>;
  parameter index      :: <C-both-long>;
  parameter typeCode   :: <DescType>;
  parameter dataPtr    ::  /* const */ <C-void*>;
  parameter dataSize   :: <Size>;
  result value :: <OSErr>;
  c-name: "AEPutPtr";
  c-modifiers: "pascal";
end;

define inline-only C-function AEPutDesc
  parameter theAEDescList :: <AEDescList*>;
  parameter index      :: <C-both-long>;
  parameter theAEDesc  ::  /* const */ <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AEPutDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AEGetNthPtr
  parameter theAEDescList ::  /* const */ <AEDescList*>;
  parameter index      :: <C-both-long>;
  parameter desiredType :: <DescType>;
  parameter theAEKeyword :: <AEKeyword*>;
  parameter typeCode   :: <DescType*>;
  parameter dataPtr    :: <C-void*>;
  parameter maximumSize :: <Size>;
  parameter actualSize :: <Size*>;
  result value :: <OSErr>;
  c-name: "AEGetNthPtr";
  c-modifiers: "pascal";
end;

define inline-only C-function AEGetNthDesc
  parameter theAEDescList ::  /* const */ <AEDescList*>;
  parameter index      :: <C-both-long>;
  parameter desiredType :: <DescType>;
  parameter theAEKeyword :: <AEKeyword*>;
  parameter result     :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AEGetNthDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AESizeOfNthItem
  parameter theAEDescList ::  /* const */ <AEDescList*>;
  parameter index      :: <C-both-long>;
  parameter typeCode   :: <DescType*>;
  parameter dataSize   :: <Size*>;
  result value :: <OSErr>;
  c-name: "AESizeOfNthItem";
  c-modifiers: "pascal";
end;

define inline-only C-function AEGetArray
  parameter theAEDescList ::  /* const */ <AEDescList*>;
  parameter arrayType  :: <AEArrayType>;
  parameter arrayPtr   :: <AEArrayDataPointer>;
  parameter maximumSize :: <Size>;
  parameter itemType   :: <DescType*>;
  parameter itemSize   :: <Size*>;
  parameter itemCount  :: <C-both-long*>;
  result value :: <OSErr>;
  c-name: "AEGetArray";
  c-modifiers: "pascal";
end;

define inline-only C-function AEPutArray
  parameter theAEDescList :: <AEDescList*>;
  parameter arrayType  :: <AEArrayType>;
  parameter arrayPtr   ::  /* const */ <AEArrayData*>;
  parameter itemType   :: <DescType>;
  parameter itemSize   :: <Size>;
  parameter itemCount  :: <C-both-long>;
  result value :: <OSErr>;
  c-name: "AEPutArray";
  c-modifiers: "pascal";
end;

define inline-only C-function AEDeleteItem
  parameter theAEDescList :: <AEDescList*>;
  parameter index      :: <C-both-long>;
  result value :: <OSErr>;
  c-name: "AEDeleteItem";
  c-modifiers: "pascal";
end;

define inline-only C-function AECreateAppleEvent
  parameter theAEEventClass :: <AEEventClass>;
  parameter theAEEventID :: <AEEventID>;
  parameter target     ::  /* const */ <AEAddressDesc*>;
  parameter returnID   :: <AEReturnID>;
  parameter transactionID :: <AETransactionID>;
  parameter result     :: <AppleEvent*>;
  result value :: <OSErr>;
  c-name: "AECreateAppleEvent";
  c-modifiers: "pascal";
end;

define inline-only C-function AEPutParamPtr
  parameter theAppleEvent :: <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter typeCode   :: <DescType>;
  parameter dataPtr    ::  /* const */ <C-void*>;
  parameter dataSize   :: <Size>;
  result value :: <OSErr>;
  c-name: "AEPutParamPtr";
  c-modifiers: "pascal";
end;

define inline-only C-function AEPutParamDesc
  parameter theAppleEvent :: <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter theAEDesc  ::  /* const */ <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AEPutParamDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AEGetParamPtr
  parameter theAppleEvent ::  /* const */ <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter desiredType :: <DescType>;
  parameter typeCode   :: <DescType*>;
  parameter dataPtr    :: <C-void*>;
  parameter maximumSize :: <Size>;
  parameter actualSize :: <Size*>;
  result value :: <OSErr>;
  c-name: "AEGetParamPtr";
  c-modifiers: "pascal";
end;

define inline-only C-function AEGetParamDesc
  parameter theAppleEvent ::  /* const */ <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter desiredType :: <DescType>;
  parameter result     :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AEGetParamDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AESizeOfParam
  parameter theAppleEvent ::  /* const */ <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter typeCode   :: <DescType*>;
  parameter dataSize   :: <Size*>;
  result value :: <OSErr>;
  c-name: "AESizeOfParam";
  c-modifiers: "pascal";
end;

define inline-only C-function AEDeleteParam
  parameter theAppleEvent :: <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  result value :: <OSErr>;
  c-name: "AEDeleteParam";
  c-modifiers: "pascal";
end;

define inline-only C-function AEGetAttributePtr
  parameter theAppleEvent ::  /* const */ <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter desiredType :: <DescType>;
  parameter typeCode   :: <DescType*>;
  parameter dataPtr    :: <C-void*>;
  parameter maximumSize :: <Size>;
  parameter actualSize :: <Size*>;
  result value :: <OSErr>;
  c-name: "AEGetAttributePtr";
  c-modifiers: "pascal";
end;

define inline-only C-function AEGetAttributeDesc
  parameter theAppleEvent ::  /* const */ <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter desiredType :: <DescType>;
  parameter result     :: <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AEGetAttributeDesc";
  c-modifiers: "pascal";
end;

define inline-only C-function AESizeOfAttribute
  parameter theAppleEvent ::  /* const */ <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter typeCode   :: <DescType*>;
  parameter dataSize   :: <Size*>;
  result value :: <OSErr>;
  c-name: "AESizeOfAttribute";
  c-modifiers: "pascal";
end;

define inline-only C-function AEPutAttributePtr
  parameter theAppleEvent :: <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter typeCode   :: <DescType>;
  parameter dataPtr    ::  /* const */ <C-void*>;
  parameter dataSize   :: <Size>;
  result value :: <OSErr>;
  c-name: "AEPutAttributePtr";
  c-modifiers: "pascal";
end;

define inline-only C-function AEPutAttributeDesc
  parameter theAppleEvent :: <AppleEvent*>;
  parameter theAEKeyword :: <AEKeyword>;
  parameter theAEDesc  ::  /* const */ <AEDesc*>;
  result value :: <OSErr>;
  c-name: "AEPutAttributeDesc";
  c-modifiers: "pascal";
end;

