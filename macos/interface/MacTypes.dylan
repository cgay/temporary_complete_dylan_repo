Module:    macos-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "MacTypes.h"; do not edit.

define inline constant <UInt8> = <C-unsigned-char>;
define C-pointer-type <UInt8*> => <UInt8>;
define C-pointer-type <UInt8**> => <UInt8*>;
define inline constant <SInt8> = <C-signed-char>;
define C-pointer-type <SInt8*> => <SInt8>;
define C-pointer-type <SInt8**> => <SInt8*>;
define inline constant <UInt16> = <C-unsigned-short>;
define C-pointer-type <UInt16*> => <UInt16>;
define C-pointer-type <UInt16**> => <UInt16*>;
define inline constant <SInt16> = <C-signed-short>;
define C-pointer-type <SInt16*> => <SInt16>;
define C-pointer-type <SInt16**> => <SInt16*>;
define inline constant <UInt32> = <C-both-unsigned-long>;
define C-pointer-type <UInt32*> => <UInt32>;
define C-pointer-type <UInt32**> => <UInt32*>;
define inline constant <SInt32> = <C-both-signed-long>;
define C-pointer-type <SInt32*> => <SInt32>;
define C-pointer-type <SInt32**> => <SInt32*>;

define C-struct <wide>
  sealed inline-only slot hi-value       :: <SInt32>;
  sealed inline-only slot lo-value       :: <UInt32>;
  pack: 2;
  c-name: "struct wide";
end;
define C-pointer-type <wide*> => <wide>;
define C-pointer-type <wide**> => <wide*>;

define C-struct <UnsignedWide>
  sealed inline-only slot hi-value       :: <UInt32>;
  sealed inline-only slot lo-value       :: <UInt32>;
  pack: 2;
  c-name: "struct UnsignedWide";
end;
define C-pointer-type <UnsignedWide*> => <UnsignedWide>;
define C-pointer-type <UnsignedWide**> => <UnsignedWide*>;
define inline constant <Fixed> = <C-both-long>;
define C-pointer-type <Fixed*> => <Fixed>;
define C-pointer-type <Fixed**> => <Fixed*>;
define C-pointer-type <FixedPtr> => <Fixed>;
define inline constant <Fract> = <C-both-long>;
define C-pointer-type <Fract*> => <Fract>;
define C-pointer-type <Fract**> => <Fract*>;
define C-pointer-type <FractPtr> => <Fract>;
define inline constant <UnsignedFixed> = <C-both-unsigned-long>;
define C-pointer-type <UnsignedFixed*> => <UnsignedFixed>;
define C-pointer-type <UnsignedFixed**> => <UnsignedFixed*>;
define inline constant <ShortFixed> = <C-short>;
define C-pointer-type <ShortFixed*> => <ShortFixed>;
define C-pointer-type <ShortFixed**> => <ShortFixed*>;
define inline constant <Float32> = <C-float>;
define C-pointer-type <Float32*> => <Float32>;
define C-pointer-type <Float32**> => <Float32*>;

define C-struct <Float80>
  sealed inline-only slot exp-value      :: <SInt16>;
  sealed inline-only array slot man-array :: <UInt16>,
    length: 4,
    address-getter: man-value;
  pack: 2;
  c-name: "struct Float80";
end;
define C-pointer-type <Float80*> => <Float80>;
define C-pointer-type <Float80**> => <Float80*>;

define C-struct <Float96>
  sealed inline-only array slot exp-array :: <SInt16>,
    length: 2,
    address-getter: exp-value;
  sealed inline-only array slot man-array :: <UInt16>,
    length: 4,
    address-getter: man-value;
  pack: 2;
  c-name: "struct Float96";
end;
define C-pointer-type <Float96*> => <Float96>;
define C-pointer-type <Float96**> => <Float96*>;
define inline constant <Ptr> = <C-string>;
define C-pointer-type <Ptr*> => <Ptr>;
define C-pointer-type <Ptr**> => <Ptr*>;
define C-pointer-type <Handle> => <Ptr>;
define inline constant <Size> = <C-both-long>;
define C-pointer-type <Size*> => <Size>;
define C-pointer-type <Size**> => <Size*>;
define inline constant <OSErr> = <SInt16>;
define C-pointer-type <OSErr*> => <OSErr>;
define C-pointer-type <OSErr**> => <OSErr*>;
define inline constant <OSStatus> = <SInt32>;
define C-pointer-type <OSStatus*> => <OSStatus>;
define C-pointer-type <OSStatus**> => <OSStatus*>;
define C-pointer-type <LogicalAddress> => <C-void>;
define C-pointer-type <ConstLogicalAddress> =>  /* const */ <C-void>;
define C-pointer-type <PhysicalAddress> => <C-void>;
define C-pointer-type <BytePtr> => <UInt8>;
define inline constant <ByteCount> = <UInt32>;
define C-pointer-type <ByteCount*> => <ByteCount>;
define C-pointer-type <ByteCount**> => <ByteCount*>;
define inline constant <ByteOffset> = <UInt32>;
define C-pointer-type <ByteOffset*> => <ByteOffset>;
define C-pointer-type <ByteOffset**> => <ByteOffset*>;
define inline constant <Duration> = <SInt32>;
define C-pointer-type <Duration*> => <Duration>;
define C-pointer-type <Duration**> => <Duration*>;
define inline constant <AbsoluteTime> = <UnsignedWide>;
define C-pointer-type <AbsoluteTime*> => <AbsoluteTime>;
define C-pointer-type <AbsoluteTime**> => <AbsoluteTime*>;
define inline constant <OptionBits> = <UInt32>;
define C-pointer-type <OptionBits*> => <OptionBits>;
define C-pointer-type <OptionBits**> => <OptionBits*>;
define inline constant <ItemCount> = <UInt32>;
define C-pointer-type <ItemCount*> => <ItemCount>;
define C-pointer-type <ItemCount**> => <ItemCount*>;
define inline constant <PBVersion> = <UInt32>;
define C-pointer-type <PBVersion*> => <PBVersion>;
define C-pointer-type <PBVersion**> => <PBVersion*>;
define inline constant <ScriptCode> = <SInt16>;
define C-pointer-type <ScriptCode*> => <ScriptCode>;
define C-pointer-type <ScriptCode**> => <ScriptCode*>;
define inline constant <LangCode> = <SInt16>;
define C-pointer-type <LangCode*> => <LangCode>;
define C-pointer-type <LangCode**> => <LangCode*>;
define inline constant <RegionCode> = <SInt16>;
define C-pointer-type <RegionCode*> => <RegionCode>;
define C-pointer-type <RegionCode**> => <RegionCode*>;
define inline constant <FourCharCode> = <C-both-unsigned-long>;
define C-pointer-type <FourCharCode*> => <FourCharCode>;
define C-pointer-type <FourCharCode**> => <FourCharCode*>;
define inline constant <OSType> = <FourCharCode>;
define C-pointer-type <OSType*> => <OSType>;
define C-pointer-type <OSType**> => <OSType*>;
define inline constant <ResType> = <FourCharCode>;
define C-pointer-type <ResType*> => <ResType>;
define C-pointer-type <ResType**> => <ResType*>;
define C-pointer-type <OSTypePtr> => <OSType>;
define C-pointer-type <ResTypePtr> => <ResType>;
// unnamed enum:
define inline-only constant $false                     = 0;
define inline-only constant $true                      = 1;

define inline constant <MacBoolean> = <C-unsigned-char>;
define C-pointer-type <MacBoolean*> => <MacBoolean>;
define C-pointer-type <MacBoolean**> => <MacBoolean*>;
define constant <ProcPtr> = <C-function-pointer>;
define constant <Register68kProcPtr> = <C-function-pointer>;
define inline constant <UniversalProcPtr> = <RoutineDescriptor*>;
define C-pointer-type <UniversalProcPtr*> => <UniversalProcPtr>;
define C-pointer-type <UniversalProcPtr**> => <UniversalProcPtr*>;
define C-pointer-type <ProcHandle> => <ProcPtr>;
define C-pointer-type <UniversalProcHandle> => <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $noErr                     = 0;

// unnamed enum:
define inline-only constant $kNilOptions               = 0;

define inline-only constant $kInvalidID                    =    0;
// unnamed enum:
define inline-only constant $kVariableLengthArray      = 1;

// unnamed enum:
define inline-only constant $kUnknownType              = as(<machine-word>, #x3F3F3F3F);

define inline constant <UniChar> = <UInt16>;
define C-pointer-type <UniChar*> => <UniChar>;
define C-pointer-type <UniChar**> => <UniChar*>;
define inline constant <UniCharCount> = <UInt32>;
define C-pointer-type <UniCharCount*> => <UniCharCount>;
define C-pointer-type <UniCharCount**> => <UniCharCount*>;
define inline constant <StrFileName> = <Str63>;
define C-pointer-type <StrFileName*> => <StrFileName>;
define C-pointer-type <StrFileName**> => <StrFileName*>;
define C-pointer-type <StringPtr> => <C-unsigned-char>;
define C-pointer-type <StringHandle> => <StringPtr>;
define C-pointer-type <ConstStr255Param> =>  /* const */ <C-unsigned-char>;
define C-pointer-type <ConstStr63Param> =>  /* const */ <C-unsigned-char>;
define C-pointer-type <ConstStr32Param> =>  /* const */ <C-unsigned-char>;
define C-pointer-type <ConstStr31Param> =>  /* const */ <C-unsigned-char>;
define C-pointer-type <ConstStr27Param> =>  /* const */ <C-unsigned-char>;
define C-pointer-type <ConstStr15Param> =>  /* const */ <C-unsigned-char>;
define inline constant <ConstStrFileNameParam> = <ConstStr63Param>;
define C-pointer-type <ConstStrFileNameParam*> => <ConstStrFileNameParam>;
define C-pointer-type <ConstStrFileNameParam**> => <ConstStrFileNameParam*>;

define C-struct <Point>
  sealed inline-only slot v-value        :: <C-short>;
  sealed inline-only slot h-value        :: <C-short>;
  pack: 2;
  c-name: "struct Point";
end;
define C-pointer-type <Point*> => <Point>;
define C-pointer-type <Point**> => <Point*>;
define C-pointer-type <PointPtr> => <Point>;

define C-struct <Rect>
  sealed inline-only slot top-value      :: <C-short>;
  sealed inline-only slot left-value     :: <C-short>;
  sealed inline-only slot bottom-value   :: <C-short>;
  sealed inline-only slot right-value    :: <C-short>;
  pack: 2;
  c-name: "struct Rect";
end;
define C-pointer-type <Rect*> => <Rect>;
define C-pointer-type <Rect**> => <Rect*>;
define C-pointer-type <RectPtr> => <Rect>;
define inline constant <CharParameter> = <C-short>;
define C-pointer-type <CharParameter*> => <CharParameter>;
define C-pointer-type <CharParameter**> => <CharParameter*>;
// unnamed enum:
define inline-only constant $normal                    = 0;
define inline-only constant $bold                      = 1;
define inline-only constant $italic                    = 2;
define inline-only constant $underline                 = 4;
define inline-only constant $outline                   = 8;
define inline-only constant $shadow                    = #x10;
define inline-only constant $condense                  = #x20;
define inline-only constant $extend                    = #x40;

define inline constant <Style> = <C-unsigned-char>;
define C-pointer-type <Style*> => <Style>;
define C-pointer-type <Style**> => <Style*>;
define inline constant <StyleParameter> = <C-short>;
define C-pointer-type <StyleParameter*> => <StyleParameter>;
define C-pointer-type <StyleParameter**> => <StyleParameter*>;
define inline constant <StyleField> = <Style>;
define C-pointer-type <StyleField*> => <StyleField>;
define C-pointer-type <StyleField**> => <StyleField*>;

define C-struct <NumVersion>
  sealed inline-only slot majorRev-value :: <UInt8>;
  sealed inline-only slot minorAndBugRev-value :: <UInt8>;
  sealed inline-only slot stage-value    :: <UInt8>;
  sealed inline-only slot nonRelRev-value :: <UInt8>;
  pack: 2;
  c-name: "struct NumVersion";
end;
define C-pointer-type <NumVersion*> => <NumVersion>;
define C-pointer-type <NumVersion**> => <NumVersion*>;
// unnamed enum:
define inline-only constant $developStage              = #x20;
define inline-only constant $alphaStage                = #x40;
define inline-only constant $betaStage                 = #x60;
define inline-only constant $finalStage                = #x80;


define C-union <NumVersionVariant>
  sealed inline-only slot parts-value    :: <NumVersion>;
  sealed inline-only slot whole-value    :: <C-both-unsigned-long>;
  pack: 2;
end;
define C-pointer-type <NumVersionVariant*> => <NumVersionVariant>;
define C-pointer-type <NumVersionVariant**> => <NumVersionVariant*>;

define C-struct <VersRec>
  sealed inline-only slot numericVersion-value :: <NumVersion>;
  sealed inline-only slot countryCode-value :: <C-short>;
  sealed inline-only slot shortVersion-value :: <Str255>;
  sealed inline-only slot reserved-value :: <Str255>;
  pack: 2;
  c-name: "struct VersRec";
end;
define C-pointer-type <VersRec*> => <VersRec>;
define C-pointer-type <VersRec**> => <VersRec*>;
define C-pointer-type <VersRecPtr> => <VersRec>;
define C-pointer-type <VersRecHndl> => <VersRecPtr>;
define inline constant <Byte> = <UInt8>;
define C-pointer-type <Byte*> => <Byte>;
define C-pointer-type <Byte**> => <Byte*>;
define inline constant <SignedByte> = <SInt8>;
define C-pointer-type <SignedByte*> => <SignedByte>;
define C-pointer-type <SignedByte**> => <SignedByte*>;
define C-pointer-type <WidePtr> => <wide>;
define C-pointer-type <UnsignedWidePtr> => <UnsignedWide>;
define inline constant <extended80> = <Float80>;
define C-pointer-type <extended80*> => <extended80>;
define C-pointer-type <extended80**> => <extended80*>;
define inline constant <extended96> = <Float96>;
define C-pointer-type <extended96*> => <extended96>;
define C-pointer-type <extended96**> => <extended96*>;
define inline constant <VHSelect> = <SInt8>;
define C-pointer-type <VHSelect*> => <VHSelect>;
define C-pointer-type <VHSelect**> => <VHSelect*>;

define inline-only C-function Debugger
  c-name: "Debugger";
  c-modifiers: "pascal";
end;

define inline-only C-function DebugStr
  parameter debuggerMsg :: <ConstStr255Param>;
  c-name: "DebugStr";
  c-modifiers: "pascal";
end;

define inline-only C-function SysDebug
  c-name: "SysDebug";
end;

define inline-only C-function SysDebugStr
  parameter str        :: <ConstStr255Param>;
  c-name: "SysDebugStr";
end;

define inline-only C-function SysBreak
  c-name: "SysBreak";
  c-modifiers: "pascal";
end;

define inline-only C-function SysBreakStr
  parameter debuggerMsg :: <ConstStr255Param>;
  c-name: "SysBreakStr";
  c-modifiers: "pascal";
end;

define inline-only C-function SysBreakFunc
  parameter debuggerMsg :: <ConstStr255Param>;
  c-name: "SysBreakFunc";
  c-modifiers: "pascal";
end;

