Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Finder.h"; do not edit.

// unnamed enum:
define inline-only constant $kClippingCreator          = FOUR_CHAR_CODE('d', 'r', 'a', 'g');
define inline-only constant $kClippingPictureType      = FOUR_CHAR_CODE('c', 'l', 'p', 'p');
define inline-only constant $kClippingTextType         = FOUR_CHAR_CODE('c', 'l', 'p', 't');
define inline-only constant $kClippingSoundType        = FOUR_CHAR_CODE('c', 'l', 'p', 's');
define inline-only constant $kClippingUnknownType      = FOUR_CHAR_CODE('c', 'l', 'p', 'u');

// unnamed enum:
define inline-only constant $kInternetLocationCreator  = FOUR_CHAR_CODE('d', 'r', 'a', 'g');
define inline-only constant $kInternetLocationHTTP     = FOUR_CHAR_CODE('i', 'l', 'h', 't');
define inline-only constant $kInternetLocationFTP      = FOUR_CHAR_CODE('i', 'l', 'f', 't');
define inline-only constant $kInternetLocationFile     = FOUR_CHAR_CODE('i', 'l', 'f', 'i');
define inline-only constant $kInternetLocationMail     = FOUR_CHAR_CODE('i', 'l', 'm', 'a');
define inline-only constant $kInternetLocationNNTP     = FOUR_CHAR_CODE('i', 'l', 'n', 'w');
define inline-only constant $kInternetLocationAFP      = FOUR_CHAR_CODE('i', 'l', 'a', 'f');
define inline-only constant $kInternetLocationAppleTalk = FOUR_CHAR_CODE('i', 'l', 'a', 't');
define inline-only constant $kInternetLocationGeneric  = FOUR_CHAR_CODE('i', 'l', 'g', 'e');

// unnamed enum:
define inline-only constant $kCustomIconResource       = -16455;

// unnamed enum:
define inline-only constant $kCustomBadgeResourceType  = FOUR_CHAR_CODE('b', 'a', 'd', 'g');
define inline-only constant $kCustomBadgeResourceID    = $kCustomIconResource;
define inline-only constant $kCustomBadgeResourceVersion = 0;


define C-struct <CustomBadgeResource>
  sealed inline-only slot version-value  :: <SInt16>;
  sealed inline-only slot customBadgeResourceID-value :: <SInt16>;
  sealed inline-only slot customBadgeType-value :: <OSType>;
  sealed inline-only slot customBadgeCreator-value :: <OSType>;
  sealed inline-only slot windowBadgeType-value :: <OSType>;
  sealed inline-only slot windowBadgeCreator-value :: <OSType>;
  sealed inline-only slot overrideType-value :: <OSType>;
  sealed inline-only slot overrideCreator-value :: <OSType>;
  pack: 2;
  c-name: "struct CustomBadgeResource";
end;
define C-pointer-type <CustomBadgeResource*> => <CustomBadgeResource>;
define C-pointer-type <CustomBadgeResource**> => <CustomBadgeResource*>;
define C-pointer-type <CustomBadgeResourcePtr> => <CustomBadgeResource>;
define C-pointer-type <CustomBadgeResourceHandle> => <CustomBadgeResourcePtr>;
// unnamed enum:
define inline-only constant $kRoutingResourceType      = FOUR_CHAR_CODE('r', 'o', 'u', 't');
define inline-only constant $kRoutingResourceID        = 0;


define C-struct <RoutingResourceEntry>
  sealed inline-only slot creator-value  :: <OSType>;
  sealed inline-only slot fileType-value :: <OSType>;
  sealed inline-only slot targetFolder-value :: <OSType>;
  sealed inline-only slot destinationFolder-value :: <OSType>;
  sealed inline-only slot reserved-value :: <OSType>;
  pack: 2;
  c-name: "struct RoutingResourceEntry";
end;
define C-pointer-type <RoutingResourceEntry*> => <RoutingResourceEntry>;
define C-pointer-type <RoutingResourceEntry**> => <RoutingResourceEntry*>;
define C-pointer-type <RoutingResourcePtr> => <RoutingResourceEntry>;
define C-pointer-type <RoutingResourceHandle> => <RoutingResourcePtr>;
// unnamed enum:
define inline-only constant $kContainerFolderAliasType = FOUR_CHAR_CODE('f', 'd', 'r', 'p');
define inline-only constant $kContainerTrashAliasType  = FOUR_CHAR_CODE('t', 'r', 's', 'h');
define inline-only constant $kContainerHardDiskAliasType = FOUR_CHAR_CODE('h', 'd', 's', 'k');
define inline-only constant $kContainerFloppyAliasType = FOUR_CHAR_CODE('f', 'l', 'p', 'y');
define inline-only constant $kContainerServerAliasType = FOUR_CHAR_CODE('s', 'r', 'v', 'r');
define inline-only constant $kApplicationAliasType     = FOUR_CHAR_CODE('a', 'd', 'r', 'p');
define inline-only constant $kContainerAliasType       = FOUR_CHAR_CODE('d', 'r', 'o', 'p');
define inline-only constant $kDesktopPrinterAliasType  = FOUR_CHAR_CODE('d', 't', 'p', 'a');
define inline-only constant $kContainerCDROMAliasType  = FOUR_CHAR_CODE('c', 'd', 'd', 'r');

// unnamed enum:
define inline-only constant $kSystemFolderAliasType    = FOUR_CHAR_CODE('f', 'a', 's', 'y');
define inline-only constant $kAppleMenuFolderAliasType = FOUR_CHAR_CODE('f', 'a', 'a', 'm');
define inline-only constant $kStartupFolderAliasType   = FOUR_CHAR_CODE('f', 'a', 's', 't');
define inline-only constant $kPrintMonitorDocsFolderAliasType = FOUR_CHAR_CODE('f', 'a', 'p', 'n');
define inline-only constant $kPreferencesFolderAliasType = FOUR_CHAR_CODE('f', 'a', 'p', 'f');
define inline-only constant $kControlPanelFolderAliasType = FOUR_CHAR_CODE('f', 'a', 'c', 't');
define inline-only constant $kExtensionFolderAliasType = FOUR_CHAR_CODE('f', 'a', 'e', 'x');

// unnamed enum:
define inline-only constant $kExportedFolderAliasType  = FOUR_CHAR_CODE('f', 'a', 'e', 't');
define inline-only constant $kDropFolderAliasType      = FOUR_CHAR_CODE('f', 'a', 'd', 'r');
define inline-only constant $kSharedFolderAliasType    = FOUR_CHAR_CODE('f', 'a', 's', 'h');
define inline-only constant $kMountedFolderAliasType   = FOUR_CHAR_CODE('f', 'a', 'm', 'n');

// unnamed enum:
define inline-only constant $kIsOnDesk                 = #x0001;
define inline-only constant $kColor                    = #x000E;
define inline-only constant $kIsShared                 = #x0040;
define inline-only constant $kHasNoINITs               = #x0080;
define inline-only constant $kHasBeenInited            = #x0100;
define inline-only constant $kHasCustomIcon            = #x0400;
define inline-only constant $kIsStationery             = #x0800;
define inline-only constant $kNameLocked               = #x1000;
define inline-only constant $kHasBundle                = #x2000;
define inline-only constant $kIsInvisible              = #x4000;
define inline-only constant $kIsAlias                  = #x8000;

// unnamed enum:
define inline-only constant $fOnDesk                   = $kIsOnDesk;
define inline-only constant $fHasBundle                = $kHasBundle;
define inline-only constant $fInvisible                = $kIsInvisible;

// unnamed enum:
define inline-only constant $fTrash                    = -3;
define inline-only constant $fDesktop                  = -2;
define inline-only constant $fDisk                     = 0;

// unnamed enum:
define inline-only constant $kExtendedFlagsAreInvalid  = #x8000;
define inline-only constant $kExtendedFlagHasCustomBadge = #x0100;
define inline-only constant $kExtendedFlagHasRoutingInfo = #x0004;

// unnamed enum:
define inline-only constant $kMagicBusyCreationDate    = as(<machine-word>, #x4F3AFDB0);


define C-struct <FileInfo>
  sealed inline-only slot fileType-value :: <OSType>;
  sealed inline-only slot fileCreator-value :: <OSType>;
  sealed inline-only slot finderFlags-value :: <UInt16>;
  sealed inline-only slot location-value :: <Point>;
  sealed inline-only slot reserved-value :: <UInt16>;
  pack: 2;
  c-name: "struct FileInfo";
end;
define C-pointer-type <FileInfo*> => <FileInfo>;
define C-pointer-type <FileInfo**> => <FileInfo*>;

define C-struct <FolderInfo>
  sealed inline-only slot windowBounds-value :: <Rect>;
  sealed inline-only slot finderFlags-value :: <UInt16>;
  sealed inline-only slot location-value :: <Point>;
  sealed inline-only slot reserved-value :: <UInt16>;
  pack: 2;
  c-name: "struct FolderInfo";
end;
define C-pointer-type <FolderInfo*> => <FolderInfo>;
define C-pointer-type <FolderInfo**> => <FolderInfo*>;

define C-struct <ExtendedFileInfo>
  sealed inline-only array slot reserved-array :: <SInt16>,
    length: 4,
    address-getter: reserved-value;
  sealed inline-only slot extendedFinderFlags-value :: <UInt16>;
  sealed inline-only slot reserved2-value :: <SInt16>;
  sealed inline-only slot putAwayFolderID-value :: <SInt32>;
  pack: 2;
  c-name: "struct ExtendedFileInfo";
end;
define C-pointer-type <ExtendedFileInfo*> => <ExtendedFileInfo>;
define C-pointer-type <ExtendedFileInfo**> => <ExtendedFileInfo*>;

define C-struct <ExtendedFolderInfo>
  sealed inline-only slot scrollPosition-value :: <Point>;
  sealed inline-only slot reserved-value :: <SInt32>;
  sealed inline-only slot extendedFinderFlags-value :: <UInt16>;
  sealed inline-only slot reserved2-value :: <SInt16>;
  sealed inline-only slot putAwayFolderID-value :: <SInt32>;
  pack: 2;
  c-name: "struct ExtendedFolderInfo";
end;
define C-pointer-type <ExtendedFolderInfo*> => <ExtendedFolderInfo>;
define C-pointer-type <ExtendedFolderInfo**> => <ExtendedFolderInfo*>;

define C-struct <FInfo>
  sealed inline-only slot fdType-value   :: <OSType>;
  sealed inline-only slot fdCreator-value :: <OSType>;
  sealed inline-only slot fdFlags-value  :: <UInt16>;
  sealed inline-only slot fdLocation-value :: <Point>;
  sealed inline-only slot fdFldr-value   :: <SInt16>;
  pack: 2;
  c-name: "struct FInfo";
end;
define C-pointer-type <FInfo*> => <FInfo>;
define C-pointer-type <FInfo**> => <FInfo*>;

define C-struct <FXInfo>
  sealed inline-only slot fdIconID-value :: <SInt16>;
  sealed inline-only array slot fdReserved-array :: <SInt16>,
    length: 3,
    address-getter: fdReserved-value;
  sealed inline-only slot fdScript-value :: <SInt8>;
  sealed inline-only slot fdXFlags-value :: <SInt8>;
  sealed inline-only slot fdComment-value :: <SInt16>;
  sealed inline-only slot fdPutAway-value :: <SInt32>;
  pack: 2;
  c-name: "struct FXInfo";
end;
define C-pointer-type <FXInfo*> => <FXInfo>;
define C-pointer-type <FXInfo**> => <FXInfo*>;

define C-struct <DInfo>
  sealed inline-only slot frRect-value   :: <Rect>;
  sealed inline-only slot frFlags-value  :: <UInt16>;
  sealed inline-only slot frLocation-value :: <Point>;
  sealed inline-only slot frView-value   :: <SInt16>;
  pack: 2;
  c-name: "struct DInfo";
end;
define C-pointer-type <DInfo*> => <DInfo>;
define C-pointer-type <DInfo**> => <DInfo*>;

define C-struct <DXInfo>
  sealed inline-only slot frScroll-value :: <Point>;
  sealed inline-only slot frOpenChain-value :: <SInt32>;
  sealed inline-only slot frScript-value :: <SInt8>;
  sealed inline-only slot frXFlags-value :: <SInt8>;
  sealed inline-only slot frComment-value :: <SInt16>;
  sealed inline-only slot frPutAway-value :: <SInt32>;
  pack: 2;
  c-name: "struct DXInfo";
end;
define C-pointer-type <DXInfo*> => <DXInfo>;
define C-pointer-type <DXInfo**> => <DXInfo*>;
// unnamed enum:
define inline-only constant $initDev                   = 0;
define inline-only constant $hitDev                    = 1;
define inline-only constant $closeDev                  = 2;
define inline-only constant $nulDev                    = 3;
define inline-only constant $updateDev                 = 4;
define inline-only constant $activDev                  = 5;
define inline-only constant $deactivDev                = 6;
define inline-only constant $keyEvtDev                 = 7;
define inline-only constant $macDev                    = 8;
define inline-only constant $undoDev                   = 9;
define inline-only constant $cutDev                    = 10;
define inline-only constant $copyDev                   = 11;
define inline-only constant $pasteDev                  = 12;
define inline-only constant $clearDev                  = 13;
define inline-only constant $cursorDev                 = 14;

// unnamed enum:
define inline-only constant $cdevGenErr                = -1;
define inline-only constant $cdevMemErr                = 0;
define inline-only constant $cdevResErr                = 1;
define inline-only constant $cdevUnset                 = 3;

define constant <ControlPanelDefProcPtr> = <C-function-pointer>;
define constant <ControlPanelDefUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppControlPanelDefProcInfo = #x000FEAB0;


