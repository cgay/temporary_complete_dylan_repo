Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "AppleTalk.h"; do not edit.

// unnamed enum:
define inline-only constant $mppUnitNum                = 9;
define inline-only constant $atpUnitNum                = 10;
define inline-only constant $xppUnitNum                = 40;

// unnamed enum:
define inline-only constant $mppRefNum                 = -10;
define inline-only constant $atpRefNum                 = -11;
define inline-only constant $xppRefNum                 = -41;

// unnamed enum:
define inline-only constant $lookupReply               = 242;
define inline-only constant $writeLAP                  = 243;
define inline-only constant $detachPH                  = 244;
define inline-only constant $attachPH                  = 245;
define inline-only constant $writeDDP                  = 246;
define inline-only constant $closeSkt                  = 247;
define inline-only constant $openSkt                   = 248;
define inline-only constant $loadNBP                   = 249;
define inline-only constant $lastResident              = 249;
define inline-only constant $confirmName               = 250;
define inline-only constant $lookupName                = 251;
define inline-only constant $removeName                = 252;
define inline-only constant $registerName              = 253;
define inline-only constant $killNBP                   = 254;
define inline-only constant $unloadNBP                 = 255;
define inline-only constant $setSelfSend               = 256;
define inline-only constant $SetMyZone                 = 257;
define inline-only constant $GetATalkInfo              = 258;
define inline-only constant $ATalkClosePrep            = 259;

// unnamed enum:
define inline-only constant $nSendRequest              = 248;
define inline-only constant $relRspCB                  = 249;
define inline-only constant $closeATPSkt               = 250;
define inline-only constant $addResponse               = 251;
define inline-only constant $sendResponse              = 252;
define inline-only constant $getRequest                = 253;
define inline-only constant $openATPSkt                = 254;
define inline-only constant $sendRequest               = 255;
define inline-only constant $relTCB                    = 256;
define inline-only constant $killGetReq                = 257;
define inline-only constant $killSendReq               = 258;
define inline-only constant $killAllGetReq             = 259;

// unnamed enum:
define inline-only constant $openSess                  = 255;
define inline-only constant $closeSess                 = 254;
define inline-only constant $userCommand               = 253;
define inline-only constant $userWrite                 = 252;
define inline-only constant $getStatus                 = 251;
define inline-only constant $afpCall                   = 250;
define inline-only constant $getParms                  = 249;
define inline-only constant $abortOS                   = 248;
define inline-only constant $closeAll                  = 247;
define inline-only constant $xCall                     = 246;

// unnamed enum:
define inline-only constant $ATTransOpen               = 0;
define inline-only constant $ATTransClose              = 2;
define inline-only constant $ATTransClosePrep          = 3;
define inline-only constant $ATTransCancelClose        = 4;

// unnamed enum:
define inline-only constant $afpByteRangeLock          = 1;
define inline-only constant $afpVolClose               = 2;
define inline-only constant $afpDirClose               = 3;
define inline-only constant $afpForkClose              = 4;
define inline-only constant $afpCopyFile               = 5;
define inline-only constant $afpDirCreate              = 6;
define inline-only constant $afpFileCreate             = 7;
define inline-only constant $afpDelete                 = 8;
define inline-only constant $afpEnumerate              = 9;
define inline-only constant $afpFlush                  = 10;
define inline-only constant $afpForkFlush              = 11;
define inline-only constant $afpGetDirParms            = 12;
define inline-only constant $afpGetFileParms           = 13;
define inline-only constant $afpGetForkParms           = 14;
define inline-only constant $afpGetSInfo               = 15;
define inline-only constant $afpGetSParms              = 16;
define inline-only constant $afpGetVolParms            = 17;
define inline-only constant $afpLogin                  = 18;
define inline-only constant $afpContLogin              = 19;
define inline-only constant $afpLogout                 = 20;
define inline-only constant $afpMapID                  = 21;
define inline-only constant $afpMapName                = 22;
define inline-only constant $afpMove                   = 23;
define inline-only constant $afpOpenVol                = 24;
define inline-only constant $afpOpenDir                = 25;
define inline-only constant $afpOpenFork               = 26;
define inline-only constant $afpRead                   = 27;
define inline-only constant $afpRename                 = 28;
define inline-only constant $afpSetDirParms            = 29;
define inline-only constant $afpSetFileParms           = 30;
define inline-only constant $afpSetForkParms           = 31;
define inline-only constant $afpSetVolParms            = 32;
define inline-only constant $afpWrite                  = 33;
define inline-only constant $afpGetFlDrParms           = 34;
define inline-only constant $afpSetFlDrParms           = 35;
define inline-only constant $afpDTOpen                 = 48;
define inline-only constant $afpDTClose                = 49;
define inline-only constant $afpGetIcon                = 51;
define inline-only constant $afpGtIcnInfo              = 52;
define inline-only constant $afpAddAPPL                = 53;
define inline-only constant $afpRmvAPPL                = 54;
define inline-only constant $afpGetAPPL                = 55;
define inline-only constant $afpAddCmt                 = 56;
define inline-only constant $afpRmvCmt                 = 57;
define inline-only constant $afpGetCmt                 = 58;
define inline-only constant $afpAddIcon                = 192;

// unnamed enum:
define inline-only constant $xppLoadedBit              = 5;
define inline-only constant $scbMemSize                = 192;
define inline-only constant $xppFlagClr                = 0;

// unnamed enum:
define inline-only constant $xppFlagSet                = 128;

// unnamed enum:
define inline-only constant $lapSize                   = 20;
define inline-only constant $ddpSize                   = 26;
define inline-only constant $nbpSize                   = 26;
define inline-only constant $atpSize                   = 56;

// unnamed enum:
define inline-only constant $atpXOvalue                = 32;
define inline-only constant $atpEOMvalue               = 16;
define inline-only constant $atpSTSvalue               = 8;
define inline-only constant $atpTIDValidvalue          = 2;
define inline-only constant $atpSendChkvalue           = 1;

// unnamed enum:
define inline-only constant $zipGetLocalZones          = 5;
define inline-only constant $zipGetZoneList            = 6;
define inline-only constant $zipGetMyZone              = 7;

// unnamed enum:
define inline-only constant $LAPMgrPtr                 = #x0B18;

// unnamed enum:
define inline-only constant $LAPMgrCall                = 2;
define inline-only constant $LAddAEQ                   = 23;
define inline-only constant $LRmvAEQ                   = 24;

// unnamed enum:
define inline-only constant $tLAPRead                  = 0;
define inline-only constant $tLAPWrite                 = 1;
define inline-only constant $tDDPRead                  = 2;
define inline-only constant $tDDPWrite                 = 3;
define inline-only constant $tNBPLookup                = 4;
define inline-only constant $tNBPConfirm               = 5;
define inline-only constant $tNBPRegister              = 6;
define inline-only constant $tATPSndRequest            = 7;
define inline-only constant $tATPGetRequest            = 8;
define inline-only constant $tATPSdRsp                 = 9;
define inline-only constant $tATPAddRsp                = 10;
define inline-only constant $tATPRequest               = 11;
define inline-only constant $tATPResponse              = 12;

define inline constant <ABCallType> = <SInt8>;
define C-pointer-type <ABCallType*> => <ABCallType>;
define C-pointer-type <ABCallType**> => <ABCallType*>;
// unnamed enum:
define inline-only constant $lapProto                  = 0;
define inline-only constant $ddpProto                  = 1;
define inline-only constant $nbpProto                  = 2;
define inline-only constant $atpProto                  = 3;

define inline constant <ABProtoType> = <UInt8>;
define C-pointer-type <ABProtoType*> => <ABProtoType>;
define C-pointer-type <ABProtoType**> => <ABProtoType*>;
define inline constant <ABByte> = <Byte>;
define C-pointer-type <ABByte*> => <ABByte>;
define C-pointer-type <ABByte**> => <ABByte*>;

define C-struct <LAPAdrBlock>
  sealed inline-only slot dstNodeID-value :: <UInt8>;
  sealed inline-only slot srcNodeID-value :: <UInt8>;
  sealed inline-only slot lapProtType-value :: <ABByte>;
  sealed inline-only slot filler-value   :: <UInt8>;
  pack: 2;
  c-name: "struct LAPAdrBlock";
end;
define C-pointer-type <LAPAdrBlock*> => <LAPAdrBlock>;
define C-pointer-type <LAPAdrBlock**> => <LAPAdrBlock*>;
define C-pointer-type <ATQEntry*> => <ATQEntry>;
define C-pointer-type <ATQEntry**> => <ATQEntry*>;
define C-pointer-type <ATQEntryPtr> => <ATQEntry>;
define constant <ATalkTransitionEventProcPtr> = <C-function-pointer>;
define constant <ATalkTransitionEventUPP> = <UniversalProcPtr>;
define inline constant <ATalkTransitionEvent> = <ATalkTransitionEventUPP>;
define C-pointer-type <ATalkTransitionEvent*> => <ATalkTransitionEvent>;
define C-pointer-type <ATalkTransitionEvent**> => <ATalkTransitionEvent*>;

define C-struct <ATQEntry>
  sealed inline-only slot qLink-value    :: <ATQEntry*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot CallAddr-value :: <ATalkTransitionEventUPP>;
  pack: 2;
  c-name: "struct ATQEntry";
end;

define C-struct <EntityName>
  sealed inline-only slot objStr-value   :: <Str32Field>;
  sealed inline-only slot typeStr-value  :: <Str32Field>;
  sealed inline-only slot zoneStr-value  :: <Str32Field>;
  pack: 2;
  c-name: "struct EntityName";
end;
define C-pointer-type <EntityName*> => <EntityName>;
define C-pointer-type <EntityName**> => <EntityName*>;
define C-pointer-type <EntityPtr> => <EntityName>;

define C-struct <AddrBlock>
  sealed inline-only slot aNet-value     :: <UInt16>;
  sealed inline-only slot aNode-value    :: <UInt8>;
  sealed inline-only slot aSocket-value  :: <UInt8>;
  pack: 2;
  c-name: "struct AddrBlock";
end;
define C-pointer-type <AddrBlock*> => <AddrBlock>;
define C-pointer-type <AddrBlock**> => <AddrBlock*>;

define C-struct <RetransType>
  sealed inline-only slot retransInterval-value :: <UInt8>;
  sealed inline-only slot retransCount-value :: <UInt8>;
  pack: 2;
  c-name: "struct RetransType";
end;
define C-pointer-type <RetransType*> => <RetransType>;
define C-pointer-type <RetransType**> => <RetransType*>;

define C-struct <BDSElement>
  sealed inline-only slot buffSize-value :: <C-short>;
  sealed inline-only slot buffPtr-value  :: <C-void*>;
  sealed inline-only slot dataSize-value :: <C-short>;
  sealed inline-only slot userBytes-value :: <C-both-long>;
  pack: 2;
  c-name: "struct BDSElement";
end;
define C-pointer-type <BDSElement*> => <BDSElement>;
define C-pointer-type <BDSElement**> => <BDSElement*>;
define C-pointer-type <BDSPtr> => <BDSElement>;
define inline constant <BitMapType> = <C-char>;
define C-pointer-type <BitMapType*> => <BitMapType>;
define C-pointer-type <BitMapType**> => <BitMapType*>;

define C-struct <ATLAPRec>
  sealed inline-only slot abOpcode-value :: <ABCallType>;
  sealed inline-only slot filler-value   :: <SInt8>;
  sealed inline-only slot abResult-value :: <C-short>;
  sealed inline-only slot abUserReference-value :: <C-both-long>;
  sealed inline-only slot lapAddress-value :: <LAPAdrBlock>;
  sealed inline-only slot lapReqCount-value :: <C-short>;
  sealed inline-only slot lapActCount-value :: <C-short>;
  sealed inline-only slot lapDataPtr-value :: <C-void*>;
  pack: 2;
  c-name: "struct ATLAPRec";
end;
define C-pointer-type <ATLAPRec*> => <ATLAPRec>;
define C-pointer-type <ATLAPRec**> => <ATLAPRec*>;
define C-pointer-type <ATLAPRecPtr> => <ATLAPRec>;
define C-pointer-type <ATLAPRecHandle> => <ATLAPRecPtr>;

define C-struct <ATDDPRec>
  sealed inline-only slot abOpcode-value :: <ABCallType>;
  sealed inline-only slot filler-value   :: <SInt8>;
  sealed inline-only slot abResult-value :: <C-short>;
  sealed inline-only slot abUserReference-value :: <C-both-long>;
  sealed inline-only slot ddpType-value  :: <C-short>;
  sealed inline-only slot ddpSocket-value :: <C-short>;
  sealed inline-only slot ddpAddress-value :: <AddrBlock>;
  sealed inline-only slot ddpReqCount-value :: <C-short>;
  sealed inline-only slot ddpActCount-value :: <C-short>;
  sealed inline-only slot ddpDataPtr-value :: <C-void*>;
  sealed inline-only slot ddpNodeID-value :: <C-short>;
  pack: 2;
  c-name: "struct ATDDPRec";
end;
define C-pointer-type <ATDDPRec*> => <ATDDPRec>;
define C-pointer-type <ATDDPRec**> => <ATDDPRec*>;
define C-pointer-type <ATDDPRecPtr> => <ATDDPRec>;
define C-pointer-type <ATDDPRecHandle> => <ATDDPRecPtr>;

define C-struct <ATNBPRec>
  sealed inline-only slot abOpcode-value :: <ABCallType>;
  sealed inline-only slot filler-value   :: <SInt8>;
  sealed inline-only slot abResult-value :: <C-short>;
  sealed inline-only slot abUserReference-value :: <C-both-long>;
  sealed inline-only slot nbpEntityPtr-value :: <EntityPtr>;
  sealed inline-only slot nbpBufPtr-value :: <C-void*>;
  sealed inline-only slot nbpBufSize-value :: <C-short>;
  sealed inline-only slot nbpDataField-value :: <C-short>;
  sealed inline-only slot nbpAddress-value :: <AddrBlock>;
  sealed inline-only slot nbpRetransmitInfo-value :: <RetransType>;
  pack: 2;
  c-name: "struct ATNBPRec";
end;
define C-pointer-type <ATNBPRec*> => <ATNBPRec>;
define C-pointer-type <ATNBPRec**> => <ATNBPRec*>;
define C-pointer-type <ATNBPRecPtr> => <ATNBPRec>;
define C-pointer-type <ATNBPRecHandle> => <ATNBPRecPtr>;

define C-struct <ATATPRec>
  sealed inline-only slot abOpcode-value :: <ABCallType>;
  sealed inline-only slot filler1-value  :: <SInt8>;
  sealed inline-only slot abResult-value :: <C-short>;
  sealed inline-only slot abUserReference-value :: <C-both-long>;
  sealed inline-only slot atpSocket-value :: <C-short>;
  sealed inline-only slot atpAddress-value :: <AddrBlock>;
  sealed inline-only slot atpReqCount-value :: <C-short>;
  sealed inline-only slot atpDataPtr-value :: <C-void*>;
  sealed inline-only slot atpRspBDSPtr-value :: <BDSPtr>;
  sealed inline-only slot atpBitMap-value :: <BitMapType>;
  sealed inline-only slot filler2-value  :: <SInt8>;
  sealed inline-only slot atpTransID-value :: <C-short>;
  sealed inline-only slot atpActCount-value :: <C-short>;
  sealed inline-only slot atpUserData-value :: <C-both-long>;
  sealed inline-only slot atpXO-value    :: <MacBoolean>;
  sealed inline-only slot atpEOM-value   :: <MacBoolean>;
  sealed inline-only slot atpTimeOut-value :: <C-short>;
  sealed inline-only slot atpRetries-value :: <C-short>;
  sealed inline-only slot atpNumBufs-value :: <C-short>;
  sealed inline-only slot atpNumRsp-value :: <C-short>;
  sealed inline-only slot atpBDSSize-value :: <C-short>;
  sealed inline-only slot atpRspUData-value :: <C-both-long>;
  sealed inline-only slot atpRspBuf-value :: <C-void*>;
  sealed inline-only slot atpRspSize-value :: <C-short>;
  pack: 2;
  c-name: "struct ATATPRec";
end;
define C-pointer-type <ATATPRec*> => <ATATPRec>;
define C-pointer-type <ATATPRec**> => <ATATPRec*>;
define C-pointer-type <ATATPRecPtr> => <ATATPRec>;
define C-pointer-type <ATATPRecHandle> => <ATATPRecPtr>;

define C-struct <AFPCommandBlock>
  sealed inline-only slot cmdByte-value  :: <UInt8>;
  sealed inline-only slot startEndFlag-value :: <UInt8>;
  sealed inline-only slot forkRefNum-value :: <C-short>;
  sealed inline-only slot rwOffset-value :: <C-both-long>;
  sealed inline-only slot reqCount-value :: <C-both-long>;
  sealed inline-only slot newLineFlag-value :: <UInt8>;
  sealed inline-only slot newLineChar-value :: <C-char>;
  pack: 2;
  c-name: "struct AFPCommandBlock";
end;
define C-pointer-type <AFPCommandBlock*> => <AFPCommandBlock>;
define C-pointer-type <AFPCommandBlock**> => <AFPCommandBlock*>;
define C-pointer-type <MPPParamBlock*> => <MPPParamBlock>;
define C-pointer-type <MPPParamBlock**> => <MPPParamBlock*>;
define C-pointer-type <ATPParamBlock*> => <ATPParamBlock>;
define C-pointer-type <ATPParamBlock**> => <ATPParamBlock*>;
define C-pointer-type <XPPParamBlock*> => <XPPParamBlock>;
define C-pointer-type <XPPParamBlock**> => <XPPParamBlock*>;
define C-pointer-type <MPPPBPtr> => <MPPParamBlock>;
define C-pointer-type <ATPPBPtr> => <ATPParamBlock>;
define C-pointer-type <XPPParmBlkPtr> => <XPPParamBlock>;
define constant <MPPCompletionProcPtr> = <C-function-pointer>;
define constant <ATPCompletionProcPtr> = <C-function-pointer>;
define constant <XPPCompletionProcPtr> = <C-function-pointer>;
define constant <AttnRoutineProcPtr> = <C-function-pointer>;
define constant <MPPCompletionUPP> = <UniversalProcPtr>;
define constant <ATPCompletionUPP> = <UniversalProcPtr>;
define constant <XPPCompletionUPP> = <UniversalProcPtr>;
define constant <AttnRoutineUPP> = <UniversalProcPtr>;

define C-struct <WDSElement>
  sealed inline-only slot entryLength-value :: <C-short>;
  sealed inline-only slot entryPtr-value :: <Ptr>;
  pack: 2;
  c-name: "struct WDSElement";
end;
define C-pointer-type <WDSElement*> => <WDSElement>;
define C-pointer-type <WDSElement**> => <WDSElement*>;

define C-struct <NTElement>
  sealed inline-only slot nteAddress-value :: <AddrBlock>;
  sealed inline-only slot filler-value   :: <SInt8>;
  sealed inline-only array slot entityData-array :: <SInt8>,
    length: 99,
    address-getter: entityData-value;
  pack: 2;
  c-name: "struct NTElement";
end;
define C-pointer-type <NTElement*> => <NTElement>;
define C-pointer-type <NTElement**> => <NTElement*>;

define C-struct <NamesTableEntry>
  sealed inline-only slot qNext-value    :: <Ptr>;
  sealed inline-only slot nt-value       :: <NTElement>;
  pack: 2;
  c-name: "struct NamesTableEntry";
end;
define C-pointer-type <NamesTableEntry*> => <NamesTableEntry>;
define C-pointer-type <NamesTableEntry**> => <NamesTableEntry*>;
define constant <MPPProtocolHandlerProcPtr> = <C-function-pointer>;
define constant <DDPSocketListenerProcPtr> = <C-function-pointer>;
define constant <MPPProtocolHandlerUPP> = <UniversalProcPtr>;
define constant <DDPSocketListenerUPP> = <UniversalProcPtr>;

define C-struct <MPPparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  pack: 2;
  c-name: "struct MPPparms";
end;
define C-pointer-type <MPPparms*> => <MPPparms>;
define C-pointer-type <MPPparms**> => <MPPparms*>;
define C-union <LAPparms%u%1>
  sealed inline-only slot wdsPointer-value :: <C-void*>;
  sealed inline-only slot handler-value  :: <MPPProtocolHandlerUPP>;
  pack: 2;
end;

define C-struct <LAPparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot protType-value :: <UInt8>;
  sealed inline-only slot filler-value   :: <UInt8>;
  sealed inline-only slot u-value        :: <LAPparms%u%1>;
  pack: 2;
  c-name: "struct LAPparms";
end;
define C-pointer-type <LAPparms*> => <LAPparms>;
define C-pointer-type <LAPparms**> => <LAPparms*>;
define C-union <DDPparms%u%2>
  sealed inline-only slot wdsPointer-value :: <C-void*>;
  sealed inline-only slot listener-value :: <DDPSocketListenerUPP>;
  pack: 2;
end;

define C-struct <DDPparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot socket-value   :: <UInt8>;
  sealed inline-only slot checksumFlag-value :: <UInt8>;
  sealed inline-only slot u-value        :: <DDPparms%u%2>;
  pack: 2;
  c-name: "struct DDPparms";
end;
define C-pointer-type <DDPparms*> => <DDPparms>;
define C-pointer-type <DDPparms**> => <DDPparms*>;

define C-union <NBPPtrs>
  sealed inline-only slot ntQElPtr-value :: <Ptr>;
  sealed inline-only slot entityPtr-value :: <Ptr>;
  pack: 2;
end;
define C-pointer-type <NBPPtrs*> => <NBPPtrs>;
define C-pointer-type <NBPPtrs**> => <NBPPtrs*>;

define C-struct <LookupConfirmParams%Lookup%3>
  sealed inline-only slot retBuffPtr-value :: <C-void*>;
  sealed inline-only slot retBuffSize-value :: <C-short>;
  sealed inline-only slot maxToGet-value :: <C-short>;
  sealed inline-only slot numGotten-value :: <C-short>;
  pack: 2;
end;
define C-struct <LookupConfirmParams%Confirm%4>
  sealed inline-only slot confirmAddr-value :: <AddrBlock>;
  sealed inline-only slot newSocket-value :: <UInt8>;
  sealed inline-only slot filler-value   :: <SInt8>;
  pack: 2;
end;
define C-union <LookupConfirmParams>
  sealed inline-only slot verifyFlag-value :: <UInt8>;
  sealed inline-only slot Lookup-value   :: <LookupConfirmParams%Lookup%3>, setter: #f;
  sealed inline-only slot Confirm-value  :: <LookupConfirmParams%Confirm%4>, setter: #f;
  pack: 2;
end;
define C-pointer-type <LookupConfirmParams*> => <LookupConfirmParams>;
define C-pointer-type <LookupConfirmParams**> => <LookupConfirmParams*>;

define C-struct <NBPparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot interval-value :: <UInt8>;
  sealed inline-only slot count-value    :: <UInt8>;
  sealed inline-only slot nbpPtrs-value  :: <NBPPtrs>;
  sealed inline-only slot parm-value     :: <LookupConfirmParams>;
  pack: 2;
  c-name: "struct NBPparms";
end;
define C-pointer-type <NBPparms*> => <NBPparms>;
define C-pointer-type <NBPparms**> => <NBPparms*>;

define C-struct <SetSelfparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot newSelfFlag-value :: <UInt8>;
  sealed inline-only slot oldSelfFlag-value :: <UInt8>;
  pack: 2;
  c-name: "struct SetSelfparms";
end;
define C-pointer-type <SetSelfparms*> => <SetSelfparms>;
define C-pointer-type <SetSelfparms**> => <SetSelfparms*>;

define C-struct <NBPKillparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot nKillQEl-value :: <C-void*>;
  pack: 2;
  c-name: "struct NBPKillparms";
end;
define C-pointer-type <NBPKillparms*> => <NBPKillparms>;
define C-pointer-type <NBPKillparms**> => <NBPKillparms*>;

define C-struct <GetAppleTalkInfoParm>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot version-value  :: <C-short>;
  sealed inline-only slot varsPtr-value  :: <C-void*>;
  sealed inline-only slot DCEPtr-value   :: <C-void*>;
  sealed inline-only slot portID-value   :: <C-short>;
  sealed inline-only slot configuration-value :: <C-both-long>;
  sealed inline-only slot selfSend-value :: <C-short>;
  sealed inline-only slot netLo-value    :: <C-short>;
  sealed inline-only slot netHi-value    :: <C-short>;
  sealed inline-only slot ourAdd-value   :: <C-both-long>;
  sealed inline-only slot routerAddr-value :: <C-both-long>;
  sealed inline-only slot numOfPHs-value :: <C-short>;
  sealed inline-only slot numOfSkts-value :: <C-short>;
  sealed inline-only slot numNBPEs-value :: <C-short>;
  sealed inline-only slot nTQueue-value  :: <C-void*>;
  sealed inline-only slot LAlength-value :: <C-short>;
  sealed inline-only slot linkAddr-value :: <C-void*>;
  sealed inline-only slot zoneName-value :: <Ptr>;
  pack: 2;
  c-name: "struct GetAppleTalkInfoParm";
end;
define C-pointer-type <GetAppleTalkInfoParm*> => <GetAppleTalkInfoParm>;
define C-pointer-type <GetAppleTalkInfoParm**> => <GetAppleTalkInfoParm*>;

define C-struct <ATalkClosePrepParm>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot appName-value  :: <Ptr>;
  pack: 2;
  c-name: "struct ATalkClosePrepParm";
end;
define C-pointer-type <ATalkClosePrepParm*> => <ATalkClosePrepParm>;
define C-pointer-type <ATalkClosePrepParm**> => <ATalkClosePrepParm*>;

define C-union <MPPParamBlock>
  sealed inline-only slot MPP-value      :: <MPPparms>;
  sealed inline-only slot LAP-value      :: <LAPparms>;
  sealed inline-only slot DDP-value      :: <DDPparms>;
  sealed inline-only slot NBP-value      :: <NBPparms>;
  sealed inline-only slot SETSELF-value  :: <SetSelfparms>;
  sealed inline-only slot NBPKILL-value  :: <NBPKillparms>;
  sealed inline-only slot GAIINFO-value  :: <GetAppleTalkInfoParm>;
  sealed inline-only slot ATALKCLOSE-value :: <ATalkClosePrepParm>;
  pack: 2;
end;

define C-struct <XPPPrmBlk>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <XPPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot cmdResult-value :: <C-both-long>;
  sealed inline-only slot ioVRefNum-value :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot sessRefnum-value :: <C-short>;
  sealed inline-only slot aspTimeout-value :: <UInt8>;
  sealed inline-only slot aspRetry-value :: <UInt8>;
  sealed inline-only slot cbSize-value   :: <C-short>;
  sealed inline-only slot cbPtr-value    :: <Ptr>;
  sealed inline-only slot rbSize-value   :: <C-short>;
  sealed inline-only slot rbPtr-value    :: <Ptr>;
  sealed inline-only slot wdSize-value   :: <C-short>;
  sealed inline-only slot wdPtr-value    :: <Ptr>;
  sealed inline-only array slot ccbStart-array :: <UInt8>,
    length: 296,
    address-getter: ccbStart-value;
  pack: 2;
  c-name: "struct XPPPrmBlk";
end;
define C-pointer-type <XPPPrmBlk*> => <XPPPrmBlk>;
define C-pointer-type <XPPPrmBlk**> => <XPPPrmBlk*>;

define C-struct <ASPGetparmsBlk>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <XPPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot cmdResult-value :: <C-both-long>;
  sealed inline-only slot ioVRefNum-value :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot aspMaxCmdSize-value :: <C-short>;
  sealed inline-only slot aspQuantumSize-value :: <C-short>;
  sealed inline-only slot numSesss-value :: <C-short>;
  pack: 2;
  c-name: "struct ASPGetparmsBlk";
end;
define C-pointer-type <ASPGetparmsBlk*> => <ASPGetparmsBlk>;
define C-pointer-type <ASPGetparmsBlk**> => <ASPGetparmsBlk*>;

define C-struct <ASPAbortPrm>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <XPPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot cmdResult-value :: <C-both-long>;
  sealed inline-only slot ioVRefNum-value :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot abortSCBPtr-value :: <Ptr>;
  pack: 2;
  c-name: "struct ASPAbortPrm";
end;
define C-pointer-type <ASPAbortPrm*> => <ASPAbortPrm>;
define C-pointer-type <ASPAbortPrm**> => <ASPAbortPrm*>;

define C-struct <ASPOpenPrm>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <XPPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot cmdResult-value :: <C-both-long>;
  sealed inline-only slot ioVRefNum-value :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot sessRefnum-value :: <C-short>;
  sealed inline-only slot aspTimeout-value :: <UInt8>;
  sealed inline-only slot aspRetry-value :: <UInt8>;
  sealed inline-only slot serverAddr-value :: <AddrBlock>;
  sealed inline-only slot scbPointer-value :: <Ptr>;
  sealed inline-only slot attnRoutine-value :: <AttnRoutineUPP>;
  pack: 2;
  c-name: "struct ASPOpenPrm";
end;
define C-pointer-type <ASPOpenPrm*> => <ASPOpenPrm>;
define C-pointer-type <ASPOpenPrm**> => <ASPOpenPrm*>;
define C-pointer-type <ASPOpenPrmPtr> => <ASPOpenPrm>;

define C-struct <AFPLoginPrm>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <XPPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot cmdResult-value :: <C-both-long>;
  sealed inline-only slot ioVRefNum-value :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot sessRefnum-value :: <C-short>;
  sealed inline-only slot aspTimeout-value :: <UInt8>;
  sealed inline-only slot aspRetry-value :: <UInt8>;
  sealed inline-only slot cbSize-value   :: <C-short>;
  sealed inline-only slot cbPtr-value    :: <C-void*>;
  sealed inline-only slot rbSize-value   :: <C-short>;
  sealed inline-only slot rbPtr-value    :: <C-void*>;
  sealed inline-only slot afpAddrBlock-value :: <AddrBlock>;
  sealed inline-only slot afpSCBPtr-value :: <C-void*>;
  sealed inline-only slot afpAttnRoutine-value :: <AttnRoutineUPP>;
  sealed inline-only array slot ccbFill-array :: <UInt8>,
    length: 144,
    address-getter: ccbFill-value;
  pack: 2;
  c-name: "struct AFPLoginPrm";
end;
define C-pointer-type <AFPLoginPrm*> => <AFPLoginPrm>;
define C-pointer-type <AFPLoginPrm**> => <AFPLoginPrm*>;

define C-struct <XCallParam>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <XPPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot cmdResult-value :: <C-both-long>;
  sealed inline-only slot ioVRefNum-value :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot xppSubCode-value :: <C-short>;
  sealed inline-only slot xppTimeout-value :: <UInt8>;
  sealed inline-only slot xppRetry-value :: <UInt8>;
  sealed inline-only slot filler1-value  :: <C-short>;
  sealed inline-only slot zipBuffPtr-value :: <C-void*>;
  sealed inline-only slot zipNumZones-value :: <C-short>;
  sealed inline-only slot zipLastFlag-value :: <UInt8>;
  sealed inline-only slot filler2-value  :: <UInt8>;
  sealed inline-only array slot zipInfoField-array :: <UInt8>,
    length: 70,
    address-getter: zipInfoField-value;
  pack: 2;
  c-name: "struct XCallParam";
end;
define C-pointer-type <XCallParam*> => <XCallParam>;
define C-pointer-type <XCallParam**> => <XCallParam*>;

define C-union <XPPParamBlock>
  sealed inline-only slot XPP-value      :: <XPPPrmBlk>;
  sealed inline-only slot GETPARM-value  :: <ASPGetparmsBlk>;
  sealed inline-only slot ABORT-value    :: <ASPAbortPrm>;
  sealed inline-only slot OPEN-value     :: <ASPOpenPrm>;
  sealed inline-only slot LOGIN-value    :: <AFPLoginPrm>;
  sealed inline-only slot XCALL-value    :: <XCallParam>;
  pack: 2;
end;

define C-struct <ATPparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot atpSocket-value :: <UInt8>;
  sealed inline-only slot atpFlags-value :: <UInt8>;
  sealed inline-only slot addrBlock-value :: <AddrBlock>;
  sealed inline-only slot reqLength-value :: <C-short>;
  sealed inline-only slot reqPointer-value :: <C-void*>;
  sealed inline-only slot bdsPointer-value :: <C-void*>;
  pack: 2;
  c-name: "struct ATPparms";
end;
define C-pointer-type <ATPparms*> => <ATPparms>;
define C-pointer-type <ATPparms**> => <ATPparms*>;

define C-struct <SendReqparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot atpSocket-value :: <UInt8>;
  sealed inline-only slot atpFlags-value :: <UInt8>;
  sealed inline-only slot addrBlock-value :: <AddrBlock>;
  sealed inline-only slot reqLength-value :: <C-short>;
  sealed inline-only slot reqPointer-value :: <C-void*>;
  sealed inline-only slot bdsPointer-value :: <C-void*>;
  sealed inline-only slot numOfBuffs-value :: <UInt8>;
  sealed inline-only slot timeOutVal-value :: <UInt8>;
  sealed inline-only slot numOfResps-value :: <UInt8>;
  sealed inline-only slot retryCount-value :: <UInt8>;
  sealed inline-only slot intBuff-value  :: <C-short>;
  sealed inline-only slot TRelTime-value :: <UInt8>;
  sealed inline-only slot filler0-value  :: <SInt8>;
  pack: 2;
  c-name: "struct SendReqparms";
end;
define C-pointer-type <SendReqparms*> => <SendReqparms>;
define C-pointer-type <SendReqparms**> => <SendReqparms*>;
define C-union <ATPmisc1%u%5>
  sealed inline-only slot bitMap-value   :: <UInt8>;
  sealed inline-only slot numOfBuffs-value :: <UInt8>;
  sealed inline-only slot rspNum-value   :: <UInt8>;
  pack: 2;
end;

define C-struct <ATPmisc1>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot atpSocket-value :: <UInt8>;
  sealed inline-only slot atpFlags-value :: <UInt8>;
  sealed inline-only slot addrBlock-value :: <AddrBlock>;
  sealed inline-only slot reqLength-value :: <C-short>;
  sealed inline-only slot reqPointer-value :: <C-void*>;
  sealed inline-only slot bdsPointer-value :: <C-void*>;
  sealed inline-only slot u-value        :: <ATPmisc1%u%5>;
  pack: 2;
  c-name: "struct ATPmisc1";
end;
define C-pointer-type <ATPmisc1*> => <ATPmisc1>;
define C-pointer-type <ATPmisc1**> => <ATPmisc1*>;

define C-struct <ATPmisc2>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot atpSocket-value :: <UInt8>;
  sealed inline-only slot atpFlags-value :: <UInt8>;
  sealed inline-only slot addrBlock-value :: <AddrBlock>;
  sealed inline-only slot reqLength-value :: <C-short>;
  sealed inline-only slot reqPointer-value :: <C-void*>;
  sealed inline-only slot bdsPointer-value :: <C-void*>;
  sealed inline-only slot filler-value   :: <UInt8>;
  sealed inline-only slot bdsSize-value  :: <UInt8>;
  sealed inline-only slot transID-value  :: <C-short>;
  pack: 2;
  c-name: "struct ATPmisc2";
end;
define C-pointer-type <ATPmisc2*> => <ATPmisc2>;
define C-pointer-type <ATPmisc2**> => <ATPmisc2*>;

define C-struct <Killparms>
  sealed inline-only slot qLink-value    :: <QElem*>;
  sealed inline-only slot qType-value    :: <C-short>;
  sealed inline-only slot ioTrap-value   :: <C-short>;
  sealed inline-only slot ioCmdAddr-value :: <Ptr>;
  sealed inline-only slot ioCompletion-value :: <ATPCompletionUPP>;
  sealed inline-only slot ioResult-value :: <OSErr>;
  sealed inline-only slot userData-value :: <C-both-long>;
  sealed inline-only slot reqTID-value   :: <C-short>;
  sealed inline-only slot ioRefNum-value :: <C-short>;
  sealed inline-only slot csCode-value   :: <C-short>;
  sealed inline-only slot atpSocket-value :: <UInt8>;
  sealed inline-only slot atpFlags-value :: <UInt8>;
  sealed inline-only slot addrBlock-value :: <AddrBlock>;
  sealed inline-only slot reqLength-value :: <C-short>;
  sealed inline-only slot reqPointer-value :: <C-void*>;
  sealed inline-only slot bdsPointer-value :: <C-void*>;
  sealed inline-only slot aKillQEl-value :: <C-void*>;
  pack: 2;
  c-name: "struct Killparms";
end;
define C-pointer-type <Killparms*> => <Killparms>;
define C-pointer-type <Killparms**> => <Killparms*>;

define C-union <ATPParamBlock>
  sealed inline-only slot ATP-value      :: <ATPparms>;
  sealed inline-only slot SREQ-value     :: <SendReqparms>;
  sealed inline-only slot OTH1-value     :: <ATPmisc1>;
  sealed inline-only slot OTH2-value     :: <ATPmisc2>;
  sealed inline-only slot KILL-value     :: <Killparms>;
  pack: 2;
end;
// unnamed enum:
define inline-only constant $uppATalkTransitionEventProcInfo = #x00000FF1;

// unnamed enum:
define inline-only constant $uppMPPCompletionProcInfo  = #x00009802;

// unnamed enum:
define inline-only constant $uppATPCompletionProcInfo  = #x00009802;

// unnamed enum:
define inline-only constant $uppXPPCompletionProcInfo  = #x00009802;

// unnamed enum:
define inline-only constant $uppAttnRoutineProcInfo    = #x00061002;

// unnamed enum:
define inline-only constant $uppMPPProtocolHandlerProcInfo = #x0000007F;

// unnamed enum:
define inline-only constant $uppDDPSocketListenerProcInfo = #x0000008F;


define inline-only C-function OpenXPP
  parameter xppRefnum  :: <C-short*>;
  result value :: <OSErr>;
  c-name: "OpenXPP";
  c-modifiers: "pascal";
end;

define inline-only C-function ASPOpenSession
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ASPOpenSession";
  c-modifiers: "pascal";
end;

define inline-only C-function ASPCloseSession
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ASPCloseSession";
  c-modifiers: "pascal";
end;

define inline-only C-function ASPAbortOS
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ASPAbortOS";
  c-modifiers: "pascal";
end;

define inline-only C-function ASPGetParms
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ASPGetParms";
  c-modifiers: "pascal";
end;

define inline-only C-function ASPCloseAll
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ASPCloseAll";
  c-modifiers: "pascal";
end;

define inline-only C-function ASPUserWrite
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ASPUserWrite";
  c-modifiers: "pascal";
end;

define inline-only C-function ASPUserCommand
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ASPUserCommand";
  c-modifiers: "pascal";
end;

define inline-only C-function ASPGetStatus
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ASPGetStatus";
  c-modifiers: "pascal";
end;

define inline-only C-function AFPCommand
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "AFPCommand";
  c-modifiers: "pascal";
end;

define inline-only C-function GetLocalZones
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "GetLocalZones";
  c-modifiers: "pascal";
end;

define inline-only C-function GetZoneList
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "GetZoneList";
  c-modifiers: "pascal";
end;

define inline-only C-function GetMyZone
  parameter thePBptr   :: <XPPParmBlkPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "GetMyZone";
  c-modifiers: "pascal";
end;

define inline-only C-function PAttachPH
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PAttachPH";
  c-modifiers: "pascal";
end;

define inline-only C-function PDetachPH
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PDetachPH";
  c-modifiers: "pascal";
end;

define inline-only C-function PWriteLAP
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PWriteLAP";
  c-modifiers: "pascal";
end;

define inline-only C-function POpenSkt
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "POpenSkt";
  c-modifiers: "pascal";
end;

define inline-only C-function PCloseSkt
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PCloseSkt";
  c-modifiers: "pascal";
end;

define inline-only C-function PWriteDDP
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PWriteDDP";
  c-modifiers: "pascal";
end;

define inline-only C-function PRegisterName
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PRegisterName";
  c-modifiers: "pascal";
end;

define inline-only C-function PLookupName
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PLookupName";
  c-modifiers: "pascal";
end;

define inline-only C-function PConfirmName
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PConfirmName";
  c-modifiers: "pascal";
end;

define inline-only C-function PRemoveName
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PRemoveName";
  c-modifiers: "pascal";
end;

define inline-only C-function PSetSelfSend
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PSetSelfSend";
  c-modifiers: "pascal";
end;

define inline-only C-function PKillNBP
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PKillNBP";
  c-modifiers: "pascal";
end;

define inline-only C-function PGetAppleTalkInfo
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PGetAppleTalkInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function PATalkClosePrep
  parameter thePBptr   :: <MPPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PATalkClosePrep";
  c-modifiers: "pascal";
end;

define inline-only C-function POpenATPSkt
  parameter thePBptr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "POpenATPSkt";
  c-modifiers: "pascal";
end;

define inline-only C-function PCloseATPSkt
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PCloseATPSkt";
  c-modifiers: "pascal";
end;

define inline-only C-function PSendRequest
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PSendRequest";
  c-modifiers: "pascal";
end;

define inline-only C-function PGetRequest
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PGetRequest";
  c-modifiers: "pascal";
end;

define inline-only C-function PSendResponse
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PSendResponse";
  c-modifiers: "pascal";
end;

define inline-only C-function PAddResponse
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PAddResponse";
  c-modifiers: "pascal";
end;

define inline-only C-function PRelTCB
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PRelTCB";
  c-modifiers: "pascal";
end;

define inline-only C-function PRelRspCB
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PRelRspCB";
  c-modifiers: "pascal";
end;

define inline-only C-function PNSendRequest
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PNSendRequest";
  c-modifiers: "pascal";
end;

define inline-only C-function PKillSendReq
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PKillSendReq";
  c-modifiers: "pascal";
end;

define inline-only C-function PKillGetReq
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "PKillGetReq";
  c-modifiers: "pascal";
end;

define inline-only C-function ATPKillAllGetReq
  parameter thePBPtr   :: <ATPPBPtr>;
  parameter async      :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "ATPKillAllGetReq";
  c-modifiers: "pascal";
end;

define inline-only C-function BuildLAPwds
  parameter wdsPtr     :: <Ptr>;
  parameter dataPtr    :: <Ptr>;
  parameter destHost   :: <C-short>;
  parameter prototype  :: <C-short>;
  parameter frameLen   :: <C-short>;
  c-name: "BuildLAPwds";
  c-modifiers: "pascal";
end;

define inline-only C-function BuildDDPwds
  parameter wdsPtr     :: <Ptr>;
  parameter headerPtr  :: <Ptr>;
  parameter dataPtr    :: <Ptr>;
  parameter netAddr    :: <AddrBlock>;
  parameter ddpType    :: <C-short>;
  parameter dataLen    :: <C-short>;
  c-name: "BuildDDPwds";
  c-modifiers: "pascal";
end;

define inline-only C-function NBPSetEntity
  parameter buffer     :: <Ptr>;
  parameter nbpObject  :: <ConstStr32Param>;
  parameter nbpType    :: <ConstStr32Param>;
  parameter nbpZone    :: <ConstStr32Param>;
  c-name: "NBPSetEntity";
  c-modifiers: "pascal";
end;

define inline-only C-function NBPSetNTE
  parameter ntePtr     :: <Ptr>;
  parameter nbpObject  :: <ConstStr32Param>;
  parameter nbpType    :: <ConstStr32Param>;
  parameter nbpZone    :: <ConstStr32Param>;
  parameter socket     :: <C-short>;
  c-name: "NBPSetNTE";
  c-modifiers: "pascal";
end;

define inline-only C-function GetBridgeAddress
  result value :: <C-short>;
  c-name: "GetBridgeAddress";
  c-modifiers: "pascal";
end;

define inline-only C-function BuildBDS
  parameter buffPtr    :: <Ptr>;
  parameter bdsPtr     :: <Ptr>;
  parameter buffSize   :: <C-short>;
  result value :: <C-short>;
  c-name: "BuildBDS";
  c-modifiers: "pascal";
end;

define inline-only C-function MPPOpen
  result value :: <OSErr>;
  c-name: "MPPOpen";
  c-modifiers: "pascal";
end;

define inline-only C-function LAPAddATQ
  parameter theATQEntry :: <ATQEntryPtr>;
  result value :: <OSErr>;
  c-name: "LAPAddATQ";
  c-modifiers: "pascal";
end;

define inline-only C-function LAPRmvATQ
  parameter theATQEntry :: <ATQEntryPtr>;
  result value :: <OSErr>;
  c-name: "LAPRmvATQ";
  c-modifiers: "pascal";
end;

define inline-only C-function ATPLoad
  result value :: <OSErr>;
  c-name: "ATPLoad";
  c-modifiers: "pascal";
end;

define inline-only C-function ATPUnload
  result value :: <OSErr>;
  c-name: "ATPUnload";
  c-modifiers: "pascal";
end;

define inline-only C-function NBPExtract
  parameter theBuffer  :: <Ptr>;
  parameter numInBuf   :: <C-short>;
  parameter whichOne   :: <C-short>;
  parameter abEntity   :: <EntityName*>;
  parameter address    :: <AddrBlock*>;
  result value :: <OSErr>;
  c-name: "NBPExtract";
  c-modifiers: "pascal";
end;

define inline-only C-function GetNodeAddress
  parameter myNode     :: <C-short*>;
  parameter myNet      :: <C-short*>;
  result value :: <OSErr>;
  c-name: "GetNodeAddress";
  c-modifiers: "pascal";
end;

define inline-only C-function IsMPPOpen
  result value :: <MacBoolean>;
  c-name: "IsMPPOpen";
  c-modifiers: "pascal";
end;

define inline-only C-function IsATPOpen
  result value :: <MacBoolean>;
  c-name: "IsATPOpen";
  c-modifiers: "pascal";
end;

define inline-only C-function ATEvent
  parameter event      :: <C-both-long>;
  parameter infoPtr    :: <Ptr>;
  c-name: "ATEvent";
  c-modifiers: "pascal";
end;

define inline-only C-function ATPreFlightEvent
  parameter event      :: <C-both-long>;
  parameter cancel     :: <C-both-long>;
  parameter infoPtr    :: <Ptr>;
  result value :: <OSErr>;
  c-name: "ATPreFlightEvent";
  c-modifiers: "pascal";
end;

