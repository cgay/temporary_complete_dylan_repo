Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "DateTimeUtils.h"; do not edit.

// unnamed enum:
define inline-only constant $toggleUndefined           = 0;
define inline-only constant $toggleOK                  = 1;
define inline-only constant $toggleBadField            = 2;
define inline-only constant $toggleBadDelta            = 3;
define inline-only constant $toggleBadChar             = 4;
define inline-only constant $toggleUnknown             = 5;
define inline-only constant $toggleBadNum              = 6;
define inline-only constant $toggleOutOfRange          = 7;
define inline-only constant $toggleErr3                = 7;
define inline-only constant $toggleErr4                = 8;
define inline-only constant $toggleErr5                = 9;

// unnamed enum:
define inline-only constant $smallDateBit              = 31;
define inline-only constant $togChar12HourBit          = 30;
define inline-only constant $togCharZCycleBit          = 29;
define inline-only constant $togDelta12HourBit         = 28;
define inline-only constant $genCdevRangeBit           = 27;
define inline-only constant $validDateFields           = -1;
define inline-only constant $maxDateField              = 10;

// unnamed enum:
define inline-only constant $eraMask                   = #x0001;
define inline-only constant $yearMask                  = #x0002;
define inline-only constant $monthMask                 = #x0004;
define inline-only constant $dayMask                   = #x0008;
define inline-only constant $hourMask                  = #x0010;
define inline-only constant $minuteMask                = #x0020;
define inline-only constant $secondMask                = #x0040;
define inline-only constant $dayOfWeekMask             = #x0080;
define inline-only constant $dayOfYearMask             = #x0100;
define inline-only constant $weekOfYearMask            = #x0200;
define inline-only constant $pmMask                    = #x0400;
define inline-only constant $dateStdMask               = #x007F;

// unnamed enum:
define inline-only constant $eraField                  = 0;
define inline-only constant $yearField                 = 1;
define inline-only constant $monthField                = 2;
define inline-only constant $dayField                  = 3;
define inline-only constant $hourField                 = 4;
define inline-only constant $minuteField               = 5;
define inline-only constant $secondField               = 6;
define inline-only constant $dayOfWeekField            = 7;
define inline-only constant $dayOfYearField            = 8;
define inline-only constant $weekOfYearField           = 9;
define inline-only constant $pmField                   = 10;
define inline-only constant $res1Field                 = 11;
define inline-only constant $res2Field                 = 12;
define inline-only constant $res3Field                 = 13;

define inline constant <LongDateField> = <SignedByte>;
define C-pointer-type <LongDateField*> => <LongDateField>;
define C-pointer-type <LongDateField**> => <LongDateField*>;
// unnamed enum:
define inline-only constant $shortDate                 = 0;
define inline-only constant $longDate                  = 1;
define inline-only constant $abbrevDate                = 2;

define inline constant <DateForm> = <SInt8>;
define C-pointer-type <DateForm*> => <DateForm>;
define C-pointer-type <DateForm**> => <DateForm*>;
// unnamed enum:
define inline-only constant $fatalDateTime             = #x8000;
define inline-only constant $longDateFound             = 1;
define inline-only constant $leftOverChars             = 2;
define inline-only constant $sepNotIntlSep             = 4;
define inline-only constant $fieldOrderNotIntl         = 8;
define inline-only constant $extraneousStrings         = 16;
define inline-only constant $tooManySeps               = 32;
define inline-only constant $sepNotConsistent          = 64;
define inline-only constant $tokenErr                  = #x8100;
define inline-only constant $cantReadUtilities         = #x8200;
define inline-only constant $dateTimeNotFound          = #x8400;
define inline-only constant $dateTimeInvalid           = #x8800;

define inline constant <StringToDateStatus> = <C-short>;
define C-pointer-type <StringToDateStatus*> => <StringToDateStatus>;
define C-pointer-type <StringToDateStatus**> => <StringToDateStatus*>;
define inline constant <String2DateStatus> = <C-short>;
define C-pointer-type <String2DateStatus*> => <String2DateStatus>;
define C-pointer-type <String2DateStatus**> => <String2DateStatus*>;

define C-struct <DateCacheRecord>
  sealed inline-only array slot hidden-array :: <C-short>,
    length: 256,
    address-getter: hidden-value;
  pack: 2;
  c-name: "struct DateCacheRecord";
end;
define C-pointer-type <DateCacheRecord*> => <DateCacheRecord>;
define C-pointer-type <DateCacheRecord**> => <DateCacheRecord*>;
define C-pointer-type <DateCachePtr> => <DateCacheRecord>;

define C-struct <DateTimeRec>
  sealed inline-only slot year-value     :: <C-short>;
  sealed inline-only slot month-value    :: <C-short>;
  sealed inline-only slot day-value      :: <C-short>;
  sealed inline-only slot hour-value     :: <C-short>;
  sealed inline-only slot minute-value   :: <C-short>;
  sealed inline-only slot second-value   :: <C-short>;
  sealed inline-only slot dayOfWeek-value :: <C-short>;
  pack: 2;
  c-name: "struct DateTimeRec";
end;
define C-pointer-type <DateTimeRec*> => <DateTimeRec>;
define C-pointer-type <DateTimeRec**> => <DateTimeRec*>;
define inline constant <LongDateTime> = <SInt64>;
define C-pointer-type <LongDateTime*> => <LongDateTime>;
define C-pointer-type <LongDateTime**> => <LongDateTime*>;

define C-struct <LongDateCvt%hl%1>
  sealed inline-only slot lHigh-value    :: <UInt32>;
  sealed inline-only slot lLow-value     :: <UInt32>;
  pack: 2;
end;
define C-union <LongDateCvt>
  sealed inline-only slot c-value        :: <SInt64>;
  sealed inline-only slot hl-value       :: <LongDateCvt%hl%1>, setter: #f;
  pack: 2;
end;
define C-pointer-type <LongDateCvt*> => <LongDateCvt>;
define C-pointer-type <LongDateCvt**> => <LongDateCvt*>;

define C-struct <LongDateRec%ld%2>
  sealed inline-only slot era-value      :: <C-short>;
  sealed inline-only slot year-value     :: <C-short>;
  sealed inline-only slot month-value    :: <C-short>;
  sealed inline-only slot day-value      :: <C-short>;
  sealed inline-only slot hour-value     :: <C-short>;
  sealed inline-only slot minute-value   :: <C-short>;
  sealed inline-only slot second-value   :: <C-short>;
  sealed inline-only slot dayOfWeek-value :: <C-short>;
  sealed inline-only slot dayOfYear-value :: <C-short>;
  sealed inline-only slot weekOfYear-value :: <C-short>;
  sealed inline-only slot pm-value       :: <C-short>;
  sealed inline-only slot res1-value     :: <C-short>;
  sealed inline-only slot res2-value     :: <C-short>;
  sealed inline-only slot res3-value     :: <C-short>;
  pack: 2;
end;
define C-struct <LongDateRec%od%3>
  sealed inline-only slot eraAlt-value   :: <C-short>;
  sealed inline-only slot oldDate-value  :: <DateTimeRec>;
  pack: 2;
end;
define C-union <LongDateRec>
  sealed inline-only slot ld-value       :: <LongDateRec%ld%2>, setter: #f;
  sealed inline-only array slot list-array :: <C-short>,
    length: 14,
    address-getter: list-value;
  sealed inline-only slot od-value       :: <LongDateRec%od%3>, setter: #f;
  pack: 2;
end;
define C-pointer-type <LongDateRec*> => <LongDateRec>;
define C-pointer-type <LongDateRec**> => <LongDateRec*>;
define inline constant <DateDelta> = <SInt8>;
define C-pointer-type <DateDelta*> => <DateDelta>;
define C-pointer-type <DateDelta**> => <DateDelta*>;

define C-struct <TogglePB>
  sealed inline-only slot togFlags-value :: <C-both-long>;
  sealed inline-only slot amChars-value  :: <ResType>;
  sealed inline-only slot pmChars-value  :: <ResType>;
  sealed inline-only array slot reserved-array :: <C-both-long>,
    length: 4,
    address-getter: reserved-value;
  pack: 2;
  c-name: "struct TogglePB";
end;
define C-pointer-type <TogglePB*> => <TogglePB>;
define C-pointer-type <TogglePB**> => <TogglePB*>;
define inline constant <ToggleResults> = <C-short>;
define C-pointer-type <ToggleResults*> => <ToggleResults>;
define C-pointer-type <ToggleResults**> => <ToggleResults*>;

define inline-only C-function InitDateCache
  parameter theCache   :: <DateCachePtr>;
  result value :: <OSErr>;
  c-name: "InitDateCache";
  c-modifiers: "pascal";
end;

define inline-only C-function StringToDate
  parameter textPtr    :: <Ptr>;
  parameter textLen    :: <C-both-long>;
  parameter theCache   :: <DateCachePtr>;
  parameter lengthUsed :: <C-both-long*>;
  parameter dateTime   :: <LongDateRec*>;
  result value :: <StringToDateStatus>;
  c-name: "StringToDate";
  c-modifiers: "pascal";
end;

define inline-only C-function StringToTime
  parameter textPtr    :: <Ptr>;
  parameter textLen    :: <C-both-long>;
  parameter theCache   :: <DateCachePtr>;
  parameter lengthUsed :: <C-both-long*>;
  parameter dateTime   :: <LongDateRec*>;
  result value :: <StringToDateStatus>;
  c-name: "StringToTime";
  c-modifiers: "pascal";
end;

define inline-only C-function IUDateString
  parameter dateTime   :: <C-both-long>;
  parameter longFlag   :: <DateForm>;
  parameter result     :: <Str255>;
  c-name: "IUDateString";
  c-modifiers: "pascal";
end;

define inline-only C-function IUTimeString
  parameter dateTime   :: <C-both-long>;
  parameter wantSeconds :: <MacBoolean>;
  parameter result     :: <Str255>;
  c-name: "IUTimeString";
  c-modifiers: "pascal";
end;

define inline-only C-function IUDatePString
  parameter dateTime   :: <C-both-long>;
  parameter longFlag   :: <DateForm>;
  parameter result     :: <Str255>;
  parameter intlHandle :: <Handle>;
  c-name: "IUDatePString";
  c-modifiers: "pascal";
end;

define inline-only C-function IUTimePString
  parameter dateTime   :: <C-both-long>;
  parameter wantSeconds :: <MacBoolean>;
  parameter result     :: <Str255>;
  parameter intlHandle :: <Handle>;
  c-name: "IUTimePString";
  c-modifiers: "pascal";
end;

define inline-only C-function IULDateString
  parameter dateTime   :: <LongDateTime*>;
  parameter longFlag   :: <DateForm>;
  parameter result     :: <Str255>;
  parameter intlHandle :: <Handle>;
  c-name: "IULDateString";
  c-modifiers: "pascal";
end;

define inline-only C-function IULTimeString
  parameter dateTime   :: <LongDateTime*>;
  parameter wantSeconds :: <MacBoolean>;
  parameter result     :: <Str255>;
  parameter intlHandle :: <Handle>;
  c-name: "IULTimeString";
  c-modifiers: "pascal";
end;

define inline-only C-function LongDateToSeconds
  parameter lDate      ::  /* const */ <LongDateRec*>;
  parameter lSecs      :: <LongDateTime*>;
  c-name: "LongDateToSeconds";
  c-modifiers: "pascal";
end;

define inline-only C-function LongSecondsToDate
  parameter lSecs      ::  /* const */ <LongDateTime*>;
  parameter lDate      :: <LongDateRec*>;
  c-name: "LongSecondsToDate";
  c-modifiers: "pascal";
end;

define inline-only C-function ToggleDate
  parameter lSecs      :: <LongDateTime*>;
  parameter field      :: <LongDateField>;
  parameter delta      :: <DateDelta>;
  parameter ch         :: <C-short>;
  parameter params     ::  /* const */ <TogglePB*>;
  result value :: <ToggleResults>;
  c-name: "ToggleDate";
  c-modifiers: "pascal";
end;

define inline-only C-function ValidDate
  parameter vDate      ::  /* const */ <LongDateRec*>;
  parameter flags      :: <C-both-long>;
  parameter newSecs    :: <LongDateTime*>;
  result value :: <C-short>;
  c-name: "ValidDate";
  c-modifiers: "pascal";
end;

define inline-only C-function ReadDateTime
  parameter time       :: <C-both-unsigned-long*>;
  result value :: <OSErr>;
  c-name: "ReadDateTime";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDateTime
  parameter secs       :: <C-both-unsigned-long*>;
  c-name: "GetDateTime";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDateTime
  parameter time       :: <C-both-unsigned-long>;
  result value :: <OSErr>;
  c-name: "SetDateTime";
  c-modifiers: "pascal";
end;

define inline-only C-function SetTime
  parameter d          ::  /* const */ <DateTimeRec*>;
  c-name: "SetTime";
  c-modifiers: "pascal";
end;

define inline-only C-function GetTime
  parameter d          :: <DateTimeRec*>;
  c-name: "GetTime";
  c-modifiers: "pascal";
end;

define inline-only C-function DateToSeconds
  parameter d          ::  /* const */ <DateTimeRec*>;
  parameter secs       :: <C-both-unsigned-long*>;
  c-name: "DateToSeconds";
  c-modifiers: "pascal";
end;

define inline-only C-function SecondsToDate
  parameter secs       :: <C-both-unsigned-long>;
  parameter d          :: <DateTimeRec*>;
  c-name: "SecondsToDate";
  c-modifiers: "pascal";
end;

