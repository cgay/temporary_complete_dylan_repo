
Running suite dylan-test-suite, with options:
   progress-function: none
     report-function: log
              debug?: no
              ignore: {<stretchy-object-vector>: size 0}


--------Test Log Report--------
Object: Suite
Name: dylan-test-suite
Status: failed

Object: Suite
Name: dylan-module-test-suite
Status: failed

Object: Suite
Name: dylan-protocol-test-suite
Status: failed

Object: Test
Name: dylan-protocol-constants-test
Status: passed
end

Object: Test
Name: dylan-protocol-variables-test
Status: passed
end

Object: Test
Name: dylan-protocol-classes-test
Status: failed

Object: Check
Name: Variable <method> is a class
Status: passed
end

Object: Check
Name: Variable <method> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<method>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: Variable <type> is a class
Status: passed
end

Object: Check
Name: Variable <type> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<type>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <function> is a class
Status: passed
end

Object: Check
Name: Variable <function> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<function>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <singleton> is a class
Status: passed
end

Object: Check
Name: Variable <singleton> has the correct superclasses
Status: passed
end

Object: Check
Name: make <singleton> with required arguments
Status: passed
end

Object: Check
Name: Variable <generic-function> is a class
Status: passed
end

Object: Check
Name: Variable <generic-function> has the correct superclasses
Status: passed
end

Object: Check
Name: make <generic-function> with required arguments
Status: passed
end

Object: Check
Name: Variable <symbol> is a class
Status: passed
end

Object: Check
Name: Variable <symbol> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<symbol>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <object> is a class
Status: passed
end

Object: Check
Name: Variable <object> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<object>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <class> is a class
Status: passed
end

Object: Check
Name: Variable <class> has the correct superclasses
Status: passed
end

Object: Check
Name: make <class> with required arguments
Status: passed
end

Object: Check
Name: Variable <character> is a class
Status: passed
end

Object: Check
Name: Variable <character> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<character>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <boolean> is a class
Status: passed
end

Object: Check
Name: Variable <boolean> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<boolean>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end
end

Object: Test
Name: dylan-protocol-functions-test
Status: passed

Object: Check
Name: Variable as-uppercase! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable values is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable generic-function-methods is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable singleton is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-method is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable limited is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable apply is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable always is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: always(#f)(#t)
Status: passed
end

Object: Check
Name: always(#f)(10)
Status: passed
end

Object: Check
Name: always(#t)(#t)
Status: passed
end

Object: Check
Name: always(#t)(10)
Status: passed
end

Object: Check
Name: Variable list is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as-uppercase is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable slot-initialized? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable initialize is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable rcurry is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable max is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable identity is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable curry is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable vector is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable < is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable range is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable make is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable disjoin is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable complement is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable <= is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable min is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable compose is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable direct-subclasses is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ~= is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable conjoin is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable all-superclasses is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable direct-superclasses is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pair is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ~== is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable sorted-applicable-methods is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable applicable-method? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable subtype? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable find-method is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ~ is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable function-return-values is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable instance? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-union is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: type-union(<string>, <integer>) returns a type
Status: passed
end

Object: Check
Name: instance?("string", type-union(<string>, <integer>))
Status: passed
end

Object: Check
Name: instance?(10, type-union(<string>, <integer>))
Status: passed
end

Object: Check
Name: instance?(#t, type-union(<string>, <integer>))
Status: passed
end

Object: Check
Name: Variable function-arguments is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-for-copy is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable object-class is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable == is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable shallow-copy is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable = is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable function-specializers is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable generic-function-mandatory-keywords is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as-lowercase! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable >= is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable > is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add-method is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable as-lowercase is a generic-function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: dylan-protocol-macros-test
Status: passed

Object: Check
Name: and simple number
Status: passed
end

Object: Check
Name: and with simple predicate
Status: passed
end

Object: Check
Name: and multiple values as last form returns all vals
Status: passed
end

Object: Check
Name: and 1st value only thing that matters to judge truth
Status: passed
end

Object: Check
Name: and things past 1st false don't get evaled
Status: passed
end

Object: Check
Name: or simple numbers
Status: passed
end

Object: Check
Name: or with simple predicates
Status: passed
end

Object: Check
Name: or none true then false
Status: passed
end

Object: Check
Name: or nothing evaled after one returns true
Status: passed
end

Object: Check
Name: or multiple values before last first val returned
Status: passed
end

Object: Check
Name: or multiple values in last, all vals returned
Status: passed
end

Object: Check
Name: or 1st value only thing that matters to judge truth
Status: passed
end

Object: Check
Name: simple assignment
Status: passed
end

Object: Check
Name: assignment returns the correct value
Status: passed
end

Object: Check
Name: vector assignment
Status: passed
end

Object: Check
Name: array assignment
Status: passed
end

Object: Check
Name: unless true
Status: passed
end

Object: Check
Name: unless even 100
Status: passed
end

Object: Check
Name: unless true doesnt exec body
Status: passed
end

Object: Check
Name: unless false does exec body
Status: passed
end

Object: Check
Name: unless returns ok
Status: passed
end

Object: Check
Name: unless returns last
Status: passed
end

Object: Check
Name: unless no forms returns false
Status: passed
end

Object: Check
Name: select simple
Status: passed
end

Object: Check
Name: select otherwise
Status: passed
end

Object: Check
Name: select student art
Status: passed
end

Object: Check
Name: select student engineering
Status: passed
end

Object: Check
Name: select student nursing
Status: passed
end

Object: Check
Name: select if no consequents false
Status: passed
end

Object: Check
Name: select if no otherwise consequents false
Status: passed
end

Object: Check
Name: select returns multiple values
Status: passed
end

Object: Check
Name: select returns last consequent
Status: passed
end

Object: Check
Name: select otherwise returns last consequent
Status: passed
end

Object: Check
Name: select by <
Status: passed
end

Object: Check
Name: select by < otherwise
Status: passed
end

Object: Check
Name: select by instance?
Status: passed
end

Object: Check
Name: if true
Status: passed
end

Object: Check
Name: if false
Status: passed
end

Object: Check
Name: if empty-list
Status: passed
end

Object: Check
Name: if symbol
Status: passed
end

Object: Check
Name: if vector
Status: passed
end

Object: Check
Name: if even 100
Status: passed
end

Object: Check
Name: if odd 100
Status: passed
end

Object: Check
Name: for simple iteration
Status: passed
end

Object: Check
Name: for parameterize int iteration
Status: passed
end

Object: Check
Name: for = then with lists
Status: passed
end

Object: Check
Name: for multiple vars
Status: passed
end

Object: Check
Name: for summing over let var
Status: passed
end

Object: Check
Name: for summing over let var with lots of iteration vars
Status: passed
end

Object: Check
Name: for doesn't do it the first time if end-test initially true
Status: passed
end

Object: Check
Name: for multiple return forms, do all, return last
Status: passed
end

Object: Check
Name: multiple values return
Status: passed
end

Object: Check
Name: for until true with finally
Status: passed
end

Object: Check
Name: for until true with lots o finally
Status: passed
end

Object: Check
Name: for multiple returns
Status: passed
end

Object: Check
Name: for multiple values return
Status: passed
end

Object: Check
Name: for never true return false
Status: passed
end

Object: Check
Name: for one runs out first return false
Status: passed
end

Object: Check
Name: case stop when test is five = five
Status: passed
end

Object: Check
Name: case else clause is catch all
Status: passed
end

Object: Check
Name: case remaining tests not evaluated
Status: passed
end

Object: Check
Name: case returns false if no test evals to true
Status: passed
end

Object: Check
Name: case no consequents, returns 1st value of test case
Status: passed
end

Object: Check
Name: case returns all values from last consequent
Status: passed
end

Object: Check
Name: begin: no body is false
Status: passed
end

Object: Check
Name: begin: return last expression
Status: passed
end

Object: Check
Name: begin not skipping to last form i hope?
Status: passed
end

Object: Check
Name: begin if last form is multiple values, return them all
Status: passed
end
end
end

Object: Suite
Name: arithmetic-protocol-test-suite
Status: failed

Object: Test
Name: arithmetic-protocol-constants-test
Status: passed
end

Object: Test
Name: arithmetic-protocol-variables-test
Status: passed
end

Object: Test
Name: arithmetic-protocol-classes-test
Status: failed

Object: Check
Name: Variable <rational> is a class
Status: passed
end

Object: Check
Name: Variable <rational> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<rational>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <double-float> is a class
Status: passed
end

Object: Check
Name: Variable <double-float> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<double-float>) errors because not instantiable
Status: passed
end

Object: Check
Name: zero?(0.0d0)
Status: passed
end

Object: Check
Name: 0.0d0 * 1 = 0.0d0
Status: passed
end

Object: Check
Name: positive?(0.0d0)
Status: passed
end

Object: Check
Name: negative?(0.0d0)
Status: passed
end

Object: Check
Name: negative(negative(0.0d0)) = 0.0d0
Status: passed
end

Object: Check
Name: zero?(1.0000000d0)
Status: passed
end

Object: Check
Name: 1.0000000d0 * 1 = 1.0000000d0
Status: passed
end

Object: Check
Name: positive?(1.0000000d0)
Status: passed
end

Object: Check
Name: negative?(1.0000000d0)
Status: passed
end

Object: Check
Name: negative(negative(1.0000000d0)) = 1.0000000d0
Status: passed
end

Object: Check
Name: zero?(2.0000000d0)
Status: passed
end

Object: Check
Name: 2.0000000d0 * 1 = 2.0000000d0
Status: passed
end

Object: Check
Name: positive?(2.0000000d0)
Status: passed
end

Object: Check
Name: negative?(2.0000000d0)
Status: passed
end

Object: Check
Name: negative(negative(2.0000000d0)) = 2.0000000d0
Status: passed
end

Object: Check
Name: zero?(-1.0000000d0)
Status: passed
end

Object: Check
Name: -1.0000000d0 * 1 = -1.0000000d0
Status: passed
end

Object: Check
Name: positive?(-1.0000000d0)
Status: passed
end

Object: Check
Name: negative?(-1.0000000d0)
Status: passed
end

Object: Check
Name: negative(negative(-1.0000000d0)) = -1.0000000d0
Status: passed
end

Object: Check
Name: zero?(-2.0000000d0)
Status: passed
end

Object: Check
Name: -2.0000000d0 * 1 = -2.0000000d0
Status: passed
end

Object: Check
Name: positive?(-2.0000000d0)
Status: passed
end

Object: Check
Name: negative?(-2.0000000d0)
Status: passed
end

Object: Check
Name: negative(negative(-2.0000000d0)) = -2.0000000d0
Status: passed
end

Object: Check
Name: zero?(1.5000000d0)
Status: passed
end

Object: Check
Name: 1.5000000d0 * 1 = 1.5000000d0
Status: passed
end

Object: Check
Name: positive?(1.5000000d0)
Status: passed
end

Object: Check
Name: negative?(1.5000000d0)
Status: passed
end

Object: Check
Name: negative(negative(1.5000000d0)) = 1.5000000d0
Status: passed
end

Object: Check
Name: zero?(-1.5000000d0)
Status: passed
end

Object: Check
Name: -1.5000000d0 * 1 = -1.5000000d0
Status: passed
end

Object: Check
Name: positive?(-1.5000000d0)
Status: passed
end

Object: Check
Name: negative?(-1.5000000d0)
Status: passed
end

Object: Check
Name: negative(negative(-1.5000000d0)) = -1.5000000d0
Status: passed
end

Object: Check
Name: Variable <single-float> is a class
Status: passed
end

Object: Check
Name: Variable <single-float> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<single-float>) errors because not instantiable
Status: passed
end

Object: Check
Name: zero?(0.0)
Status: passed
end

Object: Check
Name: 0.0 * 1 = 0.0
Status: passed
end

Object: Check
Name: positive?(0.0)
Status: passed
end

Object: Check
Name: negative?(0.0)
Status: passed
end

Object: Check
Name: negative(negative(0.0)) = 0.0
Status: passed
end

Object: Check
Name: zero?(1.0000000)
Status: passed
end

Object: Check
Name: 1.0000000 * 1 = 1.0000000
Status: passed
end

Object: Check
Name: positive?(1.0000000)
Status: passed
end

Object: Check
Name: negative?(1.0000000)
Status: passed
end

Object: Check
Name: negative(negative(1.0000000)) = 1.0000000
Status: passed
end

Object: Check
Name: zero?(2.0000000)
Status: passed
end

Object: Check
Name: 2.0000000 * 1 = 2.0000000
Status: passed
end

Object: Check
Name: positive?(2.0000000)
Status: passed
end

Object: Check
Name: negative?(2.0000000)
Status: passed
end

Object: Check
Name: negative(negative(2.0000000)) = 2.0000000
Status: passed
end

Object: Check
Name: zero?(-1.0000000)
Status: passed
end

Object: Check
Name: -1.0000000 * 1 = -1.0000000
Status: passed
end

Object: Check
Name: positive?(-1.0000000)
Status: passed
end

Object: Check
Name: negative?(-1.0000000)
Status: passed
end

Object: Check
Name: negative(negative(-1.0000000)) = -1.0000000
Status: passed
end

Object: Check
Name: zero?(-2.0000000)
Status: passed
end

Object: Check
Name: -2.0000000 * 1 = -2.0000000
Status: passed
end

Object: Check
Name: positive?(-2.0000000)
Status: passed
end

Object: Check
Name: negative?(-2.0000000)
Status: passed
end

Object: Check
Name: negative(negative(-2.0000000)) = -2.0000000
Status: passed
end

Object: Check
Name: zero?(1.5000000)
Status: passed
end

Object: Check
Name: 1.5000000 * 1 = 1.5000000
Status: passed
end

Object: Check
Name: positive?(1.5000000)
Status: passed
end

Object: Check
Name: negative?(1.5000000)
Status: passed
end

Object: Check
Name: negative(negative(1.5000000)) = 1.5000000
Status: passed
end

Object: Check
Name: zero?(-1.5000000)
Status: passed
end

Object: Check
Name: -1.5000000 * 1 = -1.5000000
Status: passed
end

Object: Check
Name: positive?(-1.5000000)
Status: passed
end

Object: Check
Name: negative?(-1.5000000)
Status: passed
end

Object: Check
Name: negative(negative(-1.5000000)) = -1.5000000
Status: passed
end

Object: Check
Name: Variable <float> is a class
Status: passed
end

Object: Check
Name: Variable <float> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<float>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <real> is a class
Status: passed
end

Object: Check
Name: Variable <real> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<real>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <complex> is a class
Status: passed
end

Object: Check
Name: Variable <complex> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<complex>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <number> is a class
Status: passed
end

Object: Check
Name: Variable <number> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<number>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <integer> is a class
Status: passed
end

Object: Check
Name: Variable <integer> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<integer>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: zero?(0)
Status: passed
end

Object: Check
Name: 0 * 1 = 0
Status: passed
end

Object: Check
Name: positive?(0)
Status: passed
end

Object: Check
Name: negative?(0)
Status: passed
end

Object: Check
Name: negative(negative(0)) = 0
Status: passed
end

Object: Check
Name: odd?(0)
Status: passed
end

Object: Check
Name: even?(0)
Status: passed
end

Object: Check
Name: zero?(1)
Status: passed
end

Object: Check
Name: 1 * 1 = 1
Status: passed
end

Object: Check
Name: positive?(1)
Status: passed
end

Object: Check
Name: negative?(1)
Status: passed
end

Object: Check
Name: negative(negative(1)) = 1
Status: passed
end

Object: Check
Name: odd?(1)
Status: passed
end

Object: Check
Name: even?(1)
Status: passed
end

Object: Check
Name: zero?(2)
Status: passed
end

Object: Check
Name: 2 * 1 = 2
Status: passed
end

Object: Check
Name: positive?(2)
Status: passed
end

Object: Check
Name: negative?(2)
Status: passed
end

Object: Check
Name: negative(negative(2)) = 2
Status: passed
end

Object: Check
Name: odd?(2)
Status: passed
end

Object: Check
Name: even?(2)
Status: passed
end

Object: Check
Name: zero?(-1)
Status: passed
end

Object: Check
Name: -1 * 1 = -1
Status: passed
end

Object: Check
Name: positive?(-1)
Status: passed
end

Object: Check
Name: negative?(-1)
Status: passed
end

Object: Check
Name: negative(negative(-1)) = -1
Status: passed
end

Object: Check
Name: odd?(-1)
Status: passed
end

Object: Check
Name: even?(-1)
Status: passed
end

Object: Check
Name: zero?(-2)
Status: passed
end

Object: Check
Name: -2 * 1 = -2
Status: passed
end

Object: Check
Name: positive?(-2)
Status: passed
end

Object: Check
Name: negative?(-2)
Status: passed
end

Object: Check
Name: negative(negative(-2)) = -2
Status: passed
end

Object: Check
Name: odd?(-2)
Status: passed
end

Object: Check
Name: even?(-2)
Status: passed
end
end

Object: Test
Name: arithmetic-protocol-functions-test
Status: passed

Object: Check
Name: Variable even? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable - is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ash is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable * is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ceiling/ is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable + is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable logbit? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable integral? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable floor/ is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable logand is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable negative? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable lognot is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable logxor is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable logior is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable truncate is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable round is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ceiling is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable positive? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable abs is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable modulo is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable floor is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable zero? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable gcd is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable ^ is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remainder is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable negative is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable lcm is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable odd? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable / is a generic-function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: arithmetic-protocol-macros-test
Status: passed
end
end

Object: Suite
Name: collections-protocol-test-suite
Status: failed

Object: Test
Name: collections-protocol-constants-test
Status: passed
end

Object: Test
Name: collections-protocol-variables-test
Status: passed
end

Object: Test
Name: collections-protocol-classes-test
Status: failed

Object: Check
Name: Variable <string> is a class
Status: passed
end

Object: Check
Name: Variable <string> has the correct superclasses
Status: passed
end

Object: Check
Name: make <string> with required arguments
Status: passed
end

Object: Check
Name: Empty <string> creation
Status: passed
end

Object: Check
Name: Empty <string> empty?
Status: passed
end

Object: Check
Name: Empty <string> size
Status: passed
end

Object: Check
Name: Empty <string> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <string> as <string>
Status: passed
end

Object: Check
Name: Empty <string> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <string> as <array>
Status: passed
end

Object: Check
Name: Empty <string> as <vector>
Status: passed
end

Object: Check
Name: Empty <string> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <string> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <string> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <string> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <string> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <string> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <string> any? always matching
Status: passed
end

Object: Check
Name: Empty <string> any? never matching
Status: passed
end

Object: Check
Name: Empty <string> every? always matching
Status: passed
end

Object: Check
Name: Empty <string> every? never matching
Status: passed
end

Object: Check
Name: Empty <string> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <string> element of size errors
Status: passed
end

Object: Check
Name: Empty <string> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Empty <string> key-sequence
Status: passed
end

Object: Check
Name: Empty <string> member? of non-member
Status: passed
end

Object: Check
Name: Empty <string> find-key failure
Status: passed
end

Object: Check
Name: Empty <string> find-key failure value
Status: passed
end

Object: Check
Name: Empty <string> empty?
Status: passed
end

Object: Check
Name: Empty <string> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <string> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <string> first generates an error
Status: passed
end

Object: Check
Name: Empty <string> second generates an error
Status: passed
end

Object: Check
Name: Empty <string> third generates an error
Status: passed
end

Object: Check
Name: Empty <string> copy-sequence
Status: passed
end

Object: Check
Name: Empty <string> reverse
Status: passed
end

Object: Check
Name: Empty <string> reverse!
Status: passed
end

Object: Check
Name: Empty <string> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <string> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <string> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <string> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <string> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <string> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <string> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <string> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <string> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <string> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <string> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <string> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <string> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <string> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <string> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <string> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <string> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <string> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <string> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <string> type-for-copy
Status: passed
end

Object: Check
Name: Empty <string> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <string> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <string> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <string> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <string> as-lowercase
Status: passed
end

Object: Check
Name: Empty <string> as-lowercase!
Status: passed
end

Object: Check
Name: Empty <string> as-uppercase
Status: passed
end

Object: Check
Name: Empty <string> as-uppercase!
Status: passed
end

Object: Check
Name: One item <string> creation
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: One item <string> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: One item <string> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Multiple item <string> creation
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Multiple item <string> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: Multiple item <string> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Variable <range> is a class
Status: passed
end

Object: Check
Name: Variable <range> has the correct superclasses
Status: passed
end

Object: Check
Name: make <range> with required arguments
Status: passed
end

Object: Check
Name: Empty <range> creation
Status: passed
end

Object: Check
Name: Empty <range> empty?
Status: passed
end

Object: Check
Name: Empty <range> size
Status: passed
end

Object: Check
Name: Empty <range> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <range> as <range>
Status: passed
end

Object: Check
Name: Empty <range> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <range> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <range> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <range> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <range> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <range> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <range> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <range> 'map-into' with identity
Status: passed
end

Object: Check
Name: Empty <range> any? always matching
Status: passed
end

Object: Check
Name: Empty <range> any? never matching
Status: passed
end

Object: Check
Name: Empty <range> every? always matching
Status: passed
end

Object: Check
Name: Empty <range> every? never matching
Status: passed
end

Object: Check
Name: Empty <range> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <range> element of size errors
Status: passed
end

Object: Check
Name: Empty <range> element default
Status: passed
end

Object: Check
Name: Empty <range> key-sequence
Status: passed
end

Object: Check
Name: Empty <range> member? of non-member
Status: passed
end

Object: Check
Name: Empty <range> find-key failure
Status: passed
end

Object: Check
Name: Empty <range> find-key failure value
Status: passed
end

Object: Check
Name: Empty <range> empty?
Status: passed
end

Object: Check
Name: Empty <range> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <range> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <range> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <range> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <range> first generates an error
Status: passed
end

Object: Check
Name: Empty <range> second generates an error
Status: passed
end

Object: Check
Name: Empty <range> third generates an error
Status: passed
end

Object: Check
Name: Empty <range> copy-sequence
Status: passed
end

Object: Check
Name: Empty <range> reverse
Status: passed
end

Object: Check
Name: Empty <range> reverse!
Status: passed
end

Object: Check
Name: Empty <range> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <range> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <range> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <range> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <range> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <range> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <range> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <range> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <range> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <range> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <range> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <range> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <range> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <range> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <range> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <range> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <range> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <range> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <range> 'last' generates an error
Status: passed
end

Object: Check
Name: One item <range> creation
Status: passed
end

Object: Check
Name: One item <range> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <range> of <integer> size
Status: passed
end

Object: Check
Name: One item <range> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <range> of <integer> as <range>
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'map-into' with identity
Status: passed
end

Object: Check
Name: One item <range> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <range> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <range> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <range> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <range> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <range> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <range> of <integer> element default
Status: passed
end

Object: Check
Name: One item <range> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <range> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <range> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <range> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <range> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <range> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <range> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <range> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <range> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <range> of <integer> first
Status: passed
end

Object: Check
Name: One item <range> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <range> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <range> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <range> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <range> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <range> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <range> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <range> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <range> creation
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> as <range>
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'map-into' with identity
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <range> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <range> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Variable <empty-list> is a class
Status: passed
end

Object: Check
Name: Variable <empty-list> has the correct superclasses
Status: passed
end

Object: Check
Name: make <empty-list> with required arguments
Status: passed
end

Object: Check
Name: Empty <empty-list> creation
Status: passed
end

Object: Check
Name: Empty <empty-list> empty?
Status: passed
end

Object: Check
Name: Empty <empty-list> size
Status: passed
end

Object: Check
Name: Empty <empty-list> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <empty-list> as <string>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <list>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <deque>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <array>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <empty-list> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <empty-list> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <empty-list> any? always matching
Status: passed
end

Object: Check
Name: Empty <empty-list> any? never matching
Status: passed
end

Object: Check
Name: Empty <empty-list> every? always matching
Status: passed
end

Object: Check
Name: Empty <empty-list> every? never matching
Status: passed
end

Object: Check
Name: Empty <empty-list> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <empty-list> element of size errors
Status: passed
end

Object: Check
Name: Empty <empty-list> element default
Status: passed
end

Object: Check
Name: Empty <empty-list> key-sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> member? of non-member
Status: passed
end

Object: Check
Name: Empty <empty-list> find-key failure
Status: passed
end

Object: Check
Name: Empty <empty-list> find-key failure value
Status: passed
end

Object: Check
Name: Empty <empty-list> empty?
Status: passed
end

Object: Check
Name: Empty <empty-list> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <list>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <empty-list> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <empty-list> first generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> second generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> third generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> copy-sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> reverse
Status: passed
end

Object: Check
Name: Empty <empty-list> reverse!
Status: passed
end

Object: Check
Name: Empty <empty-list> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <empty-list> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <empty-list> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <empty-list> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <empty-list> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <empty-list> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <empty-list> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> type-for-copy
Status: passed
end

Object: Check
Name: Empty <empty-list> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <empty-list> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <empty-list> creation
Status: passed
end

Object: Check
Name: Multiple item <empty-list> creation
Status: passed
end

Object: Check
Name: Variable <pair> is a class
Status: passed
end

Object: Check
Name: Variable <pair> has the correct superclasses
Status: passed
end

Object: Check
Name: make <pair> with required arguments
Status: passed
end

Object: Check
Name: pair(1, #()) as <pair>
Status: passed
end

Object: Check
Name: pair(1, #()) as <list>
Status: passed
end

Object: Check
Name: pair(1, #()) as <deque>
Status: passed
end

Object: Check
Name: pair(1, #()) as <stretchy-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) as <simple-object-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) as <simple-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) as <array>
Status: passed
end

Object: Check
Name: pair(1, #()) as <vector>
Status: passed
end

Object: Check
Name: pair(1, #()) 'do' using collection once
Status: passed
end

Object: Check
Name: pair(1, #()) 'do' using collection twice
Status: passed
end

Object: Check
Name: pair(1, #()) 'map' with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map' creates new collection
Status: passed
end

Object: Check
Name: pair(1, #()) 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <pair> with identity
Status: crashed
Reason: Taking size of an improper list
end

Object: Check
Name: pair(1, #()) 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: pair(1, #()) any? always matching
Status: passed
end

Object: Check
Name: pair(1, #()) any? never matching
Status: passed
end

Object: Check
Name: pair(1, #()) every? always matching
Status: passed
end

Object: Check
Name: pair(1, #()) every? never matching
Status: passed
end

Object: Check
Name: pair(1, #()) element of -1 errors
Status: passed
end

Object: Check
Name: pair(1, #()) element of size errors
Status: passed
end

Object: Check
Name: pair(1, #()) element default
Status: passed
end

Object: Check
Name: pair(1, #()) element 0
Status: passed
end

Object: Check
Name: pair(1, #()) key-sequence
Status: passed
end

Object: Check
Name: pair(1, #()) member? of non-member
Status: passed
end

Object: Check
Name: pair(1, #()) key 0 is member?
Status: passed
end

Object: Check
Name: pair(1, #()) key 0 is member? with failing test
Status: passed
end

Object: Check
Name: pair(1, #()) find-key failure
Status: passed
end

Object: Check
Name: pair(1, #()) find-key failure value
Status: passed
end

Object: Check
Name: pair(1, #()) find-key 1
Status: passed
end

Object: Check
Name: pair(1, #()) empty?
Status: passed
end

Object: Check
Name: pair(1, #()) shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: pair(1, #()) shallow-copy creates new object
Status: passed
end

Object: Check
Name: pair(1, #()) shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <list> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <list>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <list> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <deque>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <array> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <array>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <array> three times
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <vector>
Status: passed
end

Object: Check
Name: pair(1, #()) concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: pair(1, #()) first
Status: passed
end

Object: Check
Name: pair(1, #()) second generates an error
Status: passed
end

Object: Check
Name: pair(1, #()) third generates an error
Status: passed
end

Object: Check
Name: pair(1, #()) copy-sequence
Status: passed
end

Object: Check
Name: pair(1, #()) reverse didn't mutate original
Status: passed
end

Object: Check
Name: pair(1, #()) reverse
Status: passed
end

Object: Check
Name: pair(1, #()) reverse!
Status: passed
end

Object: Check
Name: pair(1, #()) sort copies if necessary
Status: passed
end

Object: Check
Name: pair(1, #()) sort returns a sequence
Status: passed
end

Object: Check
Name: pair(1, #()) sort all elements in order
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort copies if necessary
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort returns a sequence
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort all elements in order
Status: passed
end

Object: Check
Name: pair(1, #()) sort with > test copies if necessary
Status: passed
end

Object: Check
Name: pair(1, #()) sort with > test returns a sequence
Status: passed
end

Object: Check
Name: pair(1, #()) sort with > test all elements in order
Status: passed
end

Object: Check
Name: pair(1, #()) sort! copies if necessary
Status: passed
end

Object: Check
Name: pair(1, #()) sort! returns a sequence
Status: passed
end

Object: Check
Name: pair(1, #()) sort! all elements in order
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed pair(1, #()) sort! all elements in order
Status: passed
end

Object: Check
Name: pair(1, #()) sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: pair(1, #()) sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: pair(1, #()) sort! with > test all elements in order
Status: passed
end

Object: Check
Name: pair(1, #()) 'last' returns last item
Status: passed
end

Object: Check
Name: pair(1, #()) type-for-copy
Status: passed
end

Object: Check
Name: pair(1, #()) first-setter
Status: passed
end

Object: Check
Name: pair(1, #()) second-setter generates an error
Status: passed
end

Object: Check
Name: pair(1, #()) third-setter generates an error
Status: passed
end

Object: Check
Name: pair(1, #()) last
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <pair>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <list>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <deque>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <stretchy-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <simple-object-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <simple-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <array>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) as <vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'do' using collection once
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'do' using collection twice
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map' with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map' creates new collection
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <pair> with identity
Status: crashed
Reason: #f is not of type {<class>: <list>}
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) any? always matching
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) any? never matching
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) every? always matching
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) every? never matching
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element of -1 errors
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element of size errors
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element default
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element 0
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) element 1
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key-sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) member? of non-member
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key 0 is member?
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key 0 is member? with failing test
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key 1 is member?
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) key 1 is member? with failing test
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) find-key failure
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) find-key failure value
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) find-key 1
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) find-key 2
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) empty?
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) shallow-copy creates new object
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <list> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <list>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <list> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <deque>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <array> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <array>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <array> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <vector>
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) first
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) second
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) third generates an error
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) copy-sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) reverse didn't mutate original
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) reverse
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) reverse!
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort copies if necessary
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort returns a sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort all elements in order
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort copies if necessary
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort returns a sequence
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort all elements in order
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort with > test copies if necessary
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort with > test returns a sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort with > test all elements in order
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! copies if necessary
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! returns a sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! all elements in order
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed pair(1, pair(2, #())) sort! all elements in order
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) sort! with > test all elements in order
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) 'last' returns last item
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) type-for-copy
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) first-setter
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) second-setter
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) third-setter generates an error
Status: passed
end

Object: Check
Name: pair(1, pair(2, #())) last
Status: passed
end

Object: Check
Name: Test unit Non-list <pair> tests
Status: crashed
Reason: Taking size of an improper list
end

Object: Check
Name: Variable <list> is a class
Status: passed
end

Object: Check
Name: Variable <list> has the correct superclasses
Status: passed
end

Object: Check
Name: make <list> with required arguments
Status: passed
end

Object: Check
Name: Empty <list> creation
Status: passed
end

Object: Check
Name: Empty <list> empty?
Status: passed
end

Object: Check
Name: Empty <list> size
Status: passed
end

Object: Check
Name: Empty <list> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <list> as <string>
Status: passed
end

Object: Check
Name: Empty <list> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <list> as <list>
Status: passed
end

Object: Check
Name: Empty <list> as <deque>
Status: passed
end

Object: Check
Name: Empty <list> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <list> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <list> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <list> as <array>
Status: passed
end

Object: Check
Name: Empty <list> as <vector>
Status: passed
end

Object: Check
Name: Empty <list> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <list> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <list> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <list> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <list> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <list> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <list> any? always matching
Status: passed
end

Object: Check
Name: Empty <list> any? never matching
Status: passed
end

Object: Check
Name: Empty <list> every? always matching
Status: passed
end

Object: Check
Name: Empty <list> every? never matching
Status: passed
end

Object: Check
Name: Empty <list> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <list> element of size errors
Status: passed
end

Object: Check
Name: Empty <list> element default
Status: passed
end

Object: Check
Name: Empty <list> key-sequence
Status: passed
end

Object: Check
Name: Empty <list> member? of non-member
Status: passed
end

Object: Check
Name: Empty <list> find-key failure
Status: passed
end

Object: Check
Name: Empty <list> find-key failure value
Status: passed
end

Object: Check
Name: Empty <list> empty?
Status: passed
end

Object: Check
Name: Empty <list> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <list>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <list> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <list> first generates an error
Status: passed
end

Object: Check
Name: Empty <list> second generates an error
Status: passed
end

Object: Check
Name: Empty <list> third generates an error
Status: passed
end

Object: Check
Name: Empty <list> copy-sequence
Status: passed
end

Object: Check
Name: Empty <list> reverse
Status: passed
end

Object: Check
Name: Empty <list> reverse!
Status: passed
end

Object: Check
Name: Empty <list> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <list> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <list> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <list> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <list> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <list> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <list> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <list> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <list> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <list> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <list> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <list> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <list> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <list> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <list> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <list> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <list> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <list> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <list> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <list> type-for-copy
Status: passed
end

Object: Check
Name: Empty <list> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <list> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <list> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <list> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> creation
Status: passed
end

Object: Check
Name: One item <list> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <list> of <integer> size
Status: passed
end

Object: Check
Name: One item <list> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <pair>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <list>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <deque>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <list> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <pair> with identity
Status: crashed
Reason: Taking size of an improper list
end

Object: Check
Name: One item <list> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <list> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <list> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <list> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <list> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <list> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <list> of <integer> element default
Status: passed
end

Object: Check
Name: One item <list> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <list> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <list> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <list> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <list> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <list> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <list> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <list> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <list> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <list> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <list> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <integer> first
Status: passed
end

Object: Check
Name: One item <list> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <list> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <list> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <list> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <list> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <list> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <list> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <list> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> of <integer> last
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <pair>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <pair> with identity
Status: crashed
Reason: Taking size of an improper list
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <list> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <list> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <list> creation
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <pair>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <list>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <pair> with identity
Status: crashed
Reason: #f is not of type {<class>: <list>}
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <pair>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <pair> with identity
Status: crashed
Reason: #f is not of type {<class>: <list>}
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <list> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <list> of <byte-character> last
Status: passed
end

Object: Check
Name: Variable <deque> is a class
Status: passed
end

Object: Check
Name: Variable <deque> has the correct superclasses
Status: passed
end

Object: Check
Name: make <deque> with required arguments
Status: passed
end

Object: Check
Name: Empty <deque> creation
Status: passed
end

Object: Check
Name: Empty <deque> empty?
Status: passed
end

Object: Check
Name: Empty <deque> size
Status: passed
end

Object: Check
Name: Empty <deque> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <deque> as <string>
Status: passed
end

Object: Check
Name: Empty <deque> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <deque> as <list>
Status: passed
end

Object: Check
Name: Empty <deque> as <deque>
Status: passed
end

Object: Check
Name: Empty <deque> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <deque> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <deque> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <deque> as <array>
Status: passed
end

Object: Check
Name: Empty <deque> as <vector>
Status: passed
end

Object: Check
Name: Empty <deque> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <deque> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <deque> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <deque> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <deque> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <deque> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <deque> any? always matching
Status: passed
end

Object: Check
Name: Empty <deque> any? never matching
Status: passed
end

Object: Check
Name: Empty <deque> every? always matching
Status: passed
end

Object: Check
Name: Empty <deque> every? never matching
Status: passed
end

Object: Check
Name: Empty <deque> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <deque> element of size errors
Status: passed
end

Object: Check
Name: Empty <deque> element default
Status: passed
end

Object: Check
Name: Empty <deque> key-sequence
Status: passed
end

Object: Check
Name: Empty <deque> member? of non-member
Status: passed
end

Object: Check
Name: Empty <deque> find-key failure
Status: passed
end

Object: Check
Name: Empty <deque> find-key failure value
Status: passed
end

Object: Check
Name: Empty <deque> empty?
Status: passed
end

Object: Check
Name: Empty <deque> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <list>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <deque> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <deque> first generates an error
Status: passed
end

Object: Check
Name: Empty <deque> second generates an error
Status: passed
end

Object: Check
Name: Empty <deque> third generates an error
Status: passed
end

Object: Check
Name: Empty <deque> copy-sequence
Status: passed
end

Object: Check
Name: Empty <deque> reverse
Status: passed
end

Object: Check
Name: Empty <deque> reverse!
Status: passed
end

Object: Check
Name: Empty <deque> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <deque> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <deque> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <deque> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <deque> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <deque> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <deque> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <deque> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <deque> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <deque> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <deque> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <deque> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <deque> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <deque> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <deque> type-for-copy
Status: passed
end

Object: Check
Name: Empty <deque> first-setter
Status: passed
end

Object: Check
Name: Empty <deque> second-setter
Status: passed
end

Object: Check
Name: Empty <deque> third-setter
Status: passed
end

Object: Check
Name: Empty <deque> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <deque> resizes
Status: passed
end

Object: Check
Name: Empty <deque> emptied
Status: passed
end

Object: Check
Name: One item <deque> creation
Status: passed
end

Object: Check
Name: One item <deque> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <deque> of <integer> size
Status: passed
end

Object: Check
Name: One item <deque> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <list>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <deque>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <deque> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <deque> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <deque> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <deque> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <deque> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <deque> of <integer> element default
Status: passed
end

Object: Check
Name: One item <deque> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <deque> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <deque> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <deque> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <deque> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <deque> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <deque> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <deque> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <deque> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <deque> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <deque> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <integer> first
Status: passed
end

Object: Check
Name: One item <deque> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <deque> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <deque> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <deque> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <deque> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <deque> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <deque> of <integer> second-setter
Status: passed
end

Object: Check
Name: One item <deque> of <integer> third-setter
Status: passed
end

Object: Check
Name: One item <deque> of <integer> last
Status: passed
end

Object: Check
Name: One item <deque> of <integer> resizes
Status: passed
end

Object: Check
Name: One item <deque> of <integer> emptied
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> resizes
Status: passed
end

Object: Check
Name: One item <deque> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Multiple item <deque> creation
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <list>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> resizes
Status: passed
end

Object: Check
Name: Multiple item <deque> of <integer> emptied
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <list>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <deque>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <list> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <deque> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <list> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <list>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <list> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <deque> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <deque>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <deque> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <deque> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> resizes
Status: passed
end

Object: Check
Name: Multiple item <deque> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Variable <stretchy-vector> is a class
Status: passed
end

Object: Check
Name: Variable <stretchy-vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <stretchy-vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> creation
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> empty?
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> size
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> as <array>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> element default
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> empty?
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <stretchy-vector> identity
Status: failed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <stretchy-vector>
Status: failed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <stretchy-vector> three times
Status: failed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> reverse
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> reverse!
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <stretchy-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> first-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> second-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> third-setter
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> resizes
Status: passed
end

Object: Check
Name: Empty <stretchy-vector> emptied
Status: passed
end

Object: Check
Name: One item <stretchy-vector> creation
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> resizes
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <integer> emptied
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <stretchy-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> resizes
Status: passed
end

Object: Check
Name: One item <stretchy-vector> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> creation
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> resizes
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <integer> emptied
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map-as' <stretchy-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <stretchy-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <stretchy-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> resizes
Status: passed
end

Object: Check
Name: Multiple item <stretchy-vector> of <byte-character> emptied
Status: passed
end

Object: Check
Name: Variable <simple-object-vector> is a class
Status: passed
end

Object: Check
Name: Variable <simple-object-vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-object-vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> creation
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> empty?
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> size
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <array>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> element default
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> empty?
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> reverse
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> reverse!
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <simple-object-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-object-vector> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> creation
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-object-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> creation
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-object-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-object-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Variable <simple-vector> is a class
Status: passed
end

Object: Check
Name: Variable <simple-vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <simple-vector> creation
Status: passed
end

Object: Check
Name: Empty <simple-vector> empty?
Status: passed
end

Object: Check
Name: Empty <simple-vector> size
Status: passed
end

Object: Check
Name: Empty <simple-vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <array>
Status: passed
end

Object: Check
Name: Empty <simple-vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <simple-vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <simple-vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <simple-vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <simple-vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <simple-vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <simple-vector> element default
Status: passed
end

Object: Check
Name: Empty <simple-vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <simple-vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <simple-vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <simple-vector> empty?
Status: passed
end

Object: Check
Name: Empty <simple-vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <simple-vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <simple-vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> reverse
Status: passed
end

Object: Check
Name: Empty <simple-vector> reverse!
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <simple-vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <simple-vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <simple-vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <simple-vector> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <simple-vector> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> creation
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <simple-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <simple-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> creation
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <simple-vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <simple-vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Variable <array> is a class
Status: passed
end

Object: Check
Name: Variable <array> has the correct superclasses
Status: passed
end

Object: Check
Name: make <array> with required arguments
Status: passed
end

Object: Check
Name: Empty <array> creation
Status: passed
end

Object: Check
Name: Empty <array> empty?
Status: passed
end

Object: Check
Name: Empty <array> size
Status: passed
end

Object: Check
Name: Empty <array> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <array> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <array> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <array> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <array> as <array>
Status: passed
end

Object: Check
Name: Empty <array> as <vector>
Status: passed
end

Object: Check
Name: Empty <array> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <array> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <array> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <array> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <array> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <array> any? always matching
Status: passed
end

Object: Check
Name: Empty <array> any? never matching
Status: passed
end

Object: Check
Name: Empty <array> every? always matching
Status: passed
end

Object: Check
Name: Empty <array> every? never matching
Status: passed
end

Object: Check
Name: Empty <array> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <array> element of size errors
Status: passed
end

Object: Check
Name: Empty <array> element default
Status: passed
end

Object: Check
Name: Empty <array> key-sequence
Status: passed
end

Object: Check
Name: Empty <array> member? of non-member
Status: passed
end

Object: Check
Name: Empty <array> find-key failure
Status: passed
end

Object: Check
Name: Empty <array> find-key failure value
Status: passed
end

Object: Check
Name: Empty <array> empty?
Status: passed
end

Object: Check
Name: Empty <array> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <array> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <array> first generates an error
Status: passed
end

Object: Check
Name: Empty <array> second generates an error
Status: passed
end

Object: Check
Name: Empty <array> third generates an error
Status: passed
end

Object: Check
Name: Empty <array> copy-sequence
Status: passed
end

Object: Check
Name: Empty <array> reverse
Status: passed
end

Object: Check
Name: Empty <array> reverse!
Status: passed
end

Object: Check
Name: Empty <array> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <array> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <array> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <array> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <array> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <array> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <array> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <array> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <array> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <array> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <array> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <array> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <array> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <array> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <array> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <array> type-for-copy
Status: passed
end

Object: Check
Name: Empty <array> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <array> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <array> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <array> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> creation
Status: passed
end

Object: Check
Name: One item <array> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <array> of <integer> size
Status: passed
end

Object: Check
Name: One item <array> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <array> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <array> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <array> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <array> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <array> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <array> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <array> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <array> of <integer> element default
Status: passed
end

Object: Check
Name: One item <array> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <array> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <array> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <array> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <array> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <array> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <array> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <array> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <array> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <array> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <array> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <array> of <integer> first
Status: passed
end

Object: Check
Name: One item <array> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <array> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <array> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <array> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <array> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <array> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <array> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <array> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> of <integer> last
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: One item <array> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <array> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: One item <array> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Multiple item <array> creation
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Multiple item <array> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <array> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: Multiple item <array> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: 2x2 <array> as <array>
Status: passed
end

Object: Check
Name: 2x2 <array> 'do' using collection once
Status: passed
end

Object: Check
Name: 2x2 <array> 'do' using collection twice
Status: passed
end

Object: Check
Name: 2x2 <array> 'map' with identity
Status: passed
end

Object: Check
Name: 2x2 <array> 'map' creates new collection
Status: passed
end

Object: Check
Name: 2x2 <array> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: 2x2 <array> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: 2x2 <array> any? always matching
Status: passed
end

Object: Check
Name: 2x2 <array> any? never matching
Status: passed
end

Object: Check
Name: 2x2 <array> every? always matching
Status: passed
end

Object: Check
Name: 2x2 <array> every? never matching
Status: passed
end

Object: Check
Name: 2x2 <array> element of -1 errors
Status: passed
end

Object: Check
Name: 2x2 <array> element of size errors
Status: passed
end

Object: Check
Name: 2x2 <array> element default
Status: passed
end

Object: Check
Name: 2x2 <array> element 0
Status: passed
end

Object: Check
Name: 2x2 <array> element 1
Status: passed
end

Object: Check
Name: 2x2 <array> element 2
Status: passed
end

Object: Check
Name: 2x2 <array> element 3
Status: passed
end

Object: Check
Name: 2x2 <array> key-sequence
Status: passed
end

Object: Check
Name: 2x2 <array> member? of non-member
Status: passed
end

Object: Check
Name: 2x2 <array> key 0 is member?
Status: passed
end

Object: Check
Name: 2x2 <array> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: 2x2 <array> key 1 is member?
Status: passed
end

Object: Check
Name: 2x2 <array> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: 2x2 <array> key 2 is member?
Status: passed
end

Object: Check
Name: 2x2 <array> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: 2x2 <array> key 3 is member?
Status: passed
end

Object: Check
Name: 2x2 <array> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: 2x2 <array> find-key failure
Status: passed
end

Object: Check
Name: 2x2 <array> find-key failure value
Status: passed
end

Object: Check
Name: 2x2 <array> find-key 1
Status: passed
end

Object: Check
Name: 2x2 <array> find-key 2
Status: passed
end

Object: Check
Name: 2x2 <array> find-key 3
Status: passed
end

Object: Check
Name: 2x2 <array> find-key 4
Status: passed
end

Object: Check
Name: 2x2 <array> empty?
Status: passed
end

Object: Check
Name: 2x2 <array> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: 2x2 <array> shallow-copy creates new object
Status: passed
end

Object: Check
Name: 2x2 <array> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: 2x2 <array> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: 2x2 <array> concatenate-as <array>
Status: passed
end

Object: Check
Name: 2x2 <array> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: 2x2 <array> first
Status: passed
end

Object: Check
Name: 2x2 <array> second
Status: passed
end

Object: Check
Name: 2x2 <array> third
Status: passed
end

Object: Check
Name: 2x2 <array> copy-sequence
Status: passed
end

Object: Check
Name: 2x2 <array> reverse didn't mutate original
Status: passed
end

Object: Check
Name: 2x2 <array> reverse
Status: passed
end

Object: Check
Name: 2x2 <array> reverse!
Status: passed
end

Object: Check
Name: 2x2 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: 2x2 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: 2x2 <array> sort all elements in order
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort all elements in order
Status: passed
end

Object: Check
Name: 2x2 <array> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: 2x2 <array> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: 2x2 <array> sort with > test all elements in order
Status: passed
end

Object: Check
Name: 2x2 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: 2x2 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: 2x2 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed 2x2 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: 2x2 <array> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: 2x2 <array> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: 2x2 <array> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: 2x2 <array> 'last' returns last item
Status: passed
end

Object: Check
Name: 2x2 <array> type-for-copy
Status: passed
end

Object: Check
Name: 2x2 <array> first-setter
Status: passed
end

Object: Check
Name: 2x2 <array> second-setter
Status: passed
end

Object: Check
Name: 2x2 <array> third-setter
Status: passed
end

Object: Check
Name: 2x2 <array> last
Status: passed
end

Object: Check
Name: 5x5 <array> as <array>
Status: passed
end

Object: Check
Name: 5x5 <array> 'do' using collection once
Status: passed
end

Object: Check
Name: 5x5 <array> 'do' using collection twice
Status: passed
end

Object: Check
Name: 5x5 <array> 'map' with identity
Status: passed
end

Object: Check
Name: 5x5 <array> 'map' creates new collection
Status: passed
end

Object: Check
Name: 5x5 <array> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: 5x5 <array> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: 5x5 <array> any? always matching
Status: passed
end

Object: Check
Name: 5x5 <array> any? never matching
Status: passed
end

Object: Check
Name: 5x5 <array> every? always matching
Status: passed
end

Object: Check
Name: 5x5 <array> every? never matching
Status: passed
end

Object: Check
Name: 5x5 <array> element of -1 errors
Status: passed
end

Object: Check
Name: 5x5 <array> element of size errors
Status: passed
end

Object: Check
Name: 5x5 <array> element default
Status: passed
end

Object: Check
Name: 5x5 <array> element 0
Status: passed
end

Object: Check
Name: 5x5 <array> element 1
Status: passed
end

Object: Check
Name: 5x5 <array> element 2
Status: passed
end

Object: Check
Name: 5x5 <array> element 3
Status: passed
end

Object: Check
Name: 5x5 <array> element 4
Status: passed
end

Object: Check
Name: 5x5 <array> element 5
Status: passed
end

Object: Check
Name: 5x5 <array> element 6
Status: passed
end

Object: Check
Name: 5x5 <array> element 7
Status: passed
end

Object: Check
Name: 5x5 <array> element 8
Status: passed
end

Object: Check
Name: 5x5 <array> element 9
Status: passed
end

Object: Check
Name: 5x5 <array> element 10
Status: passed
end

Object: Check
Name: 5x5 <array> element 11
Status: passed
end

Object: Check
Name: 5x5 <array> element 12
Status: passed
end

Object: Check
Name: 5x5 <array> element 13
Status: passed
end

Object: Check
Name: 5x5 <array> element 14
Status: passed
end

Object: Check
Name: 5x5 <array> element 15
Status: passed
end

Object: Check
Name: 5x5 <array> element 16
Status: passed
end

Object: Check
Name: 5x5 <array> element 17
Status: passed
end

Object: Check
Name: 5x5 <array> element 18
Status: passed
end

Object: Check
Name: 5x5 <array> element 19
Status: passed
end

Object: Check
Name: 5x5 <array> element 20
Status: passed
end

Object: Check
Name: 5x5 <array> element 21
Status: passed
end

Object: Check
Name: 5x5 <array> element 22
Status: passed
end

Object: Check
Name: 5x5 <array> element 23
Status: passed
end

Object: Check
Name: 5x5 <array> element 24
Status: passed
end

Object: Check
Name: 5x5 <array> key-sequence
Status: passed
end

Object: Check
Name: 5x5 <array> member? of non-member
Status: passed
end

Object: Check
Name: 5x5 <array> key 0 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 1 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 2 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 3 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 4 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 5 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 5 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 6 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 6 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 7 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 7 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 8 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 8 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 9 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 9 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 10 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 10 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 11 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 11 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 12 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 12 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 13 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 13 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 14 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 14 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 15 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 15 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 16 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 16 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 17 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 17 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 18 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 18 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 19 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 19 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 20 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 20 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 21 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 21 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 22 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 22 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 23 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 23 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> key 24 is member?
Status: passed
end

Object: Check
Name: 5x5 <array> key 24 is member? with failing test
Status: passed
end

Object: Check
Name: 5x5 <array> find-key failure
Status: passed
end

Object: Check
Name: 5x5 <array> find-key failure value
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 1
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 2
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 3
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 4
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 5
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 6
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 7
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 8
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 9
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 10
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 11
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 12
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 13
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 14
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 15
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 16
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 17
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 18
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 19
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 20
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 21
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 22
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 23
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 24
Status: passed
end

Object: Check
Name: 5x5 <array> find-key 25
Status: passed
end

Object: Check
Name: 5x5 <array> empty?
Status: passed
end

Object: Check
Name: 5x5 <array> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: 5x5 <array> shallow-copy creates new object
Status: passed
end

Object: Check
Name: 5x5 <array> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: 5x5 <array> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: 5x5 <array> concatenate-as <array>
Status: passed
end

Object: Check
Name: 5x5 <array> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: 5x5 <array> first
Status: passed
end

Object: Check
Name: 5x5 <array> second
Status: passed
end

Object: Check
Name: 5x5 <array> third
Status: passed
end

Object: Check
Name: 5x5 <array> copy-sequence
Status: passed
end

Object: Check
Name: 5x5 <array> reverse didn't mutate original
Status: passed
end

Object: Check
Name: 5x5 <array> reverse
Status: passed
end

Object: Check
Name: 5x5 <array> reverse!
Status: passed
end

Object: Check
Name: 5x5 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: 5x5 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: 5x5 <array> sort all elements in order
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort all elements in order
Status: passed
end

Object: Check
Name: 5x5 <array> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: 5x5 <array> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: 5x5 <array> sort with > test all elements in order
Status: passed
end

Object: Check
Name: 5x5 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: 5x5 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: 5x5 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed 5x5 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: 5x5 <array> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: 5x5 <array> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: 5x5 <array> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: 5x5 <array> 'last' returns last item
Status: passed
end

Object: Check
Name: 5x5 <array> type-for-copy
Status: passed
end

Object: Check
Name: 5x5 <array> first-setter
Status: passed
end

Object: Check
Name: 5x5 <array> second-setter
Status: passed
end

Object: Check
Name: 5x5 <array> third-setter
Status: passed
end

Object: Check
Name: 5x5 <array> last
Status: passed
end

Object: Check
Name: 2x3x4 <array> as <array>
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'do' using collection once
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'do' using collection twice
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'map' with identity
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'map' creates new collection
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: 2x3x4 <array> any? always matching
Status: passed
end

Object: Check
Name: 2x3x4 <array> any? never matching
Status: passed
end

Object: Check
Name: 2x3x4 <array> every? always matching
Status: passed
end

Object: Check
Name: 2x3x4 <array> every? never matching
Status: passed
end

Object: Check
Name: 2x3x4 <array> element of -1 errors
Status: passed
end

Object: Check
Name: 2x3x4 <array> element of size errors
Status: passed
end

Object: Check
Name: 2x3x4 <array> element default
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 0
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 1
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 2
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 3
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 4
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 5
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 6
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 7
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 8
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 9
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 10
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 11
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 12
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 13
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 14
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 15
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 16
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 17
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 18
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 19
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 20
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 21
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 22
Status: passed
end

Object: Check
Name: 2x3x4 <array> element 23
Status: passed
end

Object: Check
Name: 2x3x4 <array> key-sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> member? of non-member
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 0 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 1 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 2 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 3 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 4 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 5 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 5 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 6 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 6 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 7 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 7 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 8 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 8 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 9 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 9 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 10 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 10 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 11 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 11 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 12 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 12 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 13 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 13 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 14 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 14 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 15 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 15 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 16 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 16 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 17 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 17 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 18 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 18 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 19 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 19 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 20 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 20 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 21 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 21 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 22 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 22 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 23 is member?
Status: passed
end

Object: Check
Name: 2x3x4 <array> key 23 is member? with failing test
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key failure
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key failure value
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 1
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 2
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 3
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 4
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 5
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 6
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 7
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 8
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 9
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 10
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 11
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 12
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 13
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 14
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 15
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 16
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 17
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 18
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 19
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 20
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 21
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 22
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 23
Status: passed
end

Object: Check
Name: 2x3x4 <array> find-key 24
Status: passed
end

Object: Check
Name: 2x3x4 <array> empty?
Status: passed
end

Object: Check
Name: 2x3x4 <array> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: 2x3x4 <array> shallow-copy creates new object
Status: passed
end

Object: Check
Name: 2x3x4 <array> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: 2x3x4 <array> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: 2x3x4 <array> concatenate-as <array>
Status: passed
end

Object: Check
Name: 2x3x4 <array> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: 2x3x4 <array> first
Status: passed
end

Object: Check
Name: 2x3x4 <array> second
Status: passed
end

Object: Check
Name: 2x3x4 <array> third
Status: passed
end

Object: Check
Name: 2x3x4 <array> copy-sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> reverse didn't mutate original
Status: passed
end

Object: Check
Name: 2x3x4 <array> reverse
Status: passed
end

Object: Check
Name: 2x3x4 <array> reverse!
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort all elements in order
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort all elements in order
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort with > test all elements in order
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed 2x3x4 <array> sort! all elements in order
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: 2x3x4 <array> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: 2x3x4 <array> 'last' returns last item
Status: passed
end

Object: Check
Name: 2x3x4 <array> type-for-copy
Status: passed
end

Object: Check
Name: 2x3x4 <array> first-setter
Status: passed
end

Object: Check
Name: 2x3x4 <array> second-setter
Status: passed
end

Object: Check
Name: 2x3x4 <array> third-setter
Status: passed
end

Object: Check
Name: 2x3x4 <array> last
Status: passed
end

Object: Check
Name: Variable <stretchy-collection> is a class
Status: passed
end

Object: Check
Name: Variable <stretchy-collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<stretchy-collection>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <mutable-sequence> is a class
Status: passed
end

Object: Check
Name: Variable <mutable-sequence> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<mutable-sequence>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <vector> is a class
Status: passed
end

Object: Check
Name: Variable <vector> has the correct superclasses
Status: passed
end

Object: Check
Name: make <vector> with required arguments
Status: passed
end

Object: Check
Name: Empty <vector> creation
Status: passed
end

Object: Check
Name: Empty <vector> empty?
Status: passed
end

Object: Check
Name: Empty <vector> size
Status: passed
end

Object: Check
Name: Empty <vector> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <vector> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <vector> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <vector> as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <vector> as <array>
Status: passed
end

Object: Check
Name: Empty <vector> as <vector>
Status: passed
end

Object: Check
Name: Empty <vector> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <vector> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <vector> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <vector> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <vector> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <vector> any? always matching
Status: passed
end

Object: Check
Name: Empty <vector> any? never matching
Status: passed
end

Object: Check
Name: Empty <vector> every? always matching
Status: passed
end

Object: Check
Name: Empty <vector> every? never matching
Status: passed
end

Object: Check
Name: Empty <vector> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <vector> element of size errors
Status: passed
end

Object: Check
Name: Empty <vector> element default
Status: passed
end

Object: Check
Name: Empty <vector> key-sequence
Status: passed
end

Object: Check
Name: Empty <vector> member? of non-member
Status: passed
end

Object: Check
Name: Empty <vector> find-key failure
Status: passed
end

Object: Check
Name: Empty <vector> find-key failure value
Status: passed
end

Object: Check
Name: Empty <vector> empty?
Status: passed
end

Object: Check
Name: Empty <vector> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <vector> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <vector> first generates an error
Status: passed
end

Object: Check
Name: Empty <vector> second generates an error
Status: passed
end

Object: Check
Name: Empty <vector> third generates an error
Status: passed
end

Object: Check
Name: Empty <vector> copy-sequence
Status: passed
end

Object: Check
Name: Empty <vector> reverse
Status: passed
end

Object: Check
Name: Empty <vector> reverse!
Status: passed
end

Object: Check
Name: Empty <vector> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <vector> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <vector> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <vector> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <vector> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <vector> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <vector> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <vector> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <vector> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <vector> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <vector> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <vector> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <vector> type-for-copy
Status: passed
end

Object: Check
Name: Empty <vector> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <vector> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <vector> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <vector> last-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> creation
Status: passed
end

Object: Check
Name: One item <vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <vector> of <integer> size
Status: passed
end

Object: Check
Name: One item <vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <vector> of <integer> element default
Status: passed
end

Object: Check
Name: One item <vector> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <vector> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <vector> of <integer> first
Status: passed
end

Object: Check
Name: One item <vector> of <integer> second generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <integer> third generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <vector> of <integer> reverse
Status: passed
end

Object: Check
Name: One item <vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: One item <vector> of <integer> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <integer> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <integer> last
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: One item <vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: One item <vector> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Multiple item <vector> creation
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> as <array>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map-as' <simple-object-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map-as' <simple-vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-object-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-object-vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-object-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-vector> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <simple-vector> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> first
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> second
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> third
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> reverse
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> reverse!
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <integer> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> first-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> second-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> third-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <integer> last
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <vector> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: Multiple item <vector> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Variable <mutable-collection> is a class
Status: passed
end

Object: Check
Name: Variable <mutable-collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<mutable-collection>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <sequence> is a class
Status: passed
end

Object: Check
Name: Variable <sequence> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<sequence>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: Variable <object-table> is a class
Status: passed
end

Object: Check
Name: Variable <object-table> has the correct superclasses
Status: passed
end

Object: Check
Name: make <object-table> with required arguments
Status: passed
end

Object: Check
Name: Empty <object-table> creation
Status: passed
end

Object: Check
Name: Empty <object-table> empty?
Status: passed
end

Object: Check
Name: Empty <object-table> size
Status: passed
end

Object: Check
Name: Empty <object-table> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <object-table> as <object-table>
Status: passed
end

Object: Check
Name: Empty <object-table> as <table>
Status: passed
end

Object: Check
Name: Empty <object-table> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <object-table> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Empty <object-table> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Empty <object-table> any? always matching
Status: passed
end

Object: Check
Name: Empty <object-table> any? never matching
Status: passed
end

Object: Check
Name: Empty <object-table> every? always matching
Status: passed
end

Object: Check
Name: Empty <object-table> every? never matching
Status: passed
end

Object: Check
Name: Empty <object-table> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <object-table> element of size errors
Status: passed
end

Object: Check
Name: Empty <object-table> element default
Status: passed
end

Object: Check
Name: Empty <object-table> key-sequence
Status: passed
end

Object: Check
Name: Empty <object-table> member? of non-member
Status: passed
end

Object: Check
Name: Empty <object-table> find-key failure
Status: passed
end

Object: Check
Name: Empty <object-table> find-key failure value
Status: passed
end

Object: Check
Name: Empty <object-table> empty?
Status: passed
end

Object: Check
Name: Empty <object-table> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> empty?
Status: passed
end

Object: Check
Name: Empty <object-table> size
Status: passed
end

Object: Check
Name: Empty <object-table> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <object-table> as <object-table>
Status: passed
end

Object: Check
Name: Empty <object-table> as <table>
Status: passed
end

Object: Check
Name: Empty <object-table> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <object-table> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <object-table> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Empty <object-table> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Empty <object-table> any? always matching
Status: passed
end

Object: Check
Name: Empty <object-table> any? never matching
Status: passed
end

Object: Check
Name: Empty <object-table> every? always matching
Status: passed
end

Object: Check
Name: Empty <object-table> every? never matching
Status: passed
end

Object: Check
Name: Empty <object-table> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <object-table> element of size errors
Status: passed
end

Object: Check
Name: Empty <object-table> element default
Status: passed
end

Object: Check
Name: Empty <object-table> key-sequence
Status: passed
end

Object: Check
Name: Empty <object-table> member? of non-member
Status: passed
end

Object: Check
Name: Empty <object-table> find-key failure
Status: passed
end

Object: Check
Name: Empty <object-table> find-key failure value
Status: passed
end

Object: Check
Name: Empty <object-table> empty?
Status: passed
end

Object: Check
Name: Empty <object-table> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <object-table> type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> creation
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> size
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> as <object-table>
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> as <table>
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> element default
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <object-table> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> as <object-table>
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> as <table>
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <object-table> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> creation
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> as <object-table>
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> as <table>
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> as <object-table>
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> as <table>
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <object-table> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Variable <mutable-explicit-key-collection> is a class
Status: passed
end

Object: Check
Name: Variable <mutable-explicit-key-collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<mutable-explicit-key-collection>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <explicit-key-collection> is a class
Status: passed
end

Object: Check
Name: Variable <explicit-key-collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<explicit-key-collection>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <collection> is a class
Status: passed
end

Object: Check
Name: Variable <collection> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<collection>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: Variable <table> is a class
Status: passed
end

Object: Check
Name: Variable <table> has the correct superclasses
Status: passed
end

Object: Check
Name: make <table> with required arguments
Status: passed
end

Object: Check
Name: Empty <table> creation
Status: passed
end

Object: Check
Name: Empty <table> empty?
Status: passed
end

Object: Check
Name: Empty <table> size
Status: passed
end

Object: Check
Name: Empty <table> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <table> as <object-table>
Status: passed
end

Object: Check
Name: Empty <table> as <table>
Status: passed
end

Object: Check
Name: Empty <table> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <table> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <table> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <table> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <table> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Empty <table> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Empty <table> any? always matching
Status: passed
end

Object: Check
Name: Empty <table> any? never matching
Status: passed
end

Object: Check
Name: Empty <table> every? always matching
Status: passed
end

Object: Check
Name: Empty <table> every? never matching
Status: passed
end

Object: Check
Name: Empty <table> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <table> element of size errors
Status: passed
end

Object: Check
Name: Empty <table> element default
Status: passed
end

Object: Check
Name: Empty <table> key-sequence
Status: passed
end

Object: Check
Name: Empty <table> member? of non-member
Status: passed
end

Object: Check
Name: Empty <table> find-key failure
Status: passed
end

Object: Check
Name: Empty <table> find-key failure value
Status: passed
end

Object: Check
Name: Empty <table> empty?
Status: passed
end

Object: Check
Name: Empty <table> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> empty?
Status: passed
end

Object: Check
Name: Empty <table> size
Status: passed
end

Object: Check
Name: Empty <table> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <table> as <object-table>
Status: passed
end

Object: Check
Name: Empty <table> as <table>
Status: passed
end

Object: Check
Name: Empty <table> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <table> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <table> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <table> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <table> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Empty <table> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Empty <table> any? always matching
Status: passed
end

Object: Check
Name: Empty <table> any? never matching
Status: passed
end

Object: Check
Name: Empty <table> every? always matching
Status: passed
end

Object: Check
Name: Empty <table> every? never matching
Status: passed
end

Object: Check
Name: Empty <table> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <table> element of size errors
Status: passed
end

Object: Check
Name: Empty <table> element default
Status: passed
end

Object: Check
Name: Empty <table> key-sequence
Status: passed
end

Object: Check
Name: Empty <table> member? of non-member
Status: passed
end

Object: Check
Name: Empty <table> find-key failure
Status: passed
end

Object: Check
Name: Empty <table> find-key failure value
Status: passed
end

Object: Check
Name: Empty <table> empty?
Status: passed
end

Object: Check
Name: Empty <table> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <table> type-for-copy
Status: passed
end

Object: Check
Name: One item <table> creation
Status: passed
end

Object: Check
Name: One item <table> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <table> of <integer> size
Status: passed
end

Object: Check
Name: One item <table> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: One item <table> of <integer> as <object-table>
Status: passed
end

Object: Check
Name: One item <table> of <integer> as <table>
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: One item <table> of <integer> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: One item <table> of <integer> any? always matching
Status: passed
end

Object: Check
Name: One item <table> of <integer> any? never matching
Status: passed
end

Object: Check
Name: One item <table> of <integer> every? always matching
Status: passed
end

Object: Check
Name: One item <table> of <integer> every? never matching
Status: passed
end

Object: Check
Name: One item <table> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: One item <table> of <integer> element of size errors
Status: passed
end

Object: Check
Name: One item <table> of <integer> element default
Status: passed
end

Object: Check
Name: One item <table> of <integer> element 0
Status: passed
end

Object: Check
Name: One item <table> of <integer> key-sequence
Status: passed
end

Object: Check
Name: One item <table> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: One item <table> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: One item <table> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <table> of <integer> find-key failure
Status: passed
end

Object: Check
Name: One item <table> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: One item <table> of <integer> find-key 1
Status: passed
end

Object: Check
Name: One item <table> of <integer> empty?
Status: passed
end

Object: Check
Name: One item <table> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <table> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <table> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> as <object-table>
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> as <table>
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> element default
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <table> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> creation
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> size
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> as <object-table>
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> as <table>
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element default
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 4
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 3
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 2
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 1
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> element 0
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 5
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 4
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 3
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 2
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> find-key 1
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> empty?
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <table> of <integer> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> as <object-table>
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> as <table>
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map-as' <object-table> with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> 'map-as' <table> with identity
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element default
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <table> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Variable <byte-string> is a class
Status: passed
end

Object: Check
Name: Variable <byte-string> has the correct superclasses
Status: passed
end

Object: Check
Name: make <byte-string> with required arguments
Status: passed
end

Object: Check
Name: Empty <byte-string> creation
Status: passed
end

Object: Check
Name: Empty <byte-string> empty?
Status: passed
end

Object: Check
Name: Empty <byte-string> size
Status: passed
end

Object: Check
Name: Empty <byte-string> = shallow-copy
Status: passed
end

Object: Check
Name: Empty <byte-string> as <string>
Status: passed
end

Object: Check
Name: Empty <byte-string> as <empty-list>
Status: passed
end

Object: Check
Name: Empty <byte-string> as <array>
Status: passed
end

Object: Check
Name: Empty <byte-string> as <vector>
Status: passed
end

Object: Check
Name: Empty <byte-string> as <byte-string>
Status: passed
end

Object: Check
Name: Empty <byte-string> 'do' using collection once
Status: passed
end

Object: Check
Name: Empty <byte-string> 'do' using collection twice
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map' with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map' creates new collection
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <empty-list> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Empty <byte-string> any? always matching
Status: passed
end

Object: Check
Name: Empty <byte-string> any? never matching
Status: passed
end

Object: Check
Name: Empty <byte-string> every? always matching
Status: passed
end

Object: Check
Name: Empty <byte-string> every? never matching
Status: passed
end

Object: Check
Name: Empty <byte-string> element of -1 errors
Status: passed
end

Object: Check
Name: Empty <byte-string> element of size errors
Status: passed
end

Object: Check
Name: Empty <byte-string> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Empty <byte-string> key-sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> member? of non-member
Status: passed
end

Object: Check
Name: Empty <byte-string> find-key failure
Status: passed
end

Object: Check
Name: Empty <byte-string> find-key failure value
Status: passed
end

Object: Check
Name: Empty <byte-string> empty?
Status: passed
end

Object: Check
Name: Empty <byte-string> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <string>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <empty-list> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <empty-list>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <empty-list> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <array>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Empty <byte-string> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Empty <byte-string> first generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> second generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> third generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> copy-sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> reverse
Status: passed
end

Object: Check
Name: Empty <byte-string> reverse!
Status: passed
end

Object: Check
Name: Empty <byte-string> sort copies if necessary
Status: passed
end

Object: Check
Name: Empty <byte-string> sort returns a sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort all elements in order
Status: passed
end

Object: Check
Name: Empty <byte-string> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <byte-string> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! copies if necessary
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! returns a sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Empty <byte-string> sort! all elements in order
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Empty <byte-string> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Empty <byte-string> 'last' generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> type-for-copy
Status: passed
end

Object: Check
Name: Empty <byte-string> first-setter generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> second-setter generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> third-setter generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> last-setter generates an error
Status: passed
end

Object: Check
Name: Empty <byte-string> as-lowercase
Status: passed
end

Object: Check
Name: Empty <byte-string> as-lowercase!
Status: passed
end

Object: Check
Name: Empty <byte-string> as-uppercase
Status: passed
end

Object: Check
Name: Empty <byte-string> as-uppercase!
Status: passed
end

Object: Check
Name: One item <byte-string> creation
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> size
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: One item <byte-string> of <byte-character> element 0
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> first
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> second generates an error
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> third generates an error
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> reverse
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed One item <byte-string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> second-setter generates an error
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> third-setter generates an error
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> last
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: One item <byte-string> of <byte-character> as-uppercase!
Status: passed
end

Object: Check
Name: Multiple item <byte-string> creation
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> size
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> = shallow-copy
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as <string>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as <array>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as <vector>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'do' using collection once
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'do' using collection twice
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map' with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map' creates new collection
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map' uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map-as' <string> with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map-as' <array> with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map-as' <vector> with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'map-as' <byte-string> with identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> any? always matching
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> any? never matching
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> every? always matching
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> every? never matching
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element of -1 errors
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element of size errors
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element default
Status: crashed
Reason: #"wrong-default-type" is not of type {<union>: #f, <byte-character>}
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 0
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 1
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 2
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 3
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> element 4
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key-sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> member? of non-member
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 0 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 0 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 1 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 1 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 2 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 2 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 3 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 3 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 4 is member?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> key 4 is member? with failing test
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key failure
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key failure value
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'a'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'b'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'c'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'd'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> find-key 'e'
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> empty?
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> shallow-copy uses type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> shallow-copy creates new object
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> shallow-copy creates correct elements
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <string> identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <string>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <string> three times
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <array> identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <array>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <array> three times
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <vector> identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <vector>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <vector> three times
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <byte-string> identity
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <byte-string>
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> concatenate-as <byte-string> three times
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> first
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> second
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> third
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> copy-sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> reverse didn't mutate original
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> reverse
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> reverse!
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort all elements in order
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort! copies if necessary
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort! returns a sequence
Status: passed
end

Object: Check
Name: reversed Multiple item <byte-string> of <byte-character> sort! all elements in order
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! with > test copies if necessary
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! with > test returns a sequence
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> sort! with > test all elements in order
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> 'last' returns last item
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> type-for-copy
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> first-setter
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> second-setter
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> third-setter
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> last
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-lowercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-lowercase
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-lowercase!
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-uppercase not destructive
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-uppercase
Status: passed
end

Object: Check
Name: Multiple item <byte-string> of <byte-character> as-uppercase!
Status: passed
end
end

Object: Test
Name: collections-protocol-functions-test
Status: passed

Object: Check
Name: Variable table-protocol is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable map is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable copy-sequence is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable reverse! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable sort is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable replace-elements! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable first-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable third is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable forward-iteration-protocol is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable reverse is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable fill! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pop-last is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable second is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable backward-iteration-protocol is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable first is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable aref-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-key! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable pop is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable push-last is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable aref is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable find-key is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable element-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable member? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable object-hash is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable choose-by is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable push is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable key-sequence is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable choose is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable subsequence-position is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable key-test is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable size is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable reduce1 is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add-new is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable concatenate-as is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable reduce is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable dimension is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable element is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable tail is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable concatenate is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable every? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable row-major-index is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable add-new! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-duplicates! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable any? is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable rank is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable head-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable size-setter is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable remove-duplicates is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable map-into is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable head is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable tail-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable dimensions is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable map-as is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable replace-subsequence! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable union is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable last-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable intersection is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable empty? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable last is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable merge-hash-ids is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable third-setter is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable sort! is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable second-setter is a function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: collections-protocol-macros-test
Status: passed
end
end

Object: Suite
Name: conditions-protocol-test-suite
Status: failed

Object: Test
Name: conditions-protocol-constants-test
Status: passed
end

Object: Test
Name: conditions-protocol-variables-test
Status: passed
end

Object: Test
Name: conditions-protocol-classes-test
Status: failed

Object: Check
Name: Variable <warning> is a class
Status: passed
end

Object: Check
Name: Variable <warning> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<warning>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <type-error> is a class
Status: passed
end

Object: Check
Name: Variable <type-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make <type-error> with required arguments
Status: passed
end

Object: Check
Name: Variable <simple-warning> is a class
Status: passed
end

Object: Check
Name: Variable <simple-warning> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-warning> with required arguments
Status: passed
end

Object: Check
Name: <simple-warning> condition-format-string matches specified format string
Status: passed
end

Object: Check
Name: <simple-warning> condition-format-arguments match specified format arguments
Status: passed
end

Object: Check
Name: Variable <simple-error> is a class
Status: passed
end

Object: Check
Name: Variable <simple-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-error> with required arguments
Status: passed
end

Object: Check
Name: <simple-error> condition-format-string matches specified format string
Status: passed
end

Object: Check
Name: <simple-error> condition-format-arguments match specified format arguments
Status: passed
end

Object: Check
Name: Variable <serious-condition> is a class
Status: passed
end

Object: Check
Name: Variable <serious-condition> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<serious-condition>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <sealed-object-error> is a class
Status: passed
end

Object: Check
Name: Variable <sealed-object-error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<sealed-object-error>) errors because not instantiable
Status: failed
Reason: expected condition not signaled
end

Object: Check
Name: Variable <error> is a class
Status: passed
end

Object: Check
Name: Variable <error> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<error>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <simple-restart> is a class
Status: passed
end

Object: Check
Name: Variable <simple-restart> has the correct superclasses
Status: passed
end

Object: Check
Name: make <simple-restart> with required arguments
Status: passed
end

Object: Check
Name: <simple-restart> condition-format-string matches specified format string
Status: passed
end

Object: Check
Name: <simple-restart> condition-format-arguments match specified format arguments
Status: passed
end

Object: Check
Name: Variable <restart> is a class
Status: passed
end

Object: Check
Name: Variable <restart> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<restart>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <condition> is a class
Status: passed
end

Object: Check
Name: Variable <condition> has the correct superclasses
Status: passed
end

Object: Check
Name: make(<condition>) errors because not instantiable
Status: passed
end

Object: Check
Name: Variable <abort> is a class
Status: passed
end

Object: Check
Name: Variable <abort> has the correct superclasses
Status: passed
end

Object: Check
Name: make <abort> with required arguments
Status: passed
end
end

Object: Test
Name: conditions-protocol-functions-test
Status: passed

Object: Check
Name: Variable default-handler is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-error-expected-type is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable type-error-value is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable abort is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable check-type is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable break is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable condition-format-arguments is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable condition-format-string is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable cerror is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable return-description is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable error is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable return-allowed? is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable signal is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable do-handlers is a function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable return-query is a generic-function and all of its specializer types are bound
Status: passed
end

Object: Check
Name: Variable restart-query is a generic-function and all of its specializer types are bound
Status: passed
end
end

Object: Test
Name: conditions-protocol-macros-test
Status: passed
end
end

Object: Suite
Name: dylan-extensions-protocol-test-suite
Status: passed

Object: Test
Name: dylan-extensions-protocol-constants-test
Status: passed

Object: Check
Name: Constant $maximum-integer has the correct type
Status: passed
end

Object: Check
Name: $maximum-integer + 1 overflows
Status: passed
end

Object: Check
Name: Constant $minimum-integer has the correct type
Status: passed
end

Object: Check
Name: $minimum-integer - 1 overflows
Status: passed
end
end

Object: Test
Name: dylan-extensions-protocol-variables-test
Status: passed
end

Object: Test
Name: dylan-extensions-protocol-classes-test
Status: passed
end

Object: Test
Name: dylan-extensions-protocol-functions-test
Status: passed
end

Object: Test
Name: dylan-extensions-protocol-macros-test
Status: passed
end
end
end
end

--------End Log Report---------


dylan-test-suite failed
  dylan-module-test-suite failed
    dylan-protocol-test-suite failed
      dylan-protocol-classes-test failed
        make(<method>) errors because not instantiable failed [expected condition not signaled]
        make(<boolean>) errors because not instantiable failed [expected condition not signaled]
    arithmetic-protocol-test-suite failed
      arithmetic-protocol-classes-test failed
        make(<integer>) errors because not instantiable failed [expected condition not signaled]
    collections-protocol-test-suite failed
      collections-protocol-classes-test failed
        Empty <string> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        One item <string> of <byte-character> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        Multiple item <string> of <byte-character> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        pair(1, #()) 'map-as' <pair> with identity crashed [Taking size of an improper list]
        pair(1, pair(2, #())) 'map-as' <pair> with identity crashed [#f is not of type {<class>: <list>}]
        Test unit Non-list <pair> tests crashed [Taking size of an improper list]
        One item <list> of <integer> 'map-as' <pair> with identity crashed [Taking size of an improper list]
        One item <list> of <byte-character> 'map-as' <pair> with identity crashed [Taking size of an improper list]
        Multiple item <list> of <integer> 'map-as' <pair> with identity crashed [#f is not of type {<class>: <list>}]
        Multiple item <list> of <byte-character> 'map-as' <pair> with identity crashed [#f is not of type {<class>: <list>}]
        Empty <stretchy-vector> concatenate-as <stretchy-vector> identity failed
        Empty <stretchy-vector> concatenate-as <stretchy-vector> failed
        Empty <stretchy-vector> concatenate-as <stretchy-vector> three times failed
        One item <array> of <byte-character> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        Multiple item <array> of <byte-character> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        One item <vector> of <byte-character> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        Multiple item <vector> of <byte-character> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        make(<sequence>) errors because not instantiable failed [expected condition not signaled]
        make(<collection>) errors because not instantiable failed [expected condition not signaled]
        Empty <byte-string> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        One item <byte-string> of <byte-character> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
        Multiple item <byte-string> of <byte-character> element default crashed [#"wrong-default-type" is not of type {<union>: #f, <byte-character>}]
    conditions-protocol-test-suite failed
      conditions-protocol-classes-test failed
        make(<sealed-object-error>) errors because not instantiable failed [expected condition not signaled]

dylan-test-suite summary:
  Ran 7 suites: 1 passed (14.3%), 6 failed, 0 not executed, 0 crashed
  Ran 25 tests: 21 passed (84.0%), 4 failed, 0 not executed, 0 crashed
  Ran 5521 checks: 5495 passed (99.6%), 9 failed, 0 not executed, 17 crashed
Test run took 1 second, 891718 microseconds.
