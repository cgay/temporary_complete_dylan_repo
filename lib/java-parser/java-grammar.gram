module: java-parser

define parser java-parser

start:
  compilation-unit => arg$1;;

compilation-unit:
  package-declaration-opt rev-import-declarations-opt rev-type-declarations-opt EOF
  => make(<compilation-unit>,
	  package: arg$1,
	  imports: rev-imports(arg$2),
	  types: rev-type-declarations(arg$3));;


package-declaration-opt: => #f;;
  %package rev-name %semi-colon => qualified-name(arg$2);;

rev-import-declarations-opt: => #();;
  rev-import-declarations-opt import-declaration => pair(arg$2, arg$1);;

rev-type-declarations-opt: => #();;
  rev-type-declarations-opt type-declaration
   => if (arg$2) pair(arg$2, arg$1) else arg$1 end;;

import-declaration:
  %import rev-name %semi-colon
   => make(<type-import>, name: qualified-name(arg$2));;
  %import rev-name %dot %* %semi-colon
   => make(<package-import>, name: qualified-name(arg$2));;

type-declaration:
  class-declaration => arg$1;;
  interface-declaration => arg$1;;
  %semi-colon => #f;;

class-declaration:
  modifiers-opt %class identifier super-opt interfaces-opt class-body
   => make(<class-declaration>,
	   modifiers: arg$1,
	   name: arg$3,
	   super: arg$4,
           interfaces: arg$5,
           body: arg$6);;

super-opt: => #f;;
  %extends rev-name => qualified-name(arg$2);;

interfaces-opt: => rev-names(#());;
  %implements rev-name-list => rev-names(arg$2);;

class-body:
  %lbrace rev-class-body-declarations-opt %rbrace
   => rev-body-declarations(arg$2);;

rev-class-body-declarations-opt: => #();;
  rev-class-body-declarations-opt class-body-declaration
   => if (arg$2) pair(arg$2, arg$1) else arg$1 end;;

class-body-declaration:
  field-declaration => arg$1;;
  method-declaration => arg$1;;
  static-initializer => arg$1;;
  constructor-declaration => arg$1;;
  %semi-colon => #f;;

static-initializer:
  %static %lbrace %rbrace
   => make(<static-initializer>,
	 body: make(<block>, statements: rev-block-statements(#())));;
  %static %lbrace rev-block-statements %rbrace
   => make(<static-initializer>,
	 body: make(<block>, statements: rev-block-statements(arg$3)));;

field-declaration:
  type rev-variable-declarators %semi-colon
   => make(<field-declaration>,
	   modifiers: 0,
	   type: arg$1,
	   declarators: rev-variable-declarators(arg$2));;
  modifiers type rev-variable-declarators %semi-colon
   => make(<field-declaration>,
	   modifiers: arg$1,
	   type: arg$2,
	   declarators: rev-variable-declarators(arg$3));;

constructor-declaration:
  identifier %lparen rev-formal-parameter-list-opt %rparen
    throws-opt
    %lbrace %rbrace
   => make(<constructor-declaration>,
	   modifiers: 0,
	   name: #f,
	   parameters: rev-formal-parameters(arg$3),
	   throws: arg$5,
	   type: make(<reference-type>, name: arg$1, numdims: 0),
	   body: make(<block>, statements: rev-block-statements(#())));;
  identifier %lparen rev-formal-parameter-list-opt %rparen
    throws-opt
    %lbrace rev-block-statements %rbrace
   => make(<constructor-declaration>,
	   modifiers: 0,
	   name: #f,
	   parameters: rev-formal-parameters(arg$3),
	   throws: arg$5,
	   type: make(<reference-type>, name: arg$1, numdims: 0),
	   body: make(<block>, statements: rev-block-statements(arg$7)));;
  identifier %lparen rev-formal-parameter-list-opt %rparen
    throws-opt
    %lbrace explicit-constructor-invocation %rbrace
   => make(<constructor-declaration>,
	   modifiers: 0,
	   name: #f,
	   parameters: rev-formal-parameters(arg$3),
	   throws: arg$5,
	   type: make(<reference-type>, name: arg$1, numdims: 0),
	   body: make(<block>, statements: rev-block-statements(list(arg$7))));;
  identifier %lparen rev-formal-parameter-list-opt %rparen
    throws-opt
    %lbrace explicit-constructor-invocation rev-block-statements %rbrace
   => make(<constructor-declaration>,
	   modifiers: 0,
	   name: #f,
	   parameters: rev-formal-parameters(arg$3),
	   throws: arg$5,
	   type: make(<reference-type>, name: arg$1, numdims: 0),
	   body: make(<block>, statements: rev-block-statements(concatenate(arg$8, list(arg$7)))));;
  modifiers identifier %lparen rev-formal-parameter-list-opt %rparen
    throws-opt
    %lbrace %rbrace
   => make(<constructor-declaration>,
	   modifiers: arg$1,
	   name: #f,
	   parameters: rev-formal-parameters(arg$4),
	   throws: arg$6,
	   type: make(<reference-type>, name: arg$2, numdims: 0),
	   body: make(<block>, statements: rev-block-statements(#())));;
  modifiers identifier %lparen rev-formal-parameter-list-opt %rparen
    throws-opt
    %lbrace rev-block-statements %rbrace
   => make(<constructor-declaration>,
	   modifiers: arg$1,
	   name: #f,
	   parameters: rev-formal-parameters(arg$4),
	   throws: arg$6,
	   type: make(<reference-type>, name: arg$2, numdims: 0),
	   body: make(<block>, statements: rev-block-statements(arg$8)));;
  modifiers identifier %lparen rev-formal-parameter-list-opt %rparen
    throws-opt
    %lbrace explicit-constructor-invocation %rbrace
   => make(<constructor-declaration>,
	   modifiers: arg$1,
	   name: #f,
	   parameters: rev-formal-parameters(arg$4),
	   throws: arg$6,
	   type: make(<reference-type>, name: arg$2, numdims: 0),
	   body: make(<block>, statements: rev-block-statements(list(arg$8))));;
  modifiers identifier %lparen rev-formal-parameter-list-opt %rparen
    throws-opt
    %lbrace explicit-constructor-invocation rev-block-statements %rbrace
   => make(<constructor-declaration>,
	   modifiers: arg$1,
	   name: #f,
	   parameters: rev-formal-parameters(arg$4),
	   throws: arg$6,
	   type: make(<reference-type>, name: arg$2, numdims: 0),
	   body: make(<block>, statements: rev-block-statements(concatenate(arg$9, list(arg$8)))));;

method-declaration:
  method-header-vec block
   => let (mods, name, params, throws, type, numdims) = apply(values, arg$1);
      make(<method-declaration>,
	   modifiers: mods,
	   name: name,
	   parameters: rev-formal-parameters(params),
	   throws: throws,
	   type: if (numdims == 0) type
	         else
		   // Supposedly this is obsolete, so shouldn't happen too much
	           let (n, d) = if (instance?(type, <reference-type>))
			          values(type.type-name, type.type-numdims)
			        else
				  values(type, 0)
				end;
		   make(<reference-type>, name: n, numdims: numdims + d)
		 end,
	   body: arg$2);;
  abstract-method-declaration => arg$1;;

abstract-method-declaration:
  method-header-vec %semi-colon
   => let (mods, name, params, throws, type, numdims) = apply(values, arg$1);
      make(<abstract-method-declaration>,
	   modifiers: mods,
	   name: name,
	   parameters: rev-formal-parameters(params),
	   throws: throws,
	   type: if (numdims == 0) type
	         else
		   // Supposedly this is obsolete, so shouldn't happen too much
	           let (n, d) = if (instance?(type, <reference-type>))
			          values(type.type-name, type.type-numdims)
			        else
				  values(type, 0)
				end;
		   make(<reference-type>, name: n, numdims: numdims + d)
		 end);;

// Note: don't merge type and %void, due to ambiguity with field declaration.
method-header-vec:
  type identifier %lparen %rparen dims-opt throws-opt
   => vector(0, arg$2, #(), arg$6, arg$1, arg$5);;
  type identifier %lparen rev-formal-parameter-list %rparen dims-opt throws-opt
   => vector(0, arg$2, arg$4, arg$7, arg$1, arg$6);;
  modifiers
   type identifier %lparen rev-formal-parameter-list-opt %rparen dims-opt throws-opt
   => vector(arg$1, arg$3, arg$5, arg$8, arg$2, arg$7);;
  %void identifier %lparen rev-formal-parameter-list-opt %rparen throws-opt
   => vector(0, arg$2, arg$4, arg$6, #f, 0);;
  modifiers
   %void identifier %lparen rev-formal-parameter-list-opt %rparen throws-opt
   => vector(arg$1, arg$3, arg$5, arg$7, #f, 0)	;;

rev-variable-declarators:
  variable-declarator => list(arg$1);;
  rev-variable-declarators %comma variable-declarator => pair(arg$3, arg$1);;

variable-declarator:
  identifier
   => make(<variable-declarator>, name: arg$1, numdims: 0, init: #f);;
  identifier dims
   => make(<variable-declarator>, name: arg$1, numdims: arg$2, init: #f);;
  identifier %= variable-initializer
   => make(<variable-declarator>,
	   name: arg$1, numdims: 0, init: arg$3);;
  identifier dims %= variable-initializer
   => make(<variable-declarator>,
	   name: arg$1, numdims: arg$2, init: arg$4);;

variable-initializer:
  expression => arg$1;;
  array-initializer => arg$1;;


array-initializer:
  %lbrace %comma-opt %rbrace
   => make(<array-initializer>, inits: rev-variable-initializers(#()));;
  %lbrace rev-variable-initializers %comma-opt %rbrace
   => make(<array-initializer>, inits: rev-variable-initializers(arg$2));;

rev-variable-initializers:
  variable-initializer => list(arg$1);;
  rev-variable-initializers %comma variable-initializer => pair(arg$3, arg$1);;

explicit-constructor-invocation:
  %this argument-list %semi-colon
   => make(<constructor-call>, args: arg$2, class: arg$1);;
  %super argument-list %semi-colon
   => make(<constructor-call>, args: arg$2, class: arg$1);;

rev-formal-parameter-list-opt: => #();; rev-formal-parameter-list => arg$1;;

rev-formal-parameter-list:
  formal-parameter => list(arg$1);;
  rev-formal-parameter-list %comma formal-parameter => pair(arg$3, arg$1);;

formal-parameter:
  type identifier
    => make(<formal-parameter>, type: arg$1, name: arg$2);;
  type identifier dims
    => make(<formal-parameter>,
	    type: begin
		    let (n, d) = if (instance?(arg$1, <reference-type>))
				   values(arg$1.type-name, arg$1.type-numdims)
				 else
				   values(arg$1, 0)
				 end;
		    make(<reference-type>, name: n, numdims: arg$3 + d)
		  end,
	    name: arg$2);;

throws-opt: => rev-names(#());;
  %throws rev-name-list => rev-names(arg$2);;



interface-declaration:
  modifiers-opt %interface identifier extends-interfaces-opt
	     %lbrace rev-interface-member-declarations-opt %rbrace
   => make(<interface-declaration>,
	   modifiers: arg$1,
	   name: arg$3,
           extends: arg$4,
           body: rev-body-declarations(arg$6));;

extends-interfaces-opt: => rev-names(#());;
  %extends rev-name-list => rev-names(arg$2);;

rev-interface-member-declarations-opt: => #();;
  rev-interface-member-declarations-opt interface-member-declaration => pair(arg$2, arg$1);;

interface-member-declaration:
  field-declaration => arg$1;;
  abstract-method-declaration => arg$1;;

type:
  primitive-type => arg$1;;
  primitive-type dims => make(<reference-type>, name: arg$1, numdims: arg$2);;
  rev-name => make(<reference-type>, name: qualified-name(arg$1), numdims: 0);;
  rev-name dims => make(<reference-type>, name: qualified-name(arg$1), numdims: arg$2);;

reference-type:
  primitive-type dims => make(<reference-type>, name: arg$1, numdims: arg$2);;
  rev-name => make(<reference-type>, name: qualified-name(arg$1), numdims: 0);;
  rev-name dims => make(<reference-type>, name: qualified-name(arg$1), numdims: arg$2);;

rev-name-list:
  rev-name => list(qualified-name(arg$1));;
  rev-name-list %comma rev-name => pair(qualified-name(arg$3), arg$1);;

rev-name:
  identifier => list(arg$1);;
  rev-name %dot identifier => pair(arg$3, arg$1);;

modifiers-opt: => 0;; modifiers => arg$1;;

modifiers:
  modifier => arg$1;;
  modifiers modifier => logior(arg$1, arg$2);;

modifier:
 %public => $public-modifier;;
 %protected => $protected-modifier;;
 %private => $private-modifier;;
 %static => $static-modifier;;
 %abstract => $abstract-modifier;;
 %final => $final-modifier;;
 %native => $native-modifier;;
 %synchronized => $synchronized-modifier;;
 %transient => $transient-modifier;;
 %volatile => $volatile-modifier;;


// ************ statements *************

block:
  %lbrace %rbrace
     => make(<block>, statements: rev-block-statements(#()));;
  %lbrace rev-block-statements %rbrace
     => make(<block>, statements: rev-block-statements(arg$2));;

rev-block-statements:
  block-statement => list(arg$1);;
  rev-block-statements block-statement => pair(arg$2, arg$1);;

block-statement:
  local-variable-declaration %semi-colon => arg$1;;
  statement => arg$1;;

local-variable-declaration:
  type rev-variable-declarators
    => make(<local-variable-declaration>,
	    type: arg$1,
	    declarators: rev-variable-declarators(arg$2));;

statement:
  statement-without-trailing-substatement => arg$1;;
  labeled-statement => arg$1;;
  if-then-statement => arg$1;;
  if-then-else-statement => arg$1;;
  while-statement => arg$1;;
  for-statement => arg$1;;

statement-without-trailing-substatement:
  block => arg$1;;
  empty-statement => arg$1;;
  expression-statement => arg$1;;
  switch-statement => arg$1;;
  do-statement => arg$1;;
  break-statement => arg$1;;
  continue-statement => arg$1;;
  return-statement => arg$1;;
  synchronized-statement => arg$1;;
  throw-statement => arg$1;;
  try-statement => arg$1;;

empty-statement:
  %semi-colon => $empty-statement;;

labeled-statement:
  identifier %colon statement => make(<labeled-statement>,
				     label: arg$1,
				     statement: arg$3);;

labeled-statement-no-short-if:
  identifier %colon statement-no-short-if => make(<labeled-statement>,
						 label: arg$1,
						 statement: arg$3);;

expression-statement:
  statement-expression %semi-colon => arg$1;;

if-then-statement:
  %if %lparen expression %rparen statement
   => make(<if-statement>, condition: arg$3, true: arg$5, false: #f);;

statement-no-short-if:
  statement-without-trailing-substatement => arg$1;;
  labeled-statement-no-short-if => arg$1;;
  if-then-else-statement-no-short-if => arg$1;;
  while-statement-no-short-if => arg$1;;
  for-statement-no-short-if => arg$1;;

if-then-else-statement:
  %if %lparen expression %rparen statement-no-short-if %else statement
   => make(<if-statement>, condition: arg$3, true: arg$5, false: arg$7);;

if-then-else-statement-no-short-if:
  %if %lparen expression %rparen statement-no-short-if %else statement-no-short-if
   => make(<if-statement>, condition: arg$3, true: arg$5, false: arg$7);;


while-statement:
  %while %lparen expression %rparen statement
   => make(<while-statement>, condition: arg$3, body: as-block(arg$5));;

while-statement-no-short-if:
  %while %lparen expression %rparen statement-no-short-if
   => make(<while-statement>, condition: arg$3, body: as-block(arg$5));;

do-statement:
  %do statement %while %lparen expression %rparen %semi-colon
   => make(<do-statement>, body: as-block(arg$2), condition: arg$5);;

for-statement:
  %for %lparen for-init-opt %semi-colon
              expression-opt %semi-colon
              for-update-opt %rparen statement
   => make(<for-statement>, init: arg$3, condition: arg$5, update: arg$7,
	   body: as-block(arg$9));;

for-statement-no-short-if:
  %for %lparen for-init-opt %semi-colon
              expression-opt %semi-colon
              for-update-opt %RPAREN statement-no-short-if
   => make(<for-statement>, init: arg$3, condition: arg$5, update: arg$7,
	   body: as-block(arg$9));;

for-init-opt: => #f;;
  statement-expression-list => arg$1;;
  local-variable-declaration => arg$1;;

for-update-opt: => #f;;
  statement-expression-list => arg$1;;

statement-expression-list:
  statement-expression => arg$1;;
  rev-statement-expression-list-1 => rev-statement-expressions(arg$1);;

rev-statement-expression-list-1:
  statement-expression %comma statement-expression => list(arg$3, arg$1);;
  rev-statement-expression-list-1 %comma statement-expression => pair(arg$3, arg$1);;

break-statement:
  %break identifier-opt %semi-colon => make(<break-statement>, label: arg$2);;

continue-statement:
  %continue identifier-opt %semi-colon => make(<continue-statement>, label: arg$2);;

return-statement:
  %return expression-opt %semi-colon => make(<return-statement>, value: arg$2);;

throw-statement:
  %throw expression %semi-colon => make(<throw-statement>, value: arg$2);;

synchronized-statement:
  %synchronized %lparen expression %rparen block
   => make(<synchronized-statement>, condition: arg$3, body: arg$5);;

try-statement:
  %try block rev-catches => make(<try-statement>, body: arg$2,
				 catches: rev-catches(arg$3),
				 finally: #f);;
  %try block rev-catches %finally block => make(<try-statement>, body: arg$2,
					        catches: rev-catches(arg$3),
					        finally: arg$5);;
  %try block %finally block =>  make(<try-statement>, body: arg$2,
				     catches: #f,
				     finally: arg$4);;

rev-catches:
  catch-clause => list(arg$1);;
  rev-catches catch-clause => pair(arg$2, arg$1);;

catch-clause:
  %catch %lparen formal-parameter %rparen block
   => make(<catch>, parameter: arg$3, body: arg$5);;


switch-statement:
  %switch %lparen expression %rparen
    %lbrace rev-switch-cases-opt switch-labels-opt %rbrace
   => make(<switch-statement>,
	   value: arg$3,
	   cases: rev-switch-cases(if (arg$7) pair(arg$7, arg$6)
				   else arg$6 end));;

rev-switch-cases-opt: => #();;
  rev-switch-cases-opt switch-case => pair(arg$2, arg$1);;

switch-case:
  rev-switch-labels rev-block-statements
    => make(<switch-case>,
	    labels: rev-switch-labels(arg$1),
	    body: make(<block>,
		       statements: rev-block-statements(arg$2)));;


rev-switch-labels:
  switch-label => list(arg$1);;
  rev-switch-labels switch-label => pair(arg$2, arg$1);;

switch-labels-opt: => #f;;
  rev-switch-labels => make(<switch-case>,
			    labels: rev-switch-labels(arg$1),
			    body: #f);;

switch-label: // false-or(<expression>);
  %case expression %colon => arg$2;;
  %default %colon => #f;;


// ************** expressions **************
statement-expression:
  assignment => arg$1;;
  pre-increment-expression => arg$1;;
  pre-decrement-expression => arg$1;;
  post-increment-expression => arg$1;;
  post-decrement-expression => arg$1;;
  method-invocation => arg$1;;
  class-instance-creation-expression => arg$1;;

expression:
  assignment-expression => arg$1;;

expression-opt: => #f;; expression => arg$1;;

assignment-expression:
  conditional-expression => arg$1;;
  assignment => arg$1;;

assignment:
  left-hand-side assignment-operator assignment-expression
   => make(<assignment>, value1: arg$1, value2: arg$3, op: arg$2);;

left-hand-side:
  rev-name => qualified-name(arg$1);;
  field-access => arg$1;;
  array-access => arg$1;;

conditional-expression:
  conditional-or-expression => arg$1;;
  conditional-or-expression %qmark expression %colon conditional-expression
   => make(<if-expression>, condition: arg$1, true: arg$3, false: arg$5);;

conditional-or-expression:
  conditional-and-expression => arg$1;;
  conditional-or-expression %|| conditional-and-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

conditional-and-expression:
  inclusive-or-expression => arg$1;;
  conditional-and-expression %&& inclusive-or-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

inclusive-or-expression:
  exclusive-or-expression => arg$1;;
  inclusive-or-expression %| exclusive-or-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

exclusive-or-expression:
  and-expression => arg$1;;
  exclusive-or-expression %^ and-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

and-expression:
  equality-expression => arg$1;;
  and-expression %& equality-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

equality-expression:
  relational-expression => arg$1;;
  equality-expression %== relational-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  equality-expression %!= relational-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

relational-expression:
  shift-expression => arg$1;;
  relational-expression %< shift-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  relational-expression %> shift-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  relational-expression %<= shift-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  relational-expression %>= shift-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  relational-expression %instanceof reference-type
   => make(<instanceof-expression>, value: arg$1, type: arg$3);;

shift-expression:
  additive-expression => arg$1;;
  shift-expression %<< additive-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  shift-expression %>> additive-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  shift-expression %>>> additive-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

additive-expression:
  multiplicative-expression => arg$1;;
  additive-expression %+ multiplicative-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  additive-expression %- multiplicative-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

multiplicative-expression:
  unary-expression => arg$1;;
  multiplicative-expression %* unary-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  multiplicative-expression %/ unary-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;
  multiplicative-expression %% unary-expression
   => make(<binary-expression>, value1: arg$1, value2: arg$3, op: arg$2);;

unary-expression:
  pre-increment-expression => arg$1;;
  pre-decrement-expression => arg$1;;
  %+ unary-expression
     => make(<unary-expression>, value: arg$2, op: arg$1);;
  %- unary-expression
     => make(<unary-expression>, value: arg$2, op: arg$1);;
  unary-expression-not-plus-minus => arg$1;;

unary-expression-not-plus-minus:
  postfix-expression => arg$1;;
  cast-expression => arg$1;;
  %~ unary-expression
     => make(<unary-expression>, value: arg$2, op: arg$1);;
  %! unary-expression
     => make(<unary-expression>, value: arg$2, op: arg$1);;

pre-increment-expression:
  %++ unary-expression
   => make(<pre-expression>, value: arg$2, op: arg$1);;

pre-decrement-expression:
  %-- unary-expression
   => make(<pre-expression>, value: arg$2, op: arg$1);;

cast-expression:
  %lparen primitive-type %rparen unary-expression
   => make(<cast-expression>, type: arg$2, value: arg$4);;
  %lparen primitive-type dims %rparen unary-expression
   => make(<cast-expression>,
	   type: make(<reference-type>, name: arg$2, numdims: arg$3), value: arg$5);;
  %lparen rev-name dims %rparen unary-expression-not-plus-minus
   => make(<cast-expression>,
	   type: make(<reference-type>, name: qualified-name(arg$2), numdims: arg$3),
	    value: arg$5);;
  %lparen expression %rparen unary-expression-not-plus-minus
   => make(<cast-expression>,
	   type: make(<reference-type>, name: arg$2, numdims: 0), value: arg$4);;

post-increment-expression:
 postfix-expression %++
   => make(<post-expression>, value: arg$1, op: arg$2);;

post-decrement-expression:
 postfix-expression %--
   => make(<post-expression>, value: arg$1, op: arg$2);;

postfix-expression:
  primary => arg$1;;
  rev-name => qualified-name(arg$1);;
  post-increment-expression => arg$1;;
  post-decrement-expression => arg$1;;

method-invocation:
  rev-name argument-list
   => let id = arg$1.head;
      if (arg$1.tail == #())
	make(<named-method-call>, name: id, class: #f, args: arg$2);
      else
	make(<named-method-call>,
	     name: id, class: qualified-name(arg$1.tail), args: arg$2);
      end;;
  primary %dot identifier argument-list
    => make(<named-method-call>, name: arg$3, class: arg$1, args: arg$4);;
  %super %dot identifier argument-list
    => make(<named-method-call>, name: arg$3, class: arg$1, args: arg$4);;

array-access:
  rev-name %lbracket expression %rbracket
   => make(<array-access>, value: qualified-name(arg$1), index: arg$3);;
  primary-no-new-array %lbracket expression %rbracket
   => make(<array-access>, value: arg$1, index: arg$3);;

field-access:
  primary %dot identifier => make(<field-access>, value: arg$1, field: arg$3);;
  %super %dot identifier => make(<field-access>, value: arg$1, field: arg$3);;

primary:
  primary-no-new-array => arg$1;;
  array-creation-expression => arg$1;;

primary-no-new-array:
  literal => arg$1;;
  %this => arg$1;;
  %lparen expression %rparen => arg$2;;
  class-instance-creation-expression => arg$1;;
  field-access => arg$1;;
  array-access => arg$1;;
  method-invocation => arg$1;;

class-instance-creation-expression:
  %new rev-name argument-list
   => make(<new-class-expression>, type: qualified-name(arg$2), args: arg$3);;

array-creation-expression:
  %new type-name rev-dim-exprs %lbracket %rbracket dims-opt
   => make(<new-array-expression>,
	   type: make(<reference-type>,
		      name: arg$2, numdims: arg$6 + 1 + arg$3.size),
	   dims: rev-expressions(arg$3));;
  %new type-name rev-dim-exprs
   => make(<new-array-expression>,
	   type: make(<reference-type>, name: arg$2, numdims: arg$3.size),
	   dims: rev-expressions(arg$3));;

type-name:
  primitive-type => arg$1;;
  rev-name => qualified-name(arg$1);;


rev-dim-exprs:
  %lbracket expression %rbracket => list(arg$2);;
  rev-dim-exprs %lbracket expression %rbracket => pair(arg$3, arg$1);;

argument-list:
 %lparen rev-argument-list-opt %rparen => rev-expressions(arg$2);;

rev-argument-list-opt: => #();; rev-argument-list => arg$1;;

rev-argument-list:
  expression => list(arg$1);;
  rev-argument-list %comma expression => pair(arg$3, arg$1);;

dims-opt: => 0;; dims => arg$1;;

dims: 
  %lbracket %rbracket => 1;;
  dims %lbracket %rbracket => arg$1 + 1;;

identifier-opt: => #f;; identifier => arg$1;;

%comma-opt: => #f;; %comma => arg$1;;

assignment-operator:
  %=    => arg$1;;
  %*=   => arg$1;;
  %/=   => arg$1;;
  %%=   => arg$1;;
  %+=   => arg$1;;
  %-=   => arg$1;;
  %<<=  => arg$1;;
  %>>=  => arg$1;;
  %>>>= => arg$1;;
  %&=   => arg$1;;
  %|=   => arg$1;;
  %^=   => arg$1;;


end parser;
