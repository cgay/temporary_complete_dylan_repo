.. contents::


Open Dylan
==========

What defines a 1.0 release?
---------------------------

I think the main concentration should be on the Linux port.  The
Windows port is mostly good enough to call a 1.0 but I would make
one fix to the project manager:

Windows
~~~~~~~

+ I love using registry projects because they seem to be much less
  broken than non-registry projects and they allow for easily hacking
  on OD itself.  The major drawback for me is that they don't seem to
  support loose/development mode very well.  (Do some experiments to
  figure out exactly what DOES happen...I've been working around it
  for so long I can't quite remember.)

  I'd be happy with one Big Red Switch that set the default
  compilation mode for everything.

Linux
~~~~~

+ All warnings should be displayed during compilation, even those of
  sub-projects.  I don't care if this is done in the compiler or if
  we provide a script that will display them.  (It would have to be
  a bit smart about which sub-projects were actually used, I guess.)
  This works in the IDE so I would imagine it's not a deep problem.

+ It should be possible to get a Dylan-level backtrace.  I'm not
  talking about interactive debugging here, just the ability to
  display a readable backtrace when an error is signalled.  e.g.,
  Python's default behavior is to display a backtrace before it
  exits if there's an unhandled exception.



Dylan Language
==============

+ It appears that if you define a sideways method (e.g., as(<string>, <character>))
  there is no way to avoid importing the definition if you use the library (note:
  not the module) that defines it?  I tried not using string-conversions, which
  defines it.  Is this an Open Dylan bug?

+ What's the reasoning behind not having format-string and format-arguments
  slots in <error>, but rather putting them in <simple-error>?  This is a wart
  on the language.  (And why not just make it error-message instead of two
  separate slots?  You probably don't want to risk caching the format arguments
  anyway, most of the time.  [later] Is it to prevent everyone from having to
  import format-to-string?  Or to prevent having to do the formatting unless the
  error is actually signalled?)

+ How do you create Unicode string constants if they only contain characters
  that can be expressed in a <byte-string>?  e.g., in Python u"foo".  Does
  "\<60>" create a unicode string or a byte string?  Is this even useful?  How
  about #u"..."?

+ For writing code with a lot of regular expressions in it, Python's r"..."
  syntax is very nice.  What about adding something similar to Dylan?  e.g.,
  #r"...".


Gwydion
=======

format-out("%f", 1.0) core dumps in 2.4.  Same for %g.
This makes it difficult to do some of the shootout programs.


testworks
=========

+ my-test-suite-app --list-tests and/or --list-suites and/or --list-all  

+ [Not really testworks, but...]
  Export Test Suite Skeleton can generate invalid module specs.  The one it generated
  for regular-expressions had a bad ')' in  ::

      constant <invalid-regex> :: <object>);

  which is defined as ::

      defne constant <invalid-regex> = <illegal-regex>;
      

common-dylan
============

+ Has float-to-string but no string-to-float.
  Has number-to-string but no string-to-number.

+ Add key-exists? or has-key? g.f.?
  There is key-exists? in gwydion/common/collection-extensions/collection-utils.dylan
  but it's broken.  A fixed version would be::

    define method key-exists?
        (collection :: <collection>, key)
     => (key-exists? :: <boolean>, value :: <object>);
      let result = element(collection, key, default: $not-found);
      if (result == $not-found)
        values(#f, #f);
      else
        values(#t, result);
      end if;
    end method key-exists?;

  but for some reason I get "Authorization denied" when I try to commit it.

+ What's the reasoning behind the 'skip' parameter to some sequence functions,
  like 'position'?  It seems like it would be less efficient to use than
  'start' and 'end' parameters since the implementation would have to start
  from the beginning each time.  I don't like it being a mandatory keyword in
  the 'position' generic function.  (Other functions that have it:
  find-element, find-value, find-key.)

  subsequence-position uses 'count', but it really means 'skip'.  Need to do
  an exhaustive review of all the sequence functions.

  find-key has a 'failure' keyword argument which it seems should be
  called 'default' or at least 'on-failure'.


String Hacking
==============

+ Make "strings" library re-export most stuff from string-extensions and some
  things from common-dylan.  Once it's in good shape, propose adding it to
  common-dylan.

+ Various string conversion functions in common-dylan.

+ I don't like the way the string-extensions library is broken up into modules.
  I don't see the need for more than one module there, and their names are odd.
  Could just add a string-extensions module that uses all the others and
  exports all.

+ The OD and GD string-extensions libraries have diverged enough to be
  disturbing.  Re-unify them?

+ Would there be any name conflicts if common-dylan exported all the
  string-extensions bindings?

+ Write some tests for parse-[character-set-]description in string-hacking.dylan


regular-expressions
===================

* Mainly is just missing features now.  First step is probably to
  implement the verbose: and multi-line: parameters to compile-regex.


Koala
=====

+ Should probably be using <internet-address>es instead of <string>s, at least
  for the <listener> class.

+ Interesting discussion about URL query values:
  http://lists.w3.org/Archives/Public/ietf-http-wg/2004JulSep/0009.html

+ Hannes' comments re new config option to define-page et al...
  http://ircbrowse.com/channel/dylan/20070220

+ Look at the Allegro web app package more.  (name?)  It has some nice ideas
  about sessions and apps.

+ define-responder takes an optional application: keyword argument, whos value
  is a string::

    define page table-page (<demo-page>)
        (url: "/demo/table.dsp",
         source: "demo/table.dsp")
    end;

  With the application: keyword argument the same thing happens, but the
  responder may be moved to a specific vhost::

    define page table-page (<demo-page>)
        (application: "koala-demo",
         url: "/demo/table.dsp",
         source: "demo/table.dsp")
    end;

  servers per vm

  types of web app:

    - fully dynamic (no .dsp files, no config file)
    - fully static (koala-app)


General
=======

+ Is there a good way to browse the DRM directly from the source?  It
  links to pages without ".html" appended.

+ Implement Bruce Hoult's idea to make Dylan "scripts" work by having
  a wrapper script that compiles the project first if necessary.


Projects
========

Things I'd like to work on if time permits.

+ Logging library.  Still has a long to-do list.

+ Rename some locators classes::

      use locators,
        rename: {<http-server> => <http-server-url>,
                 <ftp-server> => <ftp-server-url>,
                 <file-server> => <file-server-url>};

+ Improve the Dylan wiki parser.  (Then maybe I could keep this file on the
  wiki, for example.)


Naming
======

Group
-----

Dylan Conservancy
Dylan Engineering Group
Dylan Evolution Group
Dylan Hackers
Dylan Lab
Dylan Labs
Dylan Language Group
Dylan Software Foundation
Dylan Software Group
Dylan Software Lab
Dylan Software Labs
Dylan Software Project
Open Dylan Foundation
Open Dylan Group
The Dylan Module


Open Dylan
----------

DylanWorks [1]
HFO Dylan
HQ Dylan (proposed as a pair with GW Dylan)
Harlequin Dylan [1]
Open Dylan
OpenDylan


Gwydion Dylan
-------------

Gwydion Dylan
GW Dylan (proposed as a pair with HQ Dylan)


Domain Name
-----------

(assume we'll get both the hyphenated and non- domain)

dylan-foundation.org
dylan-group.org
dylan-labs.org
dylan-language.org
open-dylan.org
make-dylan.org
dylan-module.org


[1] People have raised the possibility of trademark issues for these names.

