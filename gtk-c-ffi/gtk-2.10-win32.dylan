module: gtk-internal

define constant <gulong> = <C-unsigned-long>;

define constant <GType> = <gulong>;

define C-subtype <_GTypeClass> (<C-void*>) end;
define constant <GTypeClass> = <_GTypeClass>;

define C-subtype <_GTypeInstance> (<C-void*>) end;
define constant <GTypeInstance> = <_GTypeInstance>;

define constant <guint> = <C-unsigned-int>;

define C-subtype <_GData> (<C-void*>) end;
define constant <GData> = <_GData>;

define C-subtype <_GObject> (<_GTypeInstance>) end;
define constant <GInitiallyUnowned> = <_GObject>;

define constant <guint32> = <C-unsigned-int>;

define C-subtype <_GtkObject> (<_GObject>) end;
define constant <GtkObject> = <_GtkObject>;

define constant <guint16> = <C-unsigned-short>;

define constant <guint8> = <C-unsigned-char>;

define constant <gchar> = <C-signed-char>;

//define C-pointer-type <gchar*> => <gchar>;
define constant <gchar*> = <C-string>;
define constant <GObject> = <_GObject>;

define C-subtype <_GdkColor> (<C-void*>) end;
define constant <GdkColor> = <_GdkColor>;

define constant <GdkColor<@5>> = <GdkColor>;
define C-subtype <_PangoFontDescription> (<C-void*>) end;
define constant <PangoFontDescription> = <_PangoFontDescription>;

define constant <gint> = <C-signed-int>;

define constant <GdkVisualType> = <C-int>;
define constant $GDK-VISUAL-STATIC-GRAY = 0;
define constant $GDK-VISUAL-GRAYSCALE = 1;
define constant $GDK-VISUAL-STATIC-COLOR = 2;
define constant $GDK-VISUAL-PSEUDO-COLOR = 3;
define constant $GDK-VISUAL-TRUE-COLOR = 4;
define constant $GDK-VISUAL-DIRECT-COLOR = 5;

define constant <GdkByteOrder> = <C-int>;
define constant $GDK-LSB-FIRST = 0;
define constant $GDK-MSB-FIRST = 1;

define C-subtype <_GdkVisual> (<_GObject>) end;
define constant <GdkVisual> = <_GdkVisual>;

define constant <gpointer> = <C-void*>;

define C-subtype <_GdkColormap> (<_GObject>) end;
define constant <GdkColormap> = <_GdkColormap>;

define C-subtype <_GdkGC> (<_GObject>) end;
define constant <GdkGC> = <_GdkGC>;

define C-pointer-type <GdkGC*> => <GdkGC>;
define constant <GdkGC<@5>> = <GdkGC*>;
define C-subtype <_GdkDrawable> (<_GObject>) end;
define constant <GdkPixmap> = <_GdkDrawable>;

define C-pointer-type <GdkPixmap*> => <GdkPixmap>;
define constant <GdkPixmap<@5>> = <GdkPixmap*>;
define constant <GdkFontType> = <C-int>;
define constant $GDK-FONT-FONT = 0;
define constant $GDK-FONT-FONTSET = 1;

define C-subtype <_GdkFont> (<C-void*>) end;
define constant <GdkFont> = <_GdkFont>;

define C-pointer-type <gchar**> => <gchar*>;
define constant <gchar*<@5>> = <gchar**>;
define constant <GtkRcFlags> = <C-int>;
define constant $GTK-RC-FG = 1;
define constant $GTK-RC-BG = 2;
define constant $GTK-RC-TEXT = 4;
define constant $GTK-RC-BASE = 8;

define C-pointer-type <GtkRcFlags*> => <GtkRcFlags>;
define constant <GtkRcFlags<@5>> = <GtkRcFlags*>;
define C-subtype <_GArray> (<C-void*>) end;
define constant <GArray> = <_GArray>;

define C-subtype <_GSList> (<C-void*>) end;
define constant <GSList> = <_GSList>;

define C-subtype <_GtkRcStyle> (<_GObject>) end;
define constant <GtkRcStyle> = <_GtkRcStyle>;

define C-subtype <_GtkStyle> (<_GObject>) end;
define constant <GtkStyle> = <_GtkStyle>;

define C-subtype <_GtkRequisition> (<C-void*>) end;
define constant <GtkRequisition> = <_GtkRequisition>;

define C-subtype <_GdkRectangle> (<C-void*>) end;
define constant <GdkRectangle> = <_GdkRectangle>;

define constant <GtkAllocation> = <GdkRectangle>;

define constant <GdkWindow> = <_GdkDrawable>;

define C-subtype <_GtkWidget> (<_GtkObject>, <_AtkImplementorIface>) end;
define constant <GtkWidget> = <_GtkWidget>;

define C-subtype <_GtkContainer> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkContainer> = <_GtkContainer>;

define C-subtype <_GtkBin> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkBin> = <_GtkBin>;

define constant <GtkWindow> = <_GtkWindow>;

define C-subtype <_GtkWindowGeometryInfo> (<C-void*>) end;
define constant <GtkWindowGeometryInfo> = <_GtkWindowGeometryInfo>;

define C-subtype <_GtkWindowGroup> (<_GObject>) end;
define constant <GtkWindowGroup> = <_GtkWindowGroup>;

define constant <GdkModifierType> = <C-int>;
define constant $GDK-SHIFT-MASK = 1;
define constant $GDK-LOCK-MASK = 2;
define constant $GDK-CONTROL-MASK = 4;
define constant $GDK-MOD1-MASK = 8;
define constant $GDK-MOD2-MASK = 16;
define constant $GDK-MOD3-MASK = 32;
define constant $GDK-MOD4-MASK = 64;
define constant $GDK-MOD5-MASK = 128;
define constant $GDK-BUTTON1-MASK = 256;
define constant $GDK-BUTTON2-MASK = 512;
define constant $GDK-BUTTON3-MASK = 1024;
define constant $GDK-BUTTON4-MASK = 2048;
define constant $GDK-BUTTON5-MASK = 4096;
define constant $GDK-SUPER-MASK = 67108864;
define constant $GDK-HYPER-MASK = 134217728;
define constant $GDK-META-MASK = 268435456;
//define constant $GDK-RELEASE-MASK = #ex0000000040000000;
//define constant $GDK-MODIFIER-MASK = #ex000000005C001FFF;

define constant <GdkGC<@32>> = <GdkGC*>;
define C-subtype <_cairo-font-options> (<C-void*>) end;
define constant <cairo-font-options-t> = <_cairo-font-options>;

define C-subtype <_GdkScreen> (<_GObject>) end;
define constant <GdkScreen> = <_GdkScreen>;

define C-subtype <_GtkWindow> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GParamFlags> = <C-int>;
define constant $G-PARAM-READABLE = 1;
define constant $G-PARAM-WRITABLE = 2;
define constant $G-PARAM-CONSTRUCT = 4;
define constant $G-PARAM-CONSTRUCT-ONLY = 8;
define constant $G-PARAM-LAX-VALIDATION = 16;
define constant $G-PARAM-STATIC-NAME = 32;
define constant $G-PARAM-PRIVATE = 32;
define constant $G-PARAM-STATIC-NICK = 64;
define constant $G-PARAM-STATIC-BLURB = 128;

define C-subtype <_GParamSpec> (<C-void*>) end;
define constant <GParamSpec> = <_GParamSpec>;

define constant <glong> = <C-signed-long>;

define constant <gint64> = <C-signed-long>;

define constant <guint64> = <C-unsigned-long>;

define constant <gfloat> = <C-float>;

define constant <gdouble> = <C-double>;

define C-subtype <anonymous-1507> (<C-void*>) end;
define constant <anonymous-1507<@2>> = <anonymous-1507>;
define C-subtype <_GValue> (<C-void*>) end;
define constant <GValue> = <_GValue>;

define C-subtype <_GObjectConstructParam> (<C-void*>) end;
define constant <GObjectConstructParam> = <_GObjectConstructParam>;

define constant <anonymous-1653> = <C-function-pointer>;
define constant <anonymous-1654> = <C-function-pointer>;
define constant <anonymous-1655> = <C-function-pointer>;
define constant <anonymous-1656> = <C-function-pointer>;
define constant <anonymous-1657> = <C-function-pointer>;
define C-pointer-type <GParamSpec*> => <GParamSpec>;
define constant <anonymous-1658> = <C-function-pointer>;
define constant <anonymous-1659> = <C-function-pointer>;
define C-pointer-type <gpointer*> => <gpointer>;
define constant <gpointer<@8>> = <gpointer*>;
define C-subtype <_GObjectClass> (<C-void*>) end;
define constant <GInitiallyUnownedClass> = <_GObjectClass>;

define constant <GtkType> = <GType>;

define constant <guchar> = <C-unsigned-char>;

define constant <gboolean> = <gint>;

define constant <anonymous-3344> = <C-function-pointer>;
define constant <GtkSignalFunc> = <anonymous-3344>;

define C-subtype <anonymous-3345> (<C-void*>) end;
define C-subtype <anonymous-3346> (<C-void*>) end;
define C-subtype <_GtkArg> (<C-void*>) end;
define constant <GtkArg> = <_GtkArg>;

define constant <anonymous-3357> = <C-function-pointer>;
define constant <anonymous-3358> = <C-function-pointer>;
define constant <anonymous-3359> = <C-function-pointer>;
define C-subtype <_GtkObjectClass> (<C-void*>) end;
define constant <GtkObjectClass> = <_GtkObjectClass>;

define constant <anonymous-3634> = <C-function-pointer>;
define constant <anonymous-3635> = <C-function-pointer>;
define constant <anonymous-3636> = <C-function-pointer>;
define constant <anonymous-3637> = <C-function-pointer>;
define constant <anonymous-3638> = <C-function-pointer>;
define constant <anonymous-3639> = <C-function-pointer>;
define constant <anonymous-3640> = <C-function-pointer>;
define constant <anonymous-3641> = <C-function-pointer>;
define constant <anonymous-3642> = <C-function-pointer>;
define constant <anonymous-3643> = <C-function-pointer>;
define constant <anonymous-3644> = <C-function-pointer>;
define constant <GtkStateType> = <C-int>;
define constant $GTK-STATE-NORMAL = 0;
define constant $GTK-STATE-ACTIVE = 1;
define constant $GTK-STATE-PRELIGHT = 2;
define constant $GTK-STATE-SELECTED = 3;
define constant $GTK-STATE-INSENSITIVE = 4;

define constant <anonymous-3645> = <C-function-pointer>;
define constant <anonymous-3646> = <C-function-pointer>;
define constant <anonymous-3647> = <C-function-pointer>;
define constant <anonymous-3648> = <C-function-pointer>;
define constant <GtkTextDirection> = <C-int>;
define constant $GTK-TEXT-DIR-NONE = 0;
define constant $GTK-TEXT-DIR-LTR = 1;
define constant $GTK-TEXT-DIR-RTL = 2;

define constant <anonymous-3649> = <C-function-pointer>;
define constant <anonymous-3650> = <C-function-pointer>;
define constant <anonymous-3651> = <C-function-pointer>;
define constant <anonymous-3652> = <C-function-pointer>;
define constant <anonymous-3653> = <C-function-pointer>;
define constant <GtkDirectionType> = <C-int>;
define constant $GTK-DIR-TAB-FORWARD = 0;
define constant $GTK-DIR-TAB-BACKWARD = 1;
define constant $GTK-DIR-UP = 2;
define constant $GTK-DIR-DOWN = 3;
define constant $GTK-DIR-LEFT = 4;
define constant $GTK-DIR-RIGHT = 5;

define constant <anonymous-3654> = <C-function-pointer>;
define constant <GdkEventType> = <C-int>;
define constant $GDK-NOTHING = -1;
define constant $GDK-DELETE = 0;
define constant $GDK-DESTROY = 1;
define constant $GDK-EXPOSE = 2;
define constant $GDK-MOTION-NOTIFY = 3;
define constant $GDK-BUTTON-PRESS = 4;
define constant $GDK-2BUTTON-PRESS = 5;
define constant $GDK-3BUTTON-PRESS = 6;
define constant $GDK-BUTTON-RELEASE = 7;
define constant $GDK-KEY-PRESS = 8;
define constant $GDK-KEY-RELEASE = 9;
define constant $GDK-ENTER-NOTIFY = 10;
define constant $GDK-LEAVE-NOTIFY = 11;
define constant $GDK-FOCUS-CHANGE = 12;
define constant $GDK-CONFIGURE = 13;
define constant $GDK-MAP = 14;
define constant $GDK-UNMAP = 15;
define constant $GDK-PROPERTY-NOTIFY = 16;
define constant $GDK-SELECTION-CLEAR = 17;
define constant $GDK-SELECTION-REQUEST = 18;
define constant $GDK-SELECTION-NOTIFY = 19;
define constant $GDK-PROXIMITY-IN = 20;
define constant $GDK-PROXIMITY-OUT = 21;
define constant $GDK-DRAG-ENTER = 22;
define constant $GDK-DRAG-LEAVE = 23;
define constant $GDK-DRAG-MOTION = 24;
define constant $GDK-DRAG-STATUS = 25;
define constant $GDK-DROP-START = 26;
define constant $GDK-DROP-FINISHED = 27;
define constant $GDK-CLIENT-EVENT = 28;
define constant $GDK-VISIBILITY-NOTIFY = 29;
define constant $GDK-NO-EXPOSE = 30;
define constant $GDK-SCROLL = 31;
define constant $GDK-WINDOW-STATE = 32;
define constant $GDK-SETTING = 33;
define constant $GDK-OWNER-CHANGE = 34;
define constant $GDK-GRAB-BROKEN = 35;

define constant <gint8> = <C-signed-char>;

define C-subtype <_GdkEventAny> (<C-void*>) end;
define constant <GdkEventAny> = <_GdkEventAny>;

define C-subtype <_GdkRegion> (<C-void*>) end;
define constant <GdkRegion> = <_GdkRegion>;

define C-subtype <_GdkEventExpose> (<C-void*>) end;
define constant <GdkEventExpose> = <_GdkEventExpose>;

define C-subtype <_GdkEventNoExpose> (<C-void*>) end;
define constant <GdkEventNoExpose> = <_GdkEventNoExpose>;

define constant <GdkVisibilityState> = <C-int>;
define constant $GDK-VISIBILITY-UNOBSCURED = 0;
define constant $GDK-VISIBILITY-PARTIAL = 1;
define constant $GDK-VISIBILITY-FULLY-OBSCURED = 2;

define C-subtype <_GdkEventVisibility> (<C-void*>) end;
define constant <GdkEventVisibility> = <_GdkEventVisibility>;

define C-pointer-type <gdouble*> => <gdouble>;
define constant <gint16> = <C-signed-short>;

define constant <GdkInputSource> = <C-int>;
define constant $GDK-SOURCE-MOUSE = 0;
define constant $GDK-SOURCE-PEN = 1;
define constant $GDK-SOURCE-ERASER = 2;
define constant $GDK-SOURCE-CURSOR = 3;

define constant <GdkInputMode> = <C-int>;
define constant $GDK-MODE-DISABLED = 0;
define constant $GDK-MODE-SCREEN = 1;
define constant $GDK-MODE-WINDOW = 2;

define constant <GdkAxisUse> = <C-int>;
define constant $GDK-AXIS-IGNORE = 0;
define constant $GDK-AXIS-X = 1;
define constant $GDK-AXIS-Y = 2;
define constant $GDK-AXIS-PRESSURE = 3;
define constant $GDK-AXIS-XTILT = 4;
define constant $GDK-AXIS-YTILT = 5;
define constant $GDK-AXIS-WHEEL = 6;
define constant $GDK-AXIS-LAST = 7;

define C-subtype <_GdkDeviceAxis> (<C-void*>) end;
define constant <GdkDeviceAxis> = <_GdkDeviceAxis>;

define C-subtype <_GdkDeviceKey> (<C-void*>) end;
define constant <GdkDeviceKey> = <_GdkDeviceKey>;

define C-subtype <_GdkDevice> (<_GObject>) end;
define constant <GdkDevice> = <_GdkDevice>;

define C-subtype <_GdkEventMotion> (<C-void*>) end;
define constant <GdkEventMotion> = <_GdkEventMotion>;

define C-subtype <_GdkEventButton> (<C-void*>) end;
define constant <GdkEventButton> = <_GdkEventButton>;

define constant <GdkScrollDirection> = <C-int>;
define constant $GDK-SCROLL-UP = 0;
define constant $GDK-SCROLL-DOWN = 1;
define constant $GDK-SCROLL-LEFT = 2;
define constant $GDK-SCROLL-RIGHT = 3;

define C-subtype <_GdkEventScroll> (<C-void*>) end;
define constant <GdkEventScroll> = <_GdkEventScroll>;

define C-subtype <_GdkEventKey> (<C-void*>) end;
define constant <GdkEventKey> = <_GdkEventKey>;

define constant <GdkCrossingMode> = <C-int>;
define constant $GDK-CROSSING-NORMAL = 0;
define constant $GDK-CROSSING-GRAB = 1;
define constant $GDK-CROSSING-UNGRAB = 2;

define constant <GdkNotifyType> = <C-int>;
define constant $GDK-NOTIFY-ANCESTOR = 0;
define constant $GDK-NOTIFY-VIRTUAL = 1;
define constant $GDK-NOTIFY-INFERIOR = 2;
define constant $GDK-NOTIFY-NONLINEAR = 3;
define constant $GDK-NOTIFY-NONLINEAR-VIRTUAL = 4;
define constant $GDK-NOTIFY-UNKNOWN = 5;

define C-subtype <_GdkEventCrossing> (<C-void*>) end;
define constant <GdkEventCrossing> = <_GdkEventCrossing>;

define C-subtype <_GdkEventFocus> (<C-void*>) end;
define constant <GdkEventFocus> = <_GdkEventFocus>;

define C-subtype <_GdkEventConfigure> (<C-void*>) end;
define constant <GdkEventConfigure> = <_GdkEventConfigure>;

define C-subtype <_GdkAtom> (<C-void*>) end;
define constant <GdkAtom> = <_GdkAtom>;

define C-subtype <_GdkEventProperty> (<C-void*>) end;
define constant <GdkEventProperty> = <_GdkEventProperty>;

define constant <GdkNativeWindow> = <guint32>;

define C-subtype <_GdkEventSelection> (<C-void*>) end;
define constant <GdkEventSelection> = <_GdkEventSelection>;

define constant <GdkOwnerChange> = <C-int>;
define constant $GDK-OWNER-CHANGE-NEW-OWNER = 0;
define constant $GDK-OWNER-CHANGE-DESTROY = 1;
define constant $GDK-OWNER-CHANGE-CLOSE = 2;

define C-subtype <_GdkEventOwnerChange> (<C-void*>) end;
define constant <GdkEventOwnerChange> = <_GdkEventOwnerChange>;

define C-subtype <_GdkEventProximity> (<C-void*>) end;
define constant <GdkEventProximity> = <_GdkEventProximity>;

define constant <gushort> = <C-unsigned-short>;

define C-pointer-type <char*> => <C-signed-char>;
define constant <char<@20>> = <char*>;
define C-pointer-type <short*> => <C-signed-short>;
define constant <short<@10>> = <short*>;
define C-pointer-type <long*> => <C-signed-long>;
define constant <long<@5>> = <long*>;
define C-subtype <anonymous-2545> (<C-void*>) end;
define C-subtype <_GdkEventClient> (<C-void*>) end;
define constant <GdkEventClient> = <_GdkEventClient>;

define constant <GdkDragProtocol> = <C-int>;
define constant $GDK-DRAG-PROTO-MOTIF = 0;
define constant $GDK-DRAG-PROTO-XDND = 1;
define constant $GDK-DRAG-PROTO-ROOTWIN = 2;
define constant $GDK-DRAG-PROTO-NONE = 3;
define constant $GDK-DRAG-PROTO-WIN32-DROPFILES = 4;
define constant $GDK-DRAG-PROTO-OLE2 = 5;
define constant $GDK-DRAG-PROTO-LOCAL = 6;

define C-subtype <_GList> (<C-void*>) end;
define constant <GList> = <_GList>;

define constant <GdkDragAction> = <C-int>;
define constant $GDK-ACTION-DEFAULT = 1;
define constant $GDK-ACTION-COPY = 2;
define constant $GDK-ACTION-MOVE = 4;
define constant $GDK-ACTION-LINK = 8;
define constant $GDK-ACTION-PRIVATE = 16;
define constant $GDK-ACTION-ASK = 32;

define C-subtype <_GdkDragContext> (<_GObject>) end;
define constant <GdkDragContext> = <_GdkDragContext>;

define constant <gshort> = <C-signed-short>;

define C-subtype <_GdkEventDND> (<C-void*>) end;
define constant <GdkEventDND> = <_GdkEventDND>;

define constant <GdkWindowState> = <C-int>;
define constant $GDK-WINDOW-STATE-WITHDRAWN = 1;
define constant $GDK-WINDOW-STATE-ICONIFIED = 2;
define constant $GDK-WINDOW-STATE-MAXIMIZED = 4;
define constant $GDK-WINDOW-STATE-STICKY = 8;
define constant $GDK-WINDOW-STATE-FULLSCREEN = 16;
define constant $GDK-WINDOW-STATE-ABOVE = 32;
define constant $GDK-WINDOW-STATE-BELOW = 64;

define C-subtype <_GdkEventWindowState> (<C-void*>) end;
define constant <GdkEventWindowState> = <_GdkEventWindowState>;

define constant <GdkSettingAction> = <C-int>;
define constant $GDK-SETTING-ACTION-NEW = 0;
define constant $GDK-SETTING-ACTION-CHANGED = 1;
define constant $GDK-SETTING-ACTION-DELETED = 2;

define C-subtype <_GdkEventSetting> (<C-void*>) end;
define constant <GdkEventSetting> = <_GdkEventSetting>;

define C-subtype <_GdkEventGrabBroken> (<C-void*>) end;
define constant <GdkEventGrabBroken> = <_GdkEventGrabBroken>;

define C-subtype <_GdkEvent> (<C-void*>) end;
define constant <GdkEvent> = <_GdkEvent>;

define constant <anonymous-3655> = <C-function-pointer>;
define constant <anonymous-3656> = <C-function-pointer>;
define constant <anonymous-3657> = <C-function-pointer>;
define constant <anonymous-3658> = <C-function-pointer>;
define constant <anonymous-3659> = <C-function-pointer>;
define constant <anonymous-3660> = <C-function-pointer>;
define constant <anonymous-3661> = <C-function-pointer>;
define constant <anonymous-3662> = <C-function-pointer>;
define constant <anonymous-3663> = <C-function-pointer>;
define constant <anonymous-3664> = <C-function-pointer>;
define constant <anonymous-3665> = <C-function-pointer>;
define constant <anonymous-3666> = <C-function-pointer>;
define constant <anonymous-3667> = <C-function-pointer>;
define constant <anonymous-3668> = <C-function-pointer>;
define constant <anonymous-3669> = <C-function-pointer>;
define constant <anonymous-3670> = <C-function-pointer>;
define constant <anonymous-3671> = <C-function-pointer>;
define constant <anonymous-3672> = <C-function-pointer>;
define constant <anonymous-3673> = <C-function-pointer>;
define constant <anonymous-3674> = <C-function-pointer>;
define constant <anonymous-3675> = <C-function-pointer>;
define constant <anonymous-3676> = <C-function-pointer>;
define constant <anonymous-3677> = <C-function-pointer>;
define constant <anonymous-3678> = <C-function-pointer>;
define constant <anonymous-3679> = <C-function-pointer>;
define constant <anonymous-3680> = <C-function-pointer>;
define constant <anonymous-3681> = <C-function-pointer>;
define C-pointer-type <guchar*> => <guchar>;
define C-pointer-type <guint32*> => <guint32>;
define constant <guint32<@2>> = <guint32*>;
define C-pointer-type <GdkWindow*> => <GdkWindow>;
define constant <GdkWindow<@2>> = <GdkWindow*>;
define C-pointer-type <gint*> => <gint>;
define constant <gint<@2>> = <gint*>;
define C-pointer-type <GdkScreen*> => <GdkScreen>;
define C-pointer-type <GdkModifierType*> => <GdkModifierType>;
define constant <anonymous-2573> = <C-function-pointer>;
define constant <anonymous-2574> = <C-function-pointer>;
define constant <anonymous-2575> = <C-function-pointer>;
define C-subtype <_GdkDisplayPointerHooks> (<C-void*>) end;
define constant <GdkDisplayPointerHooks> = <_GdkDisplayPointerHooks>;

define C-subtype <_GdkDisplay> (<_GObject>) end;
define constant <GdkDisplay> = <_GdkDisplay>;

define C-subtype <_GtkSelectionData> (<C-void*>) end;
define constant <GtkSelectionData> = <_GtkSelectionData>;

define constant <anonymous-3682> = <C-function-pointer>;
define constant <anonymous-3683> = <C-function-pointer>;
define constant <anonymous-3684> = <C-function-pointer>;
define constant <anonymous-3685> = <C-function-pointer>;
define constant <anonymous-3686> = <C-function-pointer>;
define constant <anonymous-3687> = <C-function-pointer>;
define constant <anonymous-3688> = <C-function-pointer>;
define constant <anonymous-3689> = <C-function-pointer>;
define constant <anonymous-3690> = <C-function-pointer>;
define constant <anonymous-3691> = <C-function-pointer>;
define constant <anonymous-3692> = <C-function-pointer>;
define constant <GtkWidgetHelpType> = <C-int>;
define constant $GTK-WIDGET-HELP-TOOLTIP = 0;
define constant $GTK-WIDGET-HELP-WHATS-THIS = 1;

define constant <anonymous-3693> = <C-function-pointer>;
define constant <AtkRole> = <C-int>;
define constant $ATK-ROLE-INVALID = 0;
define constant $ATK-ROLE-ACCEL-LABEL = 1;
define constant $ATK-ROLE-ALERT = 2;
define constant $ATK-ROLE-ANIMATION = 3;
define constant $ATK-ROLE-ARROW = 4;
define constant $ATK-ROLE-CALENDAR = 5;
define constant $ATK-ROLE-CANVAS = 6;
define constant $ATK-ROLE-CHECK-BOX = 7;
define constant $ATK-ROLE-CHECK-MENU-ITEM = 8;
define constant $ATK-ROLE-COLOR-CHOOSER = 9;
define constant $ATK-ROLE-COLUMN-HEADER = 10;
define constant $ATK-ROLE-COMBO-BOX = 11;
define constant $ATK-ROLE-DATE-EDITOR = 12;
define constant $ATK-ROLE-DESKTOP-ICON = 13;
define constant $ATK-ROLE-DESKTOP-FRAME = 14;
define constant $ATK-ROLE-DIAL = 15;
define constant $ATK-ROLE-DIALOG = 16;
define constant $ATK-ROLE-DIRECTORY-PANE = 17;
define constant $ATK-ROLE-DRAWING-AREA = 18;
define constant $ATK-ROLE-FILE-CHOOSER = 19;
define constant $ATK-ROLE-FILLER = 20;
define constant $ATK-ROLE-FONT-CHOOSER = 21;
define constant $ATK-ROLE-FRAME = 22;
define constant $ATK-ROLE-GLASS-PANE = 23;
define constant $ATK-ROLE-HTML-CONTAINER = 24;
define constant $ATK-ROLE-ICON = 25;
define constant $ATK-ROLE-IMAGE = 26;
define constant $ATK-ROLE-INTERNAL-FRAME = 27;
define constant $ATK-ROLE-LABEL = 28;
define constant $ATK-ROLE-LAYERED-PANE = 29;
define constant $ATK-ROLE-LIST = 30;
define constant $ATK-ROLE-LIST-ITEM = 31;
define constant $ATK-ROLE-MENU = 32;
define constant $ATK-ROLE-MENU-BAR = 33;
define constant $ATK-ROLE-MENU-ITEM = 34;
define constant $ATK-ROLE-OPTION-PANE = 35;
define constant $ATK-ROLE-PAGE-TAB = 36;
define constant $ATK-ROLE-PAGE-TAB-LIST = 37;
define constant $ATK-ROLE-PANEL = 38;
define constant $ATK-ROLE-PASSWORD-TEXT = 39;
define constant $ATK-ROLE-POPUP-MENU = 40;
define constant $ATK-ROLE-PROGRESS-BAR = 41;
define constant $ATK-ROLE-PUSH-BUTTON = 42;
define constant $ATK-ROLE-RADIO-BUTTON = 43;
define constant $ATK-ROLE-RADIO-MENU-ITEM = 44;
define constant $ATK-ROLE-ROOT-PANE = 45;
define constant $ATK-ROLE-ROW-HEADER = 46;
define constant $ATK-ROLE-SCROLL-BAR = 47;
define constant $ATK-ROLE-SCROLL-PANE = 48;
define constant $ATK-ROLE-SEPARATOR = 49;
define constant $ATK-ROLE-SLIDER = 50;
define constant $ATK-ROLE-SPLIT-PANE = 51;
define constant $ATK-ROLE-SPIN-BUTTON = 52;
define constant $ATK-ROLE-STATUSBAR = 53;
define constant $ATK-ROLE-TABLE = 54;
define constant $ATK-ROLE-TABLE-CELL = 55;
define constant $ATK-ROLE-TABLE-COLUMN-HEADER = 56;
define constant $ATK-ROLE-TABLE-ROW-HEADER = 57;
define constant $ATK-ROLE-TEAR-OFF-MENU-ITEM = 58;
define constant $ATK-ROLE-TERMINAL = 59;
define constant $ATK-ROLE-TEXT = 60;
define constant $ATK-ROLE-TOGGLE-BUTTON = 61;
define constant $ATK-ROLE-TOOL-BAR = 62;
define constant $ATK-ROLE-TOOL-TIP = 63;
define constant $ATK-ROLE-TREE = 64;
define constant $ATK-ROLE-TREE-TABLE = 65;
define constant $ATK-ROLE-UNKNOWN = 66;
define constant $ATK-ROLE-VIEWPORT = 67;
define constant $ATK-ROLE-WINDOW = 68;
define constant $ATK-ROLE-HEADER = 69;
define constant $ATK-ROLE-FOOTER = 70;
define constant $ATK-ROLE-PARAGRAPH = 71;
define constant $ATK-ROLE-RULER = 72;
define constant $ATK-ROLE-APPLICATION = 73;
define constant $ATK-ROLE-AUTOCOMPLETE = 74;
define constant $ATK-ROLE-EDITBAR = 75;
define constant $ATK-ROLE-EMBEDDED = 76;
define constant $ATK-ROLE-ENTRY = 77;
define constant $ATK-ROLE-CHART = 78;
define constant $ATK-ROLE-CAPTION = 79;
define constant $ATK-ROLE-DOCUMENT-FRAME = 80;
define constant $ATK-ROLE-HEADING = 81;
define constant $ATK-ROLE-PAGE = 82;
define constant $ATK-ROLE-SECTION = 83;
define constant $ATK-ROLE-REDUNDANT-OBJECT = 84;
define constant $ATK-ROLE-FORM = 85;
define constant $ATK-ROLE-LINK = 86;
define constant $ATK-ROLE-INPUT-METHOD-WINDOW = 87;
define constant $ATK-ROLE-LAST-DEFINED = 88;

define C-subtype <_GPtrArray> (<C-void*>) end;
define constant <GPtrArray> = <_GPtrArray>;

define C-subtype <_AtkRelationSet> (<_GObject>) end;
define constant <AtkRelationSet> = <_AtkRelationSet>;

define constant <AtkLayer> = <C-int>;
define constant $ATK-LAYER-INVALID = 0;
define constant $ATK-LAYER-BACKGROUND = 1;
define constant $ATK-LAYER-CANVAS = 2;
define constant $ATK-LAYER-WIDGET = 3;
define constant $ATK-LAYER-MDI = 4;
define constant $ATK-LAYER-POPUP = 5;
define constant $ATK-LAYER-OVERLAY = 6;
define constant $ATK-LAYER-WINDOW = 7;

define C-subtype <_AtkObject> (<_GObject>) end;
define constant <AtkObject> = <_AtkObject>;

define constant <anonymous-3694> = <C-function-pointer>;
define constant <anonymous-3695> = <C-function-pointer>;
define constant <anonymous-3696> = <C-function-pointer>;
define constant <anonymous-3697> = <C-function-pointer>;
define constant <anonymous-3698> = <C-function-pointer>;
define constant <anonymous-3699> = <C-function-pointer>;
define constant <anonymous-3700> = <C-function-pointer>;
define constant <anonymous-3701> = <C-function-pointer>;
define constant <anonymous-3702> = <C-function-pointer>;
define C-subtype <_GtkWidgetClass> (<C-void*>) end;
define constant <GtkWidgetClass> = <_GtkWidgetClass>;

define constant <anonymous-3852> = <C-function-pointer>;
define constant <anonymous-3853> = <C-function-pointer>;
define constant <anonymous-3854> = <C-function-pointer>;
define constant <anonymous-3633> = <C-function-pointer>;
define constant <GtkCallback> = <anonymous-3633>;

define constant <anonymous-3855> = <C-function-pointer>;
define constant <anonymous-3856> = <C-function-pointer>;
define constant <anonymous-3857> = <C-function-pointer>;
define constant <anonymous-3858> = <C-function-pointer>;
define constant <anonymous-3859> = <C-function-pointer>;
define constant <anonymous-3860> = <C-function-pointer>;
define constant <anonymous-3861> = <C-function-pointer>;
define constant <anonymous-3862> = <C-function-pointer>;
define constant <anonymous-3863> = <C-function-pointer>;
define constant <anonymous-3864> = <C-function-pointer>;
define C-subtype <_GtkContainerClass> (<C-void*>) end;
define constant <GtkContainerClass> = <_GtkContainerClass>;

define C-subtype <_GtkBinClass> (<C-void*>) end;
define constant <GtkBinClass> = <_GtkBinClass>;

define constant <anonymous-3926> = <C-function-pointer>;
define constant <anonymous-3927> = <C-function-pointer>;
define constant <anonymous-3928> = <C-function-pointer>;
define constant <anonymous-3929> = <C-function-pointer>;
define constant <anonymous-3930> = <C-function-pointer>;
define constant <anonymous-3931> = <C-function-pointer>;
define constant <anonymous-3932> = <C-function-pointer>;
define constant <anonymous-3933> = <C-function-pointer>;
define constant <anonymous-3934> = <C-function-pointer>;
define constant <anonymous-3935> = <C-function-pointer>;
define C-subtype <_GtkWindowClass> (<C-void*>) end;
define constant <GtkWindowClass> = <_GtkWindowClass>;

define constant <GObjectClass> = <_GObjectClass>;

define constant <anonymous-3936> = <C-function-pointer>;
define constant <anonymous-3937> = <C-function-pointer>;
define constant <anonymous-3938> = <C-function-pointer>;
define constant <anonymous-3939> = <C-function-pointer>;
define C-subtype <_GtkWindowGroupClass> (<C-void*>) end;
define constant <GtkWindowGroupClass> = <_GtkWindowGroupClass>;

define C-function gtk-window-get-type
  result res :: <GType>;
  c-name: "gtk_window_get_type";
end;

define constant <GtkWindowType> = <C-int>;
define constant $GTK-WINDOW-TOPLEVEL = 0;
define constant $GTK-WINDOW-POPUP = 1;

define C-function gtk-window-new
  input parameter arg1 :: <GtkWindowType>;
  result res :: <GtkWidget>;
  c-name: "gtk_window_new";
end;

define C-function gtk-window-set-title
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_window_set_title";
end;

define C-function gtk-window-get-title
  input parameter arg1 :: <GtkWindow>;
  result res :: <gchar*>;
  c-name: "gtk_window_get_title";
end;

define C-function gtk-window-set-wmclass
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_window_set_wmclass";
end;

define C-function gtk-window-set-role
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_window_set_role";
end;

define C-function gtk-window-get-role
  input parameter arg1 :: <GtkWindow>;
  result res :: <gchar*>;
  c-name: "gtk_window_get_role";
end;

define C-subtype <_GtkAccelKey> (<C-void*>) end;
define constant <GtkAccelKey> = <_GtkAccelKey>;

define constant <anonymous-1573> = <C-function-pointer>;
define constant <anonymous-1561> = <C-function-pointer>;
define constant <GClosureNotify> = <anonymous-1561>;

define C-subtype <_GClosureNotifyData> (<C-void*>) end;
define constant <GClosureNotifyData> = <_GClosureNotifyData>;

define C-subtype <_GClosure> (<C-void*>) end;
define constant <GClosure> = <_GClosure>;

define constant <GQuark> = <guint32>;

define C-subtype <_GtkAccelGroupEntry> (<C-void*>) end;
define constant <GtkAccelGroupEntry> = <_GtkAccelGroupEntry>;

define C-subtype <_GtkAccelGroup> (<_GObject>) end;
define constant <GtkAccelGroup> = <_GtkAccelGroup>;

define C-function gtk-window-add-accel-group
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkAccelGroup>;
  c-name: "gtk_window_add_accel_group";
end;

define C-function gtk-window-remove-accel-group
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkAccelGroup>;
  c-name: "gtk_window_remove_accel_group";
end;

define constant <GtkWindowPosition> = <C-int>;
define constant $GTK-WIN-POS-NONE = 0;
define constant $GTK-WIN-POS-CENTER = 1;
define constant $GTK-WIN-POS-MOUSE = 2;
define constant $GTK-WIN-POS-CENTER-ALWAYS = 3;
define constant $GTK-WIN-POS-CENTER-ON-PARENT = 4;

define C-function gtk-window-set-position
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkWindowPosition>;
  c-name: "gtk_window_set_position";
end;

define C-function gtk-window-activate-focus
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_activate_focus";
end;

define C-function gtk-window-set-focus
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_window_set_focus";
end;

define C-function gtk-window-get-focus
  input parameter arg1 :: <GtkWindow>;
  result res :: <GtkWidget>;
  c-name: "gtk_window_get_focus";
end;

define C-function gtk-window-set-default
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_window_set_default";
end;

define C-function gtk-window-activate-default
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_activate_default";
end;

define C-function gtk-window-set-transient-for
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkWindow>;
  c-name: "gtk_window_set_transient_for";
end;

define C-function gtk-window-get-transient-for
  input parameter arg1 :: <GtkWindow>;
  result res :: <GtkWindow>;
  c-name: "gtk_window_get_transient_for";
end;

define constant <GdkWindowTypeHint> = <C-int>;
define constant $GDK-WINDOW-TYPE-HINT-NORMAL = 0;
define constant $GDK-WINDOW-TYPE-HINT-DIALOG = 1;
define constant $GDK-WINDOW-TYPE-HINT-MENU = 2;
define constant $GDK-WINDOW-TYPE-HINT-TOOLBAR = 3;
define constant $GDK-WINDOW-TYPE-HINT-SPLASHSCREEN = 4;
define constant $GDK-WINDOW-TYPE-HINT-UTILITY = 5;
define constant $GDK-WINDOW-TYPE-HINT-DOCK = 6;
define constant $GDK-WINDOW-TYPE-HINT-DESKTOP = 7;
define constant $GDK-WINDOW-TYPE-HINT-DROPDOWN-MENU = 8;
define constant $GDK-WINDOW-TYPE-HINT-POPUP-MENU = 9;
define constant $GDK-WINDOW-TYPE-HINT-TOOLTIP = 10;
define constant $GDK-WINDOW-TYPE-HINT-NOTIFICATION = 11;
define constant $GDK-WINDOW-TYPE-HINT-COMBO = 12;
define constant $GDK-WINDOW-TYPE-HINT-DND = 13;

define C-function gtk-window-set-type-hint
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GdkWindowTypeHint>;
  c-name: "gtk_window_set_type_hint";
end;

define C-function gtk-window-get-type-hint
  input parameter arg1 :: <GtkWindow>;
  result res :: <GdkWindowTypeHint>;
  c-name: "gtk_window_get_type_hint";
end;

define C-function gtk-window-set-skip-taskbar-hint
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_skip_taskbar_hint";
end;

define C-function gtk-window-get-skip-taskbar-hint
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_skip_taskbar_hint";
end;

define C-function gtk-window-set-skip-pager-hint
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_skip_pager_hint";
end;

define C-function gtk-window-get-skip-pager-hint
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_skip_pager_hint";
end;

define C-function gtk-window-set-urgency-hint
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_urgency_hint";
end;

define C-function gtk-window-get-urgency-hint
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_urgency_hint";
end;

define C-function gtk-window-set-accept-focus
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_accept_focus";
end;

define C-function gtk-window-get-accept-focus
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_accept_focus";
end;

define C-function gtk-window-set-focus-on-map
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_focus_on_map";
end;

define C-function gtk-window-get-focus-on-map
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_focus_on_map";
end;

define C-function gtk-window-set-destroy-with-parent
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_destroy_with_parent";
end;

define C-function gtk-window-get-destroy-with-parent
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_destroy_with_parent";
end;

define C-function gtk-window-set-resizable
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_resizable";
end;

define C-function gtk-window-get-resizable
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_resizable";
end;

define constant <GdkGravity> = <C-int>;
define constant $GDK-GRAVITY-NORTH-WEST = 1;
define constant $GDK-GRAVITY-NORTH = 2;
define constant $GDK-GRAVITY-NORTH-EAST = 3;
define constant $GDK-GRAVITY-WEST = 4;
define constant $GDK-GRAVITY-CENTER = 5;
define constant $GDK-GRAVITY-EAST = 6;
define constant $GDK-GRAVITY-SOUTH-WEST = 7;
define constant $GDK-GRAVITY-SOUTH = 8;
define constant $GDK-GRAVITY-SOUTH-EAST = 9;
define constant $GDK-GRAVITY-STATIC = 10;

define C-function gtk-window-set-gravity
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GdkGravity>;
  c-name: "gtk_window_set_gravity";
end;

define C-function gtk-window-get-gravity
  input parameter arg1 :: <GtkWindow>;
  result res :: <GdkGravity>;
  c-name: "gtk_window_get_gravity";
end;

define C-subtype <_GdkGeometry> (<C-void*>) end;
define constant <GdkGeometry> = <_GdkGeometry>;

define constant <GdkWindowHints> = <C-int>;
define constant $GDK-HINT-POS = 1;
define constant $GDK-HINT-MIN-SIZE = 2;
define constant $GDK-HINT-MAX-SIZE = 4;
define constant $GDK-HINT-BASE-SIZE = 8;
define constant $GDK-HINT-ASPECT = 16;
define constant $GDK-HINT-RESIZE-INC = 32;
define constant $GDK-HINT-WIN-GRAVITY = 64;
define constant $GDK-HINT-USER-POS = 128;
define constant $GDK-HINT-USER-SIZE = 256;

define C-function gtk-window-set-geometry-hints
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GdkGeometry>;
  input parameter arg4 :: <GdkWindowHints>;
  c-name: "gtk_window_set_geometry_hints";
end;

define C-function gtk-window-set-screen
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GdkScreen>;
  c-name: "gtk_window_set_screen";
end;

define C-function gtk-window-get-screen
  input parameter arg1 :: <GtkWindow>;
  result res :: <GdkScreen>;
  c-name: "gtk_window_get_screen";
end;

define C-function gtk-window-is-active
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_is_active";
end;

define C-function gtk-window-has-toplevel-focus
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_has_toplevel_focus";
end;

define C-function gtk-window-set-has-frame
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_has_frame";
end;

define C-function gtk-window-get-has-frame
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_has_frame";
end;

define C-function gtk-window-set-frame-dimensions
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_window_set_frame_dimensions";
end;

define C-function gtk-window-get-frame-dimensions
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  c-name: "gtk_window_get_frame_dimensions";
end;

define C-function gtk-window-set-decorated
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_decorated";
end;

define C-function gtk-window-get-decorated
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_decorated";
end;

define C-function gtk-window-set-deletable
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_deletable";
end;

define C-function gtk-window-get-deletable
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_deletable";
end;

define C-function gtk-window-set-icon-list
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GList>;
  c-name: "gtk_window_set_icon_list";
end;

define C-function gtk-window-get-icon-list
  input parameter arg1 :: <GtkWindow>;
  result res :: <GList>;
  c-name: "gtk_window_get_icon_list";
end;

define C-subtype <_GdkPixbuf> (<_GObject>) end;
define constant <GdkPixbuf> = <_GdkPixbuf>;

define C-function gtk-window-set-icon
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GdkPixbuf>;
  c-name: "gtk_window_set_icon";
end;

define C-function gtk-window-set-icon-name
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_window_set_icon_name";
end;

define C-subtype <_GError> (<C-void*>) end;
define constant <GError> = <_GError>;

define C-pointer-type <GError*> => <GError>;
define C-function gtk-window-set-icon-from-file-utf8
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_window_set_icon_from_file_utf8";
end;

define C-function gtk-window-get-icon
  input parameter arg1 :: <GtkWindow>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_window_get_icon";
end;

define C-function gtk-window-get-icon-name
  input parameter arg1 :: <GtkWindow>;
  result res :: <gchar*>;
  c-name: "gtk_window_get_icon_name";
end;

define C-function gtk-window-set-default-icon-list
  input parameter arg1 :: <GList>;
  c-name: "gtk_window_set_default_icon_list";
end;

define C-function gtk-window-get-default-icon-list
  result res :: <GList>;
  c-name: "gtk_window_get_default_icon_list";
end;

define C-function gtk-window-set-default-icon
  input parameter arg1 :: <GdkPixbuf>;
  c-name: "gtk_window_set_default_icon";
end;

define C-function gtk-window-set-default-icon-name
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_window_set_default_icon_name";
end;

define C-function gtk-window-set-default-icon-from-file-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_window_set_default_icon_from_file_utf8";
end;

define C-function gtk-window-set-auto-startup-notification
  input parameter arg1 :: <gboolean>;
  c-name: "gtk_window_set_auto_startup_notification";
end;

define C-function gtk-window-set-modal
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_modal";
end;

define C-function gtk-window-get-modal
  input parameter arg1 :: <GtkWindow>;
  result res :: <gboolean>;
  c-name: "gtk_window_get_modal";
end;

define C-function gtk-window-list-toplevels
  result res :: <GList>;
  c-name: "gtk_window_list_toplevels";
end;

define C-function gtk-window-add-mnemonic
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GtkWidget>;
  c-name: "gtk_window_add_mnemonic";
end;

define C-function gtk-window-remove-mnemonic
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GtkWidget>;
  c-name: "gtk_window_remove_mnemonic";
end;

define C-function gtk-window-mnemonic-activate
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  result res :: <gboolean>;
  c-name: "gtk_window_mnemonic_activate";
end;

define C-function gtk-window-set-mnemonic-modifier
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GdkModifierType>;
  c-name: "gtk_window_set_mnemonic_modifier";
end;

define C-function gtk-window-get-mnemonic-modifier
  input parameter arg1 :: <GtkWindow>;
  result res :: <GdkModifierType>;
  c-name: "gtk_window_get_mnemonic_modifier";
end;

define C-function gtk-window-activate-key
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GdkEventKey>;
  result res :: <gboolean>;
  c-name: "gtk_window_activate_key";
end;

define C-function gtk-window-propagate-key-event
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GdkEventKey>;
  result res :: <gboolean>;
  c-name: "gtk_window_propagate_key_event";
end;

define C-function gtk-window-present
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_present";
end;

define C-function gtk-window-present-with-time
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <guint32>;
  c-name: "gtk_window_present_with_time";
end;

define C-function gtk-window-iconify
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_iconify";
end;

define C-function gtk-window-deiconify
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_deiconify";
end;

define C-function gtk-window-stick
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_stick";
end;

define C-function gtk-window-unstick
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_unstick";
end;

define C-function gtk-window-maximize
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_maximize";
end;

define C-function gtk-window-unmaximize
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_unmaximize";
end;

define C-function gtk-window-fullscreen
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_fullscreen";
end;

define C-function gtk-window-unfullscreen
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_unfullscreen";
end;

define C-function gtk-window-set-keep-above
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_keep_above";
end;

define C-function gtk-window-set-keep-below
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_window_set_keep_below";
end;

define constant <GdkWindowEdge> = <C-int>;
define constant $GDK-WINDOW-EDGE-NORTH-WEST = 0;
define constant $GDK-WINDOW-EDGE-NORTH = 1;
define constant $GDK-WINDOW-EDGE-NORTH-EAST = 2;
define constant $GDK-WINDOW-EDGE-WEST = 3;
define constant $GDK-WINDOW-EDGE-EAST = 4;
define constant $GDK-WINDOW-EDGE-SOUTH-WEST = 5;
define constant $GDK-WINDOW-EDGE-SOUTH = 6;
define constant $GDK-WINDOW-EDGE-SOUTH-EAST = 7;

define C-function gtk-window-begin-resize-drag
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GdkWindowEdge>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <guint32>;
  c-name: "gtk_window_begin_resize_drag";
end;

define C-function gtk-window-begin-move-drag
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <guint32>;
  c-name: "gtk_window_begin_move_drag";
end;

define C-function gtk-window-set-policy
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_window_set_policy";
end;

define C-function gtk-window-set-default-size
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_window_set_default_size";
end;

define C-function gtk-window-get-default-size
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_window_get_default_size";
end;

define C-function gtk-window-resize
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_window_resize";
end;

define C-function gtk-window-get-size
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_window_get_size";
end;

define C-function gtk-window-move
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_window_move";
end;

define C-function gtk-window-get-position
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_window_get_position";
end;

define C-function gtk-window-parse-geometry
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_window_parse_geometry";
end;

define C-function gtk-window-get-group
  input parameter arg1 :: <GtkWindow>;
  result res :: <GtkWindowGroup>;
  c-name: "gtk_window_get_group";
end;

define C-function gtk-window-reshow-with-initial-size
  input parameter arg1 :: <GtkWindow>;
  c-name: "gtk_window_reshow_with_initial_size";
end;

define C-function gtk-window-group-get-type
  result res :: <GType>;
  c-name: "gtk_window_group_get_type";
end;

define C-function gtk-window-group-new
  result res :: <GtkWindowGroup>;
  c-name: "gtk_window_group_new";
end;

define C-function gtk-window-group-add-window
  input parameter arg1 :: <GtkWindowGroup>;
  input parameter arg2 :: <GtkWindow>;
  c-name: "gtk_window_group_add_window";
end;

define C-function gtk-window-group-remove-window
  input parameter arg1 :: <GtkWindowGroup>;
  input parameter arg2 :: <GtkWindow>;
  c-name: "gtk_window_group_remove_window";
end;

define C-function gtk-window-remove-embedded-xid
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_window_remove_embedded_xid";
end;

define C-function gtk-window-add-embedded-xid
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_window_add_embedded_xid";
end;

define constant <anonymous-4048> = <C-function-pointer>;
define constant <GtkWindowKeysForeachFunc> = <anonymous-4048>;

define constant gtk-window-set-icon-from-file = gtk-window-set-icon-from-file-utf8;

define constant gtk-window-set-default-icon-from-file = gtk-window-set-default-icon-from-file-utf8;

define constant gtk-window-position = gtk-window-set-position;

define constant <GtkWidgetFlags> = <C-int>;
define constant $GTK-TOPLEVEL = 16;
define constant $GTK-NO-WINDOW = 32;
define constant $GTK-REALIZED = 64;
define constant $GTK-MAPPED = 128;
define constant $GTK-VISIBLE = 256;
define constant $GTK-SENSITIVE = 512;
define constant $GTK-PARENT-SENSITIVE = 1024;
define constant $GTK-CAN-FOCUS = 2048;
define constant $GTK-HAS-FOCUS = 4096;
define constant $GTK-CAN-DEFAULT = 8192;
define constant $GTK-HAS-DEFAULT = 16384;
define constant $GTK-HAS-GRAB = 32768;
define constant $GTK-RC-STYLE = 65536;
define constant $GTK-COMPOSITE-CHILD = 131072;
define constant $GTK-NO-REPARENT = 262144;
define constant $GTK-APP-PAINTABLE = 524288;
define constant $GTK-RECEIVES-DEFAULT = 1048576;
define constant $GTK-DOUBLE-BUFFERED = 2097152;
define constant $GTK-NO-SHOW-ALL = 4194304;

define C-subtype <_GtkWidgetAuxInfo> (<C-void*>) end;
define constant <GtkWidgetAuxInfo> = <_GtkWidgetAuxInfo>;

define constant <GdkBitmap> = <_GdkDrawable>;

define C-subtype <_GtkWidgetShapeInfo> (<C-void*>) end;
define constant <GtkWidgetShapeInfo> = <_GtkWidgetShapeInfo>;

define C-subtype <_GtkClipboard> (<_GObject>) end;
define constant <GtkClipboard> = <_GtkClipboard>;

define C-function gtk-widget-get-type
  result res :: <GType>;
  c-name: "gtk_widget_get_type";
end;

define C-function gtk-widget-new
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_widget_new";
end;

define C-function gtk-widget-ref
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkWidget>;
  c-name: "gtk_widget_ref";
end;

define C-function gtk-widget-unref
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_unref";
end;

define C-function gtk-widget-destroy
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_destroy";
end;

define C-pointer-type <GtkWidget*> => <GtkWidget>;
define C-function gtk-widget-destroyed
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkWidget*>;
  c-name: "gtk_widget_destroyed";
end;

define C-function gtk-widget-set
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_widget_set";
end;

define C-function gtk-widget-unparent
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_unparent";
end;

define C-function gtk-widget-show
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_show";
end;

define C-function gtk-widget-show-now
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_show_now";
end;

define C-function gtk-widget-hide
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_hide";
end;

define C-function gtk-widget-show-all
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_show_all";
end;

define C-function gtk-widget-hide-all
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_hide_all";
end;

define C-function gtk-widget-set-no-show-all
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_widget_set_no_show_all";
end;

define C-function gtk-widget-get-no-show-all
  input parameter arg1 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_widget_get_no_show_all";
end;

define C-function gtk-widget-map
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_map";
end;

define C-function gtk-widget-unmap
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_unmap";
end;

define C-function gtk-widget-realize
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_realize";
end;

define C-function gtk-widget-unrealize
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_unrealize";
end;

define C-function gtk-widget-queue-draw
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_queue_draw";
end;

define C-function gtk-widget-queue-draw-area
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_widget_queue_draw_area";
end;

define C-function gtk-widget-queue-clear
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_queue_clear";
end;

define C-function gtk-widget-queue-clear-area
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_widget_queue_clear_area";
end;

define C-function gtk-widget-queue-resize
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_queue_resize";
end;

define C-function gtk-widget-queue-resize-no-redraw
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_queue_resize_no_redraw";
end;

define C-function gtk-widget-draw
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gtk_widget_draw";
end;

define C-function gtk-widget-size-request
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkRequisition>;
  c-name: "gtk_widget_size_request";
end;

define C-function gtk-widget-size-allocate
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkAllocation>;
  c-name: "gtk_widget_size_allocate";
end;

define C-function gtk-widget-get-child-requisition
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkRequisition>;
  c-name: "gtk_widget_get_child_requisition";
end;

define constant <GtkAccelFlags> = <C-int>;
define constant $GTK-ACCEL-VISIBLE = 1;
define constant $GTK-ACCEL-LOCKED = 2;
define constant $GTK-ACCEL-MASK = 7;

define C-function gtk-widget-add-accelerator
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkAccelGroup>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <GdkModifierType>;
  input parameter arg6 :: <GtkAccelFlags>;
  c-name: "gtk_widget_add_accelerator";
end;

define C-function gtk-widget-remove-accelerator
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkAccelGroup>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GdkModifierType>;
  result res :: <gboolean>;
  c-name: "gtk_widget_remove_accelerator";
end;

define C-function gtk-widget-set-accel-path
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkAccelGroup>;
  c-name: "gtk_widget_set_accel_path";
end;

define C-function gtk-widget-list-accel-closures
  input parameter arg1 :: <GtkWidget>;
  result res :: <GList>;
  c-name: "gtk_widget_list_accel_closures";
end;

define C-function gtk-widget-can-activate-accel
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <guint>;
  result res :: <gboolean>;
  c-name: "gtk_widget_can_activate_accel";
end;

define C-function gtk-widget-mnemonic-activate
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_widget_mnemonic_activate";
end;

define C-function gtk-widget-event
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkEvent>;
  result res :: <gboolean>;
  c-name: "gtk_widget_event";
end;

define C-function gtk-widget-send-expose
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkEvent>;
  result res :: <gint>;
  c-name: "gtk_widget_send_expose";
end;

define C-function gtk-widget-activate
  input parameter arg1 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_widget_activate";
end;

define C-subtype <_GtkAdjustment> (<_GtkObject>) end;
define constant <GtkAdjustment> = <_GtkAdjustment>;

define C-function gtk-widget-set-scroll-adjustments
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkAdjustment>;
  input parameter arg3 :: <GtkAdjustment>;
  result res :: <gboolean>;
  c-name: "gtk_widget_set_scroll_adjustments";
end;

define C-function gtk-widget-reparent
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_widget_reparent";
end;

define C-function gtk-widget-intersect
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkRectangle>;
  input parameter arg3 :: <GdkRectangle>;
  result res :: <gboolean>;
  c-name: "gtk_widget_intersect";
end;

define C-function gtk-widget-region-intersect
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkRegion>;
  result res :: <GdkRegion>;
  c-name: "gtk_widget_region_intersect";
end;

define C-function gtk-widget-freeze-child-notify
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_freeze_child_notify";
end;

define C-function gtk-widget-child-notify
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_widget_child_notify";
end;

define C-function gtk-widget-thaw-child-notify
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_thaw_child_notify";
end;

define C-function gtk-widget-is-focus
  input parameter arg1 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_widget_is_focus";
end;

define C-function gtk-widget-grab-focus
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_grab_focus";
end;

define C-function gtk-widget-grab-default
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_grab_default";
end;

define C-function gtk-widget-set-name
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_widget_set_name";
end;

define C-function gtk-widget-get-name
  input parameter arg1 :: <GtkWidget>;
  result res :: <gchar*>;
  c-name: "gtk_widget_get_name";
end;

define C-function gtk-widget-set-state
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkStateType>;
  c-name: "gtk_widget_set_state";
end;

define C-function gtk-widget-set-sensitive
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_widget_set_sensitive";
end;

define C-function gtk-widget-set-app-paintable
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_widget_set_app_paintable";
end;

define C-function gtk-widget-set-double-buffered
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_widget_set_double_buffered";
end;

define C-function gtk-widget-set-redraw-on-allocate
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_widget_set_redraw_on_allocate";
end;

define C-function gtk-widget-set-parent
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_widget_set_parent";
end;

define C-function gtk-widget-set-parent-window
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkWindow>;
  c-name: "gtk_widget_set_parent_window";
end;

define C-function gtk-widget-set-child-visible
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_widget_set_child_visible";
end;

define C-function gtk-widget-get-child-visible
  input parameter arg1 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_widget_get_child_visible";
end;

define C-function gtk-widget-get-parent
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkWidget>;
  c-name: "gtk_widget_get_parent";
end;

define C-function gtk-widget-get-parent-window
  input parameter arg1 :: <GtkWidget>;
  result res :: <GdkWindow>;
  c-name: "gtk_widget_get_parent_window";
end;

define C-function gtk-widget-child-focus
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkDirectionType>;
  result res :: <gboolean>;
  c-name: "gtk_widget_child_focus";
end;

define C-function gtk-widget-set-size-request
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_widget_set_size_request";
end;

define C-function gtk-widget-get-size-request
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_widget_get_size_request";
end;

define C-function gtk-widget-set-uposition
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_widget_set_uposition";
end;

define C-function gtk-widget-set-usize
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_widget_set_usize";
end;

define C-function gtk-widget-set-events
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_widget_set_events";
end;

define C-function gtk-widget-add-events
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_widget_add_events";
end;

define constant <GdkExtensionMode> = <C-int>;
define constant $GDK-EXTENSION-EVENTS-NONE = 0;
define constant $GDK-EXTENSION-EVENTS-ALL = 1;
define constant $GDK-EXTENSION-EVENTS-CURSOR = 2;

define C-function gtk-widget-set-extension-events
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkExtensionMode>;
  c-name: "gtk_widget_set_extension_events";
end;

define C-function gtk-widget-get-extension-events
  input parameter arg1 :: <GtkWidget>;
  result res :: <GdkExtensionMode>;
  c-name: "gtk_widget_get_extension_events";
end;

define C-function gtk-widget-get-toplevel
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkWidget>;
  c-name: "gtk_widget_get_toplevel";
end;

define C-function gtk-widget-get-ancestor
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GType>;
  result res :: <GtkWidget>;
  c-name: "gtk_widget_get_ancestor";
end;

define C-function gtk-widget-get-colormap
  input parameter arg1 :: <GtkWidget>;
  result res :: <GdkColormap>;
  c-name: "gtk_widget_get_colormap";
end;

define C-function gtk-widget-get-visual
  input parameter arg1 :: <GtkWidget>;
  result res :: <GdkVisual>;
  c-name: "gtk_widget_get_visual";
end;

define C-function gtk-widget-get-screen
  input parameter arg1 :: <GtkWidget>;
  result res :: <GdkScreen>;
  c-name: "gtk_widget_get_screen";
end;

define C-function gtk-widget-has-screen
  input parameter arg1 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_widget_has_screen";
end;

define C-function gtk-widget-get-display
  input parameter arg1 :: <GtkWidget>;
  result res :: <GdkDisplay>;
  c-name: "gtk_widget_get_display";
end;

define C-function gtk-widget-get-root-window
  input parameter arg1 :: <GtkWidget>;
  result res :: <GdkWindow>;
  c-name: "gtk_widget_get_root_window";
end;

define C-subtype <_GtkSettingsPropertyValue> (<C-void*>) end;
define constant <GtkSettingsPropertyValue> = <_GtkSettingsPropertyValue>;

define C-subtype <_GtkRcContext> (<C-void*>) end;
define constant <GtkRcContext> = <_GtkRcContext>;

define C-subtype <_GtkSettings> (<_GObject>) end;
define constant <GtkSettings> = <_GtkSettings>;

define C-function gtk-widget-get-settings
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkSettings>;
  c-name: "gtk_widget_get_settings";
end;

define C-function gtk-widget-get-clipboard
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkAtom>;
  result res :: <GtkClipboard>;
  c-name: "gtk_widget_get_clipboard";
end;

define C-function gtk-widget-get-accessible
  input parameter arg1 :: <GtkWidget>;
  result res :: <AtkObject>;
  c-name: "gtk_widget_get_accessible";
end;

define C-function gtk-widget-set-colormap
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkColormap>;
  c-name: "gtk_widget_set_colormap";
end;

define C-function gtk-widget-get-events
  input parameter arg1 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_widget_get_events";
end;

define C-function gtk-widget-get-pointer
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_widget_get_pointer";
end;

define C-function gtk-widget-is-ancestor
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_widget_is_ancestor";
end;

define C-function gtk-widget-translate-coordinates
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_widget_translate_coordinates";
end;

define C-function gtk-widget-hide-on-delete
  input parameter arg1 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_widget_hide_on_delete";
end;

define C-function gtk-widget-set-style
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkStyle>;
  c-name: "gtk_widget_set_style";
end;

define C-function gtk-widget-ensure-style
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_ensure_style";
end;

define C-function gtk-widget-get-style
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkStyle>;
  c-name: "gtk_widget_get_style";
end;

define C-function gtk-widget-modify-style
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkRcStyle>;
  c-name: "gtk_widget_modify_style";
end;

define C-function gtk-widget-get-modifier-style
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkRcStyle>;
  c-name: "gtk_widget_get_modifier_style";
end;

define C-function gtk-widget-modify-fg
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkStateType>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gtk_widget_modify_fg";
end;

define C-function gtk-widget-modify-bg
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkStateType>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gtk_widget_modify_bg";
end;

define C-function gtk-widget-modify-text
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkStateType>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gtk_widget_modify_text";
end;

define C-function gtk-widget-modify-base
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkStateType>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gtk_widget_modify_base";
end;

define C-function gtk-widget-modify-font
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <PangoFontDescription>;
  c-name: "gtk_widget_modify_font";
end;

define C-subtype <_PangoContext> (<_GObject>) end;
define constant <PangoContext> = <_PangoContext>;

define C-function gtk-widget-create-pango-context
  input parameter arg1 :: <GtkWidget>;
  result res :: <PangoContext>;
  c-name: "gtk_widget_create_pango_context";
end;

define C-function gtk-widget-get-pango-context
  input parameter arg1 :: <GtkWidget>;
  result res :: <PangoContext>;
  c-name: "gtk_widget_get_pango_context";
end;

define C-subtype <_PangoLayout> (<_GObject>) end;
define constant <PangoLayout> = <_PangoLayout>;

define C-function gtk-widget-create-pango-layout
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  result res :: <PangoLayout>;
  c-name: "gtk_widget_create_pango_layout";
end;

define constant <GtkIconSize> = <C-int>;
define constant $GTK-ICON-SIZE-INVALID = 0;
define constant $GTK-ICON-SIZE-MENU = 1;
define constant $GTK-ICON-SIZE-SMALL-TOOLBAR = 2;
define constant $GTK-ICON-SIZE-LARGE-TOOLBAR = 3;
define constant $GTK-ICON-SIZE-BUTTON = 4;
define constant $GTK-ICON-SIZE-DND = 5;
define constant $GTK-ICON-SIZE-DIALOG = 6;

define C-function gtk-widget-render-icon
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkIconSize>;
  input parameter arg4 :: <gchar*>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_widget_render_icon";
end;

define C-function gtk-widget-set-composite-name
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_widget_set_composite_name";
end;

define C-function gtk-widget-get-composite-name
  input parameter arg1 :: <GtkWidget>;
  result res :: <gchar*>;
  c-name: "gtk_widget_get_composite_name";
end;

define C-function gtk-widget-reset-rc-styles
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_reset_rc_styles";
end;

define C-function gtk-widget-push-colormap
  input parameter arg1 :: <GdkColormap>;
  c-name: "gtk_widget_push_colormap";
end;

define C-function gtk-widget-push-composite-child
  c-name: "gtk_widget_push_composite_child";
end;

define C-function gtk-widget-pop-composite-child
  c-name: "gtk_widget_pop_composite_child";
end;

define C-function gtk-widget-pop-colormap
  c-name: "gtk_widget_pop_colormap";
end;

define C-function gtk-widget-class-install-style-property
  input parameter arg1 :: <GtkWidgetClass>;
  input parameter arg2 :: <GParamSpec>;
  c-name: "gtk_widget_class_install_style_property";
end;

define constant <gsize> = <C-unsigned-int>;

define C-subtype <_GString> (<C-void*>) end;
define constant <GString> = <_GString>;

define constant <anonymous-3397> = <C-function-pointer>;
define constant <GtkRcPropertyParser> = <anonymous-3397>;

define C-function gtk-widget-class-install-style-property-parser
  input parameter arg1 :: <GtkWidgetClass>;
  input parameter arg2 :: <GParamSpec>;
  input parameter arg3 :: <GtkRcPropertyParser>;
  c-name: "gtk_widget_class_install_style_property_parser";
end;

define C-function gtk-widget-class-find-style-property
  input parameter arg1 :: <GtkWidgetClass>;
  input parameter arg2 :: <gchar*>;
  result res :: <GParamSpec>;
  c-name: "gtk_widget_class_find_style_property";
end;

define C-pointer-type <guint*> => <guint>;
define C-function gtk-widget-class-list-style-properties
  input parameter arg1 :: <GtkWidgetClass>;
  input parameter arg2 :: <guint*>;
  result res :: <GParamSpec*>;
  c-name: "gtk_widget_class_list_style_properties";
end;

define C-function gtk-widget-style-get-property
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GValue>;
  c-name: "gtk_widget_style_get_property";
end;

define constant <va-list> = <char*>;

define C-function gtk-widget-style-get-valist
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <va-list>;
  c-name: "gtk_widget_style_get_valist";
end;

define C-function gtk-widget-style-get
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_widget_style_get";
end;

define C-function gtk-widget-set-default-colormap
  input parameter arg1 :: <GdkColormap>;
  c-name: "gtk_widget_set_default_colormap";
end;

define C-function gtk-widget-get-default-style
  result res :: <GtkStyle>;
  c-name: "gtk_widget_get_default_style";
end;

define C-function gtk-widget-get-default-colormap
  result res :: <GdkColormap>;
  c-name: "gtk_widget_get_default_colormap";
end;

define C-function gtk-widget-get-default-visual
  result res :: <GdkVisual>;
  c-name: "gtk_widget_get_default_visual";
end;

define C-function gtk-widget-set-direction
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkTextDirection>;
  c-name: "gtk_widget_set_direction";
end;

define C-function gtk-widget-get-direction
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkTextDirection>;
  c-name: "gtk_widget_get_direction";
end;

define C-function gtk-widget-set-default-direction
  input parameter arg1 :: <GtkTextDirection>;
  c-name: "gtk_widget_set_default_direction";
end;

define C-function gtk-widget-get-default-direction
  result res :: <GtkTextDirection>;
  c-name: "gtk_widget_get_default_direction";
end;

define C-function gtk-widget-is-composited
  input parameter arg1 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_widget_is_composited";
end;

define C-function gtk-widget-shape-combine-mask
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkBitmap>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_widget_shape_combine_mask";
end;

define C-function gtk-widget-input-shape-combine-mask
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkBitmap>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_widget_input_shape_combine_mask";
end;

define C-function gtk-widget-reset-shapes
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_widget_reset_shapes";
end;

define C-function gtk-widget-path
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <guint*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <gchar**>;
  c-name: "gtk_widget_path";
end;

define C-function gtk-widget-class-path
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <guint*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <gchar**>;
  c-name: "gtk_widget_class_path";
end;

define C-function gtk-widget-list-mnemonic-labels
  input parameter arg1 :: <GtkWidget>;
  result res :: <GList>;
  c-name: "gtk_widget_list_mnemonic_labels";
end;

define C-function gtk-widget-add-mnemonic-label
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_widget_add_mnemonic_label";
end;

define C-function gtk-widget-remove-mnemonic-label
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_widget_remove_mnemonic_label";
end;

define C-function gtk-requisition-get-type
  result res :: <GType>;
  c-name: "gtk_requisition_get_type";
end;

define C-function gtk-requisition-copy
  input parameter arg1 :: <GtkRequisition>;
  result res :: <GtkRequisition>;
  c-name: "gtk_requisition_copy";
end;

define C-function gtk-requisition-free
  input parameter arg1 :: <GtkRequisition>;
  c-name: "gtk_requisition_free";
end;

define C-function atk-role-register
  input parameter arg1 :: <gchar*>;
  result res :: <AtkRole>;
  c-name: "atk_role_register";
end;

define constant <AtkAttributeSet> = <GSList>;

define C-subtype <_AtkAttribute> (<C-void*>) end;
define constant <AtkAttribute> = <_AtkAttribute>;

define C-subtype <_AtkImplementor> (<C-void*>) end;
define constant <AtkImplementor> = <_AtkImplementor>;

define C-subtype <_GTypeInterface> (<C-void*>) end;
define constant <GTypeInterface> = <_GTypeInterface>;

define constant <anonymous-3603> = <C-function-pointer>;
define C-subtype <_AtkImplementorIface> (<C-void*>) end;
define constant <AtkImplementorIface> = <_AtkImplementorIface>;

define constant <anonymous-3577> = <C-function-pointer>;
define constant <anonymous-3578> = <C-function-pointer>;
define constant <anonymous-3579> = <C-function-pointer>;
define constant <anonymous-3580> = <C-function-pointer>;
define constant <anonymous-3581> = <C-function-pointer>;
define constant <anonymous-3582> = <C-function-pointer>;
define constant <anonymous-3583> = <C-function-pointer>;
define constant <anonymous-3584> = <C-function-pointer>;
define constant <anonymous-3585> = <C-function-pointer>;
define constant <anonymous-3586> = <C-function-pointer>;
define C-subtype <_AtkStateSet> (<_GObject>) end;
define constant <AtkStateSet> = <_AtkStateSet>;

define constant <anonymous-3587> = <C-function-pointer>;
define constant <anonymous-3588> = <C-function-pointer>;
define constant <anonymous-3589> = <C-function-pointer>;
define constant <anonymous-3590> = <C-function-pointer>;
define constant <anonymous-3591> = <C-function-pointer>;
define C-subtype <_AtkPropertyValues> (<C-void*>) end;
define constant <AtkPropertyValues> = <_AtkPropertyValues>;

define constant <anonymous-3576> = <C-function-pointer>;
define constant <AtkPropertyChangeHandler> = <anonymous-3576>;

define C-pointer-type <AtkPropertyChangeHandler*> => <AtkPropertyChangeHandler>;
define constant <anonymous-3592> = <C-function-pointer>;
define constant <anonymous-3593> = <C-function-pointer>;
define constant <anonymous-3594> = <C-function-pointer>;
define constant <anonymous-3595> = <C-function-pointer>;
define constant <anonymous-3596> = <C-function-pointer>;
define constant <anonymous-3597> = <C-function-pointer>;
define constant <anonymous-3598> = <C-function-pointer>;
define constant <anonymous-3599> = <C-function-pointer>;
define constant <anonymous-3600> = <C-function-pointer>;
define constant <anonymous-3601> = <C-function-pointer>;
define constant <anonymous-3575> = <C-function-pointer>;
define constant <AtkFunction> = <anonymous-3575>;

define C-subtype <_AtkObjectClass> (<C-void*>) end;
define constant <AtkObjectClass> = <_AtkObjectClass>;

define C-function atk-object-get-type
  result res :: <GType>;
  c-name: "atk_object_get_type";
end;

define C-function atk-implementor-get-type
  result res :: <GType>;
  c-name: "atk_implementor_get_type";
end;

define C-function atk-implementor-ref-accessible
  input parameter arg1 :: <AtkImplementor>;
  result res :: <AtkObject>;
  c-name: "atk_implementor_ref_accessible";
end;

define C-function atk-object-get-name
  input parameter arg1 :: <AtkObject>;
  result res :: <gchar*>;
  c-name: "atk_object_get_name";
end;

define C-function atk-object-get-description
  input parameter arg1 :: <AtkObject>;
  result res :: <gchar*>;
  c-name: "atk_object_get_description";
end;

define C-function atk-object-get-parent
  input parameter arg1 :: <AtkObject>;
  result res :: <AtkObject>;
  c-name: "atk_object_get_parent";
end;

define C-function atk-object-get-n-accessible-children
  input parameter arg1 :: <AtkObject>;
  result res :: <gint>;
  c-name: "atk_object_get_n_accessible_children";
end;

define C-function atk-object-ref-accessible-child
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <gint>;
  result res :: <AtkObject>;
  c-name: "atk_object_ref_accessible_child";
end;

define C-function atk-object-ref-relation-set
  input parameter arg1 :: <AtkObject>;
  result res :: <AtkRelationSet>;
  c-name: "atk_object_ref_relation_set";
end;

define C-function atk-object-get-role
  input parameter arg1 :: <AtkObject>;
  result res :: <AtkRole>;
  c-name: "atk_object_get_role";
end;

define C-function atk-object-get-layer
  input parameter arg1 :: <AtkObject>;
  result res :: <AtkLayer>;
  c-name: "atk_object_get_layer";
end;

define C-function atk-object-get-mdi-zorder
  input parameter arg1 :: <AtkObject>;
  result res :: <gint>;
  c-name: "atk_object_get_mdi_zorder";
end;

define C-function atk-object-get-attributes
  input parameter arg1 :: <AtkObject>;
  result res :: <AtkAttributeSet>;
  c-name: "atk_object_get_attributes";
end;

define C-function atk-object-ref-state-set
  input parameter arg1 :: <AtkObject>;
  result res :: <AtkStateSet>;
  c-name: "atk_object_ref_state_set";
end;

define C-function atk-object-get-index-in-parent
  input parameter arg1 :: <AtkObject>;
  result res :: <gint>;
  c-name: "atk_object_get_index_in_parent";
end;

define C-function atk-object-set-name
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "atk_object_set_name";
end;

define C-function atk-object-set-description
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "atk_object_set_description";
end;

define C-function atk-object-set-parent
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <AtkObject>;
  c-name: "atk_object_set_parent";
end;

define C-function atk-object-set-role
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <AtkRole>;
  c-name: "atk_object_set_role";
end;

define C-function atk-object-connect-property-change-handler
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <AtkPropertyChangeHandler*>;
  result res :: <guint>;
  c-name: "atk_object_connect_property_change_handler";
end;

define C-function atk-object-remove-property-change-handler
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <guint>;
  c-name: "atk_object_remove_property_change_handler";
end;

define constant <AtkState> = <guint64>;

define C-function atk-object-notify-state-change
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <AtkState>;
  input parameter arg3 :: <gboolean>;
  c-name: "atk_object_notify_state_change";
end;

define C-function atk-object-initialize
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <gpointer>;
  c-name: "atk_object_initialize";
end;

define C-function atk-role-get-name
  input parameter arg1 :: <AtkRole>;
  result res :: <gchar*>;
  c-name: "atk_role_get_name";
end;

define C-function atk-role-for-name
  input parameter arg1 :: <gchar*>;
  result res :: <AtkRole>;
  c-name: "atk_role_for_name";
end;

define constant <AtkRelationType> = <C-int>;
define constant $ATK-RELATION-NULL = 0;
define constant $ATK-RELATION-CONTROLLED-BY = 1;
define constant $ATK-RELATION-CONTROLLER-FOR = 2;
define constant $ATK-RELATION-LABEL-FOR = 3;
define constant $ATK-RELATION-LABELLED-BY = 4;
define constant $ATK-RELATION-MEMBER-OF = 5;
define constant $ATK-RELATION-NODE-CHILD-OF = 6;
define constant $ATK-RELATION-FLOWS-TO = 7;
define constant $ATK-RELATION-FLOWS-FROM = 8;
define constant $ATK-RELATION-SUBWINDOW-OF = 9;
define constant $ATK-RELATION-EMBEDS = 10;
define constant $ATK-RELATION-EMBEDDED-BY = 11;
define constant $ATK-RELATION-POPUP-FOR = 12;
define constant $ATK-RELATION-PARENT-WINDOW-OF = 13;
define constant $ATK-RELATION-DESCRIBED-BY = 14;
define constant $ATK-RELATION-DESCRIPTION-FOR = 15;
define constant $ATK-RELATION-LAST-DEFINED = 16;

define C-function atk-object-add-relationship
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <AtkRelationType>;
  input parameter arg3 :: <AtkObject>;
  result res :: <gboolean>;
  c-name: "atk_object_add_relationship";
end;

define C-function atk-object-remove-relationship
  input parameter arg1 :: <AtkObject>;
  input parameter arg2 :: <AtkRelationType>;
  input parameter arg3 :: <AtkObject>;
  result res :: <gboolean>;
  c-name: "atk_object_remove_relationship";
end;

define C-function atk-role-get-localized-name
  input parameter arg1 :: <AtkRole>;
  result res :: <gchar*>;
  c-name: "atk_role_get_localized_name";
end;

define constant <AtkStateType> = <C-int>;
define constant $ATK-STATE-INVALID = 0;
define constant $ATK-STATE-ACTIVE = 1;
define constant $ATK-STATE-ARMED = 2;
define constant $ATK-STATE-BUSY = 3;
define constant $ATK-STATE-CHECKED = 4;
define constant $ATK-STATE-DEFUNCT = 5;
define constant $ATK-STATE-EDITABLE = 6;
define constant $ATK-STATE-ENABLED = 7;
define constant $ATK-STATE-EXPANDABLE = 8;
define constant $ATK-STATE-EXPANDED = 9;
define constant $ATK-STATE-FOCUSABLE = 10;
define constant $ATK-STATE-FOCUSED = 11;
define constant $ATK-STATE-HORIZONTAL = 12;
define constant $ATK-STATE-ICONIFIED = 13;
define constant $ATK-STATE-MODAL = 14;
define constant $ATK-STATE-MULTI-LINE = 15;
define constant $ATK-STATE-MULTISELECTABLE = 16;
define constant $ATK-STATE-OPAQUE = 17;
define constant $ATK-STATE-PRESSED = 18;
define constant $ATK-STATE-RESIZABLE = 19;
define constant $ATK-STATE-SELECTABLE = 20;
define constant $ATK-STATE-SELECTED = 21;
define constant $ATK-STATE-SENSITIVE = 22;
define constant $ATK-STATE-SHOWING = 23;
define constant $ATK-STATE-SINGLE-LINE = 24;
define constant $ATK-STATE-STALE = 25;
define constant $ATK-STATE-TRANSIENT = 26;
define constant $ATK-STATE-VERTICAL = 27;
define constant $ATK-STATE-VISIBLE = 28;
define constant $ATK-STATE-MANAGES-DESCENDANTS = 29;
define constant $ATK-STATE-INDETERMINATE = 30;
define constant $ATK-STATE-TRUNCATED = 31;
define constant $ATK-STATE-REQUIRED = 32;
define constant $ATK-STATE-INVALID-ENTRY = 33;
define constant $ATK-STATE-SUPPORTS-AUTOCOMPLETION = 34;
define constant $ATK-STATE-SELECTABLE-TEXT = 35;
define constant $ATK-STATE-DEFAULT = 36;
define constant $ATK-STATE-ANIMATED = 37;
define constant $ATK-STATE-VISITED = 38;
define constant $ATK-STATE-LAST-DEFINED = 39;

define C-function atk-state-type-register
  input parameter arg1 :: <gchar*>;
  result res :: <AtkStateType>;
  c-name: "atk_state_type_register";
end;

define C-function atk-state-type-get-name
  input parameter arg1 :: <AtkStateType>;
  result res :: <gchar*>;
  c-name: "atk_state_type_get_name";
end;

define C-function atk-state-type-for-name
  input parameter arg1 :: <gchar*>;
  result res :: <AtkStateType>;
  c-name: "atk_state_type_for_name";
end;

define C-function g-value-set-char
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gchar>;
  c-name: "g_value_set_char";
end;

define C-function g-value-get-char
  input parameter arg1 :: <GValue>;
  result res :: <gchar>;
  c-name: "g_value_get_char";
end;

define C-function g-value-set-uchar
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <guchar>;
  c-name: "g_value_set_uchar";
end;

define C-function g-value-get-uchar
  input parameter arg1 :: <GValue>;
  result res :: <guchar>;
  c-name: "g_value_get_uchar";
end;

define C-function g-value-set-boolean
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_value_set_boolean";
end;

define C-function g-value-get-boolean
  input parameter arg1 :: <GValue>;
  result res :: <gboolean>;
  c-name: "g_value_get_boolean";
end;

define C-function g-value-set-int
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gint>;
  c-name: "g_value_set_int";
end;

define C-function g-value-get-int
  input parameter arg1 :: <GValue>;
  result res :: <gint>;
  c-name: "g_value_get_int";
end;

define C-function g-value-set-uint
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <guint>;
  c-name: "g_value_set_uint";
end;

define C-function g-value-get-uint
  input parameter arg1 :: <GValue>;
  result res :: <guint>;
  c-name: "g_value_get_uint";
end;

define C-function g-value-set-long
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <glong>;
  c-name: "g_value_set_long";
end;

define C-function g-value-get-long
  input parameter arg1 :: <GValue>;
  result res :: <glong>;
  c-name: "g_value_get_long";
end;

define C-function g-value-set-ulong
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gulong>;
  c-name: "g_value_set_ulong";
end;

define C-function g-value-get-ulong
  input parameter arg1 :: <GValue>;
  result res :: <gulong>;
  c-name: "g_value_get_ulong";
end;

define C-function g-value-set-int64
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gint64>;
  c-name: "g_value_set_int64";
end;

define C-function g-value-get-int64
  input parameter arg1 :: <GValue>;
  result res :: <gint64>;
  c-name: "g_value_get_int64";
end;

define C-function g-value-set-uint64
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <guint64>;
  c-name: "g_value_set_uint64";
end;

define C-function g-value-get-uint64
  input parameter arg1 :: <GValue>;
  result res :: <guint64>;
  c-name: "g_value_get_uint64";
end;

define C-function g-value-set-float
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gfloat>;
  c-name: "g_value_set_float";
end;

define C-function g-value-get-float
  input parameter arg1 :: <GValue>;
  result res :: <gfloat>;
  c-name: "g_value_get_float";
end;

define C-function g-value-set-double
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gdouble>;
  c-name: "g_value_set_double";
end;

define C-function g-value-get-double
  input parameter arg1 :: <GValue>;
  result res :: <gdouble>;
  c-name: "g_value_get_double";
end;

define C-function g-value-set-string
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_value_set_string";
end;

define C-function g-value-set-static-string
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_value_set_static_string";
end;

define C-function g-value-get-string
  input parameter arg1 :: <GValue>;
  result res :: <gchar*>;
  c-name: "g_value_get_string";
end;

define C-function g-value-dup-string
  input parameter arg1 :: <GValue>;
  result res :: <gchar*>;
  c-name: "g_value_dup_string";
end;

define C-function g-value-set-pointer
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_value_set_pointer";
end;

define C-function g-value-get-pointer
  input parameter arg1 :: <GValue>;
  result res :: <gpointer>;
  c-name: "g_value_get_pointer";
end;

define C-function g-gtype-get-type
  result res :: <GType>;
  c-name: "g_gtype_get_type";
end;

define C-function g-value-set-gtype
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GType>;
  c-name: "g_value_set_gtype";
end;

define C-function g-value-get-gtype
  input parameter arg1 :: <GValue>;
  result res :: <GType>;
  c-name: "g_value_get_gtype";
end;

define C-function g-pointer-type-register-static
  input parameter arg1 :: <gchar*>;
  result res :: <GType>;
  c-name: "g_pointer_type_register_static";
end;

define C-function g-strdup-value-contents
  input parameter arg1 :: <GValue>;
  result res :: <gchar*>;
  c-name: "g_strdup_value_contents";
end;

define C-function g-value-take-string
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_value_take_string";
end;

define C-function g-value-set-string-take-ownership
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_value_set_string_take_ownership";
end;

define constant <gchararray> = <gchar*>;

define constant <anonymous-1506> = <C-function-pointer>;
define constant <GValueTransform> = <anonymous-1506>;

define C-function g-value-init
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GType>;
  result res :: <GValue>;
  c-name: "g_value_init";
end;

define C-function g-value-copy
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GValue>;
  c-name: "g_value_copy";
end;

define C-function g-value-reset
  input parameter arg1 :: <GValue>;
  result res :: <GValue>;
  c-name: "g_value_reset";
end;

define C-function g-value-unset
  input parameter arg1 :: <GValue>;
  c-name: "g_value_unset";
end;

define C-function g-value-set-instance
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_value_set_instance";
end;

define C-function g-value-fits-pointer
  input parameter arg1 :: <GValue>;
  result res :: <gboolean>;
  c-name: "g_value_fits_pointer";
end;

define C-function g-value-peek-pointer
  input parameter arg1 :: <GValue>;
  result res :: <gpointer>;
  c-name: "g_value_peek_pointer";
end;

define C-function g-value-type-compatible
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  result res :: <gboolean>;
  c-name: "g_value_type_compatible";
end;

define C-function g-value-type-transformable
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  result res :: <gboolean>;
  c-name: "g_value_type_transformable";
end;

define C-function g-value-transform
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GValue>;
  result res :: <gboolean>;
  c-name: "g_value_transform";
end;

define C-function g-value-register-transform-func
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GValueTransform>;
  c-name: "g_value_register_transform_func";
end;

define constant $G-VALUE-NOCOPY-CONTENTS = 134217728;

define C-subtype <_GTypeCValue> (<C-void*>) end;
define constant <GTypeCValue> = <_GTypeCValue>;

define C-subtype <_GTypePlugin> (<C-void*>) end;
define constant <GTypePlugin> = <_GTypePlugin>;

define constant <anonymous-1415> = <C-function-pointer>;
define constant <GBaseInitFunc> = <anonymous-1415>;

define constant <anonymous-1416> = <C-function-pointer>;
define constant <GBaseFinalizeFunc> = <anonymous-1416>;

define constant <anonymous-1417> = <C-function-pointer>;
define constant <GClassInitFunc> = <anonymous-1417>;

define constant <anonymous-1418> = <C-function-pointer>;
define constant <GClassFinalizeFunc> = <anonymous-1418>;

define constant <gconstpointer> = <C-void*>;

define constant <anonymous-1419> = <C-function-pointer>;
define constant <GInstanceInitFunc> = <anonymous-1419>;

define constant <anonymous-1426> = <C-function-pointer>;
define constant <anonymous-1427> = <C-function-pointer>;
define constant <anonymous-1428> = <C-function-pointer>;
define constant <anonymous-1429> = <C-function-pointer>;
define constant <anonymous-1430> = <C-function-pointer>;
define constant <anonymous-1431> = <C-function-pointer>;
define C-subtype <_GTypeValueTable> (<C-void*>) end;
define constant <GTypeValueTable> = <_GTypeValueTable>;

define C-subtype <_GTypeInfo> (<C-void*>) end;
define constant <GTypeInfo> = <_GTypeInfo>;

define constant <GTypeFundamentalFlags> = <C-int>;
define constant $G-TYPE-FLAG-CLASSED = 1;
define constant $G-TYPE-FLAG-INSTANTIATABLE = 2;
define constant $G-TYPE-FLAG-DERIVABLE = 4;
define constant $G-TYPE-FLAG-DEEP-DERIVABLE = 8;

define C-subtype <_GTypeFundamentalInfo> (<C-void*>) end;
define constant <GTypeFundamentalInfo> = <_GTypeFundamentalInfo>;

define constant <anonymous-1420> = <C-function-pointer>;
define constant <GInterfaceInitFunc> = <anonymous-1420>;

define constant <anonymous-1421> = <C-function-pointer>;
define constant <GInterfaceFinalizeFunc> = <anonymous-1421>;

define C-subtype <_GInterfaceInfo> (<C-void*>) end;
define constant <GInterfaceInfo> = <_GInterfaceInfo>;

define C-subtype <_GTypeQuery> (<C-void*>) end;
define constant <GTypeQuery> = <_GTypeQuery>;

define constant <GTypeDebugFlags> = <C-int>;
define constant $G-TYPE-DEBUG-NONE = 0;
define constant $G-TYPE-DEBUG-OBJECTS = 1;
define constant $G-TYPE-DEBUG-SIGNALS = 2;
define constant $G-TYPE-DEBUG-MASK = 3;

define C-function g-type-init
  c-name: "g_type_init";
end;

define C-function g-type-init-with-debug-flags
  input parameter arg1 :: <GTypeDebugFlags>;
  c-name: "g_type_init_with_debug_flags";
end;

define C-function g-type-name
  input parameter arg1 :: <GType>;
  result res :: <gchar*>;
  c-name: "g_type_name";
end;

define C-function g-type-qname
  input parameter arg1 :: <GType>;
  result res :: <GQuark>;
  c-name: "g_type_qname";
end;

define C-function g-type-from-name
  input parameter arg1 :: <gchar*>;
  result res :: <GType>;
  c-name: "g_type_from_name";
end;

define C-function g-type-parent
  input parameter arg1 :: <GType>;
  result res :: <GType>;
  c-name: "g_type_parent";
end;

define C-function g-type-depth
  input parameter arg1 :: <GType>;
  result res :: <guint>;
  c-name: "g_type_depth";
end;

define C-function g-type-next-base
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  result res :: <GType>;
  c-name: "g_type_next_base";
end;

define C-function g-type-is-a
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  result res :: <gboolean>;
  c-name: "g_type_is_a";
end;

define C-function g-type-class-ref
  input parameter arg1 :: <GType>;
  result res :: <gpointer>;
  c-name: "g_type_class_ref";
end;

define C-function g-type-class-peek
  input parameter arg1 :: <GType>;
  result res :: <gpointer>;
  c-name: "g_type_class_peek";
end;

define C-function g-type-class-peek-static
  input parameter arg1 :: <GType>;
  result res :: <gpointer>;
  c-name: "g_type_class_peek_static";
end;

define C-function g-type-class-unref
  input parameter arg1 :: <gpointer>;
  c-name: "g_type_class_unref";
end;

define C-function g-type-class-peek-parent
  input parameter arg1 :: <gpointer>;
  result res :: <gpointer>;
  c-name: "g_type_class_peek_parent";
end;

define C-function g-type-interface-peek
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GType>;
  result res :: <gpointer>;
  c-name: "g_type_interface_peek";
end;

define C-function g-type-interface-peek-parent
  input parameter arg1 :: <gpointer>;
  result res :: <gpointer>;
  c-name: "g_type_interface_peek_parent";
end;

define C-function g-type-default-interface-ref
  input parameter arg1 :: <GType>;
  result res :: <gpointer>;
  c-name: "g_type_default_interface_ref";
end;

define C-function g-type-default-interface-peek
  input parameter arg1 :: <GType>;
  result res :: <gpointer>;
  c-name: "g_type_default_interface_peek";
end;

define C-function g-type-default-interface-unref
  input parameter arg1 :: <gpointer>;
  c-name: "g_type_default_interface_unref";
end;

define C-pointer-type <GType*> => <GType>;
define C-function g-type-children
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <guint*>;
  result res :: <GType*>;
  c-name: "g_type_children";
end;

define C-function g-type-interfaces
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <guint*>;
  result res :: <GType*>;
  c-name: "g_type_interfaces";
end;

define C-function g-type-set-qdata
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_type_set_qdata";
end;

define C-function g-type-get-qdata
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_type_get_qdata";
end;

define C-function g-type-query
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GTypeQuery>;
  c-name: "g_type_query";
end;

define constant <anonymous-1422> = <C-function-pointer>;
define constant <GTypeClassCacheFunc> = <anonymous-1422>;

define constant <anonymous-1423> = <C-function-pointer>;
define constant <GTypeInterfaceCheckFunc> = <anonymous-1423>;

define constant <GTypeFlags> = <C-int>;
define constant $G-TYPE-FLAG-ABSTRACT = 16;
define constant $G-TYPE-FLAG-VALUE-ABSTRACT = 32;

define C-function g-type-register-static
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GTypeInfo>;
  input parameter arg4 :: <GTypeFlags>;
  result res :: <GType>;
  c-name: "g_type_register_static";
end;

define C-function g-type-register-static-simple
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GClassInitFunc>;
  input parameter arg5 :: <guint>;
  input parameter arg6 :: <GInstanceInitFunc>;
  input parameter arg7 :: <GTypeFlags>;
  result res :: <GType>;
  c-name: "g_type_register_static_simple";
end;

define C-function g-type-register-dynamic
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GTypePlugin>;
  input parameter arg4 :: <GTypeFlags>;
  result res :: <GType>;
  c-name: "g_type_register_dynamic";
end;

define C-function g-type-register-fundamental
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GTypeInfo>;
  input parameter arg4 :: <GTypeFundamentalInfo>;
  input parameter arg5 :: <GTypeFlags>;
  result res :: <GType>;
  c-name: "g_type_register_fundamental";
end;

define C-function g-type-add-interface-static
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GInterfaceInfo>;
  c-name: "g_type_add_interface_static";
end;

define C-function g-type-add-interface-dynamic
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GTypePlugin>;
  c-name: "g_type_add_interface_dynamic";
end;

define C-function g-type-interface-add-prerequisite
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  c-name: "g_type_interface_add_prerequisite";
end;

define C-function g-type-interface-prerequisites
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <guint*>;
  result res :: <GType*>;
  c-name: "g_type_interface_prerequisites";
end;

define C-function g-type-class-add-private
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gsize>;
  c-name: "g_type_class_add_private";
end;

define C-function g-type-instance-get-private
  input parameter arg1 :: <GTypeInstance>;
  input parameter arg2 :: <GType>;
  result res :: <gpointer>;
  c-name: "g_type_instance_get_private";
end;

define C-function g-type-get-plugin
  input parameter arg1 :: <GType>;
  result res :: <GTypePlugin>;
  c-name: "g_type_get_plugin";
end;

define C-function g-type-interface-get-plugin
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GType>;
  result res :: <GTypePlugin>;
  c-name: "g_type_interface_get_plugin";
end;

define C-function g-type-fundamental-next
  result res :: <GType>;
  c-name: "g_type_fundamental_next";
end;

define C-function g-type-fundamental
  input parameter arg1 :: <GType>;
  result res :: <GType>;
  c-name: "g_type_fundamental";
end;

define C-function g-type-create-instance
  input parameter arg1 :: <GType>;
  result res :: <GTypeInstance>;
  c-name: "g_type_create_instance";
end;

define C-function g-type-free-instance
  input parameter arg1 :: <GTypeInstance>;
  c-name: "g_type_free_instance";
end;

define C-function g-type-add-class-cache-func
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GTypeClassCacheFunc>;
  c-name: "g_type_add_class_cache_func";
end;

define C-function g-type-remove-class-cache-func
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GTypeClassCacheFunc>;
  c-name: "g_type_remove_class_cache_func";
end;

define C-function g-type-class-unref-uncached
  input parameter arg1 :: <gpointer>;
  c-name: "g_type_class_unref_uncached";
end;

define C-function g-type-add-interface-check
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GTypeInterfaceCheckFunc>;
  c-name: "g_type_add_interface_check";
end;

define C-function g-type-remove-interface-check
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GTypeInterfaceCheckFunc>;
  c-name: "g_type_remove_interface_check";
end;

define C-function g-type-value-table-peek
  input parameter arg1 :: <GType>;
  result res :: <GTypeValueTable>;
  c-name: "g_type_value_table_peek";
end;

define C-function g-type-check-instance
  input parameter arg1 :: <GTypeInstance>;
  result res :: <gboolean>;
  c-name: "g_type_check_instance";
end;

define C-function g-type-check-instance-cast
  input parameter arg1 :: <GTypeInstance>;
  input parameter arg2 :: <GType>;
  result res :: <GTypeInstance>;
  c-name: "g_type_check_instance_cast";
end;

define C-function g-type-check-instance-is-a
  input parameter arg1 :: <GTypeInstance>;
  input parameter arg2 :: <GType>;
  result res :: <gboolean>;
  c-name: "g_type_check_instance_is_a";
end;

define C-function g-type-check-class-cast
  input parameter arg1 :: <GTypeClass>;
  input parameter arg2 :: <GType>;
  result res :: <GTypeClass>;
  c-name: "g_type_check_class_cast";
end;

define C-function g-type-check-class-is-a
  input parameter arg1 :: <GTypeClass>;
  input parameter arg2 :: <GType>;
  result res :: <gboolean>;
  c-name: "g_type_check_class_is_a";
end;

define C-function g-type-check-is-value-type
  input parameter arg1 :: <GType>;
  result res :: <gboolean>;
  c-name: "g_type_check_is_value_type";
end;

define C-function g-type-check-value
  input parameter arg1 :: <GValue>;
  result res :: <gboolean>;
  c-name: "g_type_check_value";
end;

define C-function g-type-check-value-holds
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GType>;
  result res :: <gboolean>;
  c-name: "g_type_check_value_holds";
end;

define C-function g-type-test-flags
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <guint>;
  result res :: <gboolean>;
  c-name: "g_type_test_flags";
end;

define C-function g-type-name-from-instance
  input parameter arg1 :: <GTypeInstance>;
  result res :: <gchar*>;
  c-name: "g_type_name_from_instance";
end;

define C-function g-type-name-from-class
  input parameter arg1 :: <GTypeClass>;
  result res :: <gchar*>;
  c-name: "g_type_name_from_class";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "_g-type-debug-flags"*/
define constant $G-TYPE-FUNDAMENTAL-MAX = 1020;

define constant $G-TYPE-INVALID = 0;

define constant $G-TYPE-NONE = 4;

define constant $G-TYPE-INTERFACE = 8;

define constant $G-TYPE-CHAR = 12;

define constant $G-TYPE-UCHAR = 16;

define constant $G-TYPE-BOOLEAN = 20;

define constant $G-TYPE-INT = 24;

define constant $G-TYPE-UINT = 28;

define constant $G-TYPE-LONG = 32;

define constant $G-TYPE-ULONG = 36;

define constant $G-TYPE-INT64 = 40;

define constant $G-TYPE-UINT64 = 44;

define constant $G-TYPE-ENUM = 48;

define constant $G-TYPE-FLAGS = 52;

define constant $G-TYPE-FLOAT = 56;

define constant $G-TYPE-DOUBLE = 60;

define constant $G-TYPE-STRING = 64;

define constant $G-TYPE-POINTER = 68;

define constant $G-TYPE-BOXED = 72;

define constant $G-TYPE-PARAM = 76;

define constant $G-TYPE-OBJECT = 80;

define constant $G-TYPE-FUNDAMENTAL-SHIFT = 2;

define constant $G-TYPE-RESERVED-GLIB-FIRST = 21;

define constant $G-TYPE-RESERVED-GLIB-LAST = 31;

define constant $G-TYPE-RESERVED-BSE-FIRST = 32;

define constant $G-TYPE-RESERVED-BSE-LAST = 48;

define constant $G-TYPE-RESERVED-USER-FIRST = 49;

define constant $G-TYPE-FLAG-RESERVED-ID-BIT = 1;

define C-function g-win32-ftruncate
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <guint>;
  result res :: <gint>;
  c-name: "g_win32_ftruncate";
end;

define C-function g-win32-getlocale
  result res :: <gchar*>;
  c-name: "g_win32_getlocale";
end;

define C-function g-win32-error-message
  input parameter arg1 :: <gint>;
  result res :: <gchar*>;
  c-name: "g_win32_error_message";
end;

define C-function g-win32-get-package-installation-directory-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_win32_get_package_installation_directory_utf8";
end;

define C-function g-win32-get-package-installation-subdirectory-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_win32_get_package_installation_subdirectory_utf8";
end;

define C-function g-win32-get-windows-version
  result res :: <guint>;
  c-name: "g_win32_get_windows_version";
end;

define C-function g-win32-locale-filename-from-utf8
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_win32_locale_filename_from_utf8";
end;

define constant $MAXPATHLEN = 1024;

define constant g-win32-get-package-installation-directory = g-win32-get-package-installation-directory-utf8;

define constant g-win32-get-package-installation-subdirectory = g-win32-get-package-installation-subdirectory-utf8;

define constant <anonymous-209> = <C-function-pointer>;
define constant <GCompareFunc> = <anonymous-209>;

define constant <anonymous-210> = <C-function-pointer>;
define constant <GCompareDataFunc> = <anonymous-210>;

define constant <anonymous-211> = <C-function-pointer>;
define constant <GEqualFunc> = <anonymous-211>;

define constant <anonymous-212> = <C-function-pointer>;
define constant <GDestroyNotify> = <anonymous-212>;

define constant <anonymous-213> = <C-function-pointer>;
define constant <GFunc> = <anonymous-213>;

define constant <anonymous-214> = <C-function-pointer>;
define constant <GHashFunc> = <anonymous-214>;

define constant <anonymous-215> = <C-function-pointer>;
define constant <GHFunc> = <anonymous-215>;

define constant <anonymous-216> = <C-function-pointer>;
define constant <GFreeFunc> = <anonymous-216>;

define constant <anonymous-217> = <C-function-pointer>;
define constant <GTranslateFunc> = <anonymous-217>;

define C-subtype <anonymous-226> (<C-void*>) end;
define C-subtype <_GDoubleIEEE754> (<C-void*>) end;
define constant <GDoubleIEEE754> = <_GDoubleIEEE754>;

define C-subtype <anonymous-221> (<C-void*>) end;
define C-subtype <_GFloatIEEE754> (<C-void*>) end;
define constant <GFloatIEEE754> = <_GFloatIEEE754>;

define C-subtype <_GTimeVal> (<C-void*>) end;
define constant <GTimeVal> = <_GTimeVal>;

define constant $G-MAXUINT8 = 255;

define constant $G-MAXUINT16 = 65535;

//define constant $G-MAXUINT32 = #ex00000000FFFFFFFF;

//define constant $G-MAXINT64 = #ex7FFFFFFFFFFFFFFF;

define constant $G-LITTLE-ENDIAN = 1234;

define constant $G-BIG-ENDIAN = 4321;

define constant $G-PDP-ENDIAN = 3412;

define constant $G-IEEE754-FLOAT-BIAS = 127;

define constant $G-IEEE754-DOUBLE-BIAS = 1023;

define constant <gint32> = <C-signed-int>;

define constant <gssize> = <C-signed-int>;

define C-subtype <_GMutex> (<C-void*>) end;
define constant <GStaticMutex> = <_GMutex>;

define constant <char<@4>> = <char*>;
define C-subtype <_GSystemThread> (<C-void*>) end;
define constant <GSystemThread> = <_GSystemThread>;

define constant <GPid> = <C-void*>;

define constant $G-MINSHORT = -32768;

define constant $G-MAXSHORT = 32767;

define constant $G-MAXUSHORT = 65535;

//define constant $G-MININT = #exFFFFFFFF80000000;

//define constant $G-MAXINT = #ex000000007FFFFFFF;

//define constant $G-MAXUINT = #ex00000000FFFFFFFF;

//define constant $G-MINLONG = #exFFFFFFFF80000000;

//define constant $G-MAXLONG = #ex000000007FFFFFFF;

//define constant $G-MAXULONG = #ex00000000FFFFFFFF;

define constant $G-GINT16-MODIFIER = "h";

define constant $G-GINT16-FORMAT = "hi";

define constant $G-GUINT16-FORMAT = "hu";

define constant $G-GINT32-MODIFIER = "";

define constant $G-GINT32-FORMAT = "i";

define constant $G-GUINT32-FORMAT = "u";

define constant $G-HAVE-GINT64 = 1;

define constant $G-GINT64-MODIFIER = "I64";

define constant $G-GINT64-FORMAT = "I64i";

define constant $G-GUINT64-FORMAT = "I64u";

define constant $GLIB-SIZEOF-VOID-P = 4;

define constant $GLIB-SIZEOF-LONG = 4;

define constant $GLIB-SIZEOF-SIZE-T = 4;

define constant $G-GSIZE-MODIFIER = "";

define constant $G-GSSIZE-FORMAT = "i";

define constant $G-GSIZE-FORMAT = "u";

//define constant $G-MAXSIZE = #ex00000000FFFFFFFF;

define constant $GLIB-MAJOR-VERSION = 2;

define constant $GLIB-MINOR-VERSION = 12;

define constant $GLIB-MICRO-VERSION = 11;

define constant $G-HAVE---INLINE = 1;

define constant $G-HAVE-GROWING-STACK = 0;

define constant $G-MODULE-SUFFIX = "dll";

 /* Ignoring declaration for {instance of <variable-declaration>} "_fpecode"*/
define constant $DBL-DIG = 15;

define constant $DBL-MANT-DIG = 53;

define constant $DBL-MAX-10-EXP = 308;

define constant $DBL-MAX-EXP = 1024;

define constant $DBL-MIN-10-EXP = -307;

define constant $DBL-MIN-EXP = -1021;

define constant $_DBL-RADIX = 2;

define constant $_DBL-ROUNDS = 1;

define constant $FLT-DIG = 6;

define constant $FLT-GUARD = 0;

define constant $FLT-MANT-DIG = 24;

define constant $FLT-MAX-10-EXP = 38;

define constant $FLT-MAX-EXP = 128;

define constant $FLT-MIN-10-EXP = -37;

define constant $FLT-MIN-EXP = -125;

define constant $FLT-NORMALIZE = 0;

define constant $FLT-RADIX = 2;

define constant $FLT-ROUNDS = 1;

define constant $LDBL-DIG = 15;

define constant $LDBL-MANT-DIG = 53;

define constant $LDBL-MAX-10-EXP = 308;

define constant $LDBL-MAX-EXP = 1024;

define constant $LDBL-MIN-10-EXP = -307;

define constant $LDBL-MIN-EXP = -1021;

define constant $_MCW-EM = 524319;

define constant $_EM-INEXACT = 1;

define constant $_EM-UNDERFLOW = 2;

define constant $_EM-OVERFLOW = 4;

define constant $_EM-ZERODIVIDE = 8;

define constant $_EM-INVALID = 16;

define constant $_MCW-RC = 768;

define constant $_RC-NEAR = 0;

define constant $_RC-DOWN = 256;

define constant $_RC-UP = 512;

define constant $_RC-CHOP = 768;

define constant $_SW-INEXACT = 1;

define constant $_SW-UNDERFLOW = 2;

define constant $_SW-OVERFLOW = 4;

define constant $_SW-ZERODIVIDE = 8;

define constant $_SW-INVALID = 16;

define constant $_MCW-PC = 196608;

define constant $_PC-64 = 0;

define constant $_PC-53 = 65536;

define constant $_PC-24 = 131072;

define constant $_MCW-IC = 262144;

define constant $_IC-AFFINE = 262144;

define constant $_IC-PROJECTIVE = 0;

define constant $_EM-DENORMAL = 524288;

define constant $_SW-DENORMAL = 524288;

define constant $_MCW-DN = 50331648;

define constant $_DN-SAVE = 0;

define constant $_DN-FLUSH = 16777216;

define constant $_DN-FLUSH-OPERANDS-SAVE-RESULTS = 33554432;

define constant $_DN-SAVE-OPERANDS-FLUSH-RESULTS = 50331648;

define constant $_CW-DEFAULT = 589855;

define constant $_SW-UNEMULATED = 64;

define constant $_SW-SQRTNEG = 128;

define constant $_SW-STACKOVERFLOW = 512;

define constant $_SW-STACKUNDERFLOW = 1024;

define constant $_FPE-INVALID = 129;

define constant $_FPE-DENORMAL = 130;

define constant $_FPE-ZERODIVIDE = 131;

define constant $_FPE-OVERFLOW = 132;

define constant $_FPE-UNDERFLOW = 133;

define constant $_FPE-INEXACT = 134;

define constant $_FPE-UNEMULATED = 135;

define constant $_FPE-SQRTNEG = 136;

define constant $_FPE-STACKOVERFLOW = 138;

define constant $_FPE-STACKUNDERFLOW = 139;

define constant $_FPE-EXPLICITGEN = 140;

define constant $_FPCLASS-SNAN = 1;

define constant $_FPCLASS-QNAN = 2;

define constant $_FPCLASS-NINF = 4;

define constant $_FPCLASS-NN = 8;

define constant $_FPCLASS-ND = 16;

define constant $_FPCLASS-NZ = 32;

define constant $_FPCLASS-PZ = 64;

define constant $_FPCLASS-PD = 128;

define constant $_FPCLASS-PN = 256;

define constant $_FPCLASS-PINF = 512;

define constant $CHAR-BIT = 8;

define constant $SCHAR-MIN = -128;

define constant $SCHAR-MAX = 127;

define constant $UCHAR-MAX = 255;

define constant $CHAR-MIN = -128;

define constant $CHAR-MAX = 127;

define constant $MB-LEN-MAX = 2;

define constant $SHRT-MIN = -32768;

define constant $SHRT-MAX = 32767;

define constant $USHRT-MAX = 65535;

//define constant $INT-MIN = #exFFFFFFFF80000000;

//define constant $INT-MAX = #ex000000007FFFFFFF;

//define constant $UINT-MAX = #ex00000000FFFFFFFF;

//define constant $LONG-MIN = #exFFFFFFFF80000000;

//define constant $LONG-MAX = #ex000000007FFFFFFF;

//define constant $ULONG-MAX = #ex00000000FFFFFFFF;

define constant $_POSIX-ARG-MAX = 4096;

define constant $_POSIX-CHILD-MAX = 6;

define constant $_POSIX-LINK-MAX = 8;

define constant $_POSIX-MAX-CANON = 255;

define constant $_POSIX-MAX-INPUT = 255;

define constant $_POSIX-NAME-MAX = 14;

define constant $_POSIX-NGROUPS-MAX = 0;

define constant $_POSIX-OPEN-MAX = 16;

define constant $_POSIX-PATH-MAX = 255;

define constant $_POSIX-PIPE-BUF = 512;

define constant $_POSIX-SSIZE-MAX = 32767;

define constant $_POSIX-STREAM-MAX = 8;

define constant $_POSIX-TZNAME-MAX = 3;

define constant $ARG-MAX = 14500;

define constant $LINK-MAX = 1024;

define constant $MAX-CANON = 255;

define constant $MAX-INPUT = 255;

define constant $NAME-MAX = 255;

define constant $NGROUPS-MAX = 16;

define constant $OPEN-MAX = 32;

define constant $PATH-MAX = 512;

define constant $PIPE-BUF = 512;

define constant $SSIZE-MAX = 32767;

define constant $STREAM-MAX = 20;

define constant $TZNAME-MAX = 10;

define constant $G-GNUC-FUNCTION = "";

define constant $G-GNUC-PRETTY-FUNCTION = "";

define constant $FALSE = 0;

define constant $TRUE = 1;

 /* Ignoring declaration for {instance of <variable-declaration>} "errno"*/
define constant <ptrdiff-t> = <C-signed-int>;

define constant <size-t> = <C-unsigned-int>;

define constant <wchar-t> = <C-unsigned-short>;

define C-function g-get-user-name-utf8
  result res :: <gchar*>;
  c-name: "g_get_user_name_utf8";
end;

define C-function g-get-real-name-utf8
  result res :: <gchar*>;
  c-name: "g_get_real_name_utf8";
end;

define C-function g-get-home-dir-utf8
  result res :: <gchar*>;
  c-name: "g_get_home_dir_utf8";
end;

define C-function g-get-tmp-dir-utf8
  result res :: <gchar*>;
  c-name: "g_get_tmp_dir_utf8";
end;

define C-function g-get-host-name
  result res :: <gchar*>;
  c-name: "g_get_host_name";
end;

define C-function g-get-prgname
  result res :: <gchar*>;
  c-name: "g_get_prgname";
end;

define C-function g-set-prgname
  input parameter arg1 :: <gchar*>;
  c-name: "g_set_prgname";
end;

define C-function g-get-application-name
  result res :: <gchar*>;
  c-name: "g_get_application_name";
end;

define C-function g-set-application-name
  input parameter arg1 :: <gchar*>;
  c-name: "g_set_application_name";
end;

define C-function g-get-user-data-dir
  result res :: <gchar*>;
  c-name: "g_get_user_data_dir";
end;

define C-function g-get-user-config-dir
  result res :: <gchar*>;
  c-name: "g_get_user_config_dir";
end;

define C-function g-get-user-cache-dir
  result res :: <gchar*>;
  c-name: "g_get_user_cache_dir";
end;

define C-function g-get-system-data-dirs
  result res :: <gchar**>;
  c-name: "g_get_system_data_dirs";
end;

define C-function g-win32-get-system-data-dirs-for-module
  input parameter arg1 :: <gconstpointer>;
  result res :: <gchar**>;
  c-name: "g_win32_get_system_data_dirs_for_module";
end;

define C-function g-get-system-config-dirs
  result res :: <gchar**>;
  c-name: "g_get_system_config_dirs";
end;

define C-function g-get-language-names
  result res :: <gchar**>;
  c-name: "g_get_language_names";
end;

define C-subtype <_GDebugKey> (<C-void*>) end;
define constant <GDebugKey> = <_GDebugKey>;

define C-function g-parse-debug-string
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GDebugKey>;
  input parameter arg3 :: <guint>;
  result res :: <guint>;
  c-name: "g_parse_debug_string";
end;

define C-function g-snprintf
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gulong>;
  input parameter arg3 :: <gchar*>;
  result res :: <gint>;
  c-name: "g_snprintf";
end;

define C-function g-vsnprintf
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gulong>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <va-list>;
  result res :: <gint>;
  c-name: "g_vsnprintf";
end;

define C-function g-path-is-absolute
  input parameter arg1 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "g_path_is_absolute";
end;

define C-function g-path-skip-root
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_path_skip_root";
end;

define C-function g-basename
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_basename";
end;

define C-function g-get-current-dir-utf8
  result res :: <gchar*>;
  c-name: "g_get_current_dir_utf8";
end;

define C-function g-path-get-basename
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_path_get_basename";
end;

define C-function g-path-get-dirname
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_path_get_dirname";
end;

define C-function g-nullify-pointer
  input parameter arg1 :: <gpointer*>;
  c-name: "g_nullify_pointer";
end;

define C-function g-getenv-utf8
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_getenv_utf8";
end;

define C-function g-setenv-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "g_setenv_utf8";
end;

define C-function g-unsetenv-utf8
  input parameter arg1 :: <gchar*>;
  c-name: "g_unsetenv_utf8";
end;

define C-function g-listenv
  result res :: <gchar**>;
  c-name: "g_listenv";
end;

define constant <anonymous-884> = <C-function-pointer>;
define constant <GVoidFunc> = <anonymous-884>;

define C-function g-atexit
  input parameter arg1 :: <GVoidFunc>;
  c-name: "g_atexit";
end;

define C-function g-find-program-in-path-utf8
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_find_program_in_path_utf8";
end;

define C-function g-bit-nth-lsf
  input parameter arg1 :: <gulong>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "g_bit_nth_lsf";
end;

define C-function g-bit-nth-msf
  input parameter arg1 :: <gulong>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "g_bit_nth_msf";
end;

define C-function g-bit-storage
  input parameter arg1 :: <gulong>;
  result res :: <guint>;
  c-name: "g_bit_storage";
end;

define constant <GTrashStack> = <_GTrashStack>;

define C-subtype <_GTrashStack> (<C-void*>) end;
define C-pointer-type <GTrashStack*> => <GTrashStack>;
define C-function g-trash-stack-push
  input parameter arg1 :: <GTrashStack*>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_trash_stack_push";
end;

define C-function g-trash-stack-pop
  input parameter arg1 :: <GTrashStack*>;
  result res :: <gpointer>;
  c-name: "g_trash_stack_pop";
end;

define C-function g-trash-stack-peek
  input parameter arg1 :: <GTrashStack*>;
  result res :: <gpointer>;
  c-name: "g_trash_stack_peek";
end;

define C-function g-trash-stack-height
  input parameter arg1 :: <GTrashStack*>;
  result res :: <guint>;
  c-name: "g_trash_stack_height";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "glib-major-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "glib-minor-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "glib-micro-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "glib-interface-age"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "glib-binary-age"*/
define C-function glib-check-version
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  result res :: <gchar*>;
  c-name: "glib_check_version";
end;

define constant $G-DIR-SEPARATOR = 1;

define constant $G-DIR-SEPARATOR-S = "\\";

define constant $G-SEARCHPATH-SEPARATOR = 1;

define constant $G-SEARCHPATH-SEPARATOR-S = ";";

define constant g-get-user-name = g-get-user-name-utf8;

define constant g-get-real-name = g-get-real-name-utf8;

define constant g-get-home-dir = g-get-home-dir-utf8;

define constant g-get-tmp-dir = g-get-tmp-dir-utf8;

define constant g-dirname = g-path-get-dirname;

define constant g-get-current-dir = g-get-current-dir-utf8;

define constant g-getenv = g-getenv-utf8;

define constant g-setenv = g-setenv-utf8;

define constant g-unsetenv = g-unsetenv-utf8;

define constant g-find-program-in-path = g-find-program-in-path-utf8;

define constant <gunichar> = <guint32>;

define constant <gunichar2> = <guint16>;

define constant <GUnicodeType> = <C-int>;
define constant $G-UNICODE-CONTROL = 0;
define constant $G-UNICODE-FORMAT = 1;
define constant $G-UNICODE-UNASSIGNED = 2;
define constant $G-UNICODE-PRIVATE-USE = 3;
define constant $G-UNICODE-SURROGATE = 4;
define constant $G-UNICODE-LOWERCASE-LETTER = 5;
define constant $G-UNICODE-MODIFIER-LETTER = 6;
define constant $G-UNICODE-OTHER-LETTER = 7;
define constant $G-UNICODE-TITLECASE-LETTER = 8;
define constant $G-UNICODE-UPPERCASE-LETTER = 9;
define constant $G-UNICODE-COMBINING-MARK = 10;
define constant $G-UNICODE-ENCLOSING-MARK = 11;
define constant $G-UNICODE-NON-SPACING-MARK = 12;
define constant $G-UNICODE-DECIMAL-NUMBER = 13;
define constant $G-UNICODE-LETTER-NUMBER = 14;
define constant $G-UNICODE-OTHER-NUMBER = 15;
define constant $G-UNICODE-CONNECT-PUNCTUATION = 16;
define constant $G-UNICODE-DASH-PUNCTUATION = 17;
define constant $G-UNICODE-CLOSE-PUNCTUATION = 18;
define constant $G-UNICODE-FINAL-PUNCTUATION = 19;
define constant $G-UNICODE-INITIAL-PUNCTUATION = 20;
define constant $G-UNICODE-OTHER-PUNCTUATION = 21;
define constant $G-UNICODE-OPEN-PUNCTUATION = 22;
define constant $G-UNICODE-CURRENCY-SYMBOL = 23;
define constant $G-UNICODE-MODIFIER-SYMBOL = 24;
define constant $G-UNICODE-MATH-SYMBOL = 25;
define constant $G-UNICODE-OTHER-SYMBOL = 26;
define constant $G-UNICODE-LINE-SEPARATOR = 27;
define constant $G-UNICODE-PARAGRAPH-SEPARATOR = 28;
define constant $G-UNICODE-SPACE-SEPARATOR = 29;

define constant <GUnicodeBreakType> = <C-int>;
define constant $G-UNICODE-BREAK-MANDATORY = 0;
define constant $G-UNICODE-BREAK-CARRIAGE-RETURN = 1;
define constant $G-UNICODE-BREAK-LINE-FEED = 2;
define constant $G-UNICODE-BREAK-COMBINING-MARK = 3;
define constant $G-UNICODE-BREAK-SURROGATE = 4;
define constant $G-UNICODE-BREAK-ZERO-WIDTH-SPACE = 5;
define constant $G-UNICODE-BREAK-INSEPARABLE = 6;
define constant $G-UNICODE-BREAK-NON-BREAKING-GLUE = 7;
define constant $G-UNICODE-BREAK-CONTINGENT = 8;
define constant $G-UNICODE-BREAK-SPACE = 9;
define constant $G-UNICODE-BREAK-AFTER = 10;
define constant $G-UNICODE-BREAK-BEFORE = 11;
define constant $G-UNICODE-BREAK-BEFORE-AND-AFTER = 12;
define constant $G-UNICODE-BREAK-HYPHEN = 13;
define constant $G-UNICODE-BREAK-NON-STARTER = 14;
define constant $G-UNICODE-BREAK-OPEN-PUNCTUATION = 15;
define constant $G-UNICODE-BREAK-CLOSE-PUNCTUATION = 16;
define constant $G-UNICODE-BREAK-QUOTATION = 17;
define constant $G-UNICODE-BREAK-EXCLAMATION = 18;
define constant $G-UNICODE-BREAK-IDEOGRAPHIC = 19;
define constant $G-UNICODE-BREAK-NUMERIC = 20;
define constant $G-UNICODE-BREAK-INFIX-SEPARATOR = 21;
define constant $G-UNICODE-BREAK-SYMBOL = 22;
define constant $G-UNICODE-BREAK-ALPHABETIC = 23;
define constant $G-UNICODE-BREAK-PREFIX = 24;
define constant $G-UNICODE-BREAK-POSTFIX = 25;
define constant $G-UNICODE-BREAK-COMPLEX-CONTEXT = 26;
define constant $G-UNICODE-BREAK-AMBIGUOUS = 27;
define constant $G-UNICODE-BREAK-UNKNOWN = 28;
define constant $G-UNICODE-BREAK-NEXT-LINE = 29;
define constant $G-UNICODE-BREAK-WORD-JOINER = 30;
define constant $G-UNICODE-BREAK-HANGUL-L-JAMO = 31;
define constant $G-UNICODE-BREAK-HANGUL-V-JAMO = 32;
define constant $G-UNICODE-BREAK-HANGUL-T-JAMO = 33;
define constant $G-UNICODE-BREAK-HANGUL-LV-SYLLABLE = 34;
define constant $G-UNICODE-BREAK-HANGUL-LVT-SYLLABLE = 35;

define C-pointer-type <c-string-vector> => <char*>;
define C-function g-get-charset
  input parameter arg1 :: <c-string-vector>;
  result res :: <gboolean>;
  c-name: "g_get_charset";
end;

define C-function g-unichar-isalnum
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isalnum";
end;

define C-function g-unichar-isalpha
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isalpha";
end;

define C-function g-unichar-iscntrl
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_iscntrl";
end;

define C-function g-unichar-isdigit
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isdigit";
end;

define C-function g-unichar-isgraph
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isgraph";
end;

define C-function g-unichar-islower
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_islower";
end;

define C-function g-unichar-isprint
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isprint";
end;

define C-function g-unichar-ispunct
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_ispunct";
end;

define C-function g-unichar-isspace
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isspace";
end;

define C-function g-unichar-isupper
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isupper";
end;

define C-function g-unichar-isxdigit
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isxdigit";
end;

define C-function g-unichar-istitle
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_istitle";
end;

define C-function g-unichar-isdefined
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_isdefined";
end;

define C-function g-unichar-iswide
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_iswide";
end;

define C-function g-unichar-iswide-cjk
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_iswide_cjk";
end;

define C-function g-unichar-toupper
  input parameter arg1 :: <gunichar>;
  result res :: <gunichar>;
  c-name: "g_unichar_toupper";
end;

define C-function g-unichar-tolower
  input parameter arg1 :: <gunichar>;
  result res :: <gunichar>;
  c-name: "g_unichar_tolower";
end;

define C-function g-unichar-totitle
  input parameter arg1 :: <gunichar>;
  result res :: <gunichar>;
  c-name: "g_unichar_totitle";
end;

define C-function g-unichar-digit-value
  input parameter arg1 :: <gunichar>;
  result res :: <gint>;
  c-name: "g_unichar_digit_value";
end;

define C-function g-unichar-xdigit-value
  input parameter arg1 :: <gunichar>;
  result res :: <gint>;
  c-name: "g_unichar_xdigit_value";
end;

define C-function g-unichar-type
  input parameter arg1 :: <gunichar>;
  result res :: <GUnicodeType>;
  c-name: "g_unichar_type";
end;

define C-function g-unichar-break-type
  input parameter arg1 :: <gunichar>;
  result res :: <GUnicodeBreakType>;
  c-name: "g_unichar_break_type";
end;

define C-pointer-type <gunichar*> => <gunichar>;
define C-function g-unicode-canonical-ordering
  input parameter arg1 :: <gunichar*>;
  input parameter arg2 :: <gsize>;
  c-name: "g_unicode_canonical_ordering";
end;

define C-pointer-type <gsize*> => <gsize>;
define C-function g-unicode-canonical-decomposition
  input parameter arg1 :: <gunichar>;
  input parameter arg2 :: <gsize*>;
  result res :: <gunichar*>;
  c-name: "g_unicode_canonical_decomposition";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "g-utf8-skip"*/
define C-function g-utf8-get-char
  input parameter arg1 :: <gchar*>;
  result res :: <gunichar>;
  c-name: "g_utf8_get_char";
end;

define C-function g-utf8-get-char-validated
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gunichar>;
  c-name: "g_utf8_get_char_validated";
end;

define C-function g-utf8-offset-to-pointer
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <glong>;
  result res :: <gchar*>;
  c-name: "g_utf8_offset_to_pointer";
end;

define C-function g-utf8-pointer-to-offset
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <glong>;
  c-name: "g_utf8_pointer_to_offset";
end;

define C-function g-utf8-prev-char
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_utf8_prev_char";
end;

define C-function g-utf8-find-next-char
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_utf8_find_next_char";
end;

define C-function g-utf8-find-prev-char
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_utf8_find_prev_char";
end;

define C-function g-utf8-strlen
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <glong>;
  c-name: "g_utf8_strlen";
end;

define C-function g-utf8-strncpy
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  result res :: <gchar*>;
  c-name: "g_utf8_strncpy";
end;

define C-function g-utf8-strchr
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gunichar>;
  result res :: <gchar*>;
  c-name: "g_utf8_strchr";
end;

define C-function g-utf8-strrchr
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gunichar>;
  result res :: <gchar*>;
  c-name: "g_utf8_strrchr";
end;

define C-function g-utf8-strreverse
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_utf8_strreverse";
end;

define C-pointer-type <gunichar2*> => <gunichar2>;
define C-pointer-type <glong*> => <glong>;
define C-function g-utf8-to-utf16
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <glong>;
  input parameter arg3 :: <glong*>;
  input parameter arg4 :: <glong*>;
  input parameter arg5 :: <GError*>;
  result res :: <gunichar2*>;
  c-name: "g_utf8_to_utf16";
end;

define C-function g-utf8-to-ucs4
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <glong>;
  input parameter arg3 :: <glong*>;
  input parameter arg4 :: <glong*>;
  input parameter arg5 :: <GError*>;
  result res :: <gunichar*>;
  c-name: "g_utf8_to_ucs4";
end;

define C-function g-utf8-to-ucs4-fast
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <glong>;
  input parameter arg3 :: <glong*>;
  result res :: <gunichar*>;
  c-name: "g_utf8_to_ucs4_fast";
end;

define C-function g-utf16-to-ucs4
  input parameter arg1 :: <gunichar2*>;
  input parameter arg2 :: <glong>;
  input parameter arg3 :: <glong*>;
  input parameter arg4 :: <glong*>;
  input parameter arg5 :: <GError*>;
  result res :: <gunichar*>;
  c-name: "g_utf16_to_ucs4";
end;

define C-function g-utf16-to-utf8
  input parameter arg1 :: <gunichar2*>;
  input parameter arg2 :: <glong>;
  input parameter arg3 :: <glong*>;
  input parameter arg4 :: <glong*>;
  input parameter arg5 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_utf16_to_utf8";
end;

define C-function g-ucs4-to-utf16
  input parameter arg1 :: <gunichar*>;
  input parameter arg2 :: <glong>;
  input parameter arg3 :: <glong*>;
  input parameter arg4 :: <glong*>;
  input parameter arg5 :: <GError*>;
  result res :: <gunichar2*>;
  c-name: "g_ucs4_to_utf16";
end;

define C-function g-ucs4-to-utf8
  input parameter arg1 :: <gunichar*>;
  input parameter arg2 :: <glong>;
  input parameter arg3 :: <glong*>;
  input parameter arg4 :: <glong*>;
  input parameter arg5 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_ucs4_to_utf8";
end;

define C-function g-unichar-to-utf8
  input parameter arg1 :: <gunichar>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint>;
  c-name: "g_unichar_to_utf8";
end;

define C-function g-utf8-validate
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gchar**>;
  result res :: <gboolean>;
  c-name: "g_utf8_validate";
end;

define C-function g-unichar-validate
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "g_unichar_validate";
end;

define C-function g-utf8-strup
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_utf8_strup";
end;

define C-function g-utf8-strdown
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_utf8_strdown";
end;

define C-function g-utf8-casefold
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_utf8_casefold";
end;

define constant <GNormalizeMode> = <C-int>;
define constant $G-NORMALIZE-DEFAULT = 0;
define constant $G-NORMALIZE-NFD = 0;
define constant $G-NORMALIZE-DEFAULT-COMPOSE = 1;
define constant $G-NORMALIZE-NFC = 1;
define constant $G-NORMALIZE-ALL = 2;
define constant $G-NORMALIZE-NFKD = 2;
define constant $G-NORMALIZE-ALL-COMPOSE = 3;
define constant $G-NORMALIZE-NFKC = 3;

define C-function g-utf8-normalize
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <GNormalizeMode>;
  result res :: <gchar*>;
  c-name: "g_utf8_normalize";
end;

define C-function g-utf8-collate
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint>;
  c-name: "g_utf8_collate";
end;

define C-function g-utf8-collate-key
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_utf8_collate_key";
end;

define C-function g-utf8-collate-key-for-filename
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_utf8_collate_key_for_filename";
end;

define C-function g-unichar-get-mirror-char
  input parameter arg1 :: <gunichar>;
  input parameter arg2 :: <gunichar*>;
  result res :: <gboolean>;
  c-name: "g_unichar_get_mirror_char";
end;

define C-function g-error-new
  input parameter arg1 :: <GQuark>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  result res :: <GError>;
  c-name: "g_error_new";
end;

define C-function g-error-new-literal
  input parameter arg1 :: <GQuark>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  result res :: <GError>;
  c-name: "g_error_new_literal";
end;

define C-function g-error-free
  input parameter arg1 :: <GError>;
  c-name: "g_error_free";
end;

define C-function g-error-copy
  input parameter arg1 :: <GError>;
  result res :: <GError>;
  c-name: "g_error_copy";
end;

define C-function g-error-matches
  input parameter arg1 :: <GError>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "g_error_matches";
end;

define C-function g-set-error
  input parameter arg1 :: <GError*>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar*>;
  c-name: "g_set_error";
end;

define C-function g-propagate-error
  input parameter arg1 :: <GError*>;
  input parameter arg2 :: <GError>;
  c-name: "g_propagate_error";
end;

define C-function g-clear-error
  input parameter arg1 :: <GError*>;
  c-name: "g_clear_error";
end;

define C-function g-quark-try-string
  input parameter arg1 :: <gchar*>;
  result res :: <GQuark>;
  c-name: "g_quark_try_string";
end;

define C-function g-quark-from-static-string
  input parameter arg1 :: <gchar*>;
  result res :: <GQuark>;
  c-name: "g_quark_from_static_string";
end;

define C-function g-quark-from-string
  input parameter arg1 :: <gchar*>;
  result res :: <GQuark>;
  c-name: "g_quark_from_string";
end;

define C-function g-quark-to-string
  input parameter arg1 :: <GQuark>;
  result res :: <gchar*>;
  c-name: "g_quark_to_string";
end;

define C-function g-intern-string
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_intern_string";
end;

define C-function g-intern-static-string
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_intern_static_string";
end;

define C-subtype <_GTree> (<C-void*>) end;
define constant <GTree> = <_GTree>;

define constant <anonymous-1357> = <C-function-pointer>;
define constant <GTraverseFunc> = <anonymous-1357>;

define C-function g-tree-new
  input parameter arg1 :: <GCompareFunc>;
  result res :: <GTree>;
  c-name: "g_tree_new";
end;

define C-function g-tree-new-with-data
  input parameter arg1 :: <GCompareDataFunc>;
  input parameter arg2 :: <gpointer>;
  result res :: <GTree>;
  c-name: "g_tree_new_with_data";
end;

define C-function g-tree-new-full
  input parameter arg1 :: <GCompareDataFunc>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GDestroyNotify>;
  input parameter arg4 :: <GDestroyNotify>;
  result res :: <GTree>;
  c-name: "g_tree_new_full";
end;

define C-function g-tree-destroy
  input parameter arg1 :: <GTree>;
  c-name: "g_tree_destroy";
end;

define C-function g-tree-insert
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_tree_insert";
end;

define C-function g-tree-replace
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_tree_replace";
end;

define C-function g-tree-remove
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gboolean>;
  c-name: "g_tree_remove";
end;

define C-function g-tree-steal
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gboolean>;
  c-name: "g_tree_steal";
end;

define C-function g-tree-lookup
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gpointer>;
  c-name: "g_tree_lookup";
end;

define C-function g-tree-lookup-extended
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <gpointer*>;
  input parameter arg4 :: <gpointer*>;
  result res :: <gboolean>;
  c-name: "g_tree_lookup_extended";
end;

define C-function g-tree-foreach
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <GTraverseFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_tree_foreach";
end;

define constant <GTraverseType> = <C-int>;
define constant $G-IN-ORDER = 0;
define constant $G-PRE-ORDER = 1;
define constant $G-POST-ORDER = 2;
define constant $G-LEVEL-ORDER = 3;

define C-function g-tree-traverse
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <GTraverseFunc>;
  input parameter arg3 :: <GTraverseType>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_tree_traverse";
end;

define C-function g-tree-search
  input parameter arg1 :: <GTree>;
  input parameter arg2 :: <GCompareFunc>;
  input parameter arg3 :: <gconstpointer>;
  result res :: <gpointer>;
  c-name: "g_tree_search";
end;

define C-function g-tree-height
  input parameter arg1 :: <GTree>;
  result res :: <gint>;
  c-name: "g_tree_height";
end;

define C-function g-tree-nnodes
  input parameter arg1 :: <GTree>;
  result res :: <gint>;
  c-name: "g_tree_nnodes";
end;

define constant <GNode> = <_GNode>;

define C-subtype <_GNode> (<C-void*>) end;
define constant <GTraverseFlags> = <C-int>;
define constant $G-TRAVERSE-LEAVES = 1;
define constant $G-TRAVERSE-NON-LEAVES = 2;
define constant $G-TRAVERSE-ALL = 3;
define constant $G-TRAVERSE-MASK = 3;
define constant $G-TRAVERSE-LEAFS = 1;
define constant $G-TRAVERSE-NON-LEAFS = 2;

define constant <anonymous-1084> = <C-function-pointer>;
define constant <GNodeTraverseFunc> = <anonymous-1084>;

define constant <anonymous-1085> = <C-function-pointer>;
define constant <GNodeForeachFunc> = <anonymous-1085>;

define constant <anonymous-1086> = <C-function-pointer>;
define constant <GCopyFunc> = <anonymous-1086>;

define C-function g-node-new
  input parameter arg1 :: <gpointer>;
  result res :: <GNode>;
  c-name: "g_node_new";
end;

define C-function g-node-destroy
  input parameter arg1 :: <GNode>;
  c-name: "g_node_destroy";
end;

define C-function g-node-unlink
  input parameter arg1 :: <GNode>;
  c-name: "g_node_unlink";
end;

define C-function g-node-copy-deep
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GCopyFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <GNode>;
  c-name: "g_node_copy_deep";
end;

define C-function g-node-copy
  input parameter arg1 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_copy";
end;

define C-function g-node-insert
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_insert";
end;

define C-function g-node-insert-before
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GNode>;
  input parameter arg3 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_insert_before";
end;

define C-function g-node-insert-after
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GNode>;
  input parameter arg3 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_insert_after";
end;

define C-function g-node-prepend
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_prepend";
end;

define C-function g-node-n-nodes
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GTraverseFlags>;
  result res :: <guint>;
  c-name: "g_node_n_nodes";
end;

define C-function g-node-get-root
  input parameter arg1 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_get_root";
end;

define C-function g-node-is-ancestor
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GNode>;
  result res :: <gboolean>;
  c-name: "g_node_is_ancestor";
end;

define C-function g-node-depth
  input parameter arg1 :: <GNode>;
  result res :: <guint>;
  c-name: "g_node_depth";
end;

define C-function g-node-find
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GTraverseType>;
  input parameter arg3 :: <GTraverseFlags>;
  input parameter arg4 :: <gpointer>;
  result res :: <GNode>;
  c-name: "g_node_find";
end;

define C-function g-node-traverse
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GTraverseType>;
  input parameter arg3 :: <GTraverseFlags>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GNodeTraverseFunc>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_node_traverse";
end;

define C-function g-node-max-height
  input parameter arg1 :: <GNode>;
  result res :: <guint>;
  c-name: "g_node_max_height";
end;

define C-function g-node-children-foreach
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GTraverseFlags>;
  input parameter arg3 :: <GNodeForeachFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_node_children_foreach";
end;

define C-function g-node-reverse-children
  input parameter arg1 :: <GNode>;
  c-name: "g_node_reverse_children";
end;

define C-function g-node-n-children
  input parameter arg1 :: <GNode>;
  result res :: <guint>;
  c-name: "g_node_n_children";
end;

define C-function g-node-nth-child
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <guint>;
  result res :: <GNode>;
  c-name: "g_node_nth_child";
end;

define C-function g-node-last-child
  input parameter arg1 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_last_child";
end;

define C-function g-node-find-child
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GTraverseFlags>;
  input parameter arg3 :: <gpointer>;
  result res :: <GNode>;
  c-name: "g_node_find_child";
end;

define C-function g-node-child-position
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <GNode>;
  result res :: <gint>;
  c-name: "g_node_child_position";
end;

define C-function g-node-child-index
  input parameter arg1 :: <GNode>;
  input parameter arg2 :: <gpointer>;
  result res :: <gint>;
  c-name: "g_node_child_index";
end;

define C-function g-node-first-sibling
  input parameter arg1 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_first_sibling";
end;

define C-function g-node-last-sibling
  input parameter arg1 :: <GNode>;
  result res :: <GNode>;
  c-name: "g_node_last_sibling";
end;

define C-function g-node-push-allocator
  input parameter arg1 :: <gpointer>;
  c-name: "g_node_push_allocator";
end;

define C-function g-node-pop-allocator
  c-name: "g_node_pop_allocator";
end;

define constant <anonymous-453> = <C-function-pointer>;
define constant <anonymous-454> = <C-function-pointer>;
define constant <anonymous-455> = <C-function-pointer>;
define constant <anonymous-456> = <C-function-pointer>;
define constant <anonymous-457> = <C-function-pointer>;
define constant <anonymous-458> = <C-function-pointer>;
define C-subtype <_GMemVTable> (<C-void*>) end;
define constant <GMemVTable> = <_GMemVTable>;

define C-function g-malloc
  input parameter arg1 :: <gulong>;
  result res :: <gpointer>;
  c-name: "g_malloc";
end;

define C-function g-malloc0
  input parameter arg1 :: <gulong>;
  result res :: <gpointer>;
  c-name: "g_malloc0";
end;

define C-function g-realloc
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gulong>;
  result res :: <gpointer>;
  c-name: "g_realloc";
end;

define C-function g-free
  input parameter arg1 :: <gpointer>;
  c-name: "g_free";
end;

define C-function g-try-malloc
  input parameter arg1 :: <gulong>;
  result res :: <gpointer>;
  c-name: "g_try_malloc";
end;

define C-function g-try-malloc0
  input parameter arg1 :: <gulong>;
  result res :: <gpointer>;
  c-name: "g_try_malloc0";
end;

define C-function g-try-realloc
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gulong>;
  result res :: <gpointer>;
  c-name: "g_try_realloc";
end;

define C-function g-mem-set-vtable
  input parameter arg1 :: <GMemVTable>;
  c-name: "g_mem_set_vtable";
end;

define C-function g-mem-is-system-malloc
  result res :: <gboolean>;
  c-name: "g_mem_is_system_malloc";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "g-mem-gc-friendly"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "glib-mem-profiler-table"*/
define C-function g-mem-profile
  c-name: "g_mem_profile";
end;

define C-subtype <_GAllocator> (<C-void*>) end;
define constant <GAllocator> = <_GAllocator>;

define C-subtype <_GMemChunk> (<C-void*>) end;
define constant <GMemChunk> = <_GMemChunk>;

define C-function g-mem-chunk-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gulong>;
  input parameter arg4 :: <gint>;
  result res :: <GMemChunk>;
  c-name: "g_mem_chunk_new";
end;

define C-function g-mem-chunk-destroy
  input parameter arg1 :: <GMemChunk>;
  c-name: "g_mem_chunk_destroy";
end;

define C-function g-mem-chunk-alloc
  input parameter arg1 :: <GMemChunk>;
  result res :: <gpointer>;
  c-name: "g_mem_chunk_alloc";
end;

define C-function g-mem-chunk-alloc0
  input parameter arg1 :: <GMemChunk>;
  result res :: <gpointer>;
  c-name: "g_mem_chunk_alloc0";
end;

define C-function g-mem-chunk-free
  input parameter arg1 :: <GMemChunk>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_mem_chunk_free";
end;

define C-function g-mem-chunk-clean
  input parameter arg1 :: <GMemChunk>;
  c-name: "g_mem_chunk_clean";
end;

define C-function g-mem-chunk-reset
  input parameter arg1 :: <GMemChunk>;
  c-name: "g_mem_chunk_reset";
end;

define C-function g-mem-chunk-print
  input parameter arg1 :: <GMemChunk>;
  c-name: "g_mem_chunk_print";
end;

define C-function g-mem-chunk-info
  c-name: "g_mem_chunk_info";
end;

define C-function g-blow-chunks
  c-name: "g_blow_chunks";
end;

define C-function g-allocator-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <guint>;
  result res :: <GAllocator>;
  c-name: "g_allocator_new";
end;

define C-function g-allocator-free
  input parameter arg1 :: <GAllocator>;
  c-name: "g_allocator_free";
end;

define constant $G-MEM-ALIGN = 4;

define constant $G-ALLOC-ONLY = 1;

define constant $G-ALLOC-AND-FREE = 2;

define constant $G-ALLOCATOR-LIST = 1;

define constant $G-ALLOCATOR-SLIST = 2;

define constant $G-ALLOCATOR-NODE = 3;

define C-function g-slice-alloc
  input parameter arg1 :: <gsize>;
  result res :: <gpointer>;
  c-name: "g_slice_alloc";
end;

define C-function g-slice-alloc0
  input parameter arg1 :: <gsize>;
  result res :: <gpointer>;
  c-name: "g_slice_alloc0";
end;

define C-function g-slice-free1
  input parameter arg1 :: <gsize>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_slice_free1";
end;

define C-function g-slice-free-chain-with-offset
  input parameter arg1 :: <gsize>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gsize>;
  c-name: "g_slice_free_chain_with_offset";
end;

define constant <GSliceConfig> = <C-int>;
define constant $G-SLICE-CONFIG-ALWAYS-MALLOC = 1;
define constant $G-SLICE-CONFIG-BYPASS-MAGAZINES = 2;
define constant $G-SLICE-CONFIG-WORKING-SET-MSECS = 3;
define constant $G-SLICE-CONFIG-COLOR-INCREMENT = 4;
define constant $G-SLICE-CONFIG-CHUNK-SIZES = 5;
define constant $G-SLICE-CONFIG-CONTENTION-COUNTER = 6;

define C-function g-slice-set-config
  input parameter arg1 :: <GSliceConfig>;
  input parameter arg2 :: <gint64>;
  c-name: "g_slice_set_config";
end;

define C-function g-slice-get-config
  input parameter arg1 :: <GSliceConfig>;
  result res :: <gint64>;
  c-name: "g_slice_get_config";
end;

define C-pointer-type <gint64*> => <gint64>;
define C-function g-slice-get-config-state
  input parameter arg1 :: <GSliceConfig>;
  input parameter arg2 :: <gint64>;
  input parameter arg3 :: <guint*>;
  result res :: <gint64*>;
  c-name: "g_slice_get_config_state";
end;

define C-subtype <_GTimer> (<C-void*>) end;
define constant <GTimer> = <_GTimer>;

define C-function g-timer-new
  result res :: <GTimer>;
  c-name: "g_timer_new";
end;

define C-function g-timer-destroy
  input parameter arg1 :: <GTimer>;
  c-name: "g_timer_destroy";
end;

define C-function g-timer-start
  input parameter arg1 :: <GTimer>;
  c-name: "g_timer_start";
end;

define C-function g-timer-stop
  input parameter arg1 :: <GTimer>;
  c-name: "g_timer_stop";
end;

define C-function g-timer-reset
  input parameter arg1 :: <GTimer>;
  c-name: "g_timer_reset";
end;

define C-function g-timer-continue
  input parameter arg1 :: <GTimer>;
  c-name: "g_timer_continue";
end;

define C-pointer-type <gulong*> => <gulong>;
define C-function g-timer-elapsed
  input parameter arg1 :: <GTimer>;
  input parameter arg2 :: <gulong*>;
  result res :: <gdouble>;
  c-name: "g_timer_elapsed";
end;

define C-function g-usleep
  input parameter arg1 :: <gulong>;
  c-name: "g_usleep";
end;

define C-function g-time-val-add
  input parameter arg1 :: <GTimeVal>;
  input parameter arg2 :: <glong>;
  c-name: "g_time_val_add";
end;

define C-function g-time-val-from-iso8601
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GTimeVal>;
  result res :: <gboolean>;
  c-name: "g_time_val_from_iso8601";
end;

define C-function g-time-val-to-iso8601
  input parameter arg1 :: <GTimeVal>;
  result res :: <gchar*>;
  c-name: "g_time_val_to_iso8601";
end;

define constant $G-USEC-PER-SEC = 1000000;

define C-subtype <_GThreadPool> (<C-void*>) end;
define constant <GThreadPool> = <_GThreadPool>;

define C-function g-thread-pool-new
  input parameter arg1 :: <GFunc>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <GError*>;
  result res :: <GThreadPool>;
  c-name: "g_thread_pool_new";
end;

define C-function g-thread-pool-push
  input parameter arg1 :: <GThreadPool>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GError*>;
  c-name: "g_thread_pool_push";
end;

define C-function g-thread-pool-set-max-threads
  input parameter arg1 :: <GThreadPool>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GError*>;
  c-name: "g_thread_pool_set_max_threads";
end;

define C-function g-thread-pool-get-max-threads
  input parameter arg1 :: <GThreadPool>;
  result res :: <gint>;
  c-name: "g_thread_pool_get_max_threads";
end;

define C-function g-thread-pool-get-num-threads
  input parameter arg1 :: <GThreadPool>;
  result res :: <guint>;
  c-name: "g_thread_pool_get_num_threads";
end;

define C-function g-thread-pool-unprocessed
  input parameter arg1 :: <GThreadPool>;
  result res :: <guint>;
  c-name: "g_thread_pool_unprocessed";
end;

define C-function g-thread-pool-free
  input parameter arg1 :: <GThreadPool>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <gboolean>;
  c-name: "g_thread_pool_free";
end;

define C-function g-thread-pool-set-max-unused-threads
  input parameter arg1 :: <gint>;
  c-name: "g_thread_pool_set_max_unused_threads";
end;

define C-function g-thread-pool-get-max-unused-threads
  result res :: <gint>;
  c-name: "g_thread_pool_get_max_unused_threads";
end;

define C-function g-thread-pool-get-num-unused-threads
  result res :: <guint>;
  c-name: "g_thread_pool_get_num_unused_threads";
end;

define C-function g-thread-pool-stop-unused-threads
  c-name: "g_thread_pool_stop_unused_threads";
end;

define C-function g-thread-pool-set-sort-function
  input parameter arg1 :: <GThreadPool>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_thread_pool_set_sort_function";
end;

define C-function g-thread-pool-set-max-idle-time
  input parameter arg1 :: <guint>;
  c-name: "g_thread_pool_set_max_idle_time";
end;

define C-function g-thread-pool-get-max-idle-time
  result res :: <guint>;
  c-name: "g_thread_pool_get_max_idle_time";
end;

define C-function g-thread-error-quark
  result res :: <GQuark>;
  c-name: "g_thread_error_quark";
end;

define constant <GThreadError> = <C-int>;
define constant $G-THREAD-ERROR-AGAIN = 0;

define constant <anonymous-291> = <C-function-pointer>;
define constant <GThreadFunc> = <anonymous-291>;

define constant <GThreadPriority> = <C-int>;
define constant $G-THREAD-PRIORITY-LOW = 0;
define constant $G-THREAD-PRIORITY-NORMAL = 1;
define constant $G-THREAD-PRIORITY-HIGH = 2;
define constant $G-THREAD-PRIORITY-URGENT = 3;

define C-subtype <_GThread> (<C-void*>) end;
define constant <GThread> = <_GThread>;

define constant <GMutex> = <_GMutex>;

define C-subtype <_GCond> (<C-void*>) end;
define constant <GCond> = <_GCond>;

define C-subtype <_GPrivate> (<C-void*>) end;
define constant <GPrivate> = <_GPrivate>;

define C-subtype <_GStaticPrivate> (<C-void*>) end;
define constant <GStaticPrivate> = <_GStaticPrivate>;

define constant <anonymous-293> = <C-function-pointer>;
define constant <anonymous-294> = <C-function-pointer>;
define constant <anonymous-295> = <C-function-pointer>;
define constant <anonymous-296> = <C-function-pointer>;
define constant <anonymous-297> = <C-function-pointer>;
define constant <anonymous-298> = <C-function-pointer>;
define constant <anonymous-299> = <C-function-pointer>;
define constant <anonymous-300> = <C-function-pointer>;
define constant <anonymous-301> = <C-function-pointer>;
define constant <anonymous-302> = <C-function-pointer>;
define constant <anonymous-303> = <C-function-pointer>;
define constant <anonymous-304> = <C-function-pointer>;
define constant <anonymous-305> = <C-function-pointer>;
define constant <anonymous-306> = <C-function-pointer>;
define constant <anonymous-307> = <C-function-pointer>;
define constant <anonymous-308> = <C-function-pointer>;
define constant <anonymous-309> = <C-function-pointer>;
define constant <anonymous-310> = <C-function-pointer>;
define constant <anonymous-311> = <C-function-pointer>;
define constant <anonymous-312> = <C-function-pointer>;
define constant <anonymous-313> = <C-function-pointer>;
define C-subtype <_GThreadFunctions> (<C-void*>) end;
define constant <GThreadFunctions> = <_GThreadFunctions>;

 /* Ignoring declaration for {instance of <variable-declaration>} "g-thread-functions-for-glib-use"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "g-thread-use-default-impl"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "g-threads-got-initialized"*/
define constant <anonymous-314> = <C-function-pointer>;
 /* Ignoring declaration for {instance of <variable-declaration>} "g-thread-gettime"*/
define C-pointer-type <GMutex*> => <GMutex>;
define C-function g-static-mutex-get-mutex-impl
  input parameter arg1 :: <GMutex*>;
  result res :: <GMutex>;
  c-name: "g_static_mutex_get_mutex_impl";
end;

define C-function g-thread-create-full
  input parameter arg1 :: <GThreadFunc>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gulong>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <gboolean>;
  input parameter arg6 :: <GThreadPriority>;
  input parameter arg7 :: <GError*>;
  result res :: <GThread>;
  c-name: "g_thread_create_full";
end;

define C-function g-thread-self
  result res :: <GThread>;
  c-name: "g_thread_self";
end;

define C-function g-thread-exit
  input parameter arg1 :: <gpointer>;
  c-name: "g_thread_exit";
end;

define C-function g-thread-join
  input parameter arg1 :: <GThread>;
  result res :: <gpointer>;
  c-name: "g_thread_join";
end;

define C-function g-thread-set-priority
  input parameter arg1 :: <GThread>;
  input parameter arg2 :: <GThreadPriority>;
  c-name: "g_thread_set_priority";
end;

define C-pointer-type <GStaticMutex*> => <GStaticMutex>;
define C-function g-static-mutex-init
  input parameter arg1 :: <GStaticMutex*>;
  c-name: "g_static_mutex_init";
end;

define C-function g-static-mutex-free
  input parameter arg1 :: <GStaticMutex*>;
  c-name: "g_static_mutex_free";
end;

define C-function g-static-private-init
  input parameter arg1 :: <GStaticPrivate>;
  c-name: "g_static_private_init";
end;

define C-function g-static-private-get
  input parameter arg1 :: <GStaticPrivate>;
  result res :: <gpointer>;
  c-name: "g_static_private_get";
end;

define C-function g-static-private-set
  input parameter arg1 :: <GStaticPrivate>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GDestroyNotify>;
  c-name: "g_static_private_set";
end;

define C-function g-static-private-free
  input parameter arg1 :: <GStaticPrivate>;
  c-name: "g_static_private_free";
end;

define C-subtype <_GStaticRecMutex> (<C-void*>) end;
define constant <GStaticRecMutex> = <_GStaticRecMutex>;

define C-function g-static-rec-mutex-init
  input parameter arg1 :: <GStaticRecMutex>;
  c-name: "g_static_rec_mutex_init";
end;

define C-function g-static-rec-mutex-lock
  input parameter arg1 :: <GStaticRecMutex>;
  c-name: "g_static_rec_mutex_lock";
end;

define C-function g-static-rec-mutex-trylock
  input parameter arg1 :: <GStaticRecMutex>;
  result res :: <gboolean>;
  c-name: "g_static_rec_mutex_trylock";
end;

define C-function g-static-rec-mutex-unlock
  input parameter arg1 :: <GStaticRecMutex>;
  c-name: "g_static_rec_mutex_unlock";
end;

define C-function g-static-rec-mutex-lock-full
  input parameter arg1 :: <GStaticRecMutex>;
  input parameter arg2 :: <guint>;
  c-name: "g_static_rec_mutex_lock_full";
end;

define C-function g-static-rec-mutex-unlock-full
  input parameter arg1 :: <GStaticRecMutex>;
  result res :: <guint>;
  c-name: "g_static_rec_mutex_unlock_full";
end;

define C-function g-static-rec-mutex-free
  input parameter arg1 :: <GStaticRecMutex>;
  c-name: "g_static_rec_mutex_free";
end;

define C-subtype <_GStaticRWLock> (<C-void*>) end;
define constant <GStaticRWLock> = <_GStaticRWLock>;

define C-function g-static-rw-lock-init
  input parameter arg1 :: <GStaticRWLock>;
  c-name: "g_static_rw_lock_init";
end;

define C-function g-static-rw-lock-reader-lock
  input parameter arg1 :: <GStaticRWLock>;
  c-name: "g_static_rw_lock_reader_lock";
end;

define C-function g-static-rw-lock-reader-trylock
  input parameter arg1 :: <GStaticRWLock>;
  result res :: <gboolean>;
  c-name: "g_static_rw_lock_reader_trylock";
end;

define C-function g-static-rw-lock-reader-unlock
  input parameter arg1 :: <GStaticRWLock>;
  c-name: "g_static_rw_lock_reader_unlock";
end;

define C-function g-static-rw-lock-writer-lock
  input parameter arg1 :: <GStaticRWLock>;
  c-name: "g_static_rw_lock_writer_lock";
end;

define C-function g-static-rw-lock-writer-trylock
  input parameter arg1 :: <GStaticRWLock>;
  result res :: <gboolean>;
  c-name: "g_static_rw_lock_writer_trylock";
end;

define C-function g-static-rw-lock-writer-unlock
  input parameter arg1 :: <GStaticRWLock>;
  c-name: "g_static_rw_lock_writer_unlock";
end;

define C-function g-static-rw-lock-free
  input parameter arg1 :: <GStaticRWLock>;
  c-name: "g_static_rw_lock_free";
end;

define C-function g-thread-foreach
  input parameter arg1 :: <GFunc>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_thread_foreach";
end;

define constant <GOnceStatus> = <C-int>;
define constant $G-ONCE-STATUS-NOTCALLED = 0;
define constant $G-ONCE-STATUS-PROGRESS = 1;
define constant $G-ONCE-STATUS-READY = 2;

define C-subtype <_GOnce> (<C-void*>) end;
define constant <GOnce> = <_GOnce>;

define C-function g-once-impl
  input parameter arg1 :: <GOnce>;
  input parameter arg2 :: <GThreadFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <gpointer>;
  c-name: "g_once_impl";
end;

//define constant $G-MUTEX-DEBUG-MAGIC = #ex00000000F8E18AD7;

define C-function g-atomic-int-exchange-and-add
  input parameter arg1 :: <gint*>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "g_atomic_int_exchange_and_add";
end;

define C-function g-atomic-int-add
  input parameter arg1 :: <gint*>;
  input parameter arg2 :: <gint>;
  c-name: "g_atomic_int_add";
end;

define C-function g-atomic-int-compare-and-exchange
  input parameter arg1 :: <gint*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "g_atomic_int_compare_and_exchange";
end;

define C-function g-atomic-pointer-compare-and-exchange
  input parameter arg1 :: <gpointer*>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "g_atomic_pointer_compare_and_exchange";
end;

define C-function g-atomic-int-get
  input parameter arg1 :: <gint*>;
  result res :: <gint>;
  c-name: "g_atomic_int_get";
end;

define C-function g-atomic-int-set
  input parameter arg1 :: <gint*>;
  input parameter arg2 :: <gint>;
  c-name: "g_atomic_int_set";
end;

define C-function g-atomic-pointer-get
  input parameter arg1 :: <gpointer*>;
  result res :: <gpointer>;
  c-name: "g_atomic_pointer_get";
end;

define C-function g-atomic-pointer-set
  input parameter arg1 :: <gpointer*>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_atomic_pointer_set";
end;

define C-subtype <_GStringChunk> (<C-void*>) end;
define constant <GStringChunk> = <_GStringChunk>;

define C-function g-string-chunk-new
  input parameter arg1 :: <gsize>;
  result res :: <GStringChunk>;
  c-name: "g_string_chunk_new";
end;

define C-function g-string-chunk-free
  input parameter arg1 :: <GStringChunk>;
  c-name: "g_string_chunk_free";
end;

define C-function g-string-chunk-insert
  input parameter arg1 :: <GStringChunk>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_string_chunk_insert";
end;

define C-function g-string-chunk-insert-len
  input parameter arg1 :: <GStringChunk>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_string_chunk_insert_len";
end;

define C-function g-string-chunk-insert-const
  input parameter arg1 :: <GStringChunk>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_string_chunk_insert_const";
end;

define C-function g-string-new
  input parameter arg1 :: <gchar*>;
  result res :: <GString>;
  c-name: "g_string_new";
end;

define C-function g-string-new-len
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <GString>;
  c-name: "g_string_new_len";
end;

define C-function g-string-sized-new
  input parameter arg1 :: <gsize>;
  result res :: <GString>;
  c-name: "g_string_sized_new";
end;

define C-function g-string-free
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gboolean>;
  result res :: <gchar*>;
  c-name: "g_string_free";
end;

define C-function g-string-equal
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <GString>;
  result res :: <gboolean>;
  c-name: "g_string_equal";
end;

define C-function g-string-hash
  input parameter arg1 :: <GString>;
  result res :: <guint>;
  c-name: "g_string_hash";
end;

define C-function g-string-assign
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar*>;
  result res :: <GString>;
  c-name: "g_string_assign";
end;

define C-function g-string-truncate
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gsize>;
  result res :: <GString>;
  c-name: "g_string_truncate";
end;

define C-function g-string-set-size
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gsize>;
  result res :: <GString>;
  c-name: "g_string_set_size";
end;

define C-function g-string-insert-len
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gssize>;
  result res :: <GString>;
  c-name: "g_string_insert_len";
end;

define C-function g-string-append
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar*>;
  result res :: <GString>;
  c-name: "g_string_append";
end;

define C-function g-string-append-len
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gssize>;
  result res :: <GString>;
  c-name: "g_string_append_len";
end;

define C-function g-string-append-c
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar>;
  result res :: <GString>;
  c-name: "g_string_append_c";
end;

define C-function g-string-append-unichar
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gunichar>;
  result res :: <GString>;
  c-name: "g_string_append_unichar";
end;

define C-function g-string-prepend
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar*>;
  result res :: <GString>;
  c-name: "g_string_prepend";
end;

define C-function g-string-prepend-c
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar>;
  result res :: <GString>;
  c-name: "g_string_prepend_c";
end;

define C-function g-string-prepend-unichar
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gunichar>;
  result res :: <GString>;
  c-name: "g_string_prepend_unichar";
end;

define C-function g-string-prepend-len
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gssize>;
  result res :: <GString>;
  c-name: "g_string_prepend_len";
end;

define C-function g-string-insert
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gchar*>;
  result res :: <GString>;
  c-name: "g_string_insert";
end;

define C-function g-string-insert-c
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gchar>;
  result res :: <GString>;
  c-name: "g_string_insert_c";
end;

define C-function g-string-insert-unichar
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gunichar>;
  result res :: <GString>;
  c-name: "g_string_insert_unichar";
end;

define C-function g-string-erase
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gssize>;
  result res :: <GString>;
  c-name: "g_string_erase";
end;

define C-function g-string-ascii-down
  input parameter arg1 :: <GString>;
  result res :: <GString>;
  c-name: "g_string_ascii_down";
end;

define C-function g-string-ascii-up
  input parameter arg1 :: <GString>;
  result res :: <GString>;
  c-name: "g_string_ascii_up";
end;

define C-function g-string-printf
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_string_printf";
end;

define C-function g-string-append-printf
  input parameter arg1 :: <GString>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_string_append_printf";
end;

define C-function g-string-down
  input parameter arg1 :: <GString>;
  result res :: <GString>;
  c-name: "g_string_down";
end;

define C-function g-string-up
  input parameter arg1 :: <GString>;
  result res :: <GString>;
  c-name: "g_string_up";
end;

define constant g-string-sprintf = g-string-printf;

define constant g-string-sprintfa = g-string-append-printf;

define constant <GAsciiType> = <C-int>;
define constant $G-ASCII-ALNUM = 1;
define constant $G-ASCII-ALPHA = 2;
define constant $G-ASCII-CNTRL = 4;
define constant $G-ASCII-DIGIT = 8;
define constant $G-ASCII-GRAPH = 16;
define constant $G-ASCII-LOWER = 32;
define constant $G-ASCII-PRINT = 64;
define constant $G-ASCII-PUNCT = 128;
define constant $G-ASCII-SPACE = 256;
define constant $G-ASCII-UPPER = 512;
define constant $G-ASCII-XDIGIT = 1024;

define C-pointer-type <guint16*> => <guint16>;
 /* Ignoring declaration for {instance of <variable-declaration>} "g-ascii-table"*/
define C-function g-ascii-tolower
  input parameter arg1 :: <gchar>;
  result res :: <gchar>;
  c-name: "g_ascii_tolower";
end;

define C-function g-ascii-toupper
  input parameter arg1 :: <gchar>;
  result res :: <gchar>;
  c-name: "g_ascii_toupper";
end;

define C-function g-ascii-digit-value
  input parameter arg1 :: <gchar>;
  result res :: <gint>;
  c-name: "g_ascii_digit_value";
end;

define C-function g-ascii-xdigit-value
  input parameter arg1 :: <gchar>;
  result res :: <gint>;
  c-name: "g_ascii_xdigit_value";
end;

define C-function g-strdelimit
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar>;
  result res :: <gchar*>;
  c-name: "g_strdelimit";
end;

define C-function g-strcanon
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar>;
  result res :: <gchar*>;
  c-name: "g_strcanon";
end;

define C-function g-strerror
  input parameter arg1 :: <gint>;
  result res :: <gchar*>;
  c-name: "g_strerror";
end;

define C-function g-strsignal
  input parameter arg1 :: <gint>;
  result res :: <gchar*>;
  c-name: "g_strsignal";
end;

define C-function g-strreverse
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strreverse";
end;

define C-function g-strlcpy
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  result res :: <gsize>;
  c-name: "g_strlcpy";
end;

define C-function g-strlcat
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  result res :: <gsize>;
  c-name: "g_strlcat";
end;

define C-function g-strstr-len
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strstr_len";
end;

define C-function g-strrstr
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strrstr";
end;

define C-function g-strrstr-len
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strrstr_len";
end;

define C-function g-str-has-suffix
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "g_str_has_suffix";
end;

define C-function g-str-has-prefix
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "g_str_has_prefix";
end;

define C-function g-strtod
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  result res :: <gdouble>;
  c-name: "g_strtod";
end;

define C-function g-ascii-strtod
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  result res :: <gdouble>;
  c-name: "g_ascii_strtod";
end;

define C-function g-ascii-strtoull
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <guint>;
  result res :: <guint64>;
  c-name: "g_ascii_strtoull";
end;

define C-function g-ascii-strtoll
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <guint>;
  result res :: <gint64>;
  c-name: "g_ascii_strtoll";
end;

define C-function g-ascii-dtostr
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gdouble>;
  result res :: <gchar*>;
  c-name: "g_ascii_dtostr";
end;

define C-function g-ascii-formatd
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gdouble>;
  result res :: <gchar*>;
  c-name: "g_ascii_formatd";
end;

define C-function g-strchug
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strchug";
end;

define C-function g-strchomp
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strchomp";
end;

define C-function g-ascii-strcasecmp
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint>;
  c-name: "g_ascii_strcasecmp";
end;

define C-function g-ascii-strncasecmp
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  result res :: <gint>;
  c-name: "g_ascii_strncasecmp";
end;

define C-function g-ascii-strdown
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_ascii_strdown";
end;

define C-function g-ascii-strup
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_ascii_strup";
end;

define C-function g-strcasecmp
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint>;
  c-name: "g_strcasecmp";
end;

define C-function g-strncasecmp
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <guint>;
  result res :: <gint>;
  c-name: "g_strncasecmp";
end;

define C-function g-strdown
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strdown";
end;

define C-function g-strup
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strup";
end;

define C-function g-strdup
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strdup";
end;

define C-function g-strdup-printf
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strdup_printf";
end;

define C-function g-strdup-vprintf
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <va-list>;
  result res :: <gchar*>;
  c-name: "g_strdup_vprintf";
end;

define C-function g-strndup
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gsize>;
  result res :: <gchar*>;
  c-name: "g_strndup";
end;

define C-function g-strnfill
  input parameter arg1 :: <gsize>;
  input parameter arg2 :: <gchar>;
  result res :: <gchar*>;
  c-name: "g_strnfill";
end;

define C-function g-strconcat
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strconcat";
end;

define C-function g-strjoin
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strjoin";
end;

define C-function g-strcompress
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strcompress";
end;

define C-function g-strescape
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strescape";
end;

define C-function g-memdup
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <guint>;
  result res :: <gpointer>;
  c-name: "g_memdup";
end;

define C-function g-strsplit
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <gchar**>;
  c-name: "g_strsplit";
end;

define C-function g-strsplit-set
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <gchar**>;
  c-name: "g_strsplit_set";
end;

define C-function g-strjoinv
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  result res :: <gchar*>;
  c-name: "g_strjoinv";
end;

define C-function g-strfreev
  input parameter arg1 :: <gchar**>;
  c-name: "g_strfreev";
end;

define C-function g-strdupv
  input parameter arg1 :: <gchar**>;
  result res :: <gchar**>;
  c-name: "g_strdupv";
end;

define C-function g-strv-length
  input parameter arg1 :: <gchar**>;
  result res :: <guint>;
  c-name: "g_strv_length";
end;

define C-function g-stpcpy
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <char*>;
  result res :: <gchar*>;
  c-name: "g_stpcpy";
end;

define C-function g-strip-context
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_strip_context";
end;

define constant $G-STR-DELIMITERS = "_-|> <.";

define constant $G-ASCII-DTOSTR-BUF-SIZE = 39;

define constant <GSpawnError> = <C-int>;
define constant $G-SPAWN-ERROR-FORK = 0;
define constant $G-SPAWN-ERROR-READ = 1;
define constant $G-SPAWN-ERROR-CHDIR = 2;
define constant $G-SPAWN-ERROR-ACCES = 3;
define constant $G-SPAWN-ERROR-PERM = 4;
define constant $G-SPAWN-ERROR-2BIG = 5;
define constant $G-SPAWN-ERROR-NOEXEC = 6;
define constant $G-SPAWN-ERROR-NAMETOOLONG = 7;
define constant $G-SPAWN-ERROR-NOENT = 8;
define constant $G-SPAWN-ERROR-NOMEM = 9;
define constant $G-SPAWN-ERROR-NOTDIR = 10;
define constant $G-SPAWN-ERROR-LOOP = 11;
define constant $G-SPAWN-ERROR-TXTBUSY = 12;
define constant $G-SPAWN-ERROR-IO = 13;
define constant $G-SPAWN-ERROR-NFILE = 14;
define constant $G-SPAWN-ERROR-MFILE = 15;
define constant $G-SPAWN-ERROR-INVAL = 16;
define constant $G-SPAWN-ERROR-ISDIR = 17;
define constant $G-SPAWN-ERROR-LIBBAD = 18;
define constant $G-SPAWN-ERROR-FAILED = 19;

define constant <anonymous-1272> = <C-function-pointer>;
define constant <GSpawnChildSetupFunc> = <anonymous-1272>;

define constant <GSpawnFlags> = <C-int>;
define constant $G-SPAWN-LEAVE-DESCRIPTORS-OPEN = 1;
define constant $G-SPAWN-DO-NOT-REAP-CHILD = 2;
define constant $G-SPAWN-SEARCH-PATH = 4;
define constant $G-SPAWN-STDOUT-TO-DEV-NULL = 8;
define constant $G-SPAWN-STDERR-TO-DEV-NULL = 16;
define constant $G-SPAWN-CHILD-INHERITS-STDIN = 32;
define constant $G-SPAWN-FILE-AND-ARGV-ZERO = 64;

define C-function g-spawn-error-quark
  result res :: <GQuark>;
  c-name: "g_spawn_error_quark";
end;

define C-pointer-type <GPid*> => <GPid>;
define C-function g-spawn-async-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <GSpawnFlags>;
  input parameter arg5 :: <GSpawnChildSetupFunc>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <GPid*>;
  input parameter arg8 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_spawn_async_utf8";
end;

define C-function g-spawn-async-with-pipes-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <GSpawnFlags>;
  input parameter arg5 :: <GSpawnChildSetupFunc>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <GPid*>;
  input parameter arg8 :: <gint*>;
  input parameter arg9 :: <gint*>;
  input parameter arg10 :: <gint*>;
  input parameter arg11 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_spawn_async_with_pipes_utf8";
end;

define C-function g-spawn-sync-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <GSpawnFlags>;
  input parameter arg5 :: <GSpawnChildSetupFunc>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <gchar**>;
  input parameter arg8 :: <gchar**>;
  input parameter arg9 :: <gint*>;
  input parameter arg10 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_spawn_sync_utf8";
end;

define C-function g-spawn-command-line-sync-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_spawn_command_line_sync_utf8";
end;

define C-function g-spawn-command-line-async-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_spawn_command_line_async_utf8";
end;

define C-function g-spawn-close-pid
  input parameter arg1 :: <GPid>;
  c-name: "g_spawn_close_pid";
end;

define constant g-spawn-async = g-spawn-async-utf8;

define constant g-spawn-async-with-pipes = g-spawn-async-with-pipes-utf8;

define constant g-spawn-sync = g-spawn-sync-utf8;

define constant g-spawn-command-line-sync = g-spawn-command-line-sync-utf8;

define constant g-spawn-command-line-async = g-spawn-command-line-async-utf8;

define C-function g-slist-alloc
  result res :: <GSList>;
  c-name: "g_slist_alloc";
end;

define C-function g-slist-free
  input parameter arg1 :: <GSList>;
  c-name: "g_slist_free";
end;

define C-function g-slist-free-1
  input parameter arg1 :: <GSList>;
  c-name: "g_slist_free_1";
end;

define C-function g-slist-append
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gpointer>;
  result res :: <GSList>;
  c-name: "g_slist_append";
end;

define C-function g-slist-prepend
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gpointer>;
  result res :: <GSList>;
  c-name: "g_slist_prepend";
end;

define C-function g-slist-insert
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gint>;
  result res :: <GSList>;
  c-name: "g_slist_insert";
end;

define C-function g-slist-insert-sorted
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GCompareFunc>;
  result res :: <GSList>;
  c-name: "g_slist_insert_sorted";
end;

define C-function g-slist-insert-sorted-with-data
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GCompareDataFunc>;
  input parameter arg4 :: <gpointer>;
  result res :: <GSList>;
  c-name: "g_slist_insert_sorted_with_data";
end;

define C-function g-slist-insert-before
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <GSList>;
  input parameter arg3 :: <gpointer>;
  result res :: <GSList>;
  c-name: "g_slist_insert_before";
end;

define C-function g-slist-concat
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <GSList>;
  result res :: <GSList>;
  c-name: "g_slist_concat";
end;

define C-function g-slist-remove
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <GSList>;
  c-name: "g_slist_remove";
end;

define C-function g-slist-remove-all
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <GSList>;
  c-name: "g_slist_remove_all";
end;

define C-function g-slist-remove-link
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <GSList>;
  result res :: <GSList>;
  c-name: "g_slist_remove_link";
end;

define C-function g-slist-delete-link
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <GSList>;
  result res :: <GSList>;
  c-name: "g_slist_delete_link";
end;

define C-function g-slist-reverse
  input parameter arg1 :: <GSList>;
  result res :: <GSList>;
  c-name: "g_slist_reverse";
end;

define C-function g-slist-copy
  input parameter arg1 :: <GSList>;
  result res :: <GSList>;
  c-name: "g_slist_copy";
end;

define C-function g-slist-nth
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <guint>;
  result res :: <GSList>;
  c-name: "g_slist_nth";
end;

define C-function g-slist-find
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <GSList>;
  c-name: "g_slist_find";
end;

define C-function g-slist-find-custom
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <GCompareFunc>;
  result res :: <GSList>;
  c-name: "g_slist_find_custom";
end;

define C-function g-slist-position
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <GSList>;
  result res :: <gint>;
  c-name: "g_slist_position";
end;

define C-function g-slist-index
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gint>;
  c-name: "g_slist_index";
end;

define C-function g-slist-last
  input parameter arg1 :: <GSList>;
  result res :: <GSList>;
  c-name: "g_slist_last";
end;

define C-function g-slist-length
  input parameter arg1 :: <GSList>;
  result res :: <guint>;
  c-name: "g_slist_length";
end;

define C-function g-slist-foreach
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <GFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_slist_foreach";
end;

define C-function g-slist-sort
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <GCompareFunc>;
  result res :: <GSList>;
  c-name: "g_slist_sort";
end;

define C-function g-slist-sort-with-data
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <GSList>;
  c-name: "g_slist_sort_with_data";
end;

define C-function g-slist-nth-data
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <guint>;
  result res :: <gpointer>;
  c-name: "g_slist_nth_data";
end;

define C-function g-slist-push-allocator
  input parameter arg1 :: <gpointer>;
  c-name: "g_slist_push_allocator";
end;

define C-function g-slist-pop-allocator
  c-name: "g_slist_pop_allocator";
end;

define constant g-slist-free1 = g-slist-free-1;

define constant <GShellError> = <C-int>;
define constant $G-SHELL-ERROR-BAD-QUOTING = 0;
define constant $G-SHELL-ERROR-EMPTY-STRING = 1;
define constant $G-SHELL-ERROR-FAILED = 2;

define C-function g-shell-error-quark
  result res :: <GQuark>;
  c-name: "g_shell_error_quark";
end;

define C-function g-shell-quote
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_shell_quote";
end;

define C-function g-shell-unquote
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_shell_unquote";
end;

define C-pointer-type <gchar***> => <gchar**>;
define C-function g-shell-parse-argv
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gchar***>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_shell_parse_argv";
end;

define C-subtype <_GScannerConfig> (<C-void*>) end;
define constant <GScannerConfig> = <_GScannerConfig>;

define constant <GTokenType> = <C-int>;
define constant $G-TOKEN-EOF = 0;
define constant $G-TOKEN-LEFT-PAREN = 40;
define constant $G-TOKEN-RIGHT-PAREN = 41;
define constant $G-TOKEN-LEFT-CURLY = 123;
define constant $G-TOKEN-RIGHT-CURLY = 125;
define constant $G-TOKEN-LEFT-BRACE = 91;
define constant $G-TOKEN-RIGHT-BRACE = 93;
define constant $G-TOKEN-EQUAL-SIGN = 61;
define constant $G-TOKEN-COMMA = 44;
define constant $G-TOKEN-NONE = 256;
define constant $G-TOKEN-ERROR = 257;
define constant $G-TOKEN-CHAR = 258;
define constant $G-TOKEN-BINARY = 259;
define constant $G-TOKEN-OCTAL = 260;
define constant $G-TOKEN-INT = 261;
define constant $G-TOKEN-HEX = 262;
define constant $G-TOKEN-FLOAT = 263;
define constant $G-TOKEN-STRING = 264;
define constant $G-TOKEN-SYMBOL = 265;
define constant $G-TOKEN-IDENTIFIER = 266;
define constant $G-TOKEN-IDENTIFIER-NULL = 267;
define constant $G-TOKEN-COMMENT-SINGLE = 268;
define constant $G-TOKEN-COMMENT-MULTI = 269;
define constant $G-TOKEN-LAST = 270;

define C-subtype <_GTokenValue> (<C-void*>) end;
define constant <GTokenValue> = <_GTokenValue>;

define C-subtype <_GHashTable> (<C-void*>) end;
define constant <GHashTable> = <_GHashTable>;

define constant <GScanner> = <_GScanner>;

define constant <anonymous-1220> = <C-function-pointer>;
define constant <GScannerMsgFunc> = <anonymous-1220>;

define C-subtype <_GScanner> (<C-void*>) end;
define constant <GErrorType> = <C-int>;
define constant $G-ERR-UNKNOWN = 0;
define constant $G-ERR-UNEXP-EOF = 1;
define constant $G-ERR-UNEXP-EOF-IN-STRING = 2;
define constant $G-ERR-UNEXP-EOF-IN-COMMENT = 3;
define constant $G-ERR-NON-DIGIT-IN-CONST = 4;
define constant $G-ERR-DIGIT-RADIX = 5;
define constant $G-ERR-FLOAT-RADIX = 6;
define constant $G-ERR-FLOAT-MALFORMED = 7;

define C-function g-scanner-new
  input parameter arg1 :: <GScannerConfig>;
  result res :: <GScanner>;
  c-name: "g_scanner_new";
end;

define C-function g-scanner-destroy
  input parameter arg1 :: <GScanner>;
  c-name: "g_scanner_destroy";
end;

define C-function g-scanner-input-file
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <gint>;
  c-name: "g_scanner_input_file";
end;

define C-function g-scanner-sync-file-offset
  input parameter arg1 :: <GScanner>;
  c-name: "g_scanner_sync_file_offset";
end;

define C-function g-scanner-input-text
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <guint>;
  c-name: "g_scanner_input_text";
end;

define C-function g-scanner-get-next-token
  input parameter arg1 :: <GScanner>;
  result res :: <GTokenType>;
  c-name: "g_scanner_get_next_token";
end;

define C-function g-scanner-peek-next-token
  input parameter arg1 :: <GScanner>;
  result res :: <GTokenType>;
  c-name: "g_scanner_peek_next_token";
end;

define C-function g-scanner-cur-token
  input parameter arg1 :: <GScanner>;
  result res :: <GTokenType>;
  c-name: "g_scanner_cur_token";
end;

define C-function g-scanner-cur-line
  input parameter arg1 :: <GScanner>;
  result res :: <guint>;
  c-name: "g_scanner_cur_line";
end;

define C-function g-scanner-cur-position
  input parameter arg1 :: <GScanner>;
  result res :: <guint>;
  c-name: "g_scanner_cur_position";
end;

define C-function g-scanner-eof
  input parameter arg1 :: <GScanner>;
  result res :: <gboolean>;
  c-name: "g_scanner_eof";
end;

define C-function g-scanner-set-scope
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <guint>;
  result res :: <guint>;
  c-name: "g_scanner_set_scope";
end;

define C-function g-scanner-scope-add-symbol
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_scanner_scope_add_symbol";
end;

define C-function g-scanner-scope-remove-symbol
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gchar*>;
  c-name: "g_scanner_scope_remove_symbol";
end;

define C-function g-scanner-scope-lookup-symbol
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gchar*>;
  result res :: <gpointer>;
  c-name: "g_scanner_scope_lookup_symbol";
end;

define C-function g-scanner-scope-foreach-symbol
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GHFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_scanner_scope_foreach_symbol";
end;

define C-function g-scanner-lookup-symbol
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <gchar*>;
  result res :: <gpointer>;
  c-name: "g_scanner_lookup_symbol";
end;

define C-function g-scanner-unexp-token
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <GTokenType>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gchar*>;
  input parameter arg6 :: <gchar*>;
  input parameter arg7 :: <gint>;
  c-name: "g_scanner_unexp_token";
end;

define C-function g-scanner-error
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_scanner_error";
end;

define C-function g-scanner-warn
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_scanner_warn";
end;

define constant $G-CSET-A-2-Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

define constant $G-CSET-DIGITS = "0123456789";

define constant <anonymous-633> = <C-function-pointer>;
define constant <GHRFunc> = <anonymous-633>;

define C-function g-hash-table-new
  input parameter arg1 :: <GHashFunc>;
  input parameter arg2 :: <GEqualFunc>;
  result res :: <GHashTable>;
  c-name: "g_hash_table_new";
end;

define C-function g-hash-table-new-full
  input parameter arg1 :: <GHashFunc>;
  input parameter arg2 :: <GEqualFunc>;
  input parameter arg3 :: <GDestroyNotify>;
  input parameter arg4 :: <GDestroyNotify>;
  result res :: <GHashTable>;
  c-name: "g_hash_table_new_full";
end;

define C-function g-hash-table-destroy
  input parameter arg1 :: <GHashTable>;
  c-name: "g_hash_table_destroy";
end;

define C-function g-hash-table-insert
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_hash_table_insert";
end;

define C-function g-hash-table-replace
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_hash_table_replace";
end;

define C-function g-hash-table-remove
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gboolean>;
  c-name: "g_hash_table_remove";
end;

define C-function g-hash-table-remove-all
  input parameter arg1 :: <GHashTable>;
  c-name: "g_hash_table_remove_all";
end;

define C-function g-hash-table-steal
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gboolean>;
  c-name: "g_hash_table_steal";
end;

define C-function g-hash-table-steal-all
  input parameter arg1 :: <GHashTable>;
  c-name: "g_hash_table_steal_all";
end;

define C-function g-hash-table-lookup
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gpointer>;
  c-name: "g_hash_table_lookup";
end;

define C-function g-hash-table-lookup-extended
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <gpointer*>;
  input parameter arg4 :: <gpointer*>;
  result res :: <gboolean>;
  c-name: "g_hash_table_lookup_extended";
end;

define C-function g-hash-table-foreach
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <GHFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_hash_table_foreach";
end;

define C-function g-hash-table-find
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <GHRFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <gpointer>;
  c-name: "g_hash_table_find";
end;

define C-function g-hash-table-foreach-remove
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <GHRFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_hash_table_foreach_remove";
end;

define C-function g-hash-table-foreach-steal
  input parameter arg1 :: <GHashTable>;
  input parameter arg2 :: <GHRFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_hash_table_foreach_steal";
end;

define C-function g-hash-table-size
  input parameter arg1 :: <GHashTable>;
  result res :: <guint>;
  c-name: "g_hash_table_size";
end;

define C-function g-hash-table-ref
  input parameter arg1 :: <GHashTable>;
  result res :: <GHashTable>;
  c-name: "g_hash_table_ref";
end;

define C-function g-hash-table-unref
  input parameter arg1 :: <GHashTable>;
  c-name: "g_hash_table_unref";
end;

define C-function g-str-equal
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gboolean>;
  c-name: "g_str_equal";
end;

define C-function g-str-hash
  input parameter arg1 :: <gconstpointer>;
  result res :: <guint>;
  c-name: "g_str_hash";
end;

define C-function g-int-equal
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gboolean>;
  c-name: "g_int_equal";
end;

define C-function g-int-hash
  input parameter arg1 :: <gconstpointer>;
  result res :: <guint>;
  c-name: "g_int_hash";
end;

define C-function g-direct-hash
  input parameter arg1 :: <gconstpointer>;
  result res :: <guint>;
  c-name: "g_direct_hash";
end;

define C-function g-direct-equal
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gboolean>;
  c-name: "g_direct_equal";
end;

define constant <anonymous-542> = <C-function-pointer>;
define constant <GDataForeachFunc> = <anonymous-542>;

define C-pointer-type <GData*> => <GData>;
define C-function g-datalist-init
  input parameter arg1 :: <GData*>;
  c-name: "g_datalist_init";
end;

define C-function g-datalist-clear
  input parameter arg1 :: <GData*>;
  c-name: "g_datalist_clear";
end;

define C-function g-datalist-id-get-data
  input parameter arg1 :: <GData*>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_datalist_id_get_data";
end;

define C-function g-datalist-id-set-data-full
  input parameter arg1 :: <GData*>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "g_datalist_id_set_data_full";
end;

define C-function g-datalist-id-remove-no-notify
  input parameter arg1 :: <GData*>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_datalist_id_remove_no_notify";
end;

define C-function g-datalist-foreach
  input parameter arg1 :: <GData*>;
  input parameter arg2 :: <GDataForeachFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_datalist_foreach";
end;

define C-function g-datalist-set-flags
  input parameter arg1 :: <GData*>;
  input parameter arg2 :: <guint>;
  c-name: "g_datalist_set_flags";
end;

define C-function g-datalist-unset-flags
  input parameter arg1 :: <GData*>;
  input parameter arg2 :: <guint>;
  c-name: "g_datalist_unset_flags";
end;

define C-function g-datalist-get-flags
  input parameter arg1 :: <GData*>;
  result res :: <guint>;
  c-name: "g_datalist_get_flags";
end;

define C-function g-dataset-destroy
  input parameter arg1 :: <gconstpointer>;
  c-name: "g_dataset_destroy";
end;

define C-function g-dataset-id-get-data
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_dataset_id_get_data";
end;

define C-function g-dataset-id-set-data-full
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "g_dataset_id_set_data_full";
end;

define C-function g-dataset-id-remove-no-notify
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_dataset_id_remove_no_notify";
end;

define C-function g-dataset-foreach
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <GDataForeachFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_dataset_foreach";
end;

define constant $G-DATALIST-FLAGS-MASK = 3;

define C-subtype <_GRelation> (<C-void*>) end;
define constant <GRelation> = <_GRelation>;

define C-subtype <_GTuples> (<C-void*>) end;
define constant <GTuples> = <_GTuples>;

define C-function g-relation-new
  input parameter arg1 :: <gint>;
  result res :: <GRelation>;
  c-name: "g_relation_new";
end;

define C-function g-relation-destroy
  input parameter arg1 :: <GRelation>;
  c-name: "g_relation_destroy";
end;

define C-function g-relation-index
  input parameter arg1 :: <GRelation>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GHashFunc>;
  input parameter arg4 :: <GEqualFunc>;
  c-name: "g_relation_index";
end;

define C-function g-relation-insert
  input parameter arg1 :: <GRelation>;
  c-name: "g_relation_insert";
end;

define C-function g-relation-delete
  input parameter arg1 :: <GRelation>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "g_relation_delete";
end;

define C-function g-relation-select
  input parameter arg1 :: <GRelation>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <gint>;
  result res :: <GTuples>;
  c-name: "g_relation_select";
end;

define C-function g-relation-count
  input parameter arg1 :: <GRelation>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "g_relation_count";
end;

define C-function g-relation-exists
  input parameter arg1 :: <GRelation>;
  result res :: <gboolean>;
  c-name: "g_relation_exists";
end;

define C-function g-relation-print
  input parameter arg1 :: <GRelation>;
  c-name: "g_relation_print";
end;

define C-function g-tuples-destroy
  input parameter arg1 :: <GTuples>;
  c-name: "g_tuples_destroy";
end;

define C-function g-tuples-index
  input parameter arg1 :: <GTuples>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gpointer>;
  c-name: "g_tuples_index";
end;

define C-subtype <_GRand> (<C-void*>) end;
define constant <GRand> = <_GRand>;

define C-function g-rand-new-with-seed
  input parameter arg1 :: <guint32>;
  result res :: <GRand>;
  c-name: "g_rand_new_with_seed";
end;

define C-function g-rand-new-with-seed-array
  input parameter arg1 :: <guint32*>;
  input parameter arg2 :: <guint>;
  result res :: <GRand>;
  c-name: "g_rand_new_with_seed_array";
end;

define C-function g-rand-new
  result res :: <GRand>;
  c-name: "g_rand_new";
end;

define C-function g-rand-free
  input parameter arg1 :: <GRand>;
  c-name: "g_rand_free";
end;

define C-function g-rand-copy
  input parameter arg1 :: <GRand>;
  result res :: <GRand>;
  c-name: "g_rand_copy";
end;

define C-function g-rand-set-seed
  input parameter arg1 :: <GRand>;
  input parameter arg2 :: <guint32>;
  c-name: "g_rand_set_seed";
end;

define C-function g-rand-set-seed-array
  input parameter arg1 :: <GRand>;
  input parameter arg2 :: <guint32*>;
  input parameter arg3 :: <guint>;
  c-name: "g_rand_set_seed_array";
end;

define C-function g-rand-int
  input parameter arg1 :: <GRand>;
  result res :: <guint32>;
  c-name: "g_rand_int";
end;

define C-function g-rand-int-range
  input parameter arg1 :: <GRand>;
  input parameter arg2 :: <gint32>;
  input parameter arg3 :: <gint32>;
  result res :: <gint32>;
  c-name: "g_rand_int_range";
end;

define C-function g-rand-double
  input parameter arg1 :: <GRand>;
  result res :: <gdouble>;
  c-name: "g_rand_double";
end;

define C-function g-rand-double-range
  input parameter arg1 :: <GRand>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  result res :: <gdouble>;
  c-name: "g_rand_double_range";
end;

define C-function g-random-set-seed
  input parameter arg1 :: <guint32>;
  c-name: "g_random_set_seed";
end;

define C-function g-random-int
  result res :: <guint32>;
  c-name: "g_random_int";
end;

define C-function g-random-int-range
  input parameter arg1 :: <gint32>;
  input parameter arg2 :: <gint32>;
  result res :: <gint32>;
  c-name: "g_random_int_range";
end;

define C-function g-random-double
  result res :: <gdouble>;
  c-name: "g_random_double";
end;

define C-function g-random-double-range
  input parameter arg1 :: <gdouble>;
  input parameter arg2 :: <gdouble>;
  result res :: <gdouble>;
  c-name: "g_random_double_range";
end;

define C-subtype <_GQueue> (<C-void*>) end;
define constant <GQueue> = <_GQueue>;

define C-function g-queue-new
  result res :: <GQueue>;
  c-name: "g_queue_new";
end;

define C-function g-queue-free
  input parameter arg1 :: <GQueue>;
  c-name: "g_queue_free";
end;

define C-function g-queue-is-empty
  input parameter arg1 :: <GQueue>;
  result res :: <gboolean>;
  c-name: "g_queue_is_empty";
end;

define C-function g-queue-get-length
  input parameter arg1 :: <GQueue>;
  result res :: <guint>;
  c-name: "g_queue_get_length";
end;

define C-function g-queue-reverse
  input parameter arg1 :: <GQueue>;
  c-name: "g_queue_reverse";
end;

define C-function g-queue-copy
  input parameter arg1 :: <GQueue>;
  result res :: <GQueue>;
  c-name: "g_queue_copy";
end;

define C-function g-queue-foreach
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_queue_foreach";
end;

define C-function g-queue-find
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <GList>;
  c-name: "g_queue_find";
end;

define C-function g-queue-find-custom
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <GCompareFunc>;
  result res :: <GList>;
  c-name: "g_queue_find_custom";
end;

define C-function g-queue-sort
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_queue_sort";
end;

define C-function g-queue-push-head
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_queue_push_head";
end;

define C-function g-queue-push-tail
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_queue_push_tail";
end;

define C-function g-queue-push-nth
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gint>;
  c-name: "g_queue_push_nth";
end;

define C-function g-queue-pop-head
  input parameter arg1 :: <GQueue>;
  result res :: <gpointer>;
  c-name: "g_queue_pop_head";
end;

define C-function g-queue-pop-tail
  input parameter arg1 :: <GQueue>;
  result res :: <gpointer>;
  c-name: "g_queue_pop_tail";
end;

define C-function g-queue-pop-nth
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <guint>;
  result res :: <gpointer>;
  c-name: "g_queue_pop_nth";
end;

define C-function g-queue-peek-head
  input parameter arg1 :: <GQueue>;
  result res :: <gpointer>;
  c-name: "g_queue_peek_head";
end;

define C-function g-queue-peek-tail
  input parameter arg1 :: <GQueue>;
  result res :: <gpointer>;
  c-name: "g_queue_peek_tail";
end;

define C-function g-queue-peek-nth
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <guint>;
  result res :: <gpointer>;
  c-name: "g_queue_peek_nth";
end;

define C-function g-queue-index
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gint>;
  c-name: "g_queue_index";
end;

define C-function g-queue-remove
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gconstpointer>;
  c-name: "g_queue_remove";
end;

define C-function g-queue-remove-all
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gconstpointer>;
  c-name: "g_queue_remove_all";
end;

define C-function g-queue-insert-before
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GList>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_queue_insert_before";
end;

define C-function g-queue-insert-after
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GList>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_queue_insert_after";
end;

define C-function g-queue-insert-sorted
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GCompareDataFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_queue_insert_sorted";
end;

define C-function g-queue-push-head-link
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GList>;
  c-name: "g_queue_push_head_link";
end;

define C-function g-queue-push-tail-link
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GList>;
  c-name: "g_queue_push_tail_link";
end;

define C-function g-queue-push-nth-link
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GList>;
  c-name: "g_queue_push_nth_link";
end;

define C-function g-queue-pop-head-link
  input parameter arg1 :: <GQueue>;
  result res :: <GList>;
  c-name: "g_queue_pop_head_link";
end;

define C-function g-queue-pop-tail-link
  input parameter arg1 :: <GQueue>;
  result res :: <GList>;
  c-name: "g_queue_pop_tail_link";
end;

define C-function g-queue-pop-nth-link
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <guint>;
  result res :: <GList>;
  c-name: "g_queue_pop_nth_link";
end;

define C-function g-queue-peek-head-link
  input parameter arg1 :: <GQueue>;
  result res :: <GList>;
  c-name: "g_queue_peek_head_link";
end;

define C-function g-queue-peek-tail-link
  input parameter arg1 :: <GQueue>;
  result res :: <GList>;
  c-name: "g_queue_peek_tail_link";
end;

define C-function g-queue-peek-nth-link
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <guint>;
  result res :: <GList>;
  c-name: "g_queue_peek_nth_link";
end;

define C-function g-queue-link-index
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GList>;
  result res :: <gint>;
  c-name: "g_queue_link_index";
end;

define C-function g-queue-unlink
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GList>;
  c-name: "g_queue_unlink";
end;

define C-function g-queue-delete-link
  input parameter arg1 :: <GQueue>;
  input parameter arg2 :: <GList>;
  c-name: "g_queue_delete_link";
end;

define C-function g-list-alloc
  result res :: <GList>;
  c-name: "g_list_alloc";
end;

define C-function g-list-free
  input parameter arg1 :: <GList>;
  c-name: "g_list_free";
end;

define C-function g-list-free-1
  input parameter arg1 :: <GList>;
  c-name: "g_list_free_1";
end;

define C-function g-list-append
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gpointer>;
  result res :: <GList>;
  c-name: "g_list_append";
end;

define C-function g-list-prepend
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gpointer>;
  result res :: <GList>;
  c-name: "g_list_prepend";
end;

define C-function g-list-insert
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <gint>;
  result res :: <GList>;
  c-name: "g_list_insert";
end;

define C-function g-list-insert-sorted
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GCompareFunc>;
  result res :: <GList>;
  c-name: "g_list_insert_sorted";
end;

define C-function g-list-insert-sorted-with-data
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GCompareDataFunc>;
  input parameter arg4 :: <gpointer>;
  result res :: <GList>;
  c-name: "g_list_insert_sorted_with_data";
end;

define C-function g-list-insert-before
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <GList>;
  input parameter arg3 :: <gpointer>;
  result res :: <GList>;
  c-name: "g_list_insert_before";
end;

define C-function g-list-concat
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <GList>;
  result res :: <GList>;
  c-name: "g_list_concat";
end;

define C-function g-list-remove
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <GList>;
  c-name: "g_list_remove";
end;

define C-function g-list-remove-all
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <GList>;
  c-name: "g_list_remove_all";
end;

define C-function g-list-remove-link
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <GList>;
  result res :: <GList>;
  c-name: "g_list_remove_link";
end;

define C-function g-list-delete-link
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <GList>;
  result res :: <GList>;
  c-name: "g_list_delete_link";
end;

define C-function g-list-reverse
  input parameter arg1 :: <GList>;
  result res :: <GList>;
  c-name: "g_list_reverse";
end;

define C-function g-list-copy
  input parameter arg1 :: <GList>;
  result res :: <GList>;
  c-name: "g_list_copy";
end;

define C-function g-list-nth
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <guint>;
  result res :: <GList>;
  c-name: "g_list_nth";
end;

define C-function g-list-nth-prev
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <guint>;
  result res :: <GList>;
  c-name: "g_list_nth_prev";
end;

define C-function g-list-find
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <GList>;
  c-name: "g_list_find";
end;

define C-function g-list-find-custom
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <GCompareFunc>;
  result res :: <GList>;
  c-name: "g_list_find_custom";
end;

define C-function g-list-position
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <GList>;
  result res :: <gint>;
  c-name: "g_list_position";
end;

define C-function g-list-index
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gint>;
  c-name: "g_list_index";
end;

define C-function g-list-last
  input parameter arg1 :: <GList>;
  result res :: <GList>;
  c-name: "g_list_last";
end;

define C-function g-list-first
  input parameter arg1 :: <GList>;
  result res :: <GList>;
  c-name: "g_list_first";
end;

define C-function g-list-length
  input parameter arg1 :: <GList>;
  result res :: <guint>;
  c-name: "g_list_length";
end;

define C-function g-list-foreach
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <GFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_list_foreach";
end;

define C-function g-list-sort
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <GCompareFunc>;
  result res :: <GList>;
  c-name: "g_list_sort";
end;

define C-function g-list-sort-with-data
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <GList>;
  c-name: "g_list_sort_with_data";
end;

define C-function g-list-nth-data
  input parameter arg1 :: <GList>;
  input parameter arg2 :: <guint>;
  result res :: <gpointer>;
  c-name: "g_list_nth_data";
end;

define C-function g-list-push-allocator
  input parameter arg1 :: <gpointer>;
  c-name: "g_list_push_allocator";
end;

define C-function g-list-pop-allocator
  c-name: "g_list_pop_allocator";
end;

define constant g-list-free1 = g-list-free-1;

define C-function g-qsort-with-data
  input parameter arg1 :: <gconstpointer>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gsize>;
  input parameter arg4 :: <GCompareDataFunc>;
  input parameter arg5 :: <gpointer>;
  c-name: "g_qsort_with_data";
end;

define C-function g-spaced-primes-closest
  input parameter arg1 :: <guint>;
  result res :: <guint>;
  c-name: "g_spaced_primes_closest";
end;

define C-subtype <_GPatternSpec> (<C-void*>) end;
define constant <GPatternSpec> = <_GPatternSpec>;

define C-function g-pattern-spec-new
  input parameter arg1 :: <gchar*>;
  result res :: <GPatternSpec>;
  c-name: "g_pattern_spec_new";
end;

define C-function g-pattern-spec-free
  input parameter arg1 :: <GPatternSpec>;
  c-name: "g_pattern_spec_free";
end;

define C-function g-pattern-spec-equal
  input parameter arg1 :: <GPatternSpec>;
  input parameter arg2 :: <GPatternSpec>;
  result res :: <gboolean>;
  c-name: "g_pattern_spec_equal";
end;

define C-function g-pattern-match
  input parameter arg1 :: <GPatternSpec>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "g_pattern_match";
end;

define C-function g-pattern-match-string
  input parameter arg1 :: <GPatternSpec>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "g_pattern_match_string";
end;

define C-function g-pattern-match-simple
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "g_pattern_match_simple";
end;

define C-subtype <_GOptionContext> (<C-void*>) end;
define constant <GOptionContext> = <_GOptionContext>;

define C-subtype <_GOptionGroup> (<C-void*>) end;
define constant <GOptionGroup> = <_GOptionGroup>;

define constant <GOptionArg> = <C-int>;
define constant $G-OPTION-ARG-NONE = 0;
define constant $G-OPTION-ARG-STRING = 1;
define constant $G-OPTION-ARG-INT = 2;
define constant $G-OPTION-ARG-CALLBACK = 3;
define constant $G-OPTION-ARG-FILENAME = 4;
define constant $G-OPTION-ARG-STRING-ARRAY = 5;
define constant $G-OPTION-ARG-FILENAME-ARRAY = 6;
define constant $G-OPTION-ARG-DOUBLE = 7;
define constant $G-OPTION-ARG-INT64 = 8;

define C-subtype <_GOptionEntry> (<C-void*>) end;
define constant <GOptionEntry> = <_GOptionEntry>;

define constant <GOptionFlags> = <C-int>;
define constant $G-OPTION-FLAG-HIDDEN = 1;
define constant $G-OPTION-FLAG-IN-MAIN = 2;
define constant $G-OPTION-FLAG-REVERSE = 4;
define constant $G-OPTION-FLAG-NO-ARG = 8;
define constant $G-OPTION-FLAG-FILENAME = 16;
define constant $G-OPTION-FLAG-OPTIONAL-ARG = 32;
define constant $G-OPTION-FLAG-NOALIAS = 64;

define constant <anonymous-1117> = <C-function-pointer>;
define constant <GOptionArgFunc> = <anonymous-1117>;

define constant <anonymous-1118> = <C-function-pointer>;
define constant <GOptionParseFunc> = <anonymous-1118>;

define constant <anonymous-1119> = <C-function-pointer>;
define constant <GOptionErrorFunc> = <anonymous-1119>;

define constant <GOptionError> = <C-int>;
define constant $G-OPTION-ERROR-UNKNOWN-OPTION = 0;
define constant $G-OPTION-ERROR-BAD-VALUE = 1;
define constant $G-OPTION-ERROR-FAILED = 2;

define C-function g-option-error-quark
  result res :: <GQuark>;
  c-name: "g_option_error_quark";
end;

define C-function g-option-context-new
  input parameter arg1 :: <gchar*>;
  result res :: <GOptionContext>;
  c-name: "g_option_context_new";
end;

define C-function g-option-context-set-summary
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_option_context_set_summary";
end;

define C-function g-option-context-get-summary
  input parameter arg1 :: <GOptionContext>;
  result res :: <gchar*>;
  c-name: "g_option_context_get_summary";
end;

define C-function g-option-context-set-description
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_option_context_set_description";
end;

define C-function g-option-context-get-description
  input parameter arg1 :: <GOptionContext>;
  result res :: <gchar*>;
  c-name: "g_option_context_get_description";
end;

define C-function g-option-context-free
  input parameter arg1 :: <GOptionContext>;
  c-name: "g_option_context_free";
end;

define C-function g-option-context-set-help-enabled
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_option_context_set_help_enabled";
end;

define C-function g-option-context-get-help-enabled
  input parameter arg1 :: <GOptionContext>;
  result res :: <gboolean>;
  c-name: "g_option_context_get_help_enabled";
end;

define C-function g-option-context-set-ignore-unknown-options
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_option_context_set_ignore_unknown_options";
end;

define C-function g-option-context-get-ignore-unknown-options
  input parameter arg1 :: <GOptionContext>;
  result res :: <gboolean>;
  c-name: "g_option_context_get_ignore_unknown_options";
end;

define C-function g-option-context-add-main-entries
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <GOptionEntry>;
  input parameter arg3 :: <gchar*>;
  c-name: "g_option_context_add_main_entries";
end;

define C-function g-option-context-parse
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gchar***>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_option_context_parse";
end;

define C-function g-option-context-set-translate-func
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <GTranslateFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "g_option_context_set_translate_func";
end;

define C-function g-option-context-set-translation-domain
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_option_context_set_translation_domain";
end;

define C-function g-option-context-add-group
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <GOptionGroup>;
  c-name: "g_option_context_add_group";
end;

define C-function g-option-context-set-main-group
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <GOptionGroup>;
  c-name: "g_option_context_set_main_group";
end;

define C-function g-option-context-get-main-group
  input parameter arg1 :: <GOptionContext>;
  result res :: <GOptionGroup>;
  c-name: "g_option_context_get_main_group";
end;

define C-function g-option-context-set-input-is-utf8
  input parameter arg1 :: <GOptionContext>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_option_context_set_input_is_utf8";
end;

define C-function g-option-context-get-input-is-utf8
  input parameter arg1 :: <GOptionContext>;
  result res :: <gboolean>;
  c-name: "g_option_context_get_input_is_utf8";
end;

define C-function g-option-group-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  result res :: <GOptionGroup>;
  c-name: "g_option_group_new";
end;

define C-function g-option-group-set-parse-hooks
  input parameter arg1 :: <GOptionGroup>;
  input parameter arg2 :: <GOptionParseFunc>;
  input parameter arg3 :: <GOptionParseFunc>;
  c-name: "g_option_group_set_parse_hooks";
end;

define C-function g-option-group-set-error-hook
  input parameter arg1 :: <GOptionGroup>;
  input parameter arg2 :: <GOptionErrorFunc>;
  c-name: "g_option_group_set_error_hook";
end;

define C-function g-option-group-free
  input parameter arg1 :: <GOptionGroup>;
  c-name: "g_option_group_free";
end;

define C-function g-option-group-add-entries
  input parameter arg1 :: <GOptionGroup>;
  input parameter arg2 :: <GOptionEntry>;
  c-name: "g_option_group_add_entries";
end;

define C-function g-option-group-set-translate-func
  input parameter arg1 :: <GOptionGroup>;
  input parameter arg2 :: <GTranslateFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "g_option_group_set_translate_func";
end;

define C-function g-option-group-set-translation-domain
  input parameter arg1 :: <GOptionGroup>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_option_group_set_translation_domain";
end;

define constant $G-OPTION-REMAINING = "";

define C-function g-printf-string-upper-bound
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <va-list>;
  result res :: <gsize>;
  c-name: "g_printf_string_upper_bound";
end;

define constant <GLogLevelFlags> = <C-int>;
define constant $G-LOG-FLAG-RECURSION = 1;
define constant $G-LOG-FLAG-FATAL = 2;
define constant $G-LOG-LEVEL-ERROR = 4;
define constant $G-LOG-LEVEL-CRITICAL = 8;
define constant $G-LOG-LEVEL-WARNING = 16;
define constant $G-LOG-LEVEL-MESSAGE = 32;
define constant $G-LOG-LEVEL-INFO = 64;
define constant $G-LOG-LEVEL-DEBUG = 128;
define constant $G-LOG-LEVEL-MASK = -4;

define constant <anonymous-1060> = <C-function-pointer>;
define constant <GLogFunc> = <anonymous-1060>;

define C-function g-log-set-handler
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GLogLevelFlags>;
  input parameter arg3 :: <GLogFunc>;
  input parameter arg4 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_log_set_handler";
end;

define C-function g-log-remove-handler
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <guint>;
  c-name: "g_log_remove_handler";
end;

define C-function g-log-default-handler
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GLogLevelFlags>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_log_default_handler";
end;

define C-function g-log-set-default-handler
  input parameter arg1 :: <GLogFunc>;
  input parameter arg2 :: <gpointer>;
  result res :: <GLogFunc>;
  c-name: "g_log_set_default_handler";
end;

define C-function g-log
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GLogLevelFlags>;
  input parameter arg3 :: <gchar*>;
  c-name: "g_log";
end;

define C-function g-logv
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GLogLevelFlags>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <va-list>;
  c-name: "g_logv";
end;

define C-function g-log-set-fatal-mask
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GLogLevelFlags>;
  result res :: <GLogLevelFlags>;
  c-name: "g_log_set_fatal_mask";
end;

define C-function g-log-set-always-fatal
  input parameter arg1 :: <GLogLevelFlags>;
  result res :: <GLogLevelFlags>;
  c-name: "g_log_set_always_fatal";
end;

define C-function g-return-if-fail-warning
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <char*>;
  c-name: "g_return_if_fail_warning";
end;

define C-function g-assert-warning
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <char*>;
  c-name: "g_assert_warning";
end;

define constant <anonymous-1077> = <C-function-pointer>;
define constant <GPrintFunc> = <anonymous-1077>;

define C-function g-print
  input parameter arg1 :: <gchar*>;
  c-name: "g_print";
end;

define C-function g-set-print-handler
  input parameter arg1 :: <GPrintFunc>;
  result res :: <GPrintFunc>;
  c-name: "g_set_print_handler";
end;

define C-function g-printerr
  input parameter arg1 :: <gchar*>;
  c-name: "g_printerr";
end;

define C-function g-set-printerr-handler
  input parameter arg1 :: <GPrintFunc>;
  result res :: <GPrintFunc>;
  c-name: "g_set_printerr_handler";
end;

define constant $G-LOG-LEVEL-USER-SHIFT = 8;

define constant $G-LOG-FATAL-MASK = 0;

define constant <GMarkupError> = <C-int>;
define constant $G-MARKUP-ERROR-BAD-UTF8 = 0;
define constant $G-MARKUP-ERROR-EMPTY = 1;
define constant $G-MARKUP-ERROR-PARSE = 2;
define constant $G-MARKUP-ERROR-UNKNOWN-ELEMENT = 3;
define constant $G-MARKUP-ERROR-UNKNOWN-ATTRIBUTE = 4;
define constant $G-MARKUP-ERROR-INVALID-CONTENT = 5;

define C-function g-markup-error-quark
  result res :: <GQuark>;
  c-name: "g_markup_error_quark";
end;

define constant <GMarkupParseFlags> = <C-int>;
define constant $G-MARKUP-DO-NOT-USE-THIS-UNSUPPORTED-FLAG = 1;
define constant $G-MARKUP-TREAT-CDATA-AS-TEXT = 2;

define C-subtype <_GMarkupParseContext> (<C-void*>) end;
define constant <GMarkupParseContext> = <_GMarkupParseContext>;

define constant <anonymous-1044> = <C-function-pointer>;
define constant <anonymous-1045> = <C-function-pointer>;
define constant <anonymous-1046> = <C-function-pointer>;
define constant <anonymous-1047> = <C-function-pointer>;
define constant <anonymous-1048> = <C-function-pointer>;
define C-subtype <_GMarkupParser> (<C-void*>) end;
define constant <GMarkupParser> = <_GMarkupParser>;

define C-function g-markup-parse-context-new
  input parameter arg1 :: <GMarkupParser>;
  input parameter arg2 :: <GMarkupParseFlags>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  result res :: <GMarkupParseContext>;
  c-name: "g_markup_parse_context_new";
end;

define C-function g-markup-parse-context-free
  input parameter arg1 :: <GMarkupParseContext>;
  c-name: "g_markup_parse_context_free";
end;

define C-function g-markup-parse-context-parse
  input parameter arg1 :: <GMarkupParseContext>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gssize>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_markup_parse_context_parse";
end;

define C-function g-markup-parse-context-end-parse
  input parameter arg1 :: <GMarkupParseContext>;
  input parameter arg2 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_markup_parse_context_end_parse";
end;

define C-function g-markup-parse-context-get-element
  input parameter arg1 :: <GMarkupParseContext>;
  result res :: <gchar*>;
  c-name: "g_markup_parse_context_get_element";
end;

define C-function g-markup-parse-context-get-position
  input parameter arg1 :: <GMarkupParseContext>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "g_markup_parse_context_get_position";
end;

define C-function g-markup-escape-text
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  result res :: <gchar*>;
  c-name: "g_markup_escape_text";
end;

define C-function g-markup-printf-escaped
  input parameter arg1 :: <char*>;
  result res :: <gchar*>;
  c-name: "g_markup_printf_escaped";
end;

define C-function g-markup-vprintf-escaped
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <va-list>;
  result res :: <gchar*>;
  c-name: "g_markup_vprintf_escaped";
end;

define C-subtype <_GMappedFile> (<C-void*>) end;
define constant <GMappedFile> = <_GMappedFile>;

define C-function g-mapped-file-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <GError*>;
  result res :: <GMappedFile>;
  c-name: "g_mapped_file_new";
end;

define C-function g-mapped-file-get-length
  input parameter arg1 :: <GMappedFile>;
  result res :: <gsize>;
  c-name: "g_mapped_file_get_length";
end;

define C-function g-mapped-file-get-contents
  input parameter arg1 :: <GMappedFile>;
  result res :: <gchar*>;
  c-name: "g_mapped_file_get_contents";
end;

define C-function g-mapped-file-free
  input parameter arg1 :: <GMappedFile>;
  c-name: "g_mapped_file_free";
end;

define C-subtype <_GMainContext> (<C-void*>) end;
define constant <GMainContext> = <_GMainContext>;

define C-subtype <_GMainLoop> (<C-void*>) end;
define constant <GMainLoop> = <_GMainLoop>;

define constant <anonymous-722> = <C-function-pointer>;
define constant <anonymous-723> = <C-function-pointer>;
define constant <GSource> = <_GSource>;

define constant <anonymous-720> = <C-function-pointer>;
define constant <GSourceFunc> = <anonymous-720>;

define C-pointer-type <GSourceFunc*> => <GSourceFunc>;
define constant <anonymous-724> = <C-function-pointer>;
define C-subtype <_GSourceCallbackFuncs> (<C-void*>) end;
define constant <GSourceCallbackFuncs> = <_GSourceCallbackFuncs>;

define constant <anonymous-726> = <C-function-pointer>;
define constant <anonymous-727> = <C-function-pointer>;
define constant <anonymous-728> = <C-function-pointer>;
define constant <anonymous-729> = <C-function-pointer>;
define constant <anonymous-725> = <C-function-pointer>;
define constant <GSourceDummyMarshal> = <anonymous-725>;

define C-subtype <_GSourceFuncs> (<C-void*>) end;
define constant <GSourceFuncs> = <_GSourceFuncs>;

define C-subtype <_GSource> (<C-void*>) end;
define constant <anonymous-721> = <C-function-pointer>;
define constant <GChildWatchFunc> = <anonymous-721>;

define C-subtype <_GPollFD> (<C-void*>) end;
define constant <GPollFD> = <_GPollFD>;

define constant <anonymous-730> = <C-function-pointer>;
define constant <GPollFunc> = <anonymous-730>;

define C-function g-main-context-new
  result res :: <GMainContext>;
  c-name: "g_main_context_new";
end;

define C-function g-main-context-ref
  input parameter arg1 :: <GMainContext>;
  result res :: <GMainContext>;
  c-name: "g_main_context_ref";
end;

define C-function g-main-context-unref
  input parameter arg1 :: <GMainContext>;
  c-name: "g_main_context_unref";
end;

define C-function g-main-context-default
  result res :: <GMainContext>;
  c-name: "g_main_context_default";
end;

define C-function g-main-context-iteration
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "g_main_context_iteration";
end;

define C-function g-main-context-pending
  input parameter arg1 :: <GMainContext>;
  result res :: <gboolean>;
  c-name: "g_main_context_pending";
end;

define C-function g-main-context-find-source-by-id
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <guint>;
  result res :: <GSource>;
  c-name: "g_main_context_find_source_by_id";
end;

define C-function g-main-context-find-source-by-user-data
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <gpointer>;
  result res :: <GSource>;
  c-name: "g_main_context_find_source_by_user_data";
end;

define C-function g-main-context-find-source-by-funcs-user-data
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <GSourceFuncs>;
  input parameter arg3 :: <gpointer>;
  result res :: <GSource>;
  c-name: "g_main_context_find_source_by_funcs_user_data";
end;

define C-function g-main-context-wakeup
  input parameter arg1 :: <GMainContext>;
  c-name: "g_main_context_wakeup";
end;

define C-function g-main-context-acquire
  input parameter arg1 :: <GMainContext>;
  result res :: <gboolean>;
  c-name: "g_main_context_acquire";
end;

define C-function g-main-context-release
  input parameter arg1 :: <GMainContext>;
  c-name: "g_main_context_release";
end;

define C-function g-main-context-is-owner
  input parameter arg1 :: <GMainContext>;
  result res :: <gboolean>;
  c-name: "g_main_context_is_owner";
end;

define C-function g-main-context-wait
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <GCond>;
  input parameter arg3 :: <GMutex>;
  result res :: <gboolean>;
  c-name: "g_main_context_wait";
end;

define C-function g-main-context-prepare
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <gint*>;
  result res :: <gboolean>;
  c-name: "g_main_context_prepare";
end;

define C-function g-main-context-query
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <GPollFD>;
  input parameter arg5 :: <gint>;
  result res :: <gint>;
  c-name: "g_main_context_query";
end;

define C-function g-main-context-check
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GPollFD>;
  input parameter arg4 :: <gint>;
  result res :: <gint>;
  c-name: "g_main_context_check";
end;

define C-function g-main-context-dispatch
  input parameter arg1 :: <GMainContext>;
  c-name: "g_main_context_dispatch";
end;

define C-function g-main-context-set-poll-func
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <GPollFunc>;
  c-name: "g_main_context_set_poll_func";
end;

define C-function g-main-context-get-poll-func
  input parameter arg1 :: <GMainContext>;
  result res :: <GPollFunc>;
  c-name: "g_main_context_get_poll_func";
end;

define C-function g-main-context-add-poll
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <GPollFD>;
  input parameter arg3 :: <gint>;
  c-name: "g_main_context_add_poll";
end;

define C-function g-main-context-remove-poll
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <GPollFD>;
  c-name: "g_main_context_remove_poll";
end;

define C-function g-main-depth
  result res :: <gint>;
  c-name: "g_main_depth";
end;

define C-function g-main-current-source
  result res :: <GSource>;
  c-name: "g_main_current_source";
end;

define C-function g-main-loop-new
  input parameter arg1 :: <GMainContext>;
  input parameter arg2 :: <gboolean>;
  result res :: <GMainLoop>;
  c-name: "g_main_loop_new";
end;

define C-function g-main-loop-run
  input parameter arg1 :: <GMainLoop>;
  c-name: "g_main_loop_run";
end;

define C-function g-main-loop-quit
  input parameter arg1 :: <GMainLoop>;
  c-name: "g_main_loop_quit";
end;

define C-function g-main-loop-ref
  input parameter arg1 :: <GMainLoop>;
  result res :: <GMainLoop>;
  c-name: "g_main_loop_ref";
end;

define C-function g-main-loop-unref
  input parameter arg1 :: <GMainLoop>;
  c-name: "g_main_loop_unref";
end;

define C-function g-main-loop-is-running
  input parameter arg1 :: <GMainLoop>;
  result res :: <gboolean>;
  c-name: "g_main_loop_is_running";
end;

define C-function g-main-loop-get-context
  input parameter arg1 :: <GMainLoop>;
  result res :: <GMainContext>;
  c-name: "g_main_loop_get_context";
end;

define C-function g-source-new
  input parameter arg1 :: <GSourceFuncs>;
  input parameter arg2 :: <guint>;
  result res :: <GSource>;
  c-name: "g_source_new";
end;

define C-function g-source-ref
  input parameter arg1 :: <GSource>;
  result res :: <GSource>;
  c-name: "g_source_ref";
end;

define C-function g-source-unref
  input parameter arg1 :: <GSource>;
  c-name: "g_source_unref";
end;

define C-function g-source-attach
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <GMainContext>;
  result res :: <guint>;
  c-name: "g_source_attach";
end;

define C-function g-source-destroy
  input parameter arg1 :: <GSource>;
  c-name: "g_source_destroy";
end;

define C-function g-source-set-priority
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <gint>;
  c-name: "g_source_set_priority";
end;

define C-function g-source-get-priority
  input parameter arg1 :: <GSource>;
  result res :: <gint>;
  c-name: "g_source_get_priority";
end;

define C-function g-source-set-can-recurse
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_source_set_can_recurse";
end;

define C-function g-source-get-can-recurse
  input parameter arg1 :: <GSource>;
  result res :: <gboolean>;
  c-name: "g_source_get_can_recurse";
end;

define C-function g-source-get-id
  input parameter arg1 :: <GSource>;
  result res :: <guint>;
  c-name: "g_source_get_id";
end;

define C-function g-source-get-context
  input parameter arg1 :: <GSource>;
  result res :: <GMainContext>;
  c-name: "g_source_get_context";
end;

define C-function g-source-set-callback
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <GSourceFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "g_source_set_callback";
end;

define C-function g-source-set-funcs
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <GSourceFuncs>;
  c-name: "g_source_set_funcs";
end;

define C-function g-source-is-destroyed
  input parameter arg1 :: <GSource>;
  result res :: <gboolean>;
  c-name: "g_source_is_destroyed";
end;

define C-function g-source-set-callback-indirect
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GSourceCallbackFuncs>;
  c-name: "g_source_set_callback_indirect";
end;

define C-function g-source-add-poll
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <GPollFD>;
  c-name: "g_source_add_poll";
end;

define C-function g-source-remove-poll
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <GPollFD>;
  c-name: "g_source_remove_poll";
end;

define C-function g-source-get-current-time
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <GTimeVal>;
  c-name: "g_source_get_current_time";
end;

define C-function g-idle-source-new
  result res :: <GSource>;
  c-name: "g_idle_source_new";
end;

define C-function g-child-watch-source-new
  input parameter arg1 :: <GPid>;
  result res :: <GSource>;
  c-name: "g_child_watch_source_new";
end;

define C-function g-timeout-source-new
  input parameter arg1 :: <guint>;
  result res :: <GSource>;
  c-name: "g_timeout_source_new";
end;

define C-function g-get-current-time
  input parameter arg1 :: <GTimeVal>;
  c-name: "g_get_current_time";
end;

define C-function g-source-remove
  input parameter arg1 :: <guint>;
  result res :: <gboolean>;
  c-name: "g_source_remove";
end;

define C-function g-source-remove-by-user-data
  input parameter arg1 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "g_source_remove_by_user_data";
end;

define C-function g-source-remove-by-funcs-user-data
  input parameter arg1 :: <GSourceFuncs>;
  input parameter arg2 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "g_source_remove_by_funcs_user_data";
end;

define C-function g-timeout-add-full
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GSourceFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  result res :: <guint>;
  c-name: "g_timeout_add_full";
end;

define C-function g-timeout-add
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GSourceFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_timeout_add";
end;

define C-function g-child-watch-add-full
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GPid>;
  input parameter arg3 :: <GChildWatchFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  result res :: <guint>;
  c-name: "g_child_watch_add_full";
end;

define C-function g-child-watch-add
  input parameter arg1 :: <GPid>;
  input parameter arg2 :: <GChildWatchFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_child_watch_add";
end;

define C-function g-idle-add
  input parameter arg1 :: <GSourceFunc>;
  input parameter arg2 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_idle_add";
end;

define C-function g-idle-add-full
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GSourceFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  result res :: <guint>;
  c-name: "g_idle_add_full";
end;

define C-function g-idle-remove-by-data
  input parameter arg1 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "g_idle_remove_by_data";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "g-timeout-funcs"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "g-child-watch-funcs"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "g-idle-funcs"*/
define constant $G-PRIORITY-HIGH = -100;

define constant $G-PRIORITY-DEFAULT = 0;

define constant $G-PRIORITY-HIGH-IDLE = 100;

define constant $G-PRIORITY-DEFAULT-IDLE = 200;

define constant $G-PRIORITY-LOW = 300;

define constant <GKeyFileError> = <C-int>;
define constant $G-KEY-FILE-ERROR-UNKNOWN-ENCODING = 0;
define constant $G-KEY-FILE-ERROR-PARSE = 1;
define constant $G-KEY-FILE-ERROR-NOT-FOUND = 2;
define constant $G-KEY-FILE-ERROR-KEY-NOT-FOUND = 3;
define constant $G-KEY-FILE-ERROR-GROUP-NOT-FOUND = 4;
define constant $G-KEY-FILE-ERROR-INVALID-VALUE = 5;

define C-function g-key-file-error-quark
  result res :: <GQuark>;
  c-name: "g_key_file_error_quark";
end;

define C-subtype <_GKeyFile> (<C-void*>) end;
define constant <GKeyFile> = <_GKeyFile>;

define constant <GKeyFileFlags> = <C-int>;
define constant $G-KEY-FILE-NONE = 0;
define constant $G-KEY-FILE-KEEP-COMMENTS = 1;
define constant $G-KEY-FILE-KEEP-TRANSLATIONS = 2;

define C-function g-key-file-new
  result res :: <GKeyFile>;
  c-name: "g_key_file_new";
end;

define C-function g-key-file-free
  input parameter arg1 :: <GKeyFile>;
  c-name: "g_key_file_free";
end;

define C-function g-key-file-set-list-separator
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar>;
  c-name: "g_key_file_set_list_separator";
end;

define C-function g-key-file-load-from-file
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GKeyFileFlags>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_key_file_load_from_file";
end;

define C-function g-key-file-load-from-data
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  input parameter arg4 :: <GKeyFileFlags>;
  input parameter arg5 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_key_file_load_from_data";
end;

define C-function g-key-file-load-from-data-dirs
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <GKeyFileFlags>;
  input parameter arg5 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_key_file_load_from_data_dirs";
end;

define C-function g-key-file-to-data
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gsize*>;
  input parameter arg3 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_key_file_to_data";
end;

define C-function g-key-file-get-start-group
  input parameter arg1 :: <GKeyFile>;
  result res :: <gchar*>;
  c-name: "g_key_file_get_start_group";
end;

define C-function g-key-file-get-groups
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gsize*>;
  result res :: <gchar**>;
  c-name: "g_key_file_get_groups";
end;

define C-function g-key-file-get-keys
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <GError*>;
  result res :: <gchar**>;
  c-name: "g_key_file_get_keys";
end;

define C-function g-key-file-has-group
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "g_key_file_has_group";
end;

define C-function g-key-file-has-key
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_key_file_has_key";
end;

define C-function g-key-file-get-value
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_key_file_get_value";
end;

define C-function g-key-file-set-value
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  c-name: "g_key_file_set_value";
end;

define C-function g-key-file-get-string
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_key_file_get_string";
end;

define C-function g-key-file-set-string
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  c-name: "g_key_file_set_string";
end;

define C-function g-key-file-get-locale-string
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_key_file_get_locale_string";
end;

define C-function g-key-file-set-locale-string
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gchar*>;
  c-name: "g_key_file_set_locale_string";
end;

define C-function g-key-file-get-boolean
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_key_file_get_boolean";
end;

define C-function g-key-file-set-boolean
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gboolean>;
  c-name: "g_key_file_set_boolean";
end;

define C-function g-key-file-get-integer
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gint>;
  c-name: "g_key_file_get_integer";
end;

define C-function g-key-file-set-integer
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint>;
  c-name: "g_key_file_set_integer";
end;

define C-function g-key-file-get-double
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gdouble>;
  c-name: "g_key_file_get_double";
end;

define C-function g-key-file-set-double
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gdouble>;
  c-name: "g_key_file_set_double";
end;

define C-function g-key-file-get-string-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <gchar**>;
  c-name: "g_key_file_get_string_list";
end;

define constant <gchar*<@>> = <gchar**>;
define C-function g-key-file-set-string-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*<@>>;
  input parameter arg5 :: <gsize>;
  c-name: "g_key_file_set_string_list";
end;

define C-function g-key-file-get-locale-string-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gsize*>;
  input parameter arg6 :: <GError*>;
  result res :: <gchar**>;
  c-name: "g_key_file_get_locale_string_list";
end;

define C-function g-key-file-set-locale-string-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gchar*<@>>;
  input parameter arg6 :: <gsize>;
  c-name: "g_key_file_set_locale_string_list";
end;

define C-pointer-type <gboolean*> => <gboolean>;
define C-function g-key-file-get-boolean-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <gboolean*>;
  c-name: "g_key_file_get_boolean_list";
end;

define constant <gboolean<@>> = <gboolean*>;
define C-function g-key-file-set-boolean-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gboolean<@>>;
  input parameter arg5 :: <gsize>;
  c-name: "g_key_file_set_boolean_list";
end;

define C-function g-key-file-get-integer-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <gint*>;
  c-name: "g_key_file_get_integer_list";
end;

define constant <gdouble<@>> = <gdouble*>;
define C-function g-key-file-set-double-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gdouble<@>>;
  input parameter arg5 :: <gsize>;
  c-name: "g_key_file_set_double_list";
end;

define C-function g-key-file-get-double-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <gdouble*>;
  c-name: "g_key_file_get_double_list";
end;

define constant <gint<@>> = <gint*>;
define C-function g-key-file-set-integer-list
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint<@>>;
  input parameter arg5 :: <gsize>;
  c-name: "g_key_file_set_integer_list";
end;

define C-function g-key-file-set-comment
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <GError*>;
  c-name: "g_key_file_set_comment";
end;

define C-function g-key-file-get-comment
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_key_file_get_comment";
end;

define C-function g-key-file-remove-comment
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  c-name: "g_key_file_remove_comment";
end;

define C-function g-key-file-remove-key
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  c-name: "g_key_file_remove_key";
end;

define C-function g-key-file-remove-group
  input parameter arg1 :: <GKeyFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  c-name: "g_key_file_remove_group";
end;

define constant <GIOStatus> = <C-int>;
define constant $G-IO-STATUS-ERROR = 0;
define constant $G-IO-STATUS-NORMAL = 1;
define constant $G-IO-STATUS-EOF = 2;
define constant $G-IO-STATUS-AGAIN = 3;

define constant <GIOChannel> = <_GIOChannel>;

define constant <anonymous-943> = <C-function-pointer>;
define constant <anonymous-944> = <C-function-pointer>;
define constant <GSeekType> = <C-int>;
define constant $G-SEEK-CUR = 0;
define constant $G-SEEK-SET = 1;
define constant $G-SEEK-END = 2;

define constant <anonymous-945> = <C-function-pointer>;
define constant <anonymous-946> = <C-function-pointer>;
define constant <GIOCondition> = <C-int>;
define constant $G-IO-IN = 1;
define constant $G-IO-OUT = 4;
define constant $G-IO-PRI = 2;
define constant $G-IO-ERR = 8;
define constant $G-IO-HUP = 16;
define constant $G-IO-NVAL = 32;

define constant <anonymous-947> = <C-function-pointer>;
define constant <anonymous-948> = <C-function-pointer>;
define constant <GIOFlags> = <C-int>;
define constant $G-IO-FLAG-APPEND = 1;
define constant $G-IO-FLAG-NONBLOCK = 2;
define constant $G-IO-FLAG-IS-READABLE = 4;
define constant $G-IO-FLAG-IS-WRITEABLE = 8;
define constant $G-IO-FLAG-IS-SEEKABLE = 16;
define constant $G-IO-FLAG-MASK = 31;
define constant $G-IO-FLAG-GET-MASK = 31;
define constant $G-IO-FLAG-SET-MASK = 3;

define constant <anonymous-949> = <C-function-pointer>;
define constant <anonymous-950> = <C-function-pointer>;
define C-subtype <_GIOFuncs> (<C-void*>) end;
define constant <GIOFuncs> = <_GIOFuncs>;

define C-subtype <_GIConv> (<C-void*>) end;
define constant <GIConv> = <_GIConv>;

define constant <gchar<@6>> = <gchar*>;
define C-subtype <_GIOChannel> (<C-void*>) end;
define constant <GIOError> = <C-int>;
define constant $G-IO-ERROR-NONE = 0;
define constant $G-IO-ERROR-AGAIN = 1;
define constant $G-IO-ERROR-INVAL = 2;
define constant $G-IO-ERROR-UNKNOWN = 3;

define constant <GIOChannelError> = <C-int>;
define constant $G-IO-CHANNEL-ERROR-FBIG = 0;
define constant $G-IO-CHANNEL-ERROR-INVAL = 1;
define constant $G-IO-CHANNEL-ERROR-IO = 2;
define constant $G-IO-CHANNEL-ERROR-ISDIR = 3;
define constant $G-IO-CHANNEL-ERROR-NOSPC = 4;
define constant $G-IO-CHANNEL-ERROR-NXIO = 5;
define constant $G-IO-CHANNEL-ERROR-OVERFLOW = 6;
define constant $G-IO-CHANNEL-ERROR-PIPE = 7;
define constant $G-IO-CHANNEL-ERROR-FAILED = 8;

define constant <anonymous-942> = <C-function-pointer>;
define constant <GIOFunc> = <anonymous-942>;

define C-function g-io-channel-init
  input parameter arg1 :: <GIOChannel>;
  c-name: "g_io_channel_init";
end;

define C-function g-io-channel-ref
  input parameter arg1 :: <GIOChannel>;
  result res :: <GIOChannel>;
  c-name: "g_io_channel_ref";
end;

define C-function g-io-channel-unref
  input parameter arg1 :: <GIOChannel>;
  c-name: "g_io_channel_unref";
end;

define C-function g-io-channel-read
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  input parameter arg4 :: <gsize*>;
  result res :: <GIOError>;
  c-name: "g_io_channel_read";
end;

define C-function g-io-channel-write
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  input parameter arg4 :: <gsize*>;
  result res :: <GIOError>;
  c-name: "g_io_channel_write";
end;

define C-function g-io-channel-seek
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gint64>;
  input parameter arg3 :: <GSeekType>;
  result res :: <GIOError>;
  c-name: "g_io_channel_seek";
end;

define C-function g-io-channel-close
  input parameter arg1 :: <GIOChannel>;
  c-name: "g_io_channel_close";
end;

define C-function g-io-channel-shutdown
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_shutdown";
end;

define C-function g-io-add-watch-full
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GIOCondition>;
  input parameter arg4 :: <GIOFunc>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <GDestroyNotify>;
  result res :: <guint>;
  c-name: "g_io_add_watch_full";
end;

define C-function g-io-create-watch
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <GIOCondition>;
  result res :: <GSource>;
  c-name: "g_io_create_watch";
end;

define C-function g-io-add-watch
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <GIOCondition>;
  input parameter arg3 :: <GIOFunc>;
  input parameter arg4 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_io_add_watch";
end;

define C-function g-io-channel-set-buffer-size
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gsize>;
  c-name: "g_io_channel_set_buffer_size";
end;

define C-function g-io-channel-get-buffer-size
  input parameter arg1 :: <GIOChannel>;
  result res :: <gsize>;
  c-name: "g_io_channel_get_buffer_size";
end;

define C-function g-io-channel-get-buffer-condition
  input parameter arg1 :: <GIOChannel>;
  result res :: <GIOCondition>;
  c-name: "g_io_channel_get_buffer_condition";
end;

define C-function g-io-channel-set-flags
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <GIOFlags>;
  input parameter arg3 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_set_flags";
end;

define C-function g-io-channel-get-flags
  input parameter arg1 :: <GIOChannel>;
  result res :: <GIOFlags>;
  c-name: "g_io_channel_get_flags";
end;

define C-function g-io-channel-set-line-term
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  c-name: "g_io_channel_set_line_term";
end;

define C-function g-io-channel-get-line-term
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gint*>;
  result res :: <gchar*>;
  c-name: "g_io_channel_get_line_term";
end;

define C-function g-io-channel-set-buffered
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_io_channel_set_buffered";
end;

define C-function g-io-channel-get-buffered
  input parameter arg1 :: <GIOChannel>;
  result res :: <gboolean>;
  c-name: "g_io_channel_get_buffered";
end;

define C-function g-io-channel-set-encoding
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_set_encoding";
end;

define C-function g-io-channel-get-encoding
  input parameter arg1 :: <GIOChannel>;
  result res :: <gchar*>;
  c-name: "g_io_channel_get_encoding";
end;

define C-function g-io-channel-set-close-on-unref
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_io_channel_set_close_on_unref";
end;

define C-function g-io-channel-get-close-on-unref
  input parameter arg1 :: <GIOChannel>;
  result res :: <gboolean>;
  c-name: "g_io_channel_get_close_on_unref";
end;

define C-function g-io-channel-flush
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_flush";
end;

define C-function g-io-channel-read-line
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_read_line";
end;

define C-function g-io-channel-read-line-string
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <GString>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_read_line_string";
end;

define C-function g-io-channel-read-to-end
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_read_to_end";
end;

define C-function g-io-channel-read-chars
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_read_chars";
end;

define C-function g-io-channel-read-unichar
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gunichar*>;
  input parameter arg3 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_read_unichar";
end;

define C-function g-io-channel-write-chars
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gssize>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_write_chars";
end;

define C-function g-io-channel-write-unichar
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gunichar>;
  input parameter arg3 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_write_unichar";
end;

define C-function g-io-channel-seek-position
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <gint64>;
  input parameter arg3 :: <GSeekType>;
  input parameter arg4 :: <GError*>;
  result res :: <GIOStatus>;
  c-name: "g_io_channel_seek_position";
end;

define C-function g-io-channel-new-file-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <GIOChannel>;
  c-name: "g_io_channel_new_file_utf8";
end;

define C-function g-io-channel-error-quark
  result res :: <GQuark>;
  c-name: "g_io_channel_error_quark";
end;

define C-function g-io-channel-error-from-errno
  input parameter arg1 :: <gint>;
  result res :: <GIOChannelError>;
  c-name: "g_io_channel_error_from_errno";
end;

define C-function g-io-channel-unix-new
  input parameter arg1 :: <C-signed-int>;
  result res :: <GIOChannel>;
  c-name: "g_io_channel_unix_new";
end;

define C-function g-io-channel-unix-get-fd
  input parameter arg1 :: <GIOChannel>;
  result res :: <gint>;
  c-name: "g_io_channel_unix_get_fd";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "g-io-watch-funcs"*/
define C-function g-io-channel-win32-make-pollfd
  input parameter arg1 :: <GIOChannel>;
  input parameter arg2 :: <GIOCondition>;
  input parameter arg3 :: <GPollFD>;
  c-name: "g_io_channel_win32_make_pollfd";
end;

define C-function g-io-channel-win32-poll
  input parameter arg1 :: <GPollFD>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "g_io_channel_win32_poll";
end;

define C-function g-io-channel-win32-new-messages
  input parameter arg1 :: <guint>;
  result res :: <GIOChannel>;
  c-name: "g_io_channel_win32_new_messages";
end;

define C-function g-io-channel-win32-new-fd
  input parameter arg1 :: <gint>;
  result res :: <GIOChannel>;
  c-name: "g_io_channel_win32_new_fd";
end;

define C-function g-io-channel-win32-get-fd
  input parameter arg1 :: <GIOChannel>;
  result res :: <gint>;
  c-name: "g_io_channel_win32_get_fd";
end;

define C-function g-io-channel-win32-new-socket
  input parameter arg1 :: <gint>;
  result res :: <GIOChannel>;
  c-name: "g_io_channel_win32_new_socket";
end;

define constant g-io-channel-new-file = g-io-channel-new-file-utf8;

define constant $G-WIN32-MSG-HANDLE = 19981206;

define constant <GConvertError> = <C-int>;
define constant $G-CONVERT-ERROR-NO-CONVERSION = 0;
define constant $G-CONVERT-ERROR-ILLEGAL-SEQUENCE = 1;
define constant $G-CONVERT-ERROR-FAILED = 2;
define constant $G-CONVERT-ERROR-PARTIAL-INPUT = 3;
define constant $G-CONVERT-ERROR-BAD-URI = 4;
define constant $G-CONVERT-ERROR-NOT-ABSOLUTE-PATH = 5;

define C-function g-convert-error-quark
  result res :: <GQuark>;
  c-name: "g_convert_error_quark";
end;

define C-function g-iconv-open
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <GIConv>;
  c-name: "g_iconv_open";
end;

define C-function g-iconv
  input parameter arg1 :: <GIConv>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <gchar**>;
  input parameter arg5 :: <gsize*>;
  result res :: <size-t>;
  c-name: "g_iconv";
end;

define C-function g-iconv-close
  input parameter arg1 :: <GIConv>;
  result res :: <gint>;
  c-name: "g_iconv_close";
end;

define C-function g-convert
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gsize*>;
  input parameter arg6 :: <gsize*>;
  input parameter arg7 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_convert";
end;

define C-function g-convert-with-iconv
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <GIConv>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <gsize*>;
  input parameter arg6 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_convert_with_iconv";
end;

define C-function g-convert-with-fallback
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gchar*>;
  input parameter arg6 :: <gsize*>;
  input parameter arg7 :: <gsize*>;
  input parameter arg8 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_convert_with_fallback";
end;

define C-function g-locale-to-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_locale_to_utf8";
end;

define C-function g-locale-from-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_locale_from_utf8";
end;

define C-function g-filename-to-utf8-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_filename_to_utf8_utf8";
end;

define C-function g-filename-from-utf8-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gssize>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <gsize*>;
  input parameter arg5 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_filename_from_utf8_utf8";
end;

define C-function g-filename-from-uri-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_filename_from_uri_utf8";
end;

define C-function g-filename-to-uri-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_filename_to_uri_utf8";
end;

define C-function g-filename-display-name
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_filename_display_name";
end;

define C-function g-get-filename-charsets
  input parameter arg1 :: <gchar***>;
  result res :: <gboolean>;
  c-name: "g_get_filename_charsets";
end;

define C-function g-filename-display-basename
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_filename_display_basename";
end;

define C-function g-uri-list-extract-uris
  input parameter arg1 :: <gchar*>;
  result res :: <gchar**>;
  c-name: "g_uri_list_extract_uris";
end;

define constant g-filename-to-utf8 = g-filename-to-utf8-utf8;

define constant g-filename-from-utf8 = g-filename-from-utf8-utf8;

define constant g-filename-from-uri = g-filename-from-uri-utf8;

define constant g-filename-to-uri = g-filename-to-uri-utf8;

define constant <GHook> = <_GHook>;

define C-subtype <_GHook> (<C-void*>) end;
define constant <GHookList> = <_GHookList>;

define constant <anonymous-664> = <C-function-pointer>;
define constant <GHookFinalizeFunc> = <anonymous-664>;

define constant <gpointer<@2>> = <gpointer*>;
define C-subtype <_GHookList> (<C-void*>) end;
define constant <anonymous-658> = <C-function-pointer>;
define constant <GHookCompareFunc> = <anonymous-658>;

define constant <anonymous-659> = <C-function-pointer>;
define constant <GHookFindFunc> = <anonymous-659>;

define constant <anonymous-660> = <C-function-pointer>;
define constant <GHookMarshaller> = <anonymous-660>;

define constant <anonymous-661> = <C-function-pointer>;
define constant <GHookCheckMarshaller> = <anonymous-661>;

define constant <anonymous-662> = <C-function-pointer>;
define constant <GHookFunc> = <anonymous-662>;

define constant <anonymous-663> = <C-function-pointer>;
define constant <GHookCheckFunc> = <anonymous-663>;

define constant <GHookFlagMask> = <C-int>;
define constant $G-HOOK-FLAG-ACTIVE = 1;
define constant $G-HOOK-FLAG-IN-CALL = 2;
define constant $G-HOOK-FLAG-MASK = 15;

define C-function g-hook-list-init
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <guint>;
  c-name: "g_hook_list_init";
end;

define C-function g-hook-list-clear
  input parameter arg1 :: <GHookList>;
  c-name: "g_hook_list_clear";
end;

define C-function g-hook-alloc
  input parameter arg1 :: <GHookList>;
  result res :: <GHook>;
  c-name: "g_hook_alloc";
end;

define C-function g-hook-free
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <GHook>;
  c-name: "g_hook_free";
end;

define C-function g-hook-ref
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <GHook>;
  result res :: <GHook>;
  c-name: "g_hook_ref";
end;

define C-function g-hook-unref
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <GHook>;
  c-name: "g_hook_unref";
end;

define C-function g-hook-destroy
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gulong>;
  result res :: <gboolean>;
  c-name: "g_hook_destroy";
end;

define C-function g-hook-destroy-link
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <GHook>;
  c-name: "g_hook_destroy_link";
end;

define C-function g-hook-prepend
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <GHook>;
  c-name: "g_hook_prepend";
end;

define C-function g-hook-insert-before
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <GHook>;
  input parameter arg3 :: <GHook>;
  c-name: "g_hook_insert_before";
end;

define C-function g-hook-insert-sorted
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <GHook>;
  input parameter arg3 :: <GHookCompareFunc>;
  c-name: "g_hook_insert_sorted";
end;

define C-function g-hook-get
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gulong>;
  result res :: <GHook>;
  c-name: "g_hook_get";
end;

define C-function g-hook-find
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <GHookFindFunc>;
  input parameter arg4 :: <gpointer>;
  result res :: <GHook>;
  c-name: "g_hook_find";
end;

define C-function g-hook-find-data
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <gpointer>;
  result res :: <GHook>;
  c-name: "g_hook_find_data";
end;

define C-function g-hook-find-func
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <gpointer>;
  result res :: <GHook>;
  c-name: "g_hook_find_func";
end;

define C-function g-hook-find-func-data
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <gpointer>;
  result res :: <GHook>;
  c-name: "g_hook_find_func_data";
end;

define C-function g-hook-first-valid
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  result res :: <GHook>;
  c-name: "g_hook_first_valid";
end;

define C-function g-hook-next-valid
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <GHook>;
  input parameter arg3 :: <gboolean>;
  result res :: <GHook>;
  c-name: "g_hook_next_valid";
end;

define C-function g-hook-compare-ids
  input parameter arg1 :: <GHook>;
  input parameter arg2 :: <GHook>;
  result res :: <gint>;
  c-name: "g_hook_compare_ids";
end;

define C-function g-hook-list-invoke
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_hook_list_invoke";
end;

define C-function g-hook-list-invoke-check
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  c-name: "g_hook_list_invoke_check";
end;

define C-function g-hook-list-marshal
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <GHookMarshaller>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_hook_list_marshal";
end;

define C-function g-hook-list-marshal-check
  input parameter arg1 :: <GHookList>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <GHookCheckMarshaller>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_hook_list_marshal_check";
end;

define constant $G-HOOK-FLAG-USER-SHIFT = 4;

define constant <GFileError> = <C-int>;
define constant $G-FILE-ERROR-EXIST = 0;
define constant $G-FILE-ERROR-ISDIR = 1;
define constant $G-FILE-ERROR-ACCES = 2;
define constant $G-FILE-ERROR-NAMETOOLONG = 3;
define constant $G-FILE-ERROR-NOENT = 4;
define constant $G-FILE-ERROR-NOTDIR = 5;
define constant $G-FILE-ERROR-NXIO = 6;
define constant $G-FILE-ERROR-NODEV = 7;
define constant $G-FILE-ERROR-ROFS = 8;
define constant $G-FILE-ERROR-TXTBSY = 9;
define constant $G-FILE-ERROR-FAULT = 10;
define constant $G-FILE-ERROR-LOOP = 11;
define constant $G-FILE-ERROR-NOSPC = 12;
define constant $G-FILE-ERROR-NOMEM = 13;
define constant $G-FILE-ERROR-MFILE = 14;
define constant $G-FILE-ERROR-NFILE = 15;
define constant $G-FILE-ERROR-BADF = 16;
define constant $G-FILE-ERROR-INVAL = 17;
define constant $G-FILE-ERROR-PIPE = 18;
define constant $G-FILE-ERROR-AGAIN = 19;
define constant $G-FILE-ERROR-INTR = 20;
define constant $G-FILE-ERROR-IO = 21;
define constant $G-FILE-ERROR-PERM = 22;
define constant $G-FILE-ERROR-NOSYS = 23;
define constant $G-FILE-ERROR-FAILED = 24;

define constant <GFileTest> = <C-int>;
define constant $G-FILE-TEST-IS-REGULAR = 1;
define constant $G-FILE-TEST-IS-SYMLINK = 2;
define constant $G-FILE-TEST-IS-DIR = 4;
define constant $G-FILE-TEST-IS-EXECUTABLE = 8;
define constant $G-FILE-TEST-EXISTS = 16;

define C-function g-file-error-quark
  result res :: <GQuark>;
  c-name: "g_file_error_quark";
end;

define C-function g-file-error-from-errno
  input parameter arg1 :: <gint>;
  result res :: <GFileError>;
  c-name: "g_file_error_from_errno";
end;

define C-function g-file-test-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GFileTest>;
  result res :: <gboolean>;
  c-name: "g_file_test_utf8";
end;

define C-function g-file-get-contents-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_file_get_contents_utf8";
end;

define C-function g-file-set-contents
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gssize>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_file_set_contents";
end;

define C-function g-file-read-link
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_file_read_link";
end;

define C-function g-mkstemp-utf8
  input parameter arg1 :: <gchar*>;
  result res :: <gint>;
  c-name: "g_mkstemp_utf8";
end;

define C-function g-file-open-tmp-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <GError*>;
  result res :: <gint>;
  c-name: "g_file_open_tmp_utf8";
end;

define C-function g-build-path
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_build_path";
end;

define C-function g-build-pathv
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar**>;
  result res :: <gchar*>;
  c-name: "g_build_pathv";
end;

define C-function g-build-filename
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_build_filename";
end;

define C-function g-build-filenamev
  input parameter arg1 :: <gchar**>;
  result res :: <gchar*>;
  c-name: "g_build_filenamev";
end;

define C-function g-mkdir-with-parents
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <C-signed-int>;
  result res :: <C-signed-int>;
  c-name: "g_mkdir_with_parents";
end;

define constant g-file-test = g-file-test-utf8;

define constant g-file-get-contents = g-file-get-contents-utf8;

define constant g-mkstemp = g-mkstemp-utf8;

define constant g-file-open-tmp = g-file-open-tmp-utf8;

define C-subtype <_GDir> (<C-void*>) end;
define constant <GDir> = <_GDir>;

define C-function g-dir-open-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GError*>;
  result res :: <GDir>;
  c-name: "g_dir_open_utf8";
end;

define C-function g-dir-read-name-utf8
  input parameter arg1 :: <GDir>;
  result res :: <gchar*>;
  c-name: "g_dir_read_name_utf8";
end;

define C-function g-dir-rewind
  input parameter arg1 :: <GDir>;
  c-name: "g_dir_rewind";
end;

define C-function g-dir-close
  input parameter arg1 :: <GDir>;
  c-name: "g_dir_close";
end;

define constant g-dir-open = g-dir-open-utf8;

define constant g-dir-read-name = g-dir-read-name-utf8;

define constant <GTime> = <gint32>;

define constant <GDateYear> = <guint16>;

define constant <GDateDay> = <guint8>;

define C-subtype <_GDate> (<C-void*>) end;
define constant <GDate> = <_GDate>;

define constant <GDateDMY> = <C-int>;
define constant $G-DATE-DAY = 0;
define constant $G-DATE-MONTH = 1;
define constant $G-DATE-YEAR = 2;

define constant <GDateWeekday> = <C-int>;
define constant $G-DATE-BAD-WEEKDAY = 0;
define constant $G-DATE-MONDAY = 1;
define constant $G-DATE-TUESDAY = 2;
define constant $G-DATE-WEDNESDAY = 3;
define constant $G-DATE-THURSDAY = 4;
define constant $G-DATE-FRIDAY = 5;
define constant $G-DATE-SATURDAY = 6;
define constant $G-DATE-SUNDAY = 7;

define constant <GDateMonth> = <C-int>;
define constant $G-DATE-BAD-MONTH = 0;
define constant $G-DATE-JANUARY = 1;
define constant $G-DATE-FEBRUARY = 2;
define constant $G-DATE-MARCH = 3;
define constant $G-DATE-APRIL = 4;
define constant $G-DATE-MAY = 5;
define constant $G-DATE-JUNE = 6;
define constant $G-DATE-JULY = 7;
define constant $G-DATE-AUGUST = 8;
define constant $G-DATE-SEPTEMBER = 9;
define constant $G-DATE-OCTOBER = 10;
define constant $G-DATE-NOVEMBER = 11;
define constant $G-DATE-DECEMBER = 12;

define C-function g-date-new
  result res :: <GDate>;
  c-name: "g_date_new";
end;

define C-function g-date-new-dmy
  input parameter arg1 :: <GDateDay>;
  input parameter arg2 :: <GDateMonth>;
  input parameter arg3 :: <GDateYear>;
  result res :: <GDate>;
  c-name: "g_date_new_dmy";
end;

define C-function g-date-new-julian
  input parameter arg1 :: <guint32>;
  result res :: <GDate>;
  c-name: "g_date_new_julian";
end;

define C-function g-date-free
  input parameter arg1 :: <GDate>;
  c-name: "g_date_free";
end;

define C-function g-date-valid
  input parameter arg1 :: <GDate>;
  result res :: <gboolean>;
  c-name: "g_date_valid";
end;

define C-function g-date-valid-day
  input parameter arg1 :: <GDateDay>;
  result res :: <gboolean>;
  c-name: "g_date_valid_day";
end;

define C-function g-date-valid-month
  input parameter arg1 :: <GDateMonth>;
  result res :: <gboolean>;
  c-name: "g_date_valid_month";
end;

define C-function g-date-valid-year
  input parameter arg1 :: <GDateYear>;
  result res :: <gboolean>;
  c-name: "g_date_valid_year";
end;

define C-function g-date-valid-weekday
  input parameter arg1 :: <GDateWeekday>;
  result res :: <gboolean>;
  c-name: "g_date_valid_weekday";
end;

define C-function g-date-valid-julian
  input parameter arg1 :: <guint32>;
  result res :: <gboolean>;
  c-name: "g_date_valid_julian";
end;

define C-function g-date-valid-dmy
  input parameter arg1 :: <GDateDay>;
  input parameter arg2 :: <GDateMonth>;
  input parameter arg3 :: <GDateYear>;
  result res :: <gboolean>;
  c-name: "g_date_valid_dmy";
end;

define C-function g-date-get-weekday
  input parameter arg1 :: <GDate>;
  result res :: <GDateWeekday>;
  c-name: "g_date_get_weekday";
end;

define C-function g-date-get-month
  input parameter arg1 :: <GDate>;
  result res :: <GDateMonth>;
  c-name: "g_date_get_month";
end;

define C-function g-date-get-year
  input parameter arg1 :: <GDate>;
  result res :: <GDateYear>;
  c-name: "g_date_get_year";
end;

define C-function g-date-get-day
  input parameter arg1 :: <GDate>;
  result res :: <GDateDay>;
  c-name: "g_date_get_day";
end;

define C-function g-date-get-julian
  input parameter arg1 :: <GDate>;
  result res :: <guint32>;
  c-name: "g_date_get_julian";
end;

define C-function g-date-get-day-of-year
  input parameter arg1 :: <GDate>;
  result res :: <guint>;
  c-name: "g_date_get_day_of_year";
end;

define C-function g-date-get-monday-week-of-year
  input parameter arg1 :: <GDate>;
  result res :: <guint>;
  c-name: "g_date_get_monday_week_of_year";
end;

define C-function g-date-get-sunday-week-of-year
  input parameter arg1 :: <GDate>;
  result res :: <guint>;
  c-name: "g_date_get_sunday_week_of_year";
end;

define C-function g-date-get-iso8601-week-of-year
  input parameter arg1 :: <GDate>;
  result res :: <guint>;
  c-name: "g_date_get_iso8601_week_of_year";
end;

define C-function g-date-clear
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <guint>;
  c-name: "g_date_clear";
end;

define C-function g-date-set-parse
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_date_set_parse";
end;

define constant <time-t> = <C-signed-long>;

define C-function g-date-set-time-t
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <time-t>;
  c-name: "g_date_set_time_t";
end;

define C-function g-date-set-time-val
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GTimeVal>;
  c-name: "g_date_set_time_val";
end;

define C-function g-date-set-time
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GTime>;
  c-name: "g_date_set_time";
end;

define C-function g-date-set-month
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GDateMonth>;
  c-name: "g_date_set_month";
end;

define C-function g-date-set-day
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GDateDay>;
  c-name: "g_date_set_day";
end;

define C-function g-date-set-year
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GDateYear>;
  c-name: "g_date_set_year";
end;

define C-function g-date-set-dmy
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GDateDay>;
  input parameter arg3 :: <GDateMonth>;
  input parameter arg4 :: <GDateYear>;
  c-name: "g_date_set_dmy";
end;

define C-function g-date-set-julian
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <guint32>;
  c-name: "g_date_set_julian";
end;

define C-function g-date-is-first-of-month
  input parameter arg1 :: <GDate>;
  result res :: <gboolean>;
  c-name: "g_date_is_first_of_month";
end;

define C-function g-date-is-last-of-month
  input parameter arg1 :: <GDate>;
  result res :: <gboolean>;
  c-name: "g_date_is_last_of_month";
end;

define C-function g-date-add-days
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <guint>;
  c-name: "g_date_add_days";
end;

define C-function g-date-subtract-days
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <guint>;
  c-name: "g_date_subtract_days";
end;

define C-function g-date-add-months
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <guint>;
  c-name: "g_date_add_months";
end;

define C-function g-date-subtract-months
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <guint>;
  c-name: "g_date_subtract_months";
end;

define C-function g-date-add-years
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <guint>;
  c-name: "g_date_add_years";
end;

define C-function g-date-subtract-years
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <guint>;
  c-name: "g_date_subtract_years";
end;

define C-function g-date-is-leap-year
  input parameter arg1 :: <GDateYear>;
  result res :: <gboolean>;
  c-name: "g_date_is_leap_year";
end;

define C-function g-date-get-days-in-month
  input parameter arg1 :: <GDateMonth>;
  input parameter arg2 :: <GDateYear>;
  result res :: <guint8>;
  c-name: "g_date_get_days_in_month";
end;

define C-function g-date-get-monday-weeks-in-year
  input parameter arg1 :: <GDateYear>;
  result res :: <guint8>;
  c-name: "g_date_get_monday_weeks_in_year";
end;

define C-function g-date-get-sunday-weeks-in-year
  input parameter arg1 :: <GDateYear>;
  result res :: <guint8>;
  c-name: "g_date_get_sunday_weeks_in_year";
end;

define C-function g-date-days-between
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GDate>;
  result res :: <gint>;
  c-name: "g_date_days_between";
end;

define C-function g-date-compare
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GDate>;
  result res :: <gint>;
  c-name: "g_date_compare";
end;

define C-subtype <tm> (<C-void*>) end;
define C-function g-date-to-struct-tm
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <tm>;
  c-name: "g_date_to_struct_tm";
end;

define C-function g-date-clamp
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GDate>;
  input parameter arg3 :: <GDate>;
  c-name: "g_date_clamp";
end;

define C-function g-date-order
  input parameter arg1 :: <GDate>;
  input parameter arg2 :: <GDate>;
  c-name: "g_date_order";
end;

define C-function g-date-strftime
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gsize>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GDate>;
  result res :: <gsize>;
  c-name: "g_date_strftime";
end;

define constant $G-DATE-BAD-JULIAN = 0;

define constant $G-DATE-BAD-DAY = 0;

define constant $G-DATE-BAD-YEAR = 0;

define constant g-date-weekday = g-date-get-weekday;

define constant g-date-month = g-date-get-month;

define constant g-date-year = g-date-get-year;

define constant g-date-day = g-date-get-day;

define constant g-date-julian = g-date-get-julian;

define constant g-date-day-of-year = g-date-get-day-of-year;

define constant g-date-monday-week-of-year = g-date-get-monday-week-of-year;

define constant g-date-sunday-week-of-year = g-date-get-sunday-week-of-year;

define constant g-date-days-in-month = g-date-get-days-in-month;

define constant g-date-monday-weeks-in-year = g-date-get-monday-weeks-in-year;

define constant g-date-sunday-weeks-in-year = g-date-get-sunday-weeks-in-year;

define constant <clock-t> = <C-signed-long>;

 /* Ignoring declaration for {instance of <variable-declaration>} "_daylight"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "_dstbias"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "_timezone"*/
define constant <char*<@2>> = <c-string-vector>;
 /* Ignoring declaration for {instance of <variable-declaration>} "_tzname"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "daylight"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "timezone"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "tzname"*/
define constant $CLOCKS-PER-SEC = 1000;

define constant $CLK-TCK = 1000;

define constant <anonymous-514> = <C-function-pointer>;
define constant <GCompletionFunc> = <anonymous-514>;

define constant <anonymous-515> = <C-function-pointer>;
define constant <GCompletionStrncmpFunc> = <anonymous-515>;

define C-subtype <_GCompletion> (<C-void*>) end;
define constant <GCompletion> = <_GCompletion>;

define C-function g-completion-new
  input parameter arg1 :: <GCompletionFunc>;
  result res :: <GCompletion>;
  c-name: "g_completion_new";
end;

define C-function g-completion-add-items
  input parameter arg1 :: <GCompletion>;
  input parameter arg2 :: <GList>;
  c-name: "g_completion_add_items";
end;

define C-function g-completion-remove-items
  input parameter arg1 :: <GCompletion>;
  input parameter arg2 :: <GList>;
  c-name: "g_completion_remove_items";
end;

define C-function g-completion-clear-items
  input parameter arg1 :: <GCompletion>;
  c-name: "g_completion_clear_items";
end;

define C-function g-completion-complete
  input parameter arg1 :: <GCompletion>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  result res :: <GList>;
  c-name: "g_completion_complete";
end;

define C-function g-completion-complete-utf8
  input parameter arg1 :: <GCompletion>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  result res :: <GList>;
  c-name: "g_completion_complete_utf8";
end;

define C-function g-completion-set-compare
  input parameter arg1 :: <GCompletion>;
  input parameter arg2 :: <GCompletionStrncmpFunc>;
  c-name: "g_completion_set_compare";
end;

define C-function g-completion-free
  input parameter arg1 :: <GCompletion>;
  c-name: "g_completion_free";
end;

define C-subtype <_GCache> (<C-void*>) end;
define constant <GCache> = <_GCache>;

define constant <anonymous-505> = <C-function-pointer>;
define constant <GCacheNewFunc> = <anonymous-505>;

define constant <anonymous-506> = <C-function-pointer>;
define constant <GCacheDupFunc> = <anonymous-506>;

define constant <anonymous-507> = <C-function-pointer>;
define constant <GCacheDestroyFunc> = <anonymous-507>;

define C-function g-cache-new
  input parameter arg1 :: <GCacheNewFunc>;
  input parameter arg2 :: <GCacheDestroyFunc>;
  input parameter arg3 :: <GCacheDupFunc>;
  input parameter arg4 :: <GCacheDestroyFunc>;
  input parameter arg5 :: <GHashFunc>;
  input parameter arg6 :: <GHashFunc>;
  input parameter arg7 :: <GEqualFunc>;
  result res :: <GCache>;
  c-name: "g_cache_new";
end;

define C-function g-cache-destroy
  input parameter arg1 :: <GCache>;
  c-name: "g_cache_destroy";
end;

define C-function g-cache-insert
  input parameter arg1 :: <GCache>;
  input parameter arg2 :: <gpointer>;
  result res :: <gpointer>;
  c-name: "g_cache_insert";
end;

define C-function g-cache-remove
  input parameter arg1 :: <GCache>;
  input parameter arg2 :: <gconstpointer>;
  c-name: "g_cache_remove";
end;

define C-function g-cache-key-foreach
  input parameter arg1 :: <GCache>;
  input parameter arg2 :: <GHFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_cache_key_foreach";
end;

define C-function g-cache-value-foreach
  input parameter arg1 :: <GCache>;
  input parameter arg2 :: <GHFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_cache_value_foreach";
end;

define constant <GBookmarkFileError> = <C-int>;
define constant $G-BOOKMARK-FILE-ERROR-INVALID-URI = 0;
define constant $G-BOOKMARK-FILE-ERROR-INVALID-VALUE = 1;
define constant $G-BOOKMARK-FILE-ERROR-APP-NOT-REGISTERED = 2;
define constant $G-BOOKMARK-FILE-ERROR-URI-NOT-FOUND = 3;
define constant $G-BOOKMARK-FILE-ERROR-READ = 4;
define constant $G-BOOKMARK-FILE-ERROR-UNKNOWN-ENCODING = 5;
define constant $G-BOOKMARK-FILE-ERROR-WRITE = 6;
define constant $G-BOOKMARK-FILE-ERROR-FILE-NOT-FOUND = 7;

define C-function g-bookmark-file-error-quark
  result res :: <GQuark>;
  c-name: "g_bookmark_file_error_quark";
end;

define C-subtype <_GBookmarkFile> (<C-void*>) end;
define constant <GBookmarkFile> = <_GBookmarkFile>;

define C-function g-bookmark-file-new
  result res :: <GBookmarkFile>;
  c-name: "g_bookmark_file_new";
end;

define C-function g-bookmark-file-free
  input parameter arg1 :: <GBookmarkFile>;
  c-name: "g_bookmark_file_free";
end;

define C-function g-bookmark-file-load-from-file
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_load_from_file";
end;

define C-function g-bookmark-file-load-from-data
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_load_from_data";
end;

define C-function g-bookmark-file-load-from-data-dirs
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_load_from_data_dirs";
end;

define C-function g-bookmark-file-to-data
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gsize*>;
  input parameter arg3 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_bookmark_file_to_data";
end;

define C-function g-bookmark-file-to-file
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_to_file";
end;

define C-function g-bookmark-file-set-title
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  c-name: "g_bookmark_file_set_title";
end;

define C-function g-bookmark-file-get-title
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_bookmark_file_get_title";
end;

define C-function g-bookmark-file-set-description
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  c-name: "g_bookmark_file_set_description";
end;

define C-function g-bookmark-file-get-description
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_bookmark_file_get_description";
end;

define C-function g-bookmark-file-set-mime-type
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  c-name: "g_bookmark_file_set_mime_type";
end;

define C-function g-bookmark-file-get-mime-type
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gchar*>;
  c-name: "g_bookmark_file_get_mime_type";
end;

define C-function g-bookmark-file-set-groups
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <gsize>;
  c-name: "g_bookmark_file_set_groups";
end;

define C-function g-bookmark-file-add-group
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  c-name: "g_bookmark_file_add_group";
end;

define C-function g-bookmark-file-has-group
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_has_group";
end;

define C-function g-bookmark-file-get-groups
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <GError*>;
  result res :: <gchar**>;
  c-name: "g_bookmark_file_get_groups";
end;

define C-function g-bookmark-file-add-application
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  c-name: "g_bookmark_file_add_application";
end;

define C-function g-bookmark-file-has-application
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_has_application";
end;

define C-function g-bookmark-file-get-applications
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <GError*>;
  result res :: <gchar**>;
  c-name: "g_bookmark_file_get_applications";
end;

define C-function g-bookmark-file-set-app-info
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <time-t>;
  input parameter arg7 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_set_app_info";
end;

define C-pointer-type <time-t*> => <time-t>;
define C-function g-bookmark-file-get-app-info
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar**>;
  input parameter arg5 :: <guint*>;
  input parameter arg6 :: <time-t*>;
  input parameter arg7 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_get_app_info";
end;

define C-function g-bookmark-file-set-is-private
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gboolean>;
  c-name: "g_bookmark_file_set_is_private";
end;

define C-function g-bookmark-file-get-is-private
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_get_is_private";
end;

define C-function g-bookmark-file-set-icon
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  c-name: "g_bookmark_file_set_icon";
end;

define C-function g-bookmark-file-get-icon
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <gchar**>;
  input parameter arg5 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_get_icon";
end;

define C-function g-bookmark-file-set-added
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <time-t>;
  c-name: "g_bookmark_file_set_added";
end;

define C-function g-bookmark-file-get-added
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <time-t>;
  c-name: "g_bookmark_file_get_added";
end;

define C-function g-bookmark-file-set-modified
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <time-t>;
  c-name: "g_bookmark_file_set_modified";
end;

define C-function g-bookmark-file-get-modified
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <time-t>;
  c-name: "g_bookmark_file_get_modified";
end;

define C-function g-bookmark-file-set-visited
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <time-t>;
  c-name: "g_bookmark_file_set_visited";
end;

define C-function g-bookmark-file-get-visited
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <time-t>;
  c-name: "g_bookmark_file_get_visited";
end;

define C-function g-bookmark-file-has-item
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_has_item";
end;

define C-function g-bookmark-file-get-size
  input parameter arg1 :: <GBookmarkFile>;
  result res :: <gint>;
  c-name: "g_bookmark_file_get_size";
end;

define C-function g-bookmark-file-get-uris
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gsize*>;
  result res :: <gchar**>;
  c-name: "g_bookmark_file_get_uris";
end;

define C-function g-bookmark-file-remove-group
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_remove_group";
end;

define C-function g-bookmark-file-remove-application
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_remove_application";
end;

define C-function g-bookmark-file-remove-item
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_remove_item";
end;

define C-function g-bookmark-file-move-item
  input parameter arg1 :: <GBookmarkFile>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "g_bookmark_file_move_item";
end;

define C-function g-base64-encode-step
  input parameter arg1 :: <guchar*>;
  input parameter arg2 :: <gsize>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  result res :: <gsize>;
  c-name: "g_base64_encode_step";
end;

define C-function g-base64-encode-close
  input parameter arg1 :: <gboolean>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  result res :: <gsize>;
  c-name: "g_base64_encode_close";
end;

define C-function g-base64-encode
  input parameter arg1 :: <guchar*>;
  input parameter arg2 :: <gsize>;
  result res :: <gchar*>;
  c-name: "g_base64_encode";
end;

define C-function g-base64-decode-step
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gsize>;
  input parameter arg3 :: <guchar*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <guint*>;
  result res :: <gsize>;
  c-name: "g_base64_decode_step";
end;

define C-function g-base64-decode
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gsize*>;
  result res :: <guchar*>;
  c-name: "g_base64_decode";
end;

define C-function g-on-error-query
  input parameter arg1 :: <gchar*>;
  c-name: "g_on_error_query";
end;

define C-function g-on-error-stack-trace
  input parameter arg1 :: <gchar*>;
  c-name: "g_on_error_stack_trace";
end;

define C-subtype <_GAsyncQueue> (<C-void*>) end;
define constant <GAsyncQueue> = <_GAsyncQueue>;

define C-function g-async-queue-new
  result res :: <GAsyncQueue>;
  c-name: "g_async_queue_new";
end;

define C-function g-async-queue-lock
  input parameter arg1 :: <GAsyncQueue>;
  c-name: "g_async_queue_lock";
end;

define C-function g-async-queue-unlock
  input parameter arg1 :: <GAsyncQueue>;
  c-name: "g_async_queue_unlock";
end;

define C-function g-async-queue-ref
  input parameter arg1 :: <GAsyncQueue>;
  result res :: <GAsyncQueue>;
  c-name: "g_async_queue_ref";
end;

define C-function g-async-queue-unref
  input parameter arg1 :: <GAsyncQueue>;
  c-name: "g_async_queue_unref";
end;

define C-function g-async-queue-ref-unlocked
  input parameter arg1 :: <GAsyncQueue>;
  c-name: "g_async_queue_ref_unlocked";
end;

define C-function g-async-queue-unref-and-unlock
  input parameter arg1 :: <GAsyncQueue>;
  c-name: "g_async_queue_unref_and_unlock";
end;

define C-function g-async-queue-push
  input parameter arg1 :: <GAsyncQueue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_async_queue_push";
end;

define C-function g-async-queue-push-unlocked
  input parameter arg1 :: <GAsyncQueue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_async_queue_push_unlocked";
end;

define C-function g-async-queue-push-sorted
  input parameter arg1 :: <GAsyncQueue>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GCompareDataFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_async_queue_push_sorted";
end;

define C-function g-async-queue-push-sorted-unlocked
  input parameter arg1 :: <GAsyncQueue>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GCompareDataFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "g_async_queue_push_sorted_unlocked";
end;

define C-function g-async-queue-pop
  input parameter arg1 :: <GAsyncQueue>;
  result res :: <gpointer>;
  c-name: "g_async_queue_pop";
end;

define C-function g-async-queue-pop-unlocked
  input parameter arg1 :: <GAsyncQueue>;
  result res :: <gpointer>;
  c-name: "g_async_queue_pop_unlocked";
end;

define C-function g-async-queue-try-pop
  input parameter arg1 :: <GAsyncQueue>;
  result res :: <gpointer>;
  c-name: "g_async_queue_try_pop";
end;

define C-function g-async-queue-try-pop-unlocked
  input parameter arg1 :: <GAsyncQueue>;
  result res :: <gpointer>;
  c-name: "g_async_queue_try_pop_unlocked";
end;

define C-function g-async-queue-timed-pop
  input parameter arg1 :: <GAsyncQueue>;
  input parameter arg2 :: <GTimeVal>;
  result res :: <gpointer>;
  c-name: "g_async_queue_timed_pop";
end;

define C-function g-async-queue-timed-pop-unlocked
  input parameter arg1 :: <GAsyncQueue>;
  input parameter arg2 :: <GTimeVal>;
  result res :: <gpointer>;
  c-name: "g_async_queue_timed_pop_unlocked";
end;

define C-function g-async-queue-length
  input parameter arg1 :: <GAsyncQueue>;
  result res :: <gint>;
  c-name: "g_async_queue_length";
end;

define C-function g-async-queue-length-unlocked
  input parameter arg1 :: <GAsyncQueue>;
  result res :: <gint>;
  c-name: "g_async_queue_length_unlocked";
end;

define C-function g-async-queue-sort
  input parameter arg1 :: <GAsyncQueue>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_async_queue_sort";
end;

define C-function g-async-queue-sort-unlocked
  input parameter arg1 :: <GAsyncQueue>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_async_queue_sort_unlocked";
end;

define C-pointer-type <guint8*> => <guint8>;
define C-subtype <_GByteArray> (<C-void*>) end;
define constant <GByteArray> = <_GByteArray>;

define C-function g-array-new
  input parameter arg1 :: <gboolean>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_new";
end;

define C-function g-array-sized-new
  input parameter arg1 :: <gboolean>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_sized_new";
end;

define C-function g-array-free
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <gboolean>;
  result res :: <gchar*>;
  c-name: "g_array_free";
end;

define C-function g-array-append-vals
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_append_vals";
end;

define C-function g-array-prepend-vals
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <gconstpointer>;
  input parameter arg3 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_prepend_vals";
end;

define C-function g-array-insert-vals
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gconstpointer>;
  input parameter arg4 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_insert_vals";
end;

define C-function g-array-set-size
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_set_size";
end;

define C-function g-array-remove-index
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_remove_index";
end;

define C-function g-array-remove-index-fast
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_remove_index_fast";
end;

define C-function g-array-remove-range
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  result res :: <GArray>;
  c-name: "g_array_remove_range";
end;

define C-function g-array-sort
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <GCompareFunc>;
  c-name: "g_array_sort";
end;

define C-function g-array-sort-with-data
  input parameter arg1 :: <GArray>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_array_sort_with_data";
end;

define C-function g-ptr-array-new
  result res :: <GPtrArray>;
  c-name: "g_ptr_array_new";
end;

define C-function g-ptr-array-sized-new
  input parameter arg1 :: <guint>;
  result res :: <GPtrArray>;
  c-name: "g_ptr_array_sized_new";
end;

define C-function g-ptr-array-free
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <gboolean>;
  result res :: <gpointer*>;
  c-name: "g_ptr_array_free";
end;

define C-function g-ptr-array-set-size
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <gint>;
  c-name: "g_ptr_array_set_size";
end;

define C-function g-ptr-array-remove-index
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <guint>;
  result res :: <gpointer>;
  c-name: "g_ptr_array_remove_index";
end;

define C-function g-ptr-array-remove-index-fast
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <guint>;
  result res :: <gpointer>;
  c-name: "g_ptr_array_remove_index_fast";
end;

define C-function g-ptr-array-remove
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "g_ptr_array_remove";
end;

define C-function g-ptr-array-remove-fast
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "g_ptr_array_remove_fast";
end;

define C-function g-ptr-array-remove-range
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  c-name: "g_ptr_array_remove_range";
end;

define C-function g-ptr-array-add
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_ptr_array_add";
end;

define C-function g-ptr-array-sort
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <GCompareFunc>;
  c-name: "g_ptr_array_sort";
end;

define C-function g-ptr-array-sort-with-data
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_ptr_array_sort_with_data";
end;

define C-function g-ptr-array-foreach
  input parameter arg1 :: <GPtrArray>;
  input parameter arg2 :: <GFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_ptr_array_foreach";
end;

define C-function g-byte-array-new
  result res :: <GByteArray>;
  c-name: "g_byte_array_new";
end;

define C-function g-byte-array-sized-new
  input parameter arg1 :: <guint>;
  result res :: <GByteArray>;
  c-name: "g_byte_array_sized_new";
end;

define C-function g-byte-array-free
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <gboolean>;
  result res :: <guint8*>;
  c-name: "g_byte_array_free";
end;

define C-function g-byte-array-append
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <guint8*>;
  input parameter arg3 :: <guint>;
  result res :: <GByteArray>;
  c-name: "g_byte_array_append";
end;

define C-function g-byte-array-prepend
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <guint8*>;
  input parameter arg3 :: <guint>;
  result res :: <GByteArray>;
  c-name: "g_byte_array_prepend";
end;

define C-function g-byte-array-set-size
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <guint>;
  result res :: <GByteArray>;
  c-name: "g_byte_array_set_size";
end;

define C-function g-byte-array-remove-index
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <guint>;
  result res :: <GByteArray>;
  c-name: "g_byte_array_remove_index";
end;

define C-function g-byte-array-remove-index-fast
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <guint>;
  result res :: <GByteArray>;
  c-name: "g_byte_array_remove_index_fast";
end;

define C-function g-byte-array-remove-range
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  result res :: <GByteArray>;
  c-name: "g_byte_array_remove_range";
end;

define C-function g-byte-array-sort
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <GCompareFunc>;
  c-name: "g_byte_array_sort";
end;

define C-function g-byte-array-sort-with-data
  input parameter arg1 :: <GByteArray>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_byte_array_sort_with_data";
end;

define C-pointer-type <int*> => <C-signed-int>;
define C-subtype <_heapinfo> (<C-void*>) end;
define constant <_HEAPINFO> = <_heapinfo>;

 /* Ignoring declaration for {instance of <variable-declaration>} "_amblksiz"*/
//define constant $_HEAP-MAXREQ = #ex00000000FFFFFFE0;

define constant $_HEAPEMPTY = -1;

define constant $_HEAPOK = -2;

define constant $_HEAPBADBEGIN = -3;

define constant $_HEAPBADNODE = -4;

define constant $_HEAPEND = -5;

define constant $_HEAPBADPTR = -6;

define constant $_FREEENTRY = 0;

define constant $_USEDENTRY = 1;

define C-subtype <_GValueArray> (<C-void*>) end;
define constant <GValueArray> = <_GValueArray>;

define C-function g-value-array-get-nth
  input parameter arg1 :: <GValueArray>;
  input parameter arg2 :: <guint>;
  result res :: <GValue>;
  c-name: "g_value_array_get_nth";
end;

define C-function g-value-array-new
  input parameter arg1 :: <guint>;
  result res :: <GValueArray>;
  c-name: "g_value_array_new";
end;

define C-function g-value-array-free
  input parameter arg1 :: <GValueArray>;
  c-name: "g_value_array_free";
end;

define C-function g-value-array-copy
  input parameter arg1 :: <GValueArray>;
  result res :: <GValueArray>;
  c-name: "g_value_array_copy";
end;

define C-function g-value-array-prepend
  input parameter arg1 :: <GValueArray>;
  input parameter arg2 :: <GValue>;
  result res :: <GValueArray>;
  c-name: "g_value_array_prepend";
end;

define C-function g-value-array-append
  input parameter arg1 :: <GValueArray>;
  input parameter arg2 :: <GValue>;
  result res :: <GValueArray>;
  c-name: "g_value_array_append";
end;

define C-function g-value-array-insert
  input parameter arg1 :: <GValueArray>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GValue>;
  result res :: <GValueArray>;
  c-name: "g_value_array_insert";
end;

define C-function g-value-array-remove
  input parameter arg1 :: <GValueArray>;
  input parameter arg2 :: <guint>;
  result res :: <GValueArray>;
  c-name: "g_value_array_remove";
end;

define C-function g-value-array-sort
  input parameter arg1 :: <GValueArray>;
  input parameter arg2 :: <GCompareFunc>;
  result res :: <GValueArray>;
  c-name: "g_value_array_sort";
end;

define C-function g-value-array-sort-with-data
  input parameter arg1 :: <GValueArray>;
  input parameter arg2 :: <GCompareDataFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <GValueArray>;
  c-name: "g_value_array_sort_with_data";
end;

define constant <anonymous-1755> = <C-function-pointer>;
define constant <GTypePluginUse> = <anonymous-1755>;

define constant <anonymous-1756> = <C-function-pointer>;
define constant <GTypePluginUnuse> = <anonymous-1756>;

define constant <anonymous-1757> = <C-function-pointer>;
define constant <GTypePluginCompleteTypeInfo> = <anonymous-1757>;

define constant <anonymous-1758> = <C-function-pointer>;
define constant <GTypePluginCompleteInterfaceInfo> = <anonymous-1758>;

define C-subtype <_GTypePluginClass> (<C-void*>) end;
define constant <GTypePluginClass> = <_GTypePluginClass>;

define C-function g-type-plugin-get-type
  result res :: <GType>;
  c-name: "g_type_plugin_get_type";
end;

define C-function g-type-plugin-use
  input parameter arg1 :: <GTypePlugin>;
  c-name: "g_type_plugin_use";
end;

define C-function g-type-plugin-unuse
  input parameter arg1 :: <GTypePlugin>;
  c-name: "g_type_plugin_unuse";
end;

define C-function g-type-plugin-complete-type-info
  input parameter arg1 :: <GTypePlugin>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GTypeInfo>;
  input parameter arg4 :: <GTypeValueTable>;
  c-name: "g_type_plugin_complete_type_info";
end;

define C-function g-type-plugin-complete-interface-info
  input parameter arg1 :: <GTypePlugin>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GType>;
  input parameter arg4 :: <GInterfaceInfo>;
  c-name: "g_type_plugin_complete_interface_info";
end;

define C-subtype <_GTypeModule> (<_GObject>, <_GTypePlugin>) end;
define constant <GTypeModule> = <_GTypeModule>;

define constant <anonymous-1741> = <C-function-pointer>;
define constant <anonymous-1742> = <C-function-pointer>;
define constant <anonymous-1743> = <C-function-pointer>;
define constant <anonymous-1744> = <C-function-pointer>;
define constant <anonymous-1745> = <C-function-pointer>;
define constant <anonymous-1746> = <C-function-pointer>;
define C-subtype <_GTypeModuleClass> (<C-void*>) end;
define constant <GTypeModuleClass> = <_GTypeModuleClass>;

define C-function g-type-module-get-type
  result res :: <GType>;
  c-name: "g_type_module_get_type";
end;

define C-function g-type-module-use
  input parameter arg1 :: <GTypeModule>;
  result res :: <gboolean>;
  c-name: "g_type_module_use";
end;

define C-function g-type-module-unuse
  input parameter arg1 :: <GTypeModule>;
  c-name: "g_type_module_unuse";
end;

define C-function g-type-module-set-name
  input parameter arg1 :: <GTypeModule>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_type_module_set_name";
end;

define C-function g-type-module-register-type
  input parameter arg1 :: <GTypeModule>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GTypeInfo>;
  input parameter arg5 :: <GTypeFlags>;
  result res :: <GType>;
  c-name: "g_type_module_register_type";
end;

define C-function g-type-module-add-interface
  input parameter arg1 :: <GTypeModule>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GType>;
  input parameter arg4 :: <GInterfaceInfo>;
  c-name: "g_type_module_add_interface";
end;

define C-subtype <_GEnumValue> (<C-void*>) end;
define constant <GEnumValue> = <_GEnumValue>;

define C-function g-type-module-register-enum
  input parameter arg1 :: <GTypeModule>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GEnumValue>;
  result res :: <GType>;
  c-name: "g_type_module_register_enum";
end;

define C-subtype <_GFlagsValue> (<C-void*>) end;
define constant <GFlagsValue> = <_GFlagsValue>;

define C-function g-type-module-register-flags
  input parameter arg1 :: <GTypeModule>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GFlagsValue>;
  result res :: <GType>;
  c-name: "g_type_module_register_flags";
end;

define C-subtype <_GEnumClass> (<C-void*>) end;
define constant <GEnumClass> = <_GEnumClass>;

define C-subtype <_GFlagsClass> (<C-void*>) end;
define constant <GFlagsClass> = <_GFlagsClass>;

define C-function g-enum-get-value
  input parameter arg1 :: <GEnumClass>;
  input parameter arg2 :: <gint>;
  result res :: <GEnumValue>;
  c-name: "g_enum_get_value";
end;

define C-function g-enum-get-value-by-name
  input parameter arg1 :: <GEnumClass>;
  input parameter arg2 :: <gchar*>;
  result res :: <GEnumValue>;
  c-name: "g_enum_get_value_by_name";
end;

define C-function g-enum-get-value-by-nick
  input parameter arg1 :: <GEnumClass>;
  input parameter arg2 :: <gchar*>;
  result res :: <GEnumValue>;
  c-name: "g_enum_get_value_by_nick";
end;

define C-function g-flags-get-first-value
  input parameter arg1 :: <GFlagsClass>;
  input parameter arg2 :: <guint>;
  result res :: <GFlagsValue>;
  c-name: "g_flags_get_first_value";
end;

define C-function g-flags-get-value-by-name
  input parameter arg1 :: <GFlagsClass>;
  input parameter arg2 :: <gchar*>;
  result res :: <GFlagsValue>;
  c-name: "g_flags_get_value_by_name";
end;

define C-function g-flags-get-value-by-nick
  input parameter arg1 :: <GFlagsClass>;
  input parameter arg2 :: <gchar*>;
  result res :: <GFlagsValue>;
  c-name: "g_flags_get_value_by_nick";
end;

define C-function g-value-set-enum
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gint>;
  c-name: "g_value_set_enum";
end;

define C-function g-value-get-enum
  input parameter arg1 :: <GValue>;
  result res :: <gint>;
  c-name: "g_value_get_enum";
end;

define C-function g-value-set-flags
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <guint>;
  c-name: "g_value_set_flags";
end;

define C-function g-value-get-flags
  input parameter arg1 :: <GValue>;
  result res :: <guint>;
  c-name: "g_value_get_flags";
end;

define C-function g-enum-register-static
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GEnumValue>;
  result res :: <GType>;
  c-name: "g_enum_register_static";
end;

define C-function g-flags-register-static
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GFlagsValue>;
  result res :: <GType>;
  c-name: "g_flags_register_static";
end;

define C-function g-enum-complete-type-info
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GTypeInfo>;
  input parameter arg3 :: <GEnumValue>;
  c-name: "g_enum_complete_type_info";
end;

define C-function g-flags-complete-type-info
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <GTypeInfo>;
  input parameter arg3 :: <GFlagsValue>;
  c-name: "g_flags_complete_type_info";
end;

define constant <anonymous-1649> = <C-function-pointer>;
define constant <GObjectGetPropertyFunc> = <anonymous-1649>;

define constant <anonymous-1650> = <C-function-pointer>;
define constant <GObjectSetPropertyFunc> = <anonymous-1650>;

define constant <anonymous-1651> = <C-function-pointer>;
define constant <GObjectFinalizeFunc> = <anonymous-1651>;

define constant <anonymous-1652> = <C-function-pointer>;
define constant <GWeakNotify> = <anonymous-1652>;

define C-function g-initially-unowned-get-type
  result res :: <GType>;
  c-name: "g_initially_unowned_get_type";
end;

define C-function g-object-class-install-property
  input parameter arg1 :: <GObjectClass>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GParamSpec>;
  c-name: "g_object_class_install_property";
end;

define C-function g-object-class-find-property
  input parameter arg1 :: <GObjectClass>;
  input parameter arg2 :: <gchar*>;
  result res :: <GParamSpec>;
  c-name: "g_object_class_find_property";
end;

define C-function g-object-class-list-properties
  input parameter arg1 :: <GObjectClass>;
  input parameter arg2 :: <guint*>;
  result res :: <GParamSpec*>;
  c-name: "g_object_class_list_properties";
end;

define C-function g-object-class-override-property
  input parameter arg1 :: <GObjectClass>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gchar*>;
  c-name: "g_object_class_override_property";
end;

define C-function g-object-interface-install-property
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GParamSpec>;
  c-name: "g_object_interface_install_property";
end;

define C-function g-object-interface-find-property
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gchar*>;
  result res :: <GParamSpec>;
  c-name: "g_object_interface_find_property";
end;

define C-function g-object-interface-list-properties
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <guint*>;
  result res :: <GParamSpec*>;
  c-name: "g_object_interface_list_properties";
end;

define C-function g-object-new
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  result res :: <gpointer>;
  c-name: "g_object_new";
end;

define C-subtype <_GParameter> (<C-void*>) end;
define constant <GParameter> = <_GParameter>;

define C-function g-object-newv
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GParameter>;
  result res :: <gpointer>;
  c-name: "g_object_newv";
end;

define C-function g-object-new-valist
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <va-list>;
  result res :: <GObject>;
  c-name: "g_object_new_valist";
end;

define C-function g-object-set
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_object_set";
end;

define C-function g-object-get
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_object_get";
end;

define C-function g-object-connect
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gchar*>;
  result res :: <gpointer>;
  c-name: "g_object_connect";
end;

define C-function g-object-disconnect
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_object_disconnect";
end;

define C-function g-object-set-valist
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <va-list>;
  c-name: "g_object_set_valist";
end;

define C-function g-object-get-valist
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <va-list>;
  c-name: "g_object_get_valist";
end;

define C-function g-object-set-property
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GValue>;
  c-name: "g_object_set_property";
end;

define C-function g-object-get-property
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GValue>;
  c-name: "g_object_get_property";
end;

define C-function g-object-freeze-notify
  input parameter arg1 :: <GObject>;
  c-name: "g_object_freeze_notify";
end;

define C-function g-object-notify
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_object_notify";
end;

define C-function g-object-thaw-notify
  input parameter arg1 :: <GObject>;
  c-name: "g_object_thaw_notify";
end;

define C-function g-object-is-floating
  input parameter arg1 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "g_object_is_floating";
end;

define C-function g-object-ref-sink
  input parameter arg1 :: <gpointer>;
  result res :: <gpointer>;
  c-name: "g_object_ref_sink";
end;

define C-function g-object-ref
  input parameter arg1 :: <gpointer>;
  result res :: <gpointer>;
  c-name: "g_object_ref";
end;

define C-function g-object-unref
  input parameter arg1 :: <gpointer>;
  c-name: "g_object_unref";
end;

define C-function g-object-weak-ref
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GWeakNotify>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_object_weak_ref";
end;

define C-function g-object-weak-unref
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GWeakNotify>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_object_weak_unref";
end;

define C-function g-object-add-weak-pointer
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gpointer*>;
  c-name: "g_object_add_weak_pointer";
end;

define C-function g-object-remove-weak-pointer
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gpointer*>;
  c-name: "g_object_remove_weak_pointer";
end;

define constant <anonymous-1690> = <C-function-pointer>;
define constant <GToggleNotify> = <anonymous-1690>;

define C-function g-object-add-toggle-ref
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GToggleNotify>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_object_add_toggle_ref";
end;

define C-function g-object-remove-toggle-ref
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GToggleNotify>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_object_remove_toggle_ref";
end;

define C-function g-object-get-qdata
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_object_get_qdata";
end;

define C-function g-object-set-qdata
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_object_set_qdata";
end;

define C-function g-object-set-qdata-full
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "g_object_set_qdata_full";
end;

define C-function g-object-steal-qdata
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_object_steal_qdata";
end;

define C-function g-object-get-data
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  result res :: <gpointer>;
  c-name: "g_object_get_data";
end;

define C-function g-object-set-data
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_object_set_data";
end;

define C-function g-object-set-data-full
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "g_object_set_data_full";
end;

define C-function g-object-steal-data
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  result res :: <gpointer>;
  c-name: "g_object_steal_data";
end;

define C-function g-object-watch-closure
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GClosure>;
  c-name: "g_object_watch_closure";
end;

define constant <anonymous-1560> = <C-function-pointer>;
define constant <GCallback> = <anonymous-1560>;

define C-function g-cclosure-new-object
  input parameter arg1 :: <GCallback>;
  input parameter arg2 :: <GObject>;
  result res :: <GClosure>;
  c-name: "g_cclosure_new_object";
end;

define C-function g-cclosure-new-object-swap
  input parameter arg1 :: <GCallback>;
  input parameter arg2 :: <GObject>;
  result res :: <GClosure>;
  c-name: "g_cclosure_new_object_swap";
end;

define C-function g-closure-new-object
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GObject>;
  result res :: <GClosure>;
  c-name: "g_closure_new_object";
end;

define C-function g-value-set-object
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_value_set_object";
end;

define C-function g-value-get-object
  input parameter arg1 :: <GValue>;
  result res :: <gpointer>;
  c-name: "g_value_get_object";
end;

define C-function g-value-dup-object
  input parameter arg1 :: <GValue>;
  result res :: <GObject>;
  c-name: "g_value_dup_object";
end;

define constant <GConnectFlags> = <C-int>;
define constant $G-CONNECT-AFTER = 1;
define constant $G-CONNECT-SWAPPED = 2;

define C-function g-signal-connect-object
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GCallback>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GConnectFlags>;
  result res :: <gulong>;
  c-name: "g_signal_connect_object";
end;

define C-function g-object-force-floating
  input parameter arg1 :: <GObject>;
  c-name: "g_object_force_floating";
end;

define C-function g-object-run-dispose
  input parameter arg1 :: <GObject>;
  c-name: "g_object_run_dispose";
end;

define C-function g-value-take-object
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_value_take_object";
end;

define C-function g-value-set-object-take-ownership
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_value_set_object_take_ownership";
end;

define C-function g-object-compat-control
  input parameter arg1 :: <gsize>;
  input parameter arg2 :: <gpointer>;
  result res :: <gsize>;
  c-name: "g_object_compat_control";
end;

define constant <GSignalFlags> = <C-int>;
define constant $G-SIGNAL-RUN-FIRST = 1;
define constant $G-SIGNAL-RUN-LAST = 2;
define constant $G-SIGNAL-RUN-CLEANUP = 4;
define constant $G-SIGNAL-NO-RECURSE = 8;
define constant $G-SIGNAL-DETAILED = 16;
define constant $G-SIGNAL-ACTION = 32;
define constant $G-SIGNAL-NO-HOOKS = 64;

define C-subtype <_GSignalQuery> (<C-void*>) end;
define constant <GSignalQuery> = <_GSignalQuery>;

define C-subtype <_GSignalInvocationHint> (<C-void*>) end;
define constant <GSignalInvocationHint> = <_GSignalInvocationHint>;

define constant <anonymous-1562> = <C-function-pointer>;
define constant <GClosureMarshal> = <anonymous-1562>;

define constant <GSignalCMarshaller> = <GClosureMarshal>;

define constant <anonymous-1610> = <C-function-pointer>;
define constant <GSignalEmissionHook> = <anonymous-1610>;

define constant <anonymous-1611> = <C-function-pointer>;
define constant <GSignalAccumulator> = <anonymous-1611>;

define constant <GSignalMatchType> = <C-int>;
define constant $G-SIGNAL-MATCH-ID = 1;
define constant $G-SIGNAL-MATCH-DETAIL = 2;
define constant $G-SIGNAL-MATCH-CLOSURE = 4;
define constant $G-SIGNAL-MATCH-FUNC = 8;
define constant $G-SIGNAL-MATCH-DATA = 16;
define constant $G-SIGNAL-MATCH-UNBLOCKED = 32;

define C-function g-signal-newv
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GSignalFlags>;
  input parameter arg4 :: <GClosure>;
  input parameter arg5 :: <GSignalAccumulator>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <GSignalCMarshaller>;
  input parameter arg8 :: <GType>;
  input parameter arg9 :: <guint>;
  input parameter arg10 :: <GType*>;
  result res :: <guint>;
  c-name: "g_signal_newv";
end;

define C-function g-signal-new-valist
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GSignalFlags>;
  input parameter arg4 :: <GClosure>;
  input parameter arg5 :: <GSignalAccumulator>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <GSignalCMarshaller>;
  input parameter arg8 :: <GType>;
  input parameter arg9 :: <guint>;
  input parameter arg10 :: <va-list>;
  result res :: <guint>;
  c-name: "g_signal_new_valist";
end;

define C-function g-signal-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GSignalFlags>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <GSignalAccumulator>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <GSignalCMarshaller>;
  input parameter arg8 :: <GType>;
  input parameter arg9 :: <guint>;
  result res :: <guint>;
  c-name: "g_signal_new";
end;

define C-function g-signal-emitv
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GQuark>;
  input parameter arg4 :: <GValue>;
  c-name: "g_signal_emitv";
end;

define C-function g-signal-emit-valist
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GQuark>;
  input parameter arg4 :: <va-list>;
  c-name: "g_signal_emit_valist";
end;

define C-function g-signal-emit
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GQuark>;
  c-name: "g_signal_emit";
end;

define C-function g-signal-emit-by-name
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_signal_emit_by_name";
end;

define C-function g-signal-lookup
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GType>;
  result res :: <guint>;
  c-name: "g_signal_lookup";
end;

define C-function g-signal-name
  input parameter arg1 :: <guint>;
  result res :: <gchar*>;
  c-name: "g_signal_name";
end;

define C-function g-signal-query
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GSignalQuery>;
  c-name: "g_signal_query";
end;

define C-function g-signal-list-ids
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <guint*>;
  result res :: <guint*>;
  c-name: "g_signal_list_ids";
end;

define C-pointer-type <GQuark*> => <GQuark>;
define C-function g-signal-parse-name
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <guint*>;
  input parameter arg4 :: <GQuark*>;
  input parameter arg5 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "g_signal_parse_name";
end;

define C-function g-signal-get-invocation-hint
  input parameter arg1 :: <gpointer>;
  result res :: <GSignalInvocationHint>;
  c-name: "g_signal_get_invocation_hint";
end;

define C-function g-signal-stop-emission
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GQuark>;
  c-name: "g_signal_stop_emission";
end;

define C-function g-signal-stop-emission-by-name
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gchar*>;
  c-name: "g_signal_stop_emission_by_name";
end;

define C-function g-signal-add-emission-hook
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <GSignalEmissionHook>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  result res :: <gulong>;
  c-name: "g_signal_add_emission_hook";
end;

define C-function g-signal-remove-emission-hook
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <gulong>;
  c-name: "g_signal_remove_emission_hook";
end;

define C-function g-signal-has-handler-pending
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GQuark>;
  input parameter arg4 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "g_signal_has_handler_pending";
end;

define C-function g-signal-connect-closure-by-id
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GQuark>;
  input parameter arg4 :: <GClosure>;
  input parameter arg5 :: <gboolean>;
  result res :: <gulong>;
  c-name: "g_signal_connect_closure_by_id";
end;

define C-function g-signal-connect-closure
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GClosure>;
  input parameter arg4 :: <gboolean>;
  result res :: <gulong>;
  c-name: "g_signal_connect_closure";
end;

define C-function g-signal-connect-data
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GCallback>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GClosureNotify>;
  input parameter arg6 :: <GConnectFlags>;
  result res :: <gulong>;
  c-name: "g_signal_connect_data";
end;

define C-function g-signal-handler-block
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gulong>;
  c-name: "g_signal_handler_block";
end;

define C-function g-signal-handler-unblock
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gulong>;
  c-name: "g_signal_handler_unblock";
end;

define C-function g-signal-handler-disconnect
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gulong>;
  c-name: "g_signal_handler_disconnect";
end;

define C-function g-signal-handler-is-connected
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <gulong>;
  result res :: <gboolean>;
  c-name: "g_signal_handler_is_connected";
end;

define C-function g-signal-handler-find
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GSignalMatchType>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GQuark>;
  input parameter arg5 :: <GClosure>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <gpointer>;
  result res :: <gulong>;
  c-name: "g_signal_handler_find";
end;

define C-function g-signal-handlers-block-matched
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GSignalMatchType>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GQuark>;
  input parameter arg5 :: <GClosure>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_signal_handlers_block_matched";
end;

define C-function g-signal-handlers-unblock-matched
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GSignalMatchType>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GQuark>;
  input parameter arg5 :: <GClosure>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_signal_handlers_unblock_matched";
end;

define C-function g-signal-handlers-disconnect-matched
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GSignalMatchType>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GQuark>;
  input parameter arg5 :: <GClosure>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <gpointer>;
  result res :: <guint>;
  c-name: "g_signal_handlers_disconnect_matched";
end;

define C-function g-signal-override-class-closure
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GClosure>;
  c-name: "g_signal_override_class_closure";
end;

define C-function g-signal-chain-from-overridden
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GValue>;
  c-name: "g_signal_chain_from_overridden";
end;

define C-function g-signal-accumulator-true-handled
  input parameter arg1 :: <GSignalInvocationHint>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <GValue>;
  input parameter arg4 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "g_signal_accumulator_true_handled";
end;

define C-function g-signal-handlers-destroy
  input parameter arg1 :: <gpointer>;
  c-name: "g_signal_handlers_destroy";
end;

define constant $G-SIGNAL-FLAGS-MASK = 127;

define constant $G-SIGNAL-MATCH-MASK = 63;

define constant $G-SIGNAL-TYPE-STATIC-SCOPE = 1;

define C-function g-cclosure-marshal-VOID--VOID
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__VOID";
end;

define C-function g-cclosure-marshal-VOID--BOOLEAN
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__BOOLEAN";
end;

define C-function g-cclosure-marshal-VOID--CHAR
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__CHAR";
end;

define C-function g-cclosure-marshal-VOID--UCHAR
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__UCHAR";
end;

define C-function g-cclosure-marshal-VOID--INT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__INT";
end;

define C-function g-cclosure-marshal-VOID--UINT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__UINT";
end;

define C-function g-cclosure-marshal-VOID--LONG
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__LONG";
end;

define C-function g-cclosure-marshal-VOID--ULONG
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__ULONG";
end;

define C-function g-cclosure-marshal-VOID--ENUM
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__ENUM";
end;

define C-function g-cclosure-marshal-VOID--FLAGS
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__FLAGS";
end;

define C-function g-cclosure-marshal-VOID--FLOAT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__FLOAT";
end;

define C-function g-cclosure-marshal-VOID--DOUBLE
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__DOUBLE";
end;

define C-function g-cclosure-marshal-VOID--STRING
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__STRING";
end;

define C-function g-cclosure-marshal-VOID--PARAM
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__PARAM";
end;

define C-function g-cclosure-marshal-VOID--BOXED
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__BOXED";
end;

define C-function g-cclosure-marshal-VOID--POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__POINTER";
end;

define C-function g-cclosure-marshal-VOID--OBJECT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__OBJECT";
end;

define C-function g-cclosure-marshal-VOID--UINT-POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_VOID__UINT_POINTER";
end;

define C-function g-cclosure-marshal-BOOLEAN--FLAGS
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_BOOLEAN__FLAGS";
end;

define C-function g-cclosure-marshal-STRING--OBJECT-POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "g_cclosure_marshal_STRING__OBJECT_POINTER";
end;

define constant g-cclosure-marshal-BOOL--FLAGS = g-cclosure-marshal-BOOLEAN--FLAGS;

define constant <anonymous-1520> = <C-function-pointer>;
define constant <anonymous-1521> = <C-function-pointer>;
define constant <anonymous-1522> = <C-function-pointer>;
define constant <anonymous-1523> = <C-function-pointer>;
define constant <gpointer<@4>> = <gpointer*>;
define C-subtype <_GParamSpecClass> (<C-void*>) end;
define constant <GParamSpecClass> = <_GParamSpecClass>;

define C-subtype <_GParamSpecPool> (<C-void*>) end;
define constant <GParamSpecPool> = <_GParamSpecPool>;

define C-function g-param-spec-ref
  input parameter arg1 :: <GParamSpec>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_ref";
end;

define C-function g-param-spec-unref
  input parameter arg1 :: <GParamSpec>;
  c-name: "g_param_spec_unref";
end;

define C-function g-param-spec-sink
  input parameter arg1 :: <GParamSpec>;
  c-name: "g_param_spec_sink";
end;

define C-function g-param-spec-ref-sink
  input parameter arg1 :: <GParamSpec>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_ref_sink";
end;

define C-function g-param-spec-get-qdata
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_param_spec_get_qdata";
end;

define C-function g-param-spec-set-qdata
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  c-name: "g_param_spec_set_qdata";
end;

define C-function g-param-spec-set-qdata-full
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "g_param_spec_set_qdata_full";
end;

define C-function g-param-spec-steal-qdata
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "g_param_spec_steal_qdata";
end;

define C-function g-param-spec-get-redirect-target
  input parameter arg1 :: <GParamSpec>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_get_redirect_target";
end;

define C-function g-param-value-set-default
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GValue>;
  c-name: "g_param_value_set_default";
end;

define C-function g-param-value-defaults
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GValue>;
  result res :: <gboolean>;
  c-name: "g_param_value_defaults";
end;

define C-function g-param-value-validate
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GValue>;
  result res :: <gboolean>;
  c-name: "g_param_value_validate";
end;

define C-function g-param-value-convert
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <GValue>;
  input parameter arg4 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "g_param_value_convert";
end;

define C-function g-param-values-cmp
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <GValue>;
  result res :: <gint>;
  c-name: "g_param_values_cmp";
end;

define C-function g-param-spec-get-name
  input parameter arg1 :: <GParamSpec>;
  result res :: <gchar*>;
  c-name: "g_param_spec_get_name";
end;

define C-function g-param-spec-get-nick
  input parameter arg1 :: <GParamSpec>;
  result res :: <gchar*>;
  c-name: "g_param_spec_get_nick";
end;

define C-function g-param-spec-get-blurb
  input parameter arg1 :: <GParamSpec>;
  result res :: <gchar*>;
  c-name: "g_param_spec_get_blurb";
end;

define C-function g-value-set-param
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GParamSpec>;
  c-name: "g_value_set_param";
end;

define C-function g-value-get-param
  input parameter arg1 :: <GValue>;
  result res :: <GParamSpec>;
  c-name: "g_value_get_param";
end;

define C-function g-value-dup-param
  input parameter arg1 :: <GValue>;
  result res :: <GParamSpec>;
  c-name: "g_value_dup_param";
end;

define C-function g-value-take-param
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GParamSpec>;
  c-name: "g_value_take_param";
end;

define C-function g-value-set-param-take-ownership
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <GParamSpec>;
  c-name: "g_value_set_param_take_ownership";
end;

define constant <anonymous-1546> = <C-function-pointer>;
define constant <anonymous-1547> = <C-function-pointer>;
define constant <anonymous-1548> = <C-function-pointer>;
define constant <anonymous-1549> = <C-function-pointer>;
define constant <anonymous-1550> = <C-function-pointer>;
define C-subtype <_GParamSpecTypeInfo> (<C-void*>) end;
define constant <GParamSpecTypeInfo> = <_GParamSpecTypeInfo>;

define C-function g-param-type-register-static
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GParamSpecTypeInfo>;
  result res :: <GType>;
  c-name: "g_param_type_register_static";
end;

define C-function g-param-spec-internal
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <gpointer>;
  c-name: "g_param_spec_internal";
end;

define C-function g-param-spec-pool-new
  input parameter arg1 :: <gboolean>;
  result res :: <GParamSpecPool>;
  c-name: "g_param_spec_pool_new";
end;

define C-function g-param-spec-pool-insert
  input parameter arg1 :: <GParamSpecPool>;
  input parameter arg2 :: <GParamSpec>;
  input parameter arg3 :: <GType>;
  c-name: "g_param_spec_pool_insert";
end;

define C-function g-param-spec-pool-remove
  input parameter arg1 :: <GParamSpecPool>;
  input parameter arg2 :: <GParamSpec>;
  c-name: "g_param_spec_pool_remove";
end;

define C-function g-param-spec-pool-lookup
  input parameter arg1 :: <GParamSpecPool>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GType>;
  input parameter arg4 :: <gboolean>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_pool_lookup";
end;

define C-function g-param-spec-pool-list-owned
  input parameter arg1 :: <GParamSpecPool>;
  input parameter arg2 :: <GType>;
  result res :: <GList>;
  c-name: "g_param_spec_pool_list_owned";
end;

define C-function g-param-spec-pool-list
  input parameter arg1 :: <GParamSpecPool>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <guint*>;
  result res :: <GParamSpec*>;
  c-name: "g_param_spec_pool_list";
end;

define constant $G-PARAM-READWRITE = 0;

define constant $G-PARAM-MASK = 255;

define constant $G-PARAM-USER-SHIFT = 8;

define C-subtype <_GCClosure> (<C-void*>) end;
define constant <GCClosure> = <_GCClosure>;

define C-function g-cclosure-new
  input parameter arg1 :: <GCallback>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GClosureNotify>;
  result res :: <GClosure>;
  c-name: "g_cclosure_new";
end;

define C-function g-cclosure-new-swap
  input parameter arg1 :: <GCallback>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GClosureNotify>;
  result res :: <GClosure>;
  c-name: "g_cclosure_new_swap";
end;

define C-function g-signal-type-cclosure-new
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <guint>;
  result res :: <GClosure>;
  c-name: "g_signal_type_cclosure_new";
end;

define C-function g-closure-ref
  input parameter arg1 :: <GClosure>;
  result res :: <GClosure>;
  c-name: "g_closure_ref";
end;

define C-function g-closure-sink
  input parameter arg1 :: <GClosure>;
  c-name: "g_closure_sink";
end;

define C-function g-closure-unref
  input parameter arg1 :: <GClosure>;
  c-name: "g_closure_unref";
end;

define C-function g-closure-new-simple
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <gpointer>;
  result res :: <GClosure>;
  c-name: "g_closure_new_simple";
end;

define C-function g-closure-add-finalize-notifier
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GClosureNotify>;
  c-name: "g_closure_add_finalize_notifier";
end;

define C-function g-closure-remove-finalize-notifier
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GClosureNotify>;
  c-name: "g_closure_remove_finalize_notifier";
end;

define C-function g-closure-add-invalidate-notifier
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GClosureNotify>;
  c-name: "g_closure_add_invalidate_notifier";
end;

define C-function g-closure-remove-invalidate-notifier
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GClosureNotify>;
  c-name: "g_closure_remove_invalidate_notifier";
end;

define C-function g-closure-add-marshal-guards
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GClosureNotify>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GClosureNotify>;
  c-name: "g_closure_add_marshal_guards";
end;

define C-function g-closure-set-marshal
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GClosureMarshal>;
  c-name: "g_closure_set_marshal";
end;

define C-function g-closure-set-meta-marshal
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GClosureMarshal>;
  c-name: "g_closure_set_meta_marshal";
end;

define C-function g-closure-invalidate
  input parameter arg1 :: <GClosure>;
  c-name: "g_closure_invalidate";
end;

define C-function g-closure-invoke
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  c-name: "g_closure_invoke";
end;

define C-function g-source-set-closure
  input parameter arg1 :: <GSource>;
  input parameter arg2 :: <GClosure>;
  c-name: "g_source_set_closure";
end;

define C-function g-io-channel-get-type
  result res :: <GType>;
  c-name: "g_io_channel_get_type";
end;

define C-function g-io-condition-get-type
  result res :: <GType>;
  c-name: "g_io_condition_get_type";
end;

define C-subtype <_GParamSpecChar> (<C-void*>) end;
define constant <GParamSpecChar> = <_GParamSpecChar>;

define C-subtype <_GParamSpecUChar> (<C-void*>) end;
define constant <GParamSpecUChar> = <_GParamSpecUChar>;

define C-subtype <_GParamSpecBoolean> (<C-void*>) end;
define constant <GParamSpecBoolean> = <_GParamSpecBoolean>;

define C-subtype <_GParamSpecInt> (<C-void*>) end;
define constant <GParamSpecInt> = <_GParamSpecInt>;

define C-subtype <_GParamSpecUInt> (<C-void*>) end;
define constant <GParamSpecUInt> = <_GParamSpecUInt>;

define C-subtype <_GParamSpecLong> (<C-void*>) end;
define constant <GParamSpecLong> = <_GParamSpecLong>;

define C-subtype <_GParamSpecULong> (<C-void*>) end;
define constant <GParamSpecULong> = <_GParamSpecULong>;

define C-subtype <_GParamSpecInt64> (<C-void*>) end;
define constant <GParamSpecInt64> = <_GParamSpecInt64>;

define C-subtype <_GParamSpecUInt64> (<C-void*>) end;
define constant <GParamSpecUInt64> = <_GParamSpecUInt64>;

define C-subtype <_GParamSpecUnichar> (<C-void*>) end;
define constant <GParamSpecUnichar> = <_GParamSpecUnichar>;

define C-subtype <_GParamSpecEnum> (<C-void*>) end;
define constant <GParamSpecEnum> = <_GParamSpecEnum>;

define C-subtype <_GParamSpecFlags> (<C-void*>) end;
define constant <GParamSpecFlags> = <_GParamSpecFlags>;

define C-subtype <_GParamSpecFloat> (<C-void*>) end;
define constant <GParamSpecFloat> = <_GParamSpecFloat>;

define C-subtype <_GParamSpecDouble> (<C-void*>) end;
define constant <GParamSpecDouble> = <_GParamSpecDouble>;

define C-subtype <_GParamSpecString> (<C-void*>) end;
define constant <GParamSpecString> = <_GParamSpecString>;

define C-subtype <_GParamSpecParam> (<C-void*>) end;
define constant <GParamSpecParam> = <_GParamSpecParam>;

define C-subtype <_GParamSpecBoxed> (<C-void*>) end;
define constant <GParamSpecBoxed> = <_GParamSpecBoxed>;

define C-subtype <_GParamSpecPointer> (<C-void*>) end;
define constant <GParamSpecPointer> = <_GParamSpecPointer>;

define C-subtype <_GParamSpecValueArray> (<C-void*>) end;
define constant <GParamSpecValueArray> = <_GParamSpecValueArray>;

define C-subtype <_GParamSpecObject> (<C-void*>) end;
define constant <GParamSpecObject> = <_GParamSpecObject>;

define C-subtype <_GParamSpecOverride> (<C-void*>) end;
define constant <GParamSpecOverride> = <_GParamSpecOverride>;

define C-subtype <_GParamSpecGType> (<C-void*>) end;
define constant <GParamSpecGType> = <_GParamSpecGType>;

define C-function g-param-spec-char
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint8>;
  input parameter arg5 :: <gint8>;
  input parameter arg6 :: <gint8>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_char";
end;

define C-function g-param-spec-uchar
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <guint8>;
  input parameter arg5 :: <guint8>;
  input parameter arg6 :: <guint8>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_uchar";
end;

define C-function g-param-spec-boolean
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_boolean";
end;

define C-function g-param-spec-int
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_int";
end;

define C-function g-param-spec-uint
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <guint>;
  input parameter arg6 :: <guint>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_uint";
end;

define C-function g-param-spec-long
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <glong>;
  input parameter arg5 :: <glong>;
  input parameter arg6 :: <glong>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_long";
end;

define C-function g-param-spec-ulong
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gulong>;
  input parameter arg5 :: <gulong>;
  input parameter arg6 :: <gulong>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_ulong";
end;

define C-function g-param-spec-int64
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint64>;
  input parameter arg5 :: <gint64>;
  input parameter arg6 :: <gint64>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_int64";
end;

define C-function g-param-spec-uint64
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <guint64>;
  input parameter arg5 :: <guint64>;
  input parameter arg6 :: <guint64>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_uint64";
end;

define C-function g-param-spec-unichar
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gunichar>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_unichar";
end;

define C-function g-param-spec-enum
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_enum";
end;

define C-function g-param-spec-flags
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GType>;
  input parameter arg5 :: <guint>;
  input parameter arg6 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_flags";
end;

define C-function g-param-spec-float
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gfloat>;
  input parameter arg5 :: <gfloat>;
  input parameter arg6 :: <gfloat>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_float";
end;

define C-function g-param-spec-double
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gdouble>;
  input parameter arg5 :: <gdouble>;
  input parameter arg6 :: <gdouble>;
  input parameter arg7 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_double";
end;

define C-function g-param-spec-string
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_string";
end;

define C-function g-param-spec-param
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GType>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_param";
end;

define C-function g-param-spec-boxed
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GType>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_boxed";
end;

define C-function g-param-spec-pointer
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_pointer";
end;

define C-function g-param-spec-value-array
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GParamSpec>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_value_array";
end;

define C-function g-param-spec-object
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GType>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_object";
end;

define C-function g-param-spec-override
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GParamSpec>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_override";
end;

define C-function g-param-spec-gtype
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GType>;
  input parameter arg5 :: <GParamFlags>;
  result res :: <GParamSpec>;
  c-name: "g_param_spec_gtype";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "g-param-spec-types"*/
define constant <anonymous-1474> = <C-function-pointer>;
define constant <GBoxedCopyFunc> = <anonymous-1474>;

define constant <anonymous-1475> = <C-function-pointer>;
define constant <GBoxedFreeFunc> = <anonymous-1475>;

define C-function g-boxed-copy
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gconstpointer>;
  result res :: <gpointer>;
  c-name: "g_boxed_copy";
end;

define C-function g-boxed-free
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gpointer>;
  c-name: "g_boxed_free";
end;

define C-function g-value-set-boxed
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gconstpointer>;
  c-name: "g_value_set_boxed";
end;

define C-function g-value-set-static-boxed
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gconstpointer>;
  c-name: "g_value_set_static_boxed";
end;

define C-function g-value-get-boxed
  input parameter arg1 :: <GValue>;
  result res :: <gpointer>;
  c-name: "g_value_get_boxed";
end;

define C-function g-value-dup-boxed
  input parameter arg1 :: <GValue>;
  result res :: <gpointer>;
  c-name: "g_value_dup_boxed";
end;

define C-function g-boxed-type-register-static
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GBoxedCopyFunc>;
  input parameter arg3 :: <GBoxedFreeFunc>;
  result res :: <GType>;
  c-name: "g_boxed_type_register_static";
end;

define C-function g-value-take-boxed
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gconstpointer>;
  c-name: "g_value_take_boxed";
end;

define C-function g-value-set-boxed-take-ownership
  input parameter arg1 :: <GValue>;
  input parameter arg2 :: <gconstpointer>;
  c-name: "g_value_set_boxed_take_ownership";
end;

define C-function g-closure-get-type
  result res :: <GType>;
  c-name: "g_closure_get_type";
end;

define C-function g-value-get-type
  result res :: <GType>;
  c-name: "g_value_get_type";
end;

define C-function g-value-array-get-type
  result res :: <GType>;
  c-name: "g_value_array_get_type";
end;

define C-function g-date-get-type
  result res :: <GType>;
  c-name: "g_date_get_type";
end;

define C-function g-strv-get-type
  result res :: <GType>;
  c-name: "g_strv_get_type";
end;

define C-function g-gstring-get-type
  result res :: <GType>;
  c-name: "g_gstring_get_type";
end;

define C-function g-hash-table-get-type
  result res :: <GType>;
  c-name: "g_hash_table_get_type";
end;

define constant <GStrv> = <gchar**>;

define C-subtype <_GtkSettingsClass> (<C-void*>) end;
define constant <GtkSettingsClass> = <_GtkSettingsClass>;

define C-subtype <_GtkSettingsValue> (<C-void*>) end;
define constant <GtkSettingsValue> = <_GtkSettingsValue>;

define C-function gtk-settings-get-type
  result res :: <GType>;
  c-name: "gtk_settings_get_type";
end;

define C-function gtk-settings-get-default
  result res :: <GtkSettings>;
  c-name: "gtk_settings_get_default";
end;

define C-function gtk-settings-get-for-screen
  input parameter arg1 :: <GdkScreen>;
  result res :: <GtkSettings>;
  c-name: "gtk_settings_get_for_screen";
end;

define C-function gtk-settings-install-property
  input parameter arg1 :: <GParamSpec>;
  c-name: "gtk_settings_install_property";
end;

define C-function gtk-settings-install-property-parser
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GtkRcPropertyParser>;
  c-name: "gtk_settings_install_property_parser";
end;

define C-function gtk-rc-property-parse-color
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GString>;
  input parameter arg3 :: <GValue>;
  result res :: <gboolean>;
  c-name: "gtk_rc_property_parse_color";
end;

define C-function gtk-rc-property-parse-enum
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GString>;
  input parameter arg3 :: <GValue>;
  result res :: <gboolean>;
  c-name: "gtk_rc_property_parse_enum";
end;

define C-function gtk-rc-property-parse-flags
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GString>;
  input parameter arg3 :: <GValue>;
  result res :: <gboolean>;
  c-name: "gtk_rc_property_parse_flags";
end;

define C-function gtk-rc-property-parse-requisition
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GString>;
  input parameter arg3 :: <GValue>;
  result res :: <gboolean>;
  c-name: "gtk_rc_property_parse_requisition";
end;

define C-function gtk-rc-property-parse-border
  input parameter arg1 :: <GParamSpec>;
  input parameter arg2 :: <GString>;
  input parameter arg3 :: <GValue>;
  result res :: <gboolean>;
  c-name: "gtk_rc_property_parse_border";
end;

define C-function gtk-settings-set-property-value
  input parameter arg1 :: <GtkSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkSettingsValue>;
  c-name: "gtk_settings_set_property_value";
end;

define C-function gtk-settings-set-string-property
  input parameter arg1 :: <GtkSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  c-name: "gtk_settings_set_string_property";
end;

define C-function gtk-settings-set-long-property
  input parameter arg1 :: <GtkSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <glong>;
  input parameter arg4 :: <gchar*>;
  c-name: "gtk_settings_set_long_property";
end;

define C-function gtk-settings-set-double-property
  input parameter arg1 :: <GtkSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <gchar*>;
  c-name: "gtk_settings_set_double_property";
end;

define C-subtype <_GtkIconFactory> (<_GObject>) end;
define constant <GtkIconFactory> = <_GtkIconFactory>;

define constant <anonymous-3503> = <C-function-pointer>;
define constant <anonymous-3504> = <C-function-pointer>;
define constant <anonymous-3505> = <C-function-pointer>;
define constant <anonymous-3506> = <C-function-pointer>;
define constant <anonymous-3507> = <C-function-pointer>;
define constant <anonymous-3508> = <C-function-pointer>;
define constant <anonymous-3509> = <C-function-pointer>;
define constant <anonymous-3510> = <C-function-pointer>;
define C-subtype <_GtkRcStyleClass> (<C-void*>) end;
define constant <GtkRcStyleClass> = <_GtkRcStyleClass>;

define C-function gtk-rc-add-default-file-utf8
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_rc_add_default_file_utf8";
end;

define C-function gtk-rc-set-default-files-utf8
  input parameter arg1 :: <gchar**>;
  c-name: "gtk_rc_set_default_files_utf8";
end;

define C-function gtk-rc-get-default-files
  result res :: <gchar**>;
  c-name: "gtk_rc_get_default_files";
end;

define C-function gtk-rc-get-style
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkStyle>;
  c-name: "gtk_rc_get_style";
end;

define C-function gtk-rc-get-style-by-paths
  input parameter arg1 :: <GtkSettings>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <GType>;
  result res :: <GtkStyle>;
  c-name: "gtk_rc_get_style_by_paths";
end;

define C-function gtk-rc-reparse-all-for-settings
  input parameter arg1 :: <GtkSettings>;
  input parameter arg2 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_rc_reparse_all_for_settings";
end;

define C-function gtk-rc-reset-styles
  input parameter arg1 :: <GtkSettings>;
  c-name: "gtk_rc_reset_styles";
end;

define C-function gtk-rc-find-pixmap-in-path
  input parameter arg1 :: <GtkSettings>;
  input parameter arg2 :: <GScanner>;
  input parameter arg3 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "gtk_rc_find_pixmap_in_path";
end;

define C-function gtk-rc-parse-utf8
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_rc_parse_utf8";
end;

define C-function gtk-rc-parse-string
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_rc_parse_string";
end;

define C-function gtk-rc-reparse-all
  result res :: <gboolean>;
  c-name: "gtk_rc_reparse_all";
end;

define C-function gtk-rc-add-widget-name-style
  input parameter arg1 :: <GtkRcStyle>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_rc_add_widget_name_style";
end;

define C-function gtk-rc-add-widget-class-style
  input parameter arg1 :: <GtkRcStyle>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_rc_add_widget_class_style";
end;

define C-function gtk-rc-add-class-style
  input parameter arg1 :: <GtkRcStyle>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_rc_add_class_style";
end;

define C-function gtk-rc-style-get-type
  result res :: <GType>;
  c-name: "gtk_rc_style_get_type";
end;

define C-function gtk-rc-style-new
  result res :: <GtkRcStyle>;
  c-name: "gtk_rc_style_new";
end;

define C-function gtk-rc-style-copy
  input parameter arg1 :: <GtkRcStyle>;
  result res :: <GtkRcStyle>;
  c-name: "gtk_rc_style_copy";
end;

define C-function gtk-rc-style-ref
  input parameter arg1 :: <GtkRcStyle>;
  c-name: "gtk_rc_style_ref";
end;

define C-function gtk-rc-style-unref
  input parameter arg1 :: <GtkRcStyle>;
  c-name: "gtk_rc_style_unref";
end;

define C-function gtk-rc-find-module-in-path
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "gtk_rc_find_module_in_path";
end;

define C-function gtk-rc-get-theme-dir
  result res :: <gchar*>;
  c-name: "gtk_rc_get_theme_dir";
end;

define C-function gtk-rc-get-module-dir
  result res :: <gchar*>;
  c-name: "gtk_rc_get_module_dir";
end;

define C-function gtk-rc-get-im-module-path
  result res :: <gchar*>;
  c-name: "gtk_rc_get_im_module_path";
end;

define C-function gtk-rc-get-im-module-file
  result res :: <gchar*>;
  c-name: "gtk_rc_get_im_module_file";
end;

define constant <GtkRcTokenType> = <C-int>;
define constant $GTK-RC-TOKEN-INVALID = 270;
define constant $GTK-RC-TOKEN-INCLUDE = 271;
define constant $GTK-RC-TOKEN-NORMAL = 272;
define constant $GTK-RC-TOKEN-ACTIVE = 273;
define constant $GTK-RC-TOKEN-PRELIGHT = 274;
define constant $GTK-RC-TOKEN-SELECTED = 275;
define constant $GTK-RC-TOKEN-INSENSITIVE = 276;
define constant $GTK-RC-TOKEN-FG = 277;
define constant $GTK-RC-TOKEN-BG = 278;
define constant $GTK-RC-TOKEN-TEXT = 279;
define constant $GTK-RC-TOKEN-BASE = 280;
define constant $GTK-RC-TOKEN-XTHICKNESS = 281;
define constant $GTK-RC-TOKEN-YTHICKNESS = 282;
define constant $GTK-RC-TOKEN-FONT = 283;
define constant $GTK-RC-TOKEN-FONTSET = 284;
define constant $GTK-RC-TOKEN-FONT-NAME = 285;
define constant $GTK-RC-TOKEN-BG-PIXMAP = 286;
define constant $GTK-RC-TOKEN-PIXMAP-PATH = 287;
define constant $GTK-RC-TOKEN-STYLE = 288;
define constant $GTK-RC-TOKEN-BINDING = 289;
define constant $GTK-RC-TOKEN-BIND = 290;
define constant $GTK-RC-TOKEN-WIDGET = 291;
define constant $GTK-RC-TOKEN-WIDGET-CLASS = 292;
define constant $GTK-RC-TOKEN-CLASS = 293;
define constant $GTK-RC-TOKEN-LOWEST = 294;
define constant $GTK-RC-TOKEN-GTK = 295;
define constant $GTK-RC-TOKEN-APPLICATION = 296;
define constant $GTK-RC-TOKEN-THEME = 297;
define constant $GTK-RC-TOKEN-RC = 298;
define constant $GTK-RC-TOKEN-HIGHEST = 299;
define constant $GTK-RC-TOKEN-ENGINE = 300;
define constant $GTK-RC-TOKEN-MODULE-PATH = 301;
define constant $GTK-RC-TOKEN-IM-MODULE-PATH = 302;
define constant $GTK-RC-TOKEN-IM-MODULE-FILE = 303;
define constant $GTK-RC-TOKEN-STOCK = 304;
define constant $GTK-RC-TOKEN-LTR = 305;
define constant $GTK-RC-TOKEN-RTL = 306;
define constant $GTK-RC-TOKEN-COLOR = 307;
define constant $GTK-RC-TOKEN-LAST = 308;

define C-function gtk-rc-scanner-new
  result res :: <GScanner>;
  c-name: "gtk_rc_scanner_new";
end;

define C-function gtk-rc-parse-color
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <GdkColor>;
  result res :: <guint>;
  c-name: "gtk_rc_parse_color";
end;

define C-pointer-type <GtkStateType*> => <GtkStateType>;
define C-function gtk-rc-parse-state
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <GtkStateType*>;
  result res :: <guint>;
  c-name: "gtk_rc_parse_state";
end;

define constant <GtkPathPriorityType> = <C-int>;
define constant $GTK-PATH-PRIO-LOWEST = 0;
define constant $GTK-PATH-PRIO-GTK = 4;
define constant $GTK-PATH-PRIO-APPLICATION = 8;
define constant $GTK-PATH-PRIO-THEME = 10;
define constant $GTK-PATH-PRIO-RC = 12;
define constant $GTK-PATH-PRIO-HIGHEST = 15;

define C-pointer-type <GtkPathPriorityType*> => <GtkPathPriorityType>;
define C-function gtk-rc-parse-priority
  input parameter arg1 :: <GScanner>;
  input parameter arg2 :: <GtkPathPriorityType*>;
  result res :: <guint>;
  c-name: "gtk_rc_parse_priority";
end;

define constant gtk-rc-add-default-file = gtk-rc-add-default-file-utf8;

define constant gtk-rc-set-default-files = gtk-rc-set-default-files-utf8;

define constant gtk-rc-parse = gtk-rc-parse-utf8;

define C-subtype <_GtkBorder> (<C-void*>) end;
define constant <GtkBorder> = <_GtkBorder>;

define constant <anonymous-3398> = <C-function-pointer>;
define constant <anonymous-3399> = <C-function-pointer>;
define constant <anonymous-3400> = <C-function-pointer>;
define constant <anonymous-3401> = <C-function-pointer>;
define constant <anonymous-3402> = <C-function-pointer>;
define constant <anonymous-3403> = <C-function-pointer>;
define C-subtype <_GtkIconSource> (<C-void*>) end;
define constant <GtkIconSource> = <_GtkIconSource>;

define constant <anonymous-3404> = <C-function-pointer>;
define constant <anonymous-3405> = <C-function-pointer>;
define constant <anonymous-3406> = <C-function-pointer>;
define constant <GtkShadowType> = <C-int>;
define constant $GTK-SHADOW-NONE = 0;
define constant $GTK-SHADOW-IN = 1;
define constant $GTK-SHADOW-OUT = 2;
define constant $GTK-SHADOW-ETCHED-IN = 3;
define constant $GTK-SHADOW-ETCHED-OUT = 4;

define constant <anonymous-3407> = <C-function-pointer>;
define C-subtype <_GdkPoint> (<C-void*>) end;
define constant <GdkPoint> = <_GdkPoint>;

define constant <anonymous-3408> = <C-function-pointer>;
define constant <GtkArrowType> = <C-int>;
define constant $GTK-ARROW-UP = 0;
define constant $GTK-ARROW-DOWN = 1;
define constant $GTK-ARROW-LEFT = 2;
define constant $GTK-ARROW-RIGHT = 3;
define constant $GTK-ARROW-NONE = 4;

define constant <anonymous-3409> = <C-function-pointer>;
define constant <anonymous-3410> = <C-function-pointer>;
define constant <anonymous-3411> = <C-function-pointer>;
define constant <anonymous-3412> = <C-function-pointer>;
define constant <anonymous-3413> = <C-function-pointer>;
define constant <anonymous-3414> = <C-function-pointer>;
define constant <anonymous-3415> = <C-function-pointer>;
define constant <anonymous-3416> = <C-function-pointer>;
define constant <GtkPositionType> = <C-int>;
define constant $GTK-POS-LEFT = 0;
define constant $GTK-POS-RIGHT = 1;
define constant $GTK-POS-TOP = 2;
define constant $GTK-POS-BOTTOM = 3;

define constant <anonymous-3417> = <C-function-pointer>;
define constant <anonymous-3418> = <C-function-pointer>;
define constant <anonymous-3419> = <C-function-pointer>;
define constant <anonymous-3420> = <C-function-pointer>;
define constant <GtkOrientation> = <C-int>;
define constant $GTK-ORIENTATION-HORIZONTAL = 0;
define constant $GTK-ORIENTATION-VERTICAL = 1;

define constant <anonymous-3421> = <C-function-pointer>;
define constant <anonymous-3422> = <C-function-pointer>;
define constant <GtkExpanderStyle> = <C-int>;
define constant $GTK-EXPANDER-COLLAPSED = 0;
define constant $GTK-EXPANDER-SEMI-COLLAPSED = 1;
define constant $GTK-EXPANDER-SEMI-EXPANDED = 2;
define constant $GTK-EXPANDER-EXPANDED = 3;

define constant <anonymous-3423> = <C-function-pointer>;
define constant <anonymous-3424> = <C-function-pointer>;
define constant <anonymous-3425> = <C-function-pointer>;
define constant <anonymous-3426> = <C-function-pointer>;
define constant <anonymous-3427> = <C-function-pointer>;
define constant <anonymous-3428> = <C-function-pointer>;
define constant <anonymous-3429> = <C-function-pointer>;
define constant <anonymous-3430> = <C-function-pointer>;
define constant <anonymous-3431> = <C-function-pointer>;
define constant <anonymous-3432> = <C-function-pointer>;
define constant <anonymous-3433> = <C-function-pointer>;
define constant <anonymous-3434> = <C-function-pointer>;
define constant <anonymous-3435> = <C-function-pointer>;
define constant <anonymous-3436> = <C-function-pointer>;
define constant <anonymous-3437> = <C-function-pointer>;
define C-subtype <_GtkStyleClass> (<C-void*>) end;
define constant <GtkStyleClass> = <_GtkStyleClass>;

define C-subtype <_GtkThemeEngine> (<C-void*>) end;
define constant <GtkThemeEngine> = <_GtkThemeEngine>;

define C-subtype <_GtkIconSet> (<C-void*>) end;
define constant <GtkIconSet> = <_GtkIconSet>;

define C-subtype <_GtkRcProperty> (<C-void*>) end;
define constant <GtkRcProperty> = <_GtkRcProperty>;

define C-function gtk-style-get-type
  result res :: <GType>;
  c-name: "gtk_style_get_type";
end;

define C-function gtk-style-new
  result res :: <GtkStyle>;
  c-name: "gtk_style_new";
end;

define C-function gtk-style-copy
  input parameter arg1 :: <GtkStyle>;
  result res :: <GtkStyle>;
  c-name: "gtk_style_copy";
end;

define C-function gtk-style-attach
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  result res :: <GtkStyle>;
  c-name: "gtk_style_attach";
end;

define C-function gtk-style-detach
  input parameter arg1 :: <GtkStyle>;
  c-name: "gtk_style_detach";
end;

define C-function gtk-style-ref
  input parameter arg1 :: <GtkStyle>;
  result res :: <GtkStyle>;
  c-name: "gtk_style_ref";
end;

define C-function gtk-style-unref
  input parameter arg1 :: <GtkStyle>;
  c-name: "gtk_style_unref";
end;

define C-function gtk-style-get-font
  input parameter arg1 :: <GtkStyle>;
  result res :: <GdkFont>;
  c-name: "gtk_style_get_font";
end;

define C-function gtk-style-set-font
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkFont>;
  c-name: "gtk_style_set_font";
end;

define C-function gtk-style-set-background
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  c-name: "gtk_style_set_background";
end;

define C-function gtk-style-apply-default-background
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <GtkStateType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  c-name: "gtk_style_apply_default_background";
end;

define C-function gtk-style-lookup-icon-set
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkIconSet>;
  c-name: "gtk_style_lookup_icon_set";
end;

define C-function gtk-style-lookup-color
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GdkColor>;
  result res :: <gboolean>;
  c-name: "gtk_style_lookup_color";
end;

define C-function gtk-style-render-icon
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GtkIconSource>;
  input parameter arg3 :: <GtkTextDirection>;
  input parameter arg4 :: <GtkStateType>;
  input parameter arg5 :: <GtkIconSize>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_style_render_icon";
end;

define C-function gtk-draw-hline
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  c-name: "gtk_draw_hline";
end;

define C-function gtk-draw-vline
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  c-name: "gtk_draw_vline";
end;

define C-function gtk-draw-shadow
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gtk_draw_shadow";
end;

define C-function gtk-draw-polygon
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkPoint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gboolean>;
  c-name: "gtk_draw_polygon";
end;

define C-function gtk-draw-arrow
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GtkArrowType>;
  input parameter arg6 :: <gboolean>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  c-name: "gtk_draw_arrow";
end;

define C-function gtk-draw-diamond
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gtk_draw_diamond";
end;

define C-function gtk-draw-box
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gtk_draw_box";
end;

define C-function gtk-draw-flat-box
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gtk_draw_flat_box";
end;

define C-function gtk-draw-check
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gtk_draw_check";
end;

define C-function gtk-draw-option
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gtk_draw_option";
end;

define C-function gtk-draw-tab
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gtk_draw_tab";
end;

define C-function gtk-draw-shadow-gap
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <GtkPositionType>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_draw_shadow_gap";
end;

define C-function gtk-draw-box-gap
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <GtkPositionType>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_draw_box_gap";
end;

define C-function gtk-draw-extension
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <GtkPositionType>;
  c-name: "gtk_draw_extension";
end;

define C-function gtk-draw-focus
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  c-name: "gtk_draw_focus";
end;

define C-function gtk-draw-slider
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <GtkOrientation>;
  c-name: "gtk_draw_slider";
end;

define C-function gtk-draw-handle
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <GtkOrientation>;
  c-name: "gtk_draw_handle";
end;

define C-function gtk-draw-expander
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <GtkExpanderStyle>;
  c-name: "gtk_draw_expander";
end;

define C-function gtk-draw-layout
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <PangoLayout>;
  c-name: "gtk_draw_layout";
end;

define C-function gtk-draw-resize-grip
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GdkWindowEdge>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gtk_draw_resize_grip";
end;

define C-function gtk-paint-hline
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GdkRectangle>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <gchar*>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  c-name: "gtk_paint_hline";
end;

define C-function gtk-paint-vline
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GdkRectangle>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <gchar*>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  c-name: "gtk_paint_vline";
end;

define C-function gtk-paint-shadow
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_paint_shadow";
end;

define C-function gtk-paint-polygon
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <GdkPoint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gboolean>;
  c-name: "gtk_paint_polygon";
end;

define C-function gtk-paint-arrow
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <GtkArrowType>;
  input parameter arg9 :: <gboolean>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  input parameter arg12 :: <gint>;
  input parameter arg13 :: <gint>;
  c-name: "gtk_paint_arrow";
end;

define C-function gtk-paint-diamond
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_paint_diamond";
end;

define C-function gtk-paint-box
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_paint_box";
end;

define C-function gtk-paint-flat-box
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_paint_flat_box";
end;

define C-function gtk-paint-check
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_paint_check";
end;

define C-function gtk-paint-option
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_paint_option";
end;

define C-function gtk-paint-tab
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_paint_tab";
end;

define C-function gtk-paint-shadow-gap
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  input parameter arg12 :: <GtkPositionType>;
  input parameter arg13 :: <gint>;
  input parameter arg14 :: <gint>;
  c-name: "gtk_paint_shadow_gap";
end;

define C-function gtk-paint-box-gap
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  input parameter arg12 :: <GtkPositionType>;
  input parameter arg13 :: <gint>;
  input parameter arg14 :: <gint>;
  c-name: "gtk_paint_box_gap";
end;

define C-function gtk-paint-extension
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  input parameter arg12 :: <GtkPositionType>;
  c-name: "gtk_paint_extension";
end;

define C-function gtk-paint-focus
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GdkRectangle>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <gchar*>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  c-name: "gtk_paint_focus";
end;

define C-function gtk-paint-slider
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  input parameter arg12 :: <GtkOrientation>;
  c-name: "gtk_paint_slider";
end;

define C-function gtk-paint-handle
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GtkShadowType>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  input parameter arg12 :: <GtkOrientation>;
  c-name: "gtk_paint_handle";
end;

define C-function gtk-paint-expander
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GdkRectangle>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <gchar*>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <GtkExpanderStyle>;
  c-name: "gtk_paint_expander";
end;

define C-function gtk-paint-layout
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <gchar*>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <PangoLayout>;
  c-name: "gtk_paint_layout";
end;

define C-function gtk-paint-resize-grip
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GdkRectangle>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <gchar*>;
  input parameter arg7 :: <GdkWindowEdge>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gtk_paint_resize_grip";
end;

define C-function gtk-border-get-type
  result res :: <GType>;
  c-name: "gtk_border_get_type";
end;

define C-function gtk-border-copy
  input parameter arg1 :: <GtkBorder>;
  result res :: <GtkBorder>;
  c-name: "gtk_border_copy";
end;

define C-function gtk-border-free
  input parameter arg1 :: <GtkBorder>;
  c-name: "gtk_border_free";
end;

define C-function gtk-draw-string
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gchar*>;
  c-name: "gtk_draw_string";
end;

define C-function gtk-paint-string
  input parameter arg1 :: <GtkStyle>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkStateType>;
  input parameter arg4 :: <GdkRectangle>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <gchar*>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gchar*>;
  c-name: "gtk_paint_string";
end;

define constant <GdkDrawable> = <_GdkDrawable>;

define C-function gtk-draw-insertion-cursor
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkDrawable>;
  input parameter arg3 :: <GdkRectangle>;
  input parameter arg4 :: <GdkRectangle>;
  input parameter arg5 :: <gboolean>;
  input parameter arg6 :: <GtkTextDirection>;
  input parameter arg7 :: <gboolean>;
  c-name: "gtk_draw_insertion_cursor";
end;

define C-function pango-split-file-list
  input parameter arg1 :: <char*>;
  result res :: <c-string-vector>;
  c-name: "pango_split_file_list";
end;

define C-function pango-trim-string
  input parameter arg1 :: <char*>;
  result res :: <char*>;
  c-name: "pango_trim_string";
end;

define C-subtype <_iobuf> (<C-void*>) end;
define constant <FILE> = <_iobuf>;

define C-function pango-read-line
  input parameter arg1 :: <FILE>;
  input parameter arg2 :: <GString>;
  result res :: <gint>;
  c-name: "pango_read_line";
end;

define C-function pango-skip-space
  input parameter arg1 :: <c-string-vector>;
  result res :: <gboolean>;
  c-name: "pango_skip_space";
end;

define C-function pango-scan-word
  input parameter arg1 :: <c-string-vector>;
  input parameter arg2 :: <GString>;
  result res :: <gboolean>;
  c-name: "pango_scan_word";
end;

define C-function pango-scan-string
  input parameter arg1 :: <c-string-vector>;
  input parameter arg2 :: <GString>;
  result res :: <gboolean>;
  c-name: "pango_scan_string";
end;

define C-function pango-scan-int
  input parameter arg1 :: <c-string-vector>;
  input parameter arg2 :: <int*>;
  result res :: <gboolean>;
  c-name: "pango_scan_int";
end;

define C-function pango-parse-enum
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <int*>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <c-string-vector>;
  result res :: <gboolean>;
  c-name: "pango_parse_enum";
end;

define constant <PangoStyle> = <C-int>;
define constant $PANGO-STYLE-NORMAL = 0;
define constant $PANGO-STYLE-OBLIQUE = 1;
define constant $PANGO-STYLE-ITALIC = 2;

define C-pointer-type <PangoStyle*> => <PangoStyle>;
define C-function pango-parse-style
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <PangoStyle*>;
  input parameter arg3 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "pango_parse_style";
end;

define constant <PangoVariant> = <C-int>;
define constant $PANGO-VARIANT-NORMAL = 0;
define constant $PANGO-VARIANT-SMALL-CAPS = 1;

define C-pointer-type <PangoVariant*> => <PangoVariant>;
define C-function pango-parse-variant
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <PangoVariant*>;
  input parameter arg3 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "pango_parse_variant";
end;

define constant <PangoWeight> = <C-int>;
define constant $PANGO-WEIGHT-ULTRALIGHT = 200;
define constant $PANGO-WEIGHT-LIGHT = 300;
define constant $PANGO-WEIGHT-NORMAL = 400;
define constant $PANGO-WEIGHT-SEMIBOLD = 600;
define constant $PANGO-WEIGHT-BOLD = 700;
define constant $PANGO-WEIGHT-ULTRABOLD = 800;
define constant $PANGO-WEIGHT-HEAVY = 900;

define C-pointer-type <PangoWeight*> => <PangoWeight>;
define C-function pango-parse-weight
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <PangoWeight*>;
  input parameter arg3 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "pango_parse_weight";
end;

define constant <PangoStretch> = <C-int>;
define constant $PANGO-STRETCH-ULTRA-CONDENSED = 0;
define constant $PANGO-STRETCH-EXTRA-CONDENSED = 1;
define constant $PANGO-STRETCH-CONDENSED = 2;
define constant $PANGO-STRETCH-SEMI-CONDENSED = 3;
define constant $PANGO-STRETCH-NORMAL = 4;
define constant $PANGO-STRETCH-SEMI-EXPANDED = 5;
define constant $PANGO-STRETCH-EXPANDED = 6;
define constant $PANGO-STRETCH-EXTRA-EXPANDED = 7;
define constant $PANGO-STRETCH-ULTRA-EXPANDED = 8;

define C-pointer-type <PangoStretch*> => <PangoStretch>;
define C-function pango-parse-stretch
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <PangoStretch*>;
  input parameter arg3 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "pango_parse_stretch";
end;

define C-function pango-quantize-line-geometry
  input parameter arg1 :: <int*>;
  input parameter arg2 :: <int*>;
  c-name: "pango_quantize_line_geometry";
end;

define constant <PangoDirection> = <C-int>;
define constant $PANGO-DIRECTION-LTR = 0;
define constant $PANGO-DIRECTION-RTL = 1;
define constant $PANGO-DIRECTION-TTB-LTR = 2;
define constant $PANGO-DIRECTION-TTB-RTL = 3;
define constant $PANGO-DIRECTION-WEAK-LTR = 4;
define constant $PANGO-DIRECTION-WEAK-RTL = 5;
define constant $PANGO-DIRECTION-NEUTRAL = 6;

define C-pointer-type <PangoDirection*> => <PangoDirection>;
define C-function pango-log2vis-get-embedding-levels
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <PangoDirection*>;
  result res :: <guint8*>;
  c-name: "pango_log2vis_get_embedding_levels";
end;

define C-function pango-is-zero-width
  input parameter arg1 :: <gunichar>;
  result res :: <gboolean>;
  c-name: "pango_is_zero_width";
end;

define C-function pango-version
  result res :: <C-signed-int>;
  c-name: "pango_version";
end;

define C-function pango-version-string
  result res :: <char*>;
  c-name: "pango_version_string";
end;

define C-function pango-version-check
  input parameter arg1 :: <C-signed-int>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  result res :: <char*>;
  c-name: "pango_version_check";
end;

define constant $PANGO-VERSION = 11601;

define C-subtype <_PangoFontMetrics> (<C-void*>) end;
define constant <PangoFontMetrics> = <_PangoFontMetrics>;

define constant <PangoFontMask> = <C-int>;
define constant $PANGO-FONT-MASK-FAMILY = 1;
define constant $PANGO-FONT-MASK-STYLE = 2;
define constant $PANGO-FONT-MASK-VARIANT = 4;
define constant $PANGO-FONT-MASK-WEIGHT = 8;
define constant $PANGO-FONT-MASK-STRETCH = 16;
define constant $PANGO-FONT-MASK-SIZE = 32;
define constant $PANGO-FONT-MASK-GRAVITY = 64;

define C-function pango-font-description-get-type
  result res :: <GType>;
  c-name: "pango_font_description_get_type";
end;

define C-function pango-font-description-new
  result res :: <PangoFontDescription>;
  c-name: "pango_font_description_new";
end;

define C-function pango-font-description-copy
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoFontDescription>;
  c-name: "pango_font_description_copy";
end;

define C-function pango-font-description-copy-static
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoFontDescription>;
  c-name: "pango_font_description_copy_static";
end;

define C-function pango-font-description-hash
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <guint>;
  c-name: "pango_font_description_hash";
end;

define C-function pango-font-description-equal
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoFontDescription>;
  result res :: <gboolean>;
  c-name: "pango_font_description_equal";
end;

define C-function pango-font-description-free
  input parameter arg1 :: <PangoFontDescription>;
  c-name: "pango_font_description_free";
end;

define C-pointer-type <PangoFontDescription*> => <PangoFontDescription>;
define C-function pango-font-descriptions-free
  input parameter arg1 :: <PangoFontDescription*>;
  input parameter arg2 :: <C-signed-int>;
  c-name: "pango_font_descriptions_free";
end;

define C-function pango-font-description-set-family
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <char*>;
  c-name: "pango_font_description_set_family";
end;

define C-function pango-font-description-set-family-static
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <char*>;
  c-name: "pango_font_description_set_family_static";
end;

define C-function pango-font-description-get-family
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <char*>;
  c-name: "pango_font_description_get_family";
end;

define C-function pango-font-description-set-style
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoStyle>;
  c-name: "pango_font_description_set_style";
end;

define C-function pango-font-description-get-style
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoStyle>;
  c-name: "pango_font_description_get_style";
end;

define C-function pango-font-description-set-variant
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoVariant>;
  c-name: "pango_font_description_set_variant";
end;

define C-function pango-font-description-get-variant
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoVariant>;
  c-name: "pango_font_description_get_variant";
end;

define C-function pango-font-description-set-weight
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoWeight>;
  c-name: "pango_font_description_set_weight";
end;

define C-function pango-font-description-get-weight
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoWeight>;
  c-name: "pango_font_description_get_weight";
end;

define C-function pango-font-description-set-stretch
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoStretch>;
  c-name: "pango_font_description_set_stretch";
end;

define C-function pango-font-description-get-stretch
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoStretch>;
  c-name: "pango_font_description_get_stretch";
end;

define C-function pango-font-description-set-size
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <gint>;
  c-name: "pango_font_description_set_size";
end;

define C-function pango-font-description-get-size
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <gint>;
  c-name: "pango_font_description_get_size";
end;

define C-function pango-font-description-set-absolute-size
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <C-double>;
  c-name: "pango_font_description_set_absolute_size";
end;

define C-function pango-font-description-get-size-is-absolute
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <gboolean>;
  c-name: "pango_font_description_get_size_is_absolute";
end;

define constant <PangoGravity> = <C-int>;
define constant $PANGO-GRAVITY-SOUTH = 0;
define constant $PANGO-GRAVITY-EAST = 1;
define constant $PANGO-GRAVITY-NORTH = 2;
define constant $PANGO-GRAVITY-WEST = 3;
define constant $PANGO-GRAVITY-AUTO = 4;

define C-function pango-font-description-set-gravity
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoGravity>;
  c-name: "pango_font_description_set_gravity";
end;

define C-function pango-font-description-get-gravity
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoGravity>;
  c-name: "pango_font_description_get_gravity";
end;

define C-function pango-font-description-get-set-fields
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoFontMask>;
  c-name: "pango_font_description_get_set_fields";
end;

define C-function pango-font-description-unset-fields
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoFontMask>;
  c-name: "pango_font_description_unset_fields";
end;

define C-function pango-font-description-merge
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoFontDescription>;
  input parameter arg3 :: <gboolean>;
  c-name: "pango_font_description_merge";
end;

define C-function pango-font-description-merge-static
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoFontDescription>;
  input parameter arg3 :: <gboolean>;
  c-name: "pango_font_description_merge_static";
end;

define C-function pango-font-description-better-match
  input parameter arg1 :: <PangoFontDescription>;
  input parameter arg2 :: <PangoFontDescription>;
  input parameter arg3 :: <PangoFontDescription>;
  result res :: <gboolean>;
  c-name: "pango_font_description_better_match";
end;

define C-function pango-font-description-from-string
  input parameter arg1 :: <char*>;
  result res :: <PangoFontDescription>;
  c-name: "pango_font_description_from_string";
end;

define C-function pango-font-description-to-string
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <char*>;
  c-name: "pango_font_description_to_string";
end;

define C-function pango-font-description-to-filename
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <char*>;
  c-name: "pango_font_description_to_filename";
end;

define C-function pango-font-metrics-get-type
  result res :: <GType>;
  c-name: "pango_font_metrics_get_type";
end;

define C-function pango-font-metrics-ref
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <PangoFontMetrics>;
  c-name: "pango_font_metrics_ref";
end;

define C-function pango-font-metrics-unref
  input parameter arg1 :: <PangoFontMetrics>;
  c-name: "pango_font_metrics_unref";
end;

define C-function pango-font-metrics-get-ascent
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <C-signed-int>;
  c-name: "pango_font_metrics_get_ascent";
end;

define C-function pango-font-metrics-get-descent
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <C-signed-int>;
  c-name: "pango_font_metrics_get_descent";
end;

define C-function pango-font-metrics-get-approximate-char-width
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <C-signed-int>;
  c-name: "pango_font_metrics_get_approximate_char_width";
end;

define C-function pango-font-metrics-get-approximate-digit-width
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <C-signed-int>;
  c-name: "pango_font_metrics_get_approximate_digit_width";
end;

define C-function pango-font-metrics-get-underline-position
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <C-signed-int>;
  c-name: "pango_font_metrics_get_underline_position";
end;

define C-function pango-font-metrics-get-underline-thickness
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <C-signed-int>;
  c-name: "pango_font_metrics_get_underline_thickness";
end;

define C-function pango-font-metrics-get-strikethrough-position
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <C-signed-int>;
  c-name: "pango_font_metrics_get_strikethrough_position";
end;

define C-function pango-font-metrics-get-strikethrough-thickness
  input parameter arg1 :: <PangoFontMetrics>;
  result res :: <C-signed-int>;
  c-name: "pango_font_metrics_get_strikethrough_thickness";
end;

define C-subtype <_PangoFontFamily> (<_GObject>) end;
define constant <PangoFontFamily> = <_PangoFontFamily>;

define C-subtype <_PangoFontFace> (<_GObject>) end;
define constant <PangoFontFace> = <_PangoFontFace>;

define C-function pango-font-family-get-type
  result res :: <GType>;
  c-name: "pango_font_family_get_type";
end;

define C-pointer-type <PangoFontFace*> => <PangoFontFace>;
define C-pointer-type <PangoFontFace**> => <PangoFontFace*>;
define C-function pango-font-family-list-faces
  input parameter arg1 :: <PangoFontFamily>;
  input parameter arg2 :: <PangoFontFace**>;
  input parameter arg3 :: <int*>;
  c-name: "pango_font_family_list_faces";
end;

define C-function pango-font-family-get-name
  input parameter arg1 :: <PangoFontFamily>;
  result res :: <char*>;
  c-name: "pango_font_family_get_name";
end;

define C-function pango-font-family-is-monospace
  input parameter arg1 :: <PangoFontFamily>;
  result res :: <gboolean>;
  c-name: "pango_font_family_is_monospace";
end;

define C-function pango-font-face-get-type
  result res :: <GType>;
  c-name: "pango_font_face_get_type";
end;

define C-function pango-font-face-describe
  input parameter arg1 :: <PangoFontFace>;
  result res :: <PangoFontDescription>;
  c-name: "pango_font_face_describe";
end;

define C-function pango-font-face-get-face-name
  input parameter arg1 :: <PangoFontFace>;
  result res :: <char*>;
  c-name: "pango_font_face_get_face_name";
end;

define C-pointer-type <int**> => <int*>;
define C-function pango-font-face-list-sizes
  input parameter arg1 :: <PangoFontFace>;
  input parameter arg2 :: <int**>;
  input parameter arg3 :: <int*>;
  c-name: "pango_font_face_list_sizes";
end;

define C-function pango-font-get-type
  result res :: <GType>;
  c-name: "pango_font_get_type";
end;

define C-subtype <_PangoFont> (<_GObject>) end;
define constant <PangoFont> = <_PangoFont>;

define C-function pango-font-describe
  input parameter arg1 :: <PangoFont>;
  result res :: <PangoFontDescription>;
  c-name: "pango_font_describe";
end;

define C-function pango-font-describe-with-absolute-size
  input parameter arg1 :: <PangoFont>;
  result res :: <PangoFontDescription>;
  c-name: "pango_font_describe_with_absolute_size";
end;

define C-subtype <_PangoCoverage> (<C-void*>) end;
define constant <PangoCoverage> = <_PangoCoverage>;

define C-subtype <_PangoLanguage> (<C-void*>) end;
define constant <PangoLanguage> = <_PangoLanguage>;

define C-function pango-font-get-coverage
  input parameter arg1 :: <PangoFont>;
  input parameter arg2 :: <PangoLanguage>;
  result res :: <PangoCoverage>;
  c-name: "pango_font_get_coverage";
end;

define C-subtype <_PangoEngineShape> (<C-void*>) end;
define constant <PangoEngineShape> = <_PangoEngineShape>;

define C-function pango-font-find-shaper
  input parameter arg1 :: <PangoFont>;
  input parameter arg2 :: <PangoLanguage>;
  input parameter arg3 :: <guint32>;
  result res :: <PangoEngineShape>;
  c-name: "pango_font_find_shaper";
end;

define C-function pango-font-get-metrics
  input parameter arg1 :: <PangoFont>;
  input parameter arg2 :: <PangoLanguage>;
  result res :: <PangoFontMetrics>;
  c-name: "pango_font_get_metrics";
end;

define constant <PangoGlyph> = <guint32>;

define C-subtype <_PangoRectangle> (<C-void*>) end;
define constant <PangoRectangle> = <_PangoRectangle>;

define C-function pango-font-get-glyph-extents
  input parameter arg1 :: <PangoFont>;
  input parameter arg2 :: <PangoGlyph>;
  input parameter arg3 :: <PangoRectangle>;
  input parameter arg4 :: <PangoRectangle>;
  c-name: "pango_font_get_glyph_extents";
end;

define C-subtype <_PangoFontMap> (<_GObject>) end;
define constant <PangoFontMap> = <_PangoFontMap>;

define C-function pango-font-get-font-map
  input parameter arg1 :: <PangoFont>;
  result res :: <PangoFontMap>;
  c-name: "pango_font_get_font_map";
end;

define C-subtype <_PangoLogAttr> (<C-void*>) end;
define constant <PangoLogAttr> = <_PangoLogAttr>;

define C-subtype <_PangoEngineLang> (<C-void*>) end;
define constant <PangoEngineLang> = <_PangoEngineLang>;

define C-function pango-units-from-double
  input parameter arg1 :: <C-double>;
  result res :: <C-signed-int>;
  c-name: "pango_units_from_double";
end;

define C-function pango-units-to-double
  input parameter arg1 :: <C-signed-int>;
  result res :: <C-double>;
  c-name: "pango_units_to_double";
end;

define C-function pango-language-get-type
  result res :: <GType>;
  c-name: "pango_language_get_type";
end;

define C-function pango-language-from-string
  input parameter arg1 :: <char*>;
  result res :: <PangoLanguage>;
  c-name: "pango_language_from_string";
end;

define C-function pango-language-get-sample-string
  input parameter arg1 :: <PangoLanguage>;
  result res :: <char*>;
  c-name: "pango_language_get_sample_string";
end;

define C-function pango-language-get-default
  result res :: <PangoLanguage>;
  c-name: "pango_language_get_default";
end;

define C-function pango-language-matches
  input parameter arg1 :: <PangoLanguage>;
  input parameter arg2 :: <char*>;
  result res :: <gboolean>;
  c-name: "pango_language_matches";
end;

define C-function pango-extents-to-pixels
  input parameter arg1 :: <PangoRectangle>;
  input parameter arg2 :: <PangoRectangle>;
  c-name: "pango_extents_to_pixels";
end;

define C-function pango-unichar-direction
  input parameter arg1 :: <gunichar>;
  result res :: <PangoDirection>;
  c-name: "pango_unichar_direction";
end;

define C-function pango-find-base-dir
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint>;
  result res :: <PangoDirection>;
  c-name: "pango_find_base_dir";
end;

define C-function pango-get-mirror-char
  input parameter arg1 :: <gunichar>;
  input parameter arg2 :: <gunichar*>;
  result res :: <gboolean>;
  c-name: "pango_get_mirror_char";
end;

define constant $PANGO-SCALE = 1024;

define constant <PangoGravityHint> = <C-int>;
define constant $PANGO-GRAVITY-HINT-NATURAL = 0;
define constant $PANGO-GRAVITY-HINT-STRONG = 1;
define constant $PANGO-GRAVITY-HINT-LINE = 2;

define C-function pango-gravity-to-rotation
  input parameter arg1 :: <PangoGravity>;
  result res :: <C-double>;
  c-name: "pango_gravity_to_rotation";
end;

define C-subtype <_PangoMatrix> (<C-void*>) end;
define constant <PangoMatrix> = <_PangoMatrix>;

define C-function pango-gravity-get-for-matrix
  input parameter arg1 :: <PangoMatrix>;
  result res :: <PangoGravity>;
  c-name: "pango_gravity_get_for_matrix";
end;

define constant <PangoScript> = <C-int>;
define constant $PANGO-SCRIPT-INVALID-CODE = -1;
define constant $PANGO-SCRIPT-COMMON = 0;
define constant $PANGO-SCRIPT-INHERITED = 1;
define constant $PANGO-SCRIPT-ARABIC = 2;
define constant $PANGO-SCRIPT-ARMENIAN = 3;
define constant $PANGO-SCRIPT-BENGALI = 4;
define constant $PANGO-SCRIPT-BOPOMOFO = 5;
define constant $PANGO-SCRIPT-CHEROKEE = 6;
define constant $PANGO-SCRIPT-COPTIC = 7;
define constant $PANGO-SCRIPT-CYRILLIC = 8;
define constant $PANGO-SCRIPT-DESERET = 9;
define constant $PANGO-SCRIPT-DEVANAGARI = 10;
define constant $PANGO-SCRIPT-ETHIOPIC = 11;
define constant $PANGO-SCRIPT-GEORGIAN = 12;
define constant $PANGO-SCRIPT-GOTHIC = 13;
define constant $PANGO-SCRIPT-GREEK = 14;
define constant $PANGO-SCRIPT-GUJARATI = 15;
define constant $PANGO-SCRIPT-GURMUKHI = 16;
define constant $PANGO-SCRIPT-HAN = 17;
define constant $PANGO-SCRIPT-HANGUL = 18;
define constant $PANGO-SCRIPT-HEBREW = 19;
define constant $PANGO-SCRIPT-HIRAGANA = 20;
define constant $PANGO-SCRIPT-KANNADA = 21;
define constant $PANGO-SCRIPT-KATAKANA = 22;
define constant $PANGO-SCRIPT-KHMER = 23;
define constant $PANGO-SCRIPT-LAO = 24;
define constant $PANGO-SCRIPT-LATIN = 25;
define constant $PANGO-SCRIPT-MALAYALAM = 26;
define constant $PANGO-SCRIPT-MONGOLIAN = 27;
define constant $PANGO-SCRIPT-MYANMAR = 28;
define constant $PANGO-SCRIPT-OGHAM = 29;
define constant $PANGO-SCRIPT-OLD-ITALIC = 30;
define constant $PANGO-SCRIPT-ORIYA = 31;
define constant $PANGO-SCRIPT-RUNIC = 32;
define constant $PANGO-SCRIPT-SINHALA = 33;
define constant $PANGO-SCRIPT-SYRIAC = 34;
define constant $PANGO-SCRIPT-TAMIL = 35;
define constant $PANGO-SCRIPT-TELUGU = 36;
define constant $PANGO-SCRIPT-THAANA = 37;
define constant $PANGO-SCRIPT-THAI = 38;
define constant $PANGO-SCRIPT-TIBETAN = 39;
define constant $PANGO-SCRIPT-CANADIAN-ABORIGINAL = 40;
define constant $PANGO-SCRIPT-YI = 41;
define constant $PANGO-SCRIPT-TAGALOG = 42;
define constant $PANGO-SCRIPT-HANUNOO = 43;
define constant $PANGO-SCRIPT-BUHID = 44;
define constant $PANGO-SCRIPT-TAGBANWA = 45;
define constant $PANGO-SCRIPT-BRAILLE = 46;
define constant $PANGO-SCRIPT-CYPRIOT = 47;
define constant $PANGO-SCRIPT-LIMBU = 48;
define constant $PANGO-SCRIPT-OSMANYA = 49;
define constant $PANGO-SCRIPT-SHAVIAN = 50;
define constant $PANGO-SCRIPT-LINEAR-B = 51;
define constant $PANGO-SCRIPT-TAI-LE = 52;
define constant $PANGO-SCRIPT-UGARITIC = 53;
define constant $PANGO-SCRIPT-NEW-TAI-LUE = 54;
define constant $PANGO-SCRIPT-BUGINESE = 55;
define constant $PANGO-SCRIPT-GLAGOLITIC = 56;
define constant $PANGO-SCRIPT-TIFINAGH = 57;
define constant $PANGO-SCRIPT-SYLOTI-NAGRI = 58;
define constant $PANGO-SCRIPT-OLD-PERSIAN = 59;
define constant $PANGO-SCRIPT-KHAROSHTHI = 60;
define constant $PANGO-SCRIPT-UNKNOWN = 61;
define constant $PANGO-SCRIPT-BALINESE = 62;
define constant $PANGO-SCRIPT-CUNEIFORM = 63;
define constant $PANGO-SCRIPT-PHOENICIAN = 64;
define constant $PANGO-SCRIPT-PHAGS-PA = 65;
define constant $PANGO-SCRIPT-NKO = 66;

define C-function pango-gravity-get-for-script
  input parameter arg1 :: <PangoScript>;
  input parameter arg2 :: <PangoGravity>;
  input parameter arg3 :: <PangoGravityHint>;
  result res :: <PangoGravity>;
  c-name: "pango_gravity_get_for_script";
end;

define C-subtype <_PangoScriptIter> (<C-void*>) end;
define constant <PangoScriptIter> = <_PangoScriptIter>;

define C-function pango-script-for-unichar
  input parameter arg1 :: <gunichar>;
  result res :: <PangoScript>;
  c-name: "pango_script_for_unichar";
end;

define C-function pango-script-iter-new
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <C-signed-int>;
  result res :: <PangoScriptIter>;
  c-name: "pango_script_iter_new";
end;

define C-pointer-type <PangoScript*> => <PangoScript>;
define C-function pango-script-iter-get-range
  input parameter arg1 :: <PangoScriptIter>;
  input parameter arg2 :: <c-string-vector>;
  input parameter arg3 :: <c-string-vector>;
  input parameter arg4 :: <PangoScript*>;
  c-name: "pango_script_iter_get_range";
end;

define C-function pango-script-iter-next
  input parameter arg1 :: <PangoScriptIter>;
  result res :: <gboolean>;
  c-name: "pango_script_iter_next";
end;

define C-function pango-script-iter-free
  input parameter arg1 :: <PangoScriptIter>;
  c-name: "pango_script_iter_free";
end;

define C-function pango-script-get-sample-language
  input parameter arg1 :: <PangoScript>;
  result res :: <PangoLanguage>;
  c-name: "pango_script_get_sample_language";
end;

define C-function pango-language-includes-script
  input parameter arg1 :: <PangoLanguage>;
  input parameter arg2 :: <PangoScript>;
  result res :: <gboolean>;
  c-name: "pango_language_includes_script";
end;

define C-function pango-matrix-get-type
  result res :: <GType>;
  c-name: "pango_matrix_get_type";
end;

define C-function pango-matrix-copy
  input parameter arg1 :: <PangoMatrix>;
  result res :: <PangoMatrix>;
  c-name: "pango_matrix_copy";
end;

define C-function pango-matrix-free
  input parameter arg1 :: <PangoMatrix>;
  c-name: "pango_matrix_free";
end;

define C-function pango-matrix-translate
  input parameter arg1 :: <PangoMatrix>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "pango_matrix_translate";
end;

define C-function pango-matrix-scale
  input parameter arg1 :: <PangoMatrix>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "pango_matrix_scale";
end;

define C-function pango-matrix-rotate
  input parameter arg1 :: <PangoMatrix>;
  input parameter arg2 :: <C-double>;
  c-name: "pango_matrix_rotate";
end;

define C-function pango-matrix-concat
  input parameter arg1 :: <PangoMatrix>;
  input parameter arg2 :: <PangoMatrix>;
  c-name: "pango_matrix_concat";
end;

define C-pointer-type <double*> => <C-double>;
define C-function pango-matrix-transform-point
  input parameter arg1 :: <PangoMatrix>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "pango_matrix_transform_point";
end;

define C-function pango-matrix-transform-distance
  input parameter arg1 :: <PangoMatrix>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "pango_matrix_transform_distance";
end;

define C-function pango-matrix-transform-rectangle
  input parameter arg1 :: <PangoMatrix>;
  input parameter arg2 :: <PangoRectangle>;
  c-name: "pango_matrix_transform_rectangle";
end;

define C-function pango-matrix-transform-pixel-rectangle
  input parameter arg1 :: <PangoMatrix>;
  input parameter arg2 :: <PangoRectangle>;
  c-name: "pango_matrix_transform_pixel_rectangle";
end;

define C-function pango-matrix-get-font-scale-factor
  input parameter arg1 :: <PangoMatrix>;
  result res :: <C-double>;
  c-name: "pango_matrix_get_font_scale_factor";
end;

define constant <PangoCoverageLevel> = <C-int>;
define constant $PANGO-COVERAGE-NONE = 0;
define constant $PANGO-COVERAGE-FALLBACK = 1;
define constant $PANGO-COVERAGE-APPROXIMATE = 2;
define constant $PANGO-COVERAGE-EXACT = 3;

define C-function pango-coverage-new
  result res :: <PangoCoverage>;
  c-name: "pango_coverage_new";
end;

define C-function pango-coverage-ref
  input parameter arg1 :: <PangoCoverage>;
  result res :: <PangoCoverage>;
  c-name: "pango_coverage_ref";
end;

define C-function pango-coverage-unref
  input parameter arg1 :: <PangoCoverage>;
  c-name: "pango_coverage_unref";
end;

define C-function pango-coverage-copy
  input parameter arg1 :: <PangoCoverage>;
  result res :: <PangoCoverage>;
  c-name: "pango_coverage_copy";
end;

define C-function pango-coverage-get
  input parameter arg1 :: <PangoCoverage>;
  input parameter arg2 :: <C-signed-int>;
  result res :: <PangoCoverageLevel>;
  c-name: "pango_coverage_get";
end;

define C-function pango-coverage-set
  input parameter arg1 :: <PangoCoverage>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <PangoCoverageLevel>;
  c-name: "pango_coverage_set";
end;

define C-function pango-coverage-max
  input parameter arg1 :: <PangoCoverage>;
  input parameter arg2 :: <PangoCoverage>;
  c-name: "pango_coverage_max";
end;

define C-pointer-type <guchar**> => <guchar*>;
define C-function pango-coverage-to-bytes
  input parameter arg1 :: <PangoCoverage>;
  input parameter arg2 :: <guchar**>;
  input parameter arg3 :: <int*>;
  c-name: "pango_coverage_to_bytes";
end;

define C-function pango-coverage-from-bytes
  input parameter arg1 :: <guchar*>;
  input parameter arg2 :: <C-signed-int>;
  result res :: <PangoCoverage>;
  c-name: "pango_coverage_from_bytes";
end;

define constant <wint-t> = <wchar-t>;

define constant <wctype-t> = <wchar-t>;

define constant <FILE<@>> = <FILE>;
 /* Ignoring declaration for {instance of <variable-declaration>} "_iob"*/
define constant <fpos-t> = <C-signed-long>;

define C-function remove
  input parameter arg1 :: <char*>;
  result res :: <C-signed-int>;
  c-name: "remove";
end;

define constant $BUFSIZ = 512;

define constant $_NFILE = 512;

define constant $_NSTREAM- = 512;

define constant $_IOB-ENTRIES = 20;

define constant $EOF = -1;

define constant $_P-tmpdir = "/";

define constant $L-ctermid = 9;

define constant $L-cuserid = 32;

define constant $SEEK-CUR = 1;

define constant $SEEK-END = 2;

define constant $SEEK-SET = 0;

define constant $FILENAME-MAX = 260;

define constant $FOPEN-MAX = 20;

define constant $_SYS-OPEN = 20;

define constant $TMP-MAX = 32767;

define constant $_IOREAD = 1;

define constant $_IOWRT = 2;

define constant $_IOFBF = 0;

define constant $_IOLBF = 64;

define constant $_IONBF = 4;

define constant $_IOMYBUF = 8;

define constant $_IOEOF = 16;

define constant $_IOERR = 32;

define constant $_IOSTRG = 64;

define constant $_IORW = 128;

define constant $_IOAPPEND = 512;

define constant $WEOF = 65535;

define C-subtype <_PangoTabArray> (<C-void*>) end;
define constant <PangoTabArray> = <_PangoTabArray>;

define constant <PangoTabAlign> = <C-int>;
define constant $PANGO-TAB-LEFT = 0;

define C-function pango-tab-array-new
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <gboolean>;
  result res :: <PangoTabArray>;
  c-name: "pango_tab_array_new";
end;

define C-function pango-tab-array-new-with-positions
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <PangoTabAlign>;
  input parameter arg4 :: <gint>;
  result res :: <PangoTabArray>;
  c-name: "pango_tab_array_new_with_positions";
end;

define C-function pango-tab-array-get-type
  result res :: <GType>;
  c-name: "pango_tab_array_get_type";
end;

define C-function pango-tab-array-copy
  input parameter arg1 :: <PangoTabArray>;
  result res :: <PangoTabArray>;
  c-name: "pango_tab_array_copy";
end;

define C-function pango-tab-array-free
  input parameter arg1 :: <PangoTabArray>;
  c-name: "pango_tab_array_free";
end;

define C-function pango-tab-array-get-size
  input parameter arg1 :: <PangoTabArray>;
  result res :: <gint>;
  c-name: "pango_tab_array_get_size";
end;

define C-function pango-tab-array-resize
  input parameter arg1 :: <PangoTabArray>;
  input parameter arg2 :: <gint>;
  c-name: "pango_tab_array_resize";
end;

define C-function pango-tab-array-set-tab
  input parameter arg1 :: <PangoTabArray>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <PangoTabAlign>;
  input parameter arg4 :: <gint>;
  c-name: "pango_tab_array_set_tab";
end;

define C-pointer-type <PangoTabAlign*> => <PangoTabAlign>;
define C-function pango-tab-array-get-tab
  input parameter arg1 :: <PangoTabArray>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <PangoTabAlign*>;
  input parameter arg4 :: <gint*>;
  c-name: "pango_tab_array_get_tab";
end;

define C-pointer-type <PangoTabAlign**> => <PangoTabAlign*>;
define C-pointer-type <gint**> => <gint*>;
define C-function pango-tab-array-get-tabs
  input parameter arg1 :: <PangoTabArray>;
  input parameter arg2 :: <PangoTabAlign**>;
  input parameter arg3 :: <gint**>;
  c-name: "pango_tab_array_get_tabs";
end;

define C-function pango-tab-array-get-positions-in-pixels
  input parameter arg1 :: <PangoTabArray>;
  result res :: <gboolean>;
  c-name: "pango_tab_array_get_positions_in_pixels";
end;

define constant <PangoUnderline> = <C-int>;
define constant $PANGO-UNDERLINE-NONE = 0;
define constant $PANGO-UNDERLINE-SINGLE = 1;
define constant $PANGO-UNDERLINE-DOUBLE = 2;
define constant $PANGO-UNDERLINE-LOW = 3;
define constant $PANGO-UNDERLINE-ERROR = 4;

define C-subtype <_PangoRendererPrivate> (<C-void*>) end;
define constant <PangoRendererPrivate> = <_PangoRendererPrivate>;

define C-subtype <_PangoRenderer> (<_GObject>) end;
define constant <PangoRenderer> = <_PangoRenderer>;

define constant <PangoGlyphUnit> = <gint32>;

define C-subtype <_PangoGlyphGeometry> (<C-void*>) end;
define constant <PangoGlyphGeometry> = <_PangoGlyphGeometry>;

define C-subtype <_PangoGlyphVisAttr> (<C-void*>) end;
define constant <PangoGlyphVisAttr> = <_PangoGlyphVisAttr>;

define C-subtype <_PangoGlyphInfo> (<C-void*>) end;
define constant <PangoGlyphInfo> = <_PangoGlyphInfo>;

define C-subtype <_PangoGlyphString> (<C-void*>) end;
define constant <PangoGlyphString> = <_PangoGlyphString>;

define constant <anonymous-2151> = <C-function-pointer>;
define constant <PangoRenderPart> = <C-int>;
define constant $PANGO-RENDER-PART-FOREGROUND = 0;
define constant $PANGO-RENDER-PART-BACKGROUND = 1;
define constant $PANGO-RENDER-PART-UNDERLINE = 2;
define constant $PANGO-RENDER-PART-STRIKETHROUGH = 3;

define constant <anonymous-2152> = <C-function-pointer>;
define constant <anonymous-2153> = <C-function-pointer>;
define constant <PangoAttrType> = <C-int>;
define constant $PANGO-ATTR-INVALID = 0;
define constant $PANGO-ATTR-LANGUAGE = 1;
define constant $PANGO-ATTR-FAMILY = 2;
define constant $PANGO-ATTR-STYLE = 3;
define constant $PANGO-ATTR-WEIGHT = 4;
define constant $PANGO-ATTR-VARIANT = 5;
define constant $PANGO-ATTR-STRETCH = 6;
define constant $PANGO-ATTR-SIZE = 7;
define constant $PANGO-ATTR-FONT-DESC = 8;
define constant $PANGO-ATTR-FOREGROUND = 9;
define constant $PANGO-ATTR-BACKGROUND = 10;
define constant $PANGO-ATTR-UNDERLINE = 11;
define constant $PANGO-ATTR-STRIKETHROUGH = 12;
define constant $PANGO-ATTR-RISE = 13;
define constant $PANGO-ATTR-SHAPE = 14;
define constant $PANGO-ATTR-SCALE = 15;
define constant $PANGO-ATTR-FALLBACK = 16;
define constant $PANGO-ATTR-LETTER-SPACING = 17;
define constant $PANGO-ATTR-UNDERLINE-COLOR = 18;
define constant $PANGO-ATTR-STRIKETHROUGH-COLOR = 19;
define constant $PANGO-ATTR-ABSOLUTE-SIZE = 20;
define constant $PANGO-ATTR-GRAVITY = 21;
define constant $PANGO-ATTR-GRAVITY-HINT = 22;

define constant <anonymous-1920> = <C-function-pointer>;
define constant <anonymous-1921> = <C-function-pointer>;
define constant <anonymous-1922> = <C-function-pointer>;
define C-subtype <_PangoAttrClass> (<C-void*>) end;
define constant <PangoAttrClass> = <_PangoAttrClass>;

define C-subtype <_PangoAttribute> (<C-void*>) end;
define constant <PangoAttribute> = <_PangoAttribute>;

define constant <anonymous-1919> = <C-function-pointer>;
define constant <PangoAttrDataCopyFunc> = <anonymous-1919>;

define C-subtype <_PangoAttrShape> (<C-void*>) end;
define constant <PangoAttrShape> = <_PangoAttrShape>;

define constant <anonymous-2154> = <C-function-pointer>;
define constant <anonymous-2155> = <C-function-pointer>;
define constant <anonymous-2156> = <C-function-pointer>;
define constant <anonymous-2157> = <C-function-pointer>;
define constant <anonymous-2158> = <C-function-pointer>;
define constant <anonymous-2159> = <C-function-pointer>;
define C-subtype <_PangoAnalysis> (<C-void*>) end;
define constant <PangoAnalysis> = <_PangoAnalysis>;

define C-subtype <_PangoItem> (<C-void*>) end;
define constant <PangoItem> = <_PangoItem>;

define C-subtype <_PangoGlyphItem> (<C-void*>) end;
define constant <PangoGlyphItem> = <_PangoGlyphItem>;

define constant <PangoLayoutRun> = <PangoGlyphItem>;

define constant <anonymous-2160> = <C-function-pointer>;
define constant <anonymous-2161> = <C-function-pointer>;
define constant <anonymous-2162> = <C-function-pointer>;
define constant <anonymous-2163> = <C-function-pointer>;
define constant <anonymous-2164> = <C-function-pointer>;
define C-subtype <_PangoRendererClass> (<C-void*>) end;
define constant <PangoRendererClass> = <_PangoRendererClass>;

define C-function pango-renderer-get-type
  result res :: <GType>;
  c-name: "pango_renderer_get_type";
end;

define C-function pango-renderer-draw-layout
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoLayout>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  c-name: "pango_renderer_draw_layout";
end;

define C-subtype <_PangoLayoutLine> (<C-void*>) end;
define constant <PangoLayoutLine> = <_PangoLayoutLine>;

define C-function pango-renderer-draw-layout-line
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoLayoutLine>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  c-name: "pango_renderer_draw_layout_line";
end;

define C-function pango-renderer-draw-glyphs
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoFont>;
  input parameter arg3 :: <PangoGlyphString>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  c-name: "pango_renderer_draw_glyphs";
end;

define C-function pango-renderer-draw-rectangle
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoRenderPart>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  c-name: "pango_renderer_draw_rectangle";
end;

define C-function pango-renderer-draw-error-underline
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  c-name: "pango_renderer_draw_error_underline";
end;

define C-function pango-renderer-draw-trapezoid
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoRenderPart>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  input parameter arg6 :: <C-double>;
  input parameter arg7 :: <C-double>;
  input parameter arg8 :: <C-double>;
  c-name: "pango_renderer_draw_trapezoid";
end;

define C-function pango-renderer-draw-glyph
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoFont>;
  input parameter arg3 :: <PangoGlyph>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  c-name: "pango_renderer_draw_glyph";
end;

define C-function pango-renderer-activate
  input parameter arg1 :: <PangoRenderer>;
  c-name: "pango_renderer_activate";
end;

define C-function pango-renderer-deactivate
  input parameter arg1 :: <PangoRenderer>;
  c-name: "pango_renderer_deactivate";
end;

define C-function pango-renderer-part-changed
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoRenderPart>;
  c-name: "pango_renderer_part_changed";
end;

define C-subtype <_PangoColor> (<C-void*>) end;
define constant <PangoColor> = <_PangoColor>;

define C-function pango-renderer-set-color
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoRenderPart>;
  input parameter arg3 :: <PangoColor>;
  c-name: "pango_renderer_set_color";
end;

define C-function pango-renderer-get-color
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoRenderPart>;
  result res :: <PangoColor>;
  c-name: "pango_renderer_get_color";
end;

define C-function pango-renderer-set-matrix
  input parameter arg1 :: <PangoRenderer>;
  input parameter arg2 :: <PangoMatrix>;
  c-name: "pango_renderer_set_matrix";
end;

define C-function pango-renderer-get-matrix
  input parameter arg1 :: <PangoRenderer>;
  result res :: <PangoMatrix>;
  c-name: "pango_renderer_get_matrix";
end;

define C-subtype <_PangoLayoutClass> (<C-void*>) end;
define constant <PangoLayoutClass> = <_PangoLayoutClass>;

define constant <PangoAlignment> = <C-int>;
define constant $PANGO-ALIGN-LEFT = 0;
define constant $PANGO-ALIGN-CENTER = 1;
define constant $PANGO-ALIGN-RIGHT = 2;

define constant <PangoWrapMode> = <C-int>;
define constant $PANGO-WRAP-WORD = 0;
define constant $PANGO-WRAP-CHAR = 1;
define constant $PANGO-WRAP-WORD-CHAR = 2;

define constant <PangoEllipsizeMode> = <C-int>;
define constant $PANGO-ELLIPSIZE-NONE = 0;
define constant $PANGO-ELLIPSIZE-START = 1;
define constant $PANGO-ELLIPSIZE-MIDDLE = 2;
define constant $PANGO-ELLIPSIZE-END = 3;

define C-function pango-layout-get-type
  result res :: <GType>;
  c-name: "pango_layout_get_type";
end;

define C-function pango-layout-new
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoLayout>;
  c-name: "pango_layout_new";
end;

define C-function pango-layout-copy
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoLayout>;
  c-name: "pango_layout_copy";
end;

define C-function pango-layout-get-context
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoContext>;
  c-name: "pango_layout_get_context";
end;

define C-subtype <_PangoAttrList> (<C-void*>) end;
define constant <PangoAttrList> = <_PangoAttrList>;

define C-function pango-layout-set-attributes
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoAttrList>;
  c-name: "pango_layout_set_attributes";
end;

define C-function pango-layout-get-attributes
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoAttrList>;
  c-name: "pango_layout_get_attributes";
end;

define C-function pango-layout-set-text
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  c-name: "pango_layout_set_text";
end;

define C-function pango-layout-get-text
  input parameter arg1 :: <PangoLayout>;
  result res :: <char*>;
  c-name: "pango_layout_get_text";
end;

define C-function pango-layout-set-markup
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  c-name: "pango_layout_set_markup";
end;

define C-function pango-layout-set-markup-with-accel
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <gunichar>;
  input parameter arg5 :: <gunichar*>;
  c-name: "pango_layout_set_markup_with_accel";
end;

define C-function pango-layout-set-font-description
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoFontDescription>;
  c-name: "pango_layout_set_font_description";
end;

define C-function pango-layout-get-font-description
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoFontDescription>;
  c-name: "pango_layout_get_font_description";
end;

define C-function pango-layout-set-width
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  c-name: "pango_layout_set_width";
end;

define C-function pango-layout-get-width
  input parameter arg1 :: <PangoLayout>;
  result res :: <C-signed-int>;
  c-name: "pango_layout_get_width";
end;

define C-function pango-layout-set-wrap
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoWrapMode>;
  c-name: "pango_layout_set_wrap";
end;

define C-function pango-layout-get-wrap
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoWrapMode>;
  c-name: "pango_layout_get_wrap";
end;

define C-function pango-layout-is-wrapped
  input parameter arg1 :: <PangoLayout>;
  result res :: <gboolean>;
  c-name: "pango_layout_is_wrapped";
end;

define C-function pango-layout-set-indent
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  c-name: "pango_layout_set_indent";
end;

define C-function pango-layout-get-indent
  input parameter arg1 :: <PangoLayout>;
  result res :: <C-signed-int>;
  c-name: "pango_layout_get_indent";
end;

define C-function pango-layout-set-spacing
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  c-name: "pango_layout_set_spacing";
end;

define C-function pango-layout-get-spacing
  input parameter arg1 :: <PangoLayout>;
  result res :: <C-signed-int>;
  c-name: "pango_layout_get_spacing";
end;

define C-function pango-layout-set-justify
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <gboolean>;
  c-name: "pango_layout_set_justify";
end;

define C-function pango-layout-get-justify
  input parameter arg1 :: <PangoLayout>;
  result res :: <gboolean>;
  c-name: "pango_layout_get_justify";
end;

define C-function pango-layout-set-auto-dir
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <gboolean>;
  c-name: "pango_layout_set_auto_dir";
end;

define C-function pango-layout-get-auto-dir
  input parameter arg1 :: <PangoLayout>;
  result res :: <gboolean>;
  c-name: "pango_layout_get_auto_dir";
end;

define C-function pango-layout-set-alignment
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoAlignment>;
  c-name: "pango_layout_set_alignment";
end;

define C-function pango-layout-get-alignment
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoAlignment>;
  c-name: "pango_layout_get_alignment";
end;

define C-function pango-layout-set-tabs
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoTabArray>;
  c-name: "pango_layout_set_tabs";
end;

define C-function pango-layout-get-tabs
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoTabArray>;
  c-name: "pango_layout_get_tabs";
end;

define C-function pango-layout-set-single-paragraph-mode
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <gboolean>;
  c-name: "pango_layout_set_single_paragraph_mode";
end;

define C-function pango-layout-get-single-paragraph-mode
  input parameter arg1 :: <PangoLayout>;
  result res :: <gboolean>;
  c-name: "pango_layout_get_single_paragraph_mode";
end;

define C-function pango-layout-set-ellipsize
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoEllipsizeMode>;
  c-name: "pango_layout_set_ellipsize";
end;

define C-function pango-layout-get-ellipsize
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoEllipsizeMode>;
  c-name: "pango_layout_get_ellipsize";
end;

define C-function pango-layout-is-ellipsized
  input parameter arg1 :: <PangoLayout>;
  result res :: <gboolean>;
  c-name: "pango_layout_is_ellipsized";
end;

define C-function pango-layout-get-unknown-glyphs-count
  input parameter arg1 :: <PangoLayout>;
  result res :: <C-signed-int>;
  c-name: "pango_layout_get_unknown_glyphs_count";
end;

define C-function pango-layout-context-changed
  input parameter arg1 :: <PangoLayout>;
  c-name: "pango_layout_context_changed";
end;

define C-pointer-type <PangoLogAttr*> => <PangoLogAttr>;
define C-function pango-layout-get-log-attrs
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoLogAttr*>;
  input parameter arg3 :: <gint*>;
  c-name: "pango_layout_get_log_attrs";
end;

define C-function pango-layout-index-to-pos
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_index_to_pos";
end;

define C-function pango-layout-index-to-line-x
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <int*>;
  input parameter arg5 :: <int*>;
  c-name: "pango_layout_index_to_line_x";
end;

define C-function pango-layout-get-cursor-pos
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <PangoRectangle>;
  input parameter arg4 :: <PangoRectangle>;
  c-name: "pango_layout_get_cursor_pos";
end;

define C-function pango-layout-move-cursor-visually
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <int*>;
  input parameter arg7 :: <int*>;
  c-name: "pango_layout_move_cursor_visually";
end;

define C-function pango-layout-xy-to-index
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <int*>;
  input parameter arg5 :: <int*>;
  result res :: <gboolean>;
  c-name: "pango_layout_xy_to_index";
end;

define C-function pango-layout-get-extents
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_get_extents";
end;

define C-function pango-layout-get-pixel-extents
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_get_pixel_extents";
end;

define C-function pango-layout-get-size
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <int*>;
  input parameter arg3 :: <int*>;
  c-name: "pango_layout_get_size";
end;

define C-function pango-layout-get-pixel-size
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <int*>;
  input parameter arg3 :: <int*>;
  c-name: "pango_layout_get_pixel_size";
end;

define C-function pango-layout-get-line-count
  input parameter arg1 :: <PangoLayout>;
  result res :: <C-signed-int>;
  c-name: "pango_layout_get_line_count";
end;

define C-function pango-layout-get-line
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  result res :: <PangoLayoutLine>;
  c-name: "pango_layout_get_line";
end;

define C-function pango-layout-get-line-readonly
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <C-signed-int>;
  result res :: <PangoLayoutLine>;
  c-name: "pango_layout_get_line_readonly";
end;

define C-function pango-layout-get-lines
  input parameter arg1 :: <PangoLayout>;
  result res :: <GSList>;
  c-name: "pango_layout_get_lines";
end;

define C-function pango-layout-get-lines-readonly
  input parameter arg1 :: <PangoLayout>;
  result res :: <GSList>;
  c-name: "pango_layout_get_lines_readonly";
end;

define C-function pango-layout-line-get-type
  result res :: <GType>;
  c-name: "pango_layout_line_get_type";
end;

define C-function pango-layout-line-ref
  input parameter arg1 :: <PangoLayoutLine>;
  result res :: <PangoLayoutLine>;
  c-name: "pango_layout_line_ref";
end;

define C-function pango-layout-line-unref
  input parameter arg1 :: <PangoLayoutLine>;
  c-name: "pango_layout_line_unref";
end;

define C-function pango-layout-line-x-to-index
  input parameter arg1 :: <PangoLayoutLine>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <int*>;
  input parameter arg4 :: <int*>;
  result res :: <gboolean>;
  c-name: "pango_layout_line_x_to_index";
end;

define C-function pango-layout-line-index-to-x
  input parameter arg1 :: <PangoLayoutLine>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <int*>;
  c-name: "pango_layout_line_index_to_x";
end;

define C-function pango-layout-line-get-x-ranges
  input parameter arg1 :: <PangoLayoutLine>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <int**>;
  input parameter arg5 :: <int*>;
  c-name: "pango_layout_line_get_x_ranges";
end;

define C-function pango-layout-line-get-extents
  input parameter arg1 :: <PangoLayoutLine>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_line_get_extents";
end;

define C-function pango-layout-line-get-pixel-extents
  input parameter arg1 :: <PangoLayoutLine>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_line_get_pixel_extents";
end;

define C-subtype <_PangoLayoutIter> (<C-void*>) end;
define constant <PangoLayoutIter> = <_PangoLayoutIter>;

define C-function pango-layout-iter-get-type
  result res :: <GType>;
  c-name: "pango_layout_iter_get_type";
end;

define C-function pango-layout-get-iter
  input parameter arg1 :: <PangoLayout>;
  result res :: <PangoLayoutIter>;
  c-name: "pango_layout_get_iter";
end;

define C-function pango-layout-iter-free
  input parameter arg1 :: <PangoLayoutIter>;
  c-name: "pango_layout_iter_free";
end;

define C-function pango-layout-iter-get-index
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <C-signed-int>;
  c-name: "pango_layout_iter_get_index";
end;

define C-function pango-layout-iter-get-run
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <PangoLayoutRun>;
  c-name: "pango_layout_iter_get_run";
end;

define C-function pango-layout-iter-get-run-readonly
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <PangoLayoutRun>;
  c-name: "pango_layout_iter_get_run_readonly";
end;

define C-function pango-layout-iter-get-line
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <PangoLayoutLine>;
  c-name: "pango_layout_iter_get_line";
end;

define C-function pango-layout-iter-get-line-readonly
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <PangoLayoutLine>;
  c-name: "pango_layout_iter_get_line_readonly";
end;

define C-function pango-layout-iter-at-last-line
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <gboolean>;
  c-name: "pango_layout_iter_at_last_line";
end;

define C-function pango-layout-iter-next-char
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <gboolean>;
  c-name: "pango_layout_iter_next_char";
end;

define C-function pango-layout-iter-next-cluster
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <gboolean>;
  c-name: "pango_layout_iter_next_cluster";
end;

define C-function pango-layout-iter-next-run
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <gboolean>;
  c-name: "pango_layout_iter_next_run";
end;

define C-function pango-layout-iter-next-line
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <gboolean>;
  c-name: "pango_layout_iter_next_line";
end;

define C-function pango-layout-iter-get-char-extents
  input parameter arg1 :: <PangoLayoutIter>;
  input parameter arg2 :: <PangoRectangle>;
  c-name: "pango_layout_iter_get_char_extents";
end;

define C-function pango-layout-iter-get-cluster-extents
  input parameter arg1 :: <PangoLayoutIter>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_iter_get_cluster_extents";
end;

define C-function pango-layout-iter-get-run-extents
  input parameter arg1 :: <PangoLayoutIter>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_iter_get_run_extents";
end;

define C-function pango-layout-iter-get-line-extents
  input parameter arg1 :: <PangoLayoutIter>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_iter_get_line_extents";
end;

define C-function pango-layout-iter-get-line-yrange
  input parameter arg1 :: <PangoLayoutIter>;
  input parameter arg2 :: <int*>;
  input parameter arg3 :: <int*>;
  c-name: "pango_layout_iter_get_line_yrange";
end;

define C-function pango-layout-iter-get-layout-extents
  input parameter arg1 :: <PangoLayoutIter>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <PangoRectangle>;
  c-name: "pango_layout_iter_get_layout_extents";
end;

define C-function pango-layout-iter-get-baseline
  input parameter arg1 :: <PangoLayoutIter>;
  result res :: <C-signed-int>;
  c-name: "pango_layout_iter_get_baseline";
end;

define C-function pango-glyph-item-split
  input parameter arg1 :: <PangoGlyphItem>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  result res :: <PangoGlyphItem>;
  c-name: "pango_glyph_item_split";
end;

define C-function pango-glyph-item-free
  input parameter arg1 :: <PangoGlyphItem>;
  c-name: "pango_glyph_item_free";
end;

define C-function pango-glyph-item-apply-attrs
  input parameter arg1 :: <PangoGlyphItem>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <PangoAttrList>;
  result res :: <GSList>;
  c-name: "pango_glyph_item_apply_attrs";
end;

define C-function pango-glyph-item-letter-space
  input parameter arg1 :: <PangoGlyphItem>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <PangoLogAttr>;
  input parameter arg4 :: <C-signed-int>;
  c-name: "pango_glyph_item_letter_space";
end;

define C-function pango-glyph-string-new
  result res :: <PangoGlyphString>;
  c-name: "pango_glyph_string_new";
end;

define C-function pango-glyph-string-set-size
  input parameter arg1 :: <PangoGlyphString>;
  input parameter arg2 :: <gint>;
  c-name: "pango_glyph_string_set_size";
end;

define C-function pango-glyph-string-get-type
  result res :: <GType>;
  c-name: "pango_glyph_string_get_type";
end;

define C-function pango-glyph-string-copy
  input parameter arg1 :: <PangoGlyphString>;
  result res :: <PangoGlyphString>;
  c-name: "pango_glyph_string_copy";
end;

define C-function pango-glyph-string-free
  input parameter arg1 :: <PangoGlyphString>;
  c-name: "pango_glyph_string_free";
end;

define C-function pango-glyph-string-extents
  input parameter arg1 :: <PangoGlyphString>;
  input parameter arg2 :: <PangoFont>;
  input parameter arg3 :: <PangoRectangle>;
  input parameter arg4 :: <PangoRectangle>;
  c-name: "pango_glyph_string_extents";
end;

define C-function pango-glyph-string-get-width
  input parameter arg1 :: <PangoGlyphString>;
  result res :: <C-signed-int>;
  c-name: "pango_glyph_string_get_width";
end;

define C-function pango-glyph-string-extents-range
  input parameter arg1 :: <PangoGlyphString>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <PangoFont>;
  input parameter arg5 :: <PangoRectangle>;
  input parameter arg6 :: <PangoRectangle>;
  c-name: "pango_glyph_string_extents_range";
end;

define C-function pango-glyph-string-get-logical-widths
  input parameter arg1 :: <PangoGlyphString>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <int*>;
  c-name: "pango_glyph_string_get_logical_widths";
end;

define C-function pango-glyph-string-index-to-x
  input parameter arg1 :: <PangoGlyphString>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <PangoAnalysis>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <gboolean>;
  input parameter arg7 :: <int*>;
  c-name: "pango_glyph_string_index_to_x";
end;

define C-function pango-glyph-string-x-to-index
  input parameter arg1 :: <PangoGlyphString>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <PangoAnalysis>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <int*>;
  input parameter arg7 :: <int*>;
  c-name: "pango_glyph_string_x_to_index";
end;

define C-function pango-shape
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <PangoAnalysis>;
  input parameter arg4 :: <PangoGlyphString>;
  c-name: "pango_shape";
end;

define C-function pango-reorder-items
  input parameter arg1 :: <GList>;
  result res :: <GList>;
  c-name: "pango_reorder_items";
end;

define C-function pango-item-get-type
  result res :: <GType>;
  c-name: "pango_item_get_type";
end;

define C-function pango-item-new
  result res :: <PangoItem>;
  c-name: "pango_item_new";
end;

define C-function pango-item-copy
  input parameter arg1 :: <PangoItem>;
  result res :: <PangoItem>;
  c-name: "pango_item_copy";
end;

define C-function pango-item-free
  input parameter arg1 :: <PangoItem>;
  c-name: "pango_item_free";
end;

define C-function pango-item-split
  input parameter arg1 :: <PangoItem>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  result res :: <PangoItem>;
  c-name: "pango_item_split";
end;

define constant $PANGO-ANALYSIS-FLAG-CENTERED-BASELINE = 1;

define C-function pango-break
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <PangoAnalysis>;
  input parameter arg4 :: <PangoLogAttr>;
  input parameter arg5 :: <C-signed-int>;
  c-name: "pango_break";
end;

define C-function pango-find-paragraph-boundary
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  c-name: "pango_find_paragraph_boundary";
end;

define C-function pango-get-log-attrs
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <PangoLanguage>;
  input parameter arg5 :: <PangoLogAttr>;
  input parameter arg6 :: <C-signed-int>;
  c-name: "pango_get_log_attrs";
end;

define C-function pango-color-get-type
  result res :: <GType>;
  c-name: "pango_color_get_type";
end;

define C-function pango-color-copy
  input parameter arg1 :: <PangoColor>;
  result res :: <PangoColor>;
  c-name: "pango_color_copy";
end;

define C-function pango-color-free
  input parameter arg1 :: <PangoColor>;
  c-name: "pango_color_free";
end;

define C-function pango-color-parse
  input parameter arg1 :: <PangoColor>;
  input parameter arg2 :: <char*>;
  result res :: <gboolean>;
  c-name: "pango_color_parse";
end;

define C-function pango-color-to-string
  input parameter arg1 :: <PangoColor>;
  result res :: <gchar*>;
  c-name: "pango_color_to_string";
end;

define C-subtype <_PangoAttrString> (<C-void*>) end;
define constant <PangoAttrString> = <_PangoAttrString>;

define C-subtype <_PangoAttrLanguage> (<C-void*>) end;
define constant <PangoAttrLanguage> = <_PangoAttrLanguage>;

define C-subtype <_PangoAttrInt> (<C-void*>) end;
define constant <PangoAttrInt> = <_PangoAttrInt>;

define C-subtype <_PangoAttrSize> (<C-void*>) end;
define constant <PangoAttrSize> = <_PangoAttrSize>;

define C-subtype <_PangoAttrFloat> (<C-void*>) end;
define constant <PangoAttrFloat> = <_PangoAttrFloat>;

define C-subtype <_PangoAttrColor> (<C-void*>) end;
define constant <PangoAttrColor> = <_PangoAttrColor>;

define C-subtype <_PangoAttrFontDesc> (<C-void*>) end;
define constant <PangoAttrFontDesc> = <_PangoAttrFontDesc>;

define C-subtype <_PangoAttrIterator> (<C-void*>) end;
define constant <PangoAttrIterator> = <_PangoAttrIterator>;

define constant <anonymous-1918> = <C-function-pointer>;
define constant <PangoAttrFilterFunc> = <anonymous-1918>;

define C-function pango-attr-type-register
  input parameter arg1 :: <gchar*>;
  result res :: <PangoAttrType>;
  c-name: "pango_attr_type_register";
end;

define C-function pango-attribute-copy
  input parameter arg1 :: <PangoAttribute>;
  result res :: <PangoAttribute>;
  c-name: "pango_attribute_copy";
end;

define C-function pango-attribute-destroy
  input parameter arg1 :: <PangoAttribute>;
  c-name: "pango_attribute_destroy";
end;

define C-function pango-attribute-equal
  input parameter arg1 :: <PangoAttribute>;
  input parameter arg2 :: <PangoAttribute>;
  result res :: <gboolean>;
  c-name: "pango_attribute_equal";
end;

define C-function pango-attr-language-new
  input parameter arg1 :: <PangoLanguage>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_language_new";
end;

define C-function pango-attr-family-new
  input parameter arg1 :: <char*>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_family_new";
end;

define C-function pango-attr-foreground-new
  input parameter arg1 :: <guint16>;
  input parameter arg2 :: <guint16>;
  input parameter arg3 :: <guint16>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_foreground_new";
end;

define C-function pango-attr-background-new
  input parameter arg1 :: <guint16>;
  input parameter arg2 :: <guint16>;
  input parameter arg3 :: <guint16>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_background_new";
end;

define C-function pango-attr-size-new
  input parameter arg1 :: <C-signed-int>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_size_new";
end;

define C-function pango-attr-size-new-absolute
  input parameter arg1 :: <C-signed-int>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_size_new_absolute";
end;

define C-function pango-attr-style-new
  input parameter arg1 :: <PangoStyle>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_style_new";
end;

define C-function pango-attr-weight-new
  input parameter arg1 :: <PangoWeight>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_weight_new";
end;

define C-function pango-attr-variant-new
  input parameter arg1 :: <PangoVariant>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_variant_new";
end;

define C-function pango-attr-stretch-new
  input parameter arg1 :: <PangoStretch>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_stretch_new";
end;

define C-function pango-attr-font-desc-new
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_font_desc_new";
end;

define C-function pango-attr-underline-new
  input parameter arg1 :: <PangoUnderline>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_underline_new";
end;

define C-function pango-attr-underline-color-new
  input parameter arg1 :: <guint16>;
  input parameter arg2 :: <guint16>;
  input parameter arg3 :: <guint16>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_underline_color_new";
end;

define C-function pango-attr-strikethrough-new
  input parameter arg1 :: <gboolean>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_strikethrough_new";
end;

define C-function pango-attr-strikethrough-color-new
  input parameter arg1 :: <guint16>;
  input parameter arg2 :: <guint16>;
  input parameter arg3 :: <guint16>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_strikethrough_color_new";
end;

define C-function pango-attr-rise-new
  input parameter arg1 :: <C-signed-int>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_rise_new";
end;

define C-function pango-attr-scale-new
  input parameter arg1 :: <C-double>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_scale_new";
end;

define C-function pango-attr-fallback-new
  input parameter arg1 :: <gboolean>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_fallback_new";
end;

define C-function pango-attr-letter-spacing-new
  input parameter arg1 :: <C-signed-int>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_letter_spacing_new";
end;

define C-function pango-attr-shape-new
  input parameter arg1 :: <PangoRectangle>;
  input parameter arg2 :: <PangoRectangle>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_shape_new";
end;

define C-function pango-attr-shape-new-with-data
  input parameter arg1 :: <PangoRectangle>;
  input parameter arg2 :: <PangoRectangle>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <PangoAttrDataCopyFunc>;
  input parameter arg5 :: <GDestroyNotify>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_shape_new_with_data";
end;

define C-function pango-attr-gravity-new
  input parameter arg1 :: <PangoGravity>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_gravity_new";
end;

define C-function pango-attr-gravity-hint-new
  input parameter arg1 :: <PangoGravityHint>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_gravity_hint_new";
end;

define C-function pango-attr-list-get-type
  result res :: <GType>;
  c-name: "pango_attr_list_get_type";
end;

define C-function pango-attr-list-new
  result res :: <PangoAttrList>;
  c-name: "pango_attr_list_new";
end;

define C-function pango-attr-list-ref
  input parameter arg1 :: <PangoAttrList>;
  result res :: <PangoAttrList>;
  c-name: "pango_attr_list_ref";
end;

define C-function pango-attr-list-unref
  input parameter arg1 :: <PangoAttrList>;
  c-name: "pango_attr_list_unref";
end;

define C-function pango-attr-list-copy
  input parameter arg1 :: <PangoAttrList>;
  result res :: <PangoAttrList>;
  c-name: "pango_attr_list_copy";
end;

define C-function pango-attr-list-insert
  input parameter arg1 :: <PangoAttrList>;
  input parameter arg2 :: <PangoAttribute>;
  c-name: "pango_attr_list_insert";
end;

define C-function pango-attr-list-insert-before
  input parameter arg1 :: <PangoAttrList>;
  input parameter arg2 :: <PangoAttribute>;
  c-name: "pango_attr_list_insert_before";
end;

define C-function pango-attr-list-change
  input parameter arg1 :: <PangoAttrList>;
  input parameter arg2 :: <PangoAttribute>;
  c-name: "pango_attr_list_change";
end;

define C-function pango-attr-list-splice
  input parameter arg1 :: <PangoAttrList>;
  input parameter arg2 :: <PangoAttrList>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "pango_attr_list_splice";
end;

define C-function pango-attr-list-filter
  input parameter arg1 :: <PangoAttrList>;
  input parameter arg2 :: <PangoAttrFilterFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <PangoAttrList>;
  c-name: "pango_attr_list_filter";
end;

define C-function pango-attr-list-get-iterator
  input parameter arg1 :: <PangoAttrList>;
  result res :: <PangoAttrIterator>;
  c-name: "pango_attr_list_get_iterator";
end;

define C-function pango-attr-iterator-range
  input parameter arg1 :: <PangoAttrIterator>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "pango_attr_iterator_range";
end;

define C-function pango-attr-iterator-next
  input parameter arg1 :: <PangoAttrIterator>;
  result res :: <gboolean>;
  c-name: "pango_attr_iterator_next";
end;

define C-function pango-attr-iterator-copy
  input parameter arg1 :: <PangoAttrIterator>;
  result res :: <PangoAttrIterator>;
  c-name: "pango_attr_iterator_copy";
end;

define C-function pango-attr-iterator-destroy
  input parameter arg1 :: <PangoAttrIterator>;
  c-name: "pango_attr_iterator_destroy";
end;

define C-function pango-attr-iterator-get
  input parameter arg1 :: <PangoAttrIterator>;
  input parameter arg2 :: <PangoAttrType>;
  result res :: <PangoAttribute>;
  c-name: "pango_attr_iterator_get";
end;

define C-pointer-type <PangoLanguage*> => <PangoLanguage>;
define C-pointer-type <GSList*> => <GSList>;
define C-function pango-attr-iterator-get-font
  input parameter arg1 :: <PangoAttrIterator>;
  input parameter arg2 :: <PangoFontDescription>;
  input parameter arg3 :: <PangoLanguage*>;
  input parameter arg4 :: <GSList*>;
  c-name: "pango_attr_iterator_get_font";
end;

define C-function pango-attr-iterator-get-attrs
  input parameter arg1 :: <PangoAttrIterator>;
  result res :: <GSList>;
  c-name: "pango_attr_iterator_get_attrs";
end;

define C-pointer-type <PangoAttrList*> => <PangoAttrList>;
define C-function pango-parse-markup
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <gunichar>;
  input parameter arg4 :: <PangoAttrList*>;
  input parameter arg5 :: <c-string-vector>;
  input parameter arg6 :: <gunichar*>;
  input parameter arg7 :: <GError*>;
  result res :: <gboolean>;
  c-name: "pango_parse_markup";
end;

define C-subtype <_PangoContextClass> (<C-void*>) end;
define constant <PangoContextClass> = <_PangoContextClass>;

define C-function pango-context-get-type
  result res :: <GType>;
  c-name: "pango_context_get_type";
end;

define C-function pango-context-get-font-map
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoFontMap>;
  c-name: "pango_context_get_font_map";
end;

define C-pointer-type <PangoFontFamily*> => <PangoFontFamily>;
define C-pointer-type <PangoFontFamily**> => <PangoFontFamily*>;
define C-function pango-context-list-families
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoFontFamily**>;
  input parameter arg3 :: <int*>;
  c-name: "pango_context_list_families";
end;

define C-function pango-context-load-font
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoFontDescription>;
  result res :: <PangoFont>;
  c-name: "pango_context_load_font";
end;

define C-subtype <_PangoFontset> (<_GObject>) end;
define constant <PangoFontset> = <_PangoFontset>;

define C-function pango-context-load-fontset
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoFontDescription>;
  input parameter arg3 :: <PangoLanguage>;
  result res :: <PangoFontset>;
  c-name: "pango_context_load_fontset";
end;

define C-function pango-context-get-metrics
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoFontDescription>;
  input parameter arg3 :: <PangoLanguage>;
  result res :: <PangoFontMetrics>;
  c-name: "pango_context_get_metrics";
end;

define C-function pango-context-set-font-description
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoFontDescription>;
  c-name: "pango_context_set_font_description";
end;

define C-function pango-context-get-font-description
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoFontDescription>;
  c-name: "pango_context_get_font_description";
end;

define C-function pango-context-get-language
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoLanguage>;
  c-name: "pango_context_get_language";
end;

define C-function pango-context-set-language
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoLanguage>;
  c-name: "pango_context_set_language";
end;

define C-function pango-context-set-base-dir
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoDirection>;
  c-name: "pango_context_set_base_dir";
end;

define C-function pango-context-get-base-dir
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoDirection>;
  c-name: "pango_context_get_base_dir";
end;

define C-function pango-context-set-base-gravity
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoGravity>;
  c-name: "pango_context_set_base_gravity";
end;

define C-function pango-context-get-base-gravity
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoGravity>;
  c-name: "pango_context_get_base_gravity";
end;

define C-function pango-context-get-gravity
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoGravity>;
  c-name: "pango_context_get_gravity";
end;

define C-function pango-context-set-gravity-hint
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoGravityHint>;
  c-name: "pango_context_set_gravity_hint";
end;

define C-function pango-context-get-gravity-hint
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoGravityHint>;
  c-name: "pango_context_get_gravity_hint";
end;

define C-function pango-context-set-matrix
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoMatrix>;
  c-name: "pango_context_set_matrix";
end;

define C-function pango-context-get-matrix
  input parameter arg1 :: <PangoContext>;
  result res :: <PangoMatrix>;
  c-name: "pango_context_get_matrix";
end;

define C-function pango-itemize
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <PangoAttrList>;
  input parameter arg6 :: <PangoAttrIterator>;
  result res :: <GList>;
  c-name: "pango_itemize";
end;

define C-function pango-itemize-with-base-dir
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <PangoDirection>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <PangoAttrList>;
  input parameter arg7 :: <PangoAttrIterator>;
  result res :: <GList>;
  c-name: "pango_itemize_with_base_dir";
end;

define C-function pango-font-map-get-type
  result res :: <GType>;
  c-name: "pango_font_map_get_type";
end;

define C-function pango-font-map-load-font
  input parameter arg1 :: <PangoFontMap>;
  input parameter arg2 :: <PangoContext>;
  input parameter arg3 :: <PangoFontDescription>;
  result res :: <PangoFont>;
  c-name: "pango_font_map_load_font";
end;

define C-function pango-font-map-load-fontset
  input parameter arg1 :: <PangoFontMap>;
  input parameter arg2 :: <PangoContext>;
  input parameter arg3 :: <PangoFontDescription>;
  input parameter arg4 :: <PangoLanguage>;
  result res :: <PangoFontset>;
  c-name: "pango_font_map_load_fontset";
end;

define C-function pango-font-map-list-families
  input parameter arg1 :: <PangoFontMap>;
  input parameter arg2 :: <PangoFontFamily**>;
  input parameter arg3 :: <int*>;
  c-name: "pango_font_map_list_families";
end;

define C-function pango-fontset-get-type
  result res :: <GType>;
  c-name: "pango_fontset_get_type";
end;

define constant <anonymous-1990> = <C-function-pointer>;
define constant <PangoFontsetForeachFunc> = <anonymous-1990>;

define C-function pango-fontset-get-font
  input parameter arg1 :: <PangoFontset>;
  input parameter arg2 :: <guint>;
  result res :: <PangoFont>;
  c-name: "pango_fontset_get_font";
end;

define C-function pango-fontset-get-metrics
  input parameter arg1 :: <PangoFontset>;
  result res :: <PangoFontMetrics>;
  c-name: "pango_fontset_get_metrics";
end;

define C-function pango-fontset-foreach
  input parameter arg1 :: <PangoFontset>;
  input parameter arg2 :: <PangoFontsetForeachFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "pango_fontset_foreach";
end;

define constant $PANGO-VERSION-MAJOR = 1;

define constant $PANGO-VERSION-MINOR = 16;

define constant $PANGO-VERSION-MICRO = 1;

define constant $PANGO-VERSION-STRING = "1.16.1";

define C-function pango-attr-type-get-type
  result res :: <GType>;
  c-name: "pango_attr_type_get_type";
end;

define C-function pango-underline-get-type
  result res :: <GType>;
  c-name: "pango_underline_get_type";
end;

define C-function pango-coverage-level-get-type
  result res :: <GType>;
  c-name: "pango_coverage_level_get_type";
end;

define C-function pango-style-get-type
  result res :: <GType>;
  c-name: "pango_style_get_type";
end;

define C-function pango-variant-get-type
  result res :: <GType>;
  c-name: "pango_variant_get_type";
end;

define C-function pango-weight-get-type
  result res :: <GType>;
  c-name: "pango_weight_get_type";
end;

define C-function pango-stretch-get-type
  result res :: <GType>;
  c-name: "pango_stretch_get_type";
end;

define C-function pango-font-mask-get-type
  result res :: <GType>;
  c-name: "pango_font_mask_get_type";
end;

define C-function pango-gravity-get-type
  result res :: <GType>;
  c-name: "pango_gravity_get_type";
end;

define C-function pango-gravity-hint-get-type
  result res :: <GType>;
  c-name: "pango_gravity_hint_get_type";
end;

define C-function pango-alignment-get-type
  result res :: <GType>;
  c-name: "pango_alignment_get_type";
end;

define C-function pango-wrap-mode-get-type
  result res :: <GType>;
  c-name: "pango_wrap_mode_get_type";
end;

define C-function pango-ellipsize-mode-get-type
  result res :: <GType>;
  c-name: "pango_ellipsize_mode_get_type";
end;

define C-function pango-render-part-get-type
  result res :: <GType>;
  c-name: "pango_render_part_get_type";
end;

define C-function pango-script-get-type
  result res :: <GType>;
  c-name: "pango_script_get_type";
end;

define C-function pango-tab-align-get-type
  result res :: <GType>;
  c-name: "pango_tab_align_get_type";
end;

define C-function pango-direction-get-type
  result res :: <GType>;
  c-name: "pango_direction_get_type";
end;

define constant <GtkAnchorType> = <C-int>;
define constant $GTK-ANCHOR-CENTER = 0;
define constant $GTK-ANCHOR-NORTH = 1;
define constant $GTK-ANCHOR-NORTH-WEST = 2;
define constant $GTK-ANCHOR-NORTH-EAST = 3;
define constant $GTK-ANCHOR-SOUTH = 4;
define constant $GTK-ANCHOR-SOUTH-WEST = 5;
define constant $GTK-ANCHOR-SOUTH-EAST = 6;
define constant $GTK-ANCHOR-WEST = 7;
define constant $GTK-ANCHOR-EAST = 8;
define constant $GTK-ANCHOR-N = 1;
define constant $GTK-ANCHOR-NW = 2;
define constant $GTK-ANCHOR-NE = 3;
define constant $GTK-ANCHOR-S = 4;
define constant $GTK-ANCHOR-SW = 5;
define constant $GTK-ANCHOR-SE = 6;
define constant $GTK-ANCHOR-W = 7;
define constant $GTK-ANCHOR-E = 8;

define constant <GtkAttachOptions> = <C-int>;
define constant $GTK-EXPAND = 1;
define constant $GTK-SHRINK = 2;
define constant $GTK-FILL = 4;

define constant <GtkButtonBoxStyle> = <C-int>;
define constant $GTK-BUTTONBOX-DEFAULT-STYLE = 0;
define constant $GTK-BUTTONBOX-SPREAD = 1;
define constant $GTK-BUTTONBOX-EDGE = 2;
define constant $GTK-BUTTONBOX-START = 3;
define constant $GTK-BUTTONBOX-END = 4;

define constant <GtkCurveType> = <C-int>;
define constant $GTK-CURVE-TYPE-LINEAR = 0;
define constant $GTK-CURVE-TYPE-SPLINE = 1;
define constant $GTK-CURVE-TYPE-FREE = 2;

define constant <GtkDeleteType> = <C-int>;
define constant $GTK-DELETE-CHARS = 0;
define constant $GTK-DELETE-WORD-ENDS = 1;
define constant $GTK-DELETE-WORDS = 2;
define constant $GTK-DELETE-DISPLAY-LINES = 3;
define constant $GTK-DELETE-DISPLAY-LINE-ENDS = 4;
define constant $GTK-DELETE-PARAGRAPH-ENDS = 5;
define constant $GTK-DELETE-PARAGRAPHS = 6;
define constant $GTK-DELETE-WHITESPACE = 7;

define constant <GtkSensitivityType> = <C-int>;
define constant $GTK-SENSITIVITY-AUTO = 0;
define constant $GTK-SENSITIVITY-ON = 1;
define constant $GTK-SENSITIVITY-OFF = 2;

define constant <GtkSideType> = <C-int>;
define constant $GTK-SIDE-TOP = 0;
define constant $GTK-SIDE-BOTTOM = 1;
define constant $GTK-SIDE-LEFT = 2;
define constant $GTK-SIDE-RIGHT = 3;

define constant <GtkJustification> = <C-int>;
define constant $GTK-JUSTIFY-LEFT = 0;
define constant $GTK-JUSTIFY-RIGHT = 1;
define constant $GTK-JUSTIFY-CENTER = 2;
define constant $GTK-JUSTIFY-FILL = 3;

define constant <GtkMatchType> = <C-int>;
define constant $GTK-MATCH-ALL = 0;
define constant $GTK-MATCH-ALL-TAIL = 1;
define constant $GTK-MATCH-HEAD = 2;
define constant $GTK-MATCH-TAIL = 3;
define constant $GTK-MATCH-EXACT = 4;
define constant $GTK-MATCH-LAST = 5;

define constant <GtkMenuDirectionType> = <C-int>;
define constant $GTK-MENU-DIR-PARENT = 0;
define constant $GTK-MENU-DIR-CHILD = 1;
define constant $GTK-MENU-DIR-NEXT = 2;
define constant $GTK-MENU-DIR-PREV = 3;

define constant <GtkMetricType> = <C-int>;
define constant $GTK-PIXELS = 0;
define constant $GTK-INCHES = 1;
define constant $GTK-CENTIMETERS = 2;

define constant <GtkMovementStep> = <C-int>;
define constant $GTK-MOVEMENT-LOGICAL-POSITIONS = 0;
define constant $GTK-MOVEMENT-VISUAL-POSITIONS = 1;
define constant $GTK-MOVEMENT-WORDS = 2;
define constant $GTK-MOVEMENT-DISPLAY-LINES = 3;
define constant $GTK-MOVEMENT-DISPLAY-LINE-ENDS = 4;
define constant $GTK-MOVEMENT-PARAGRAPHS = 5;
define constant $GTK-MOVEMENT-PARAGRAPH-ENDS = 6;
define constant $GTK-MOVEMENT-PAGES = 7;
define constant $GTK-MOVEMENT-BUFFER-ENDS = 8;
define constant $GTK-MOVEMENT-HORIZONTAL-PAGES = 9;

define constant <GtkScrollStep> = <C-int>;
define constant $GTK-SCROLL-STEPS = 0;
define constant $GTK-SCROLL-PAGES = 1;
define constant $GTK-SCROLL-ENDS = 2;
define constant $GTK-SCROLL-HORIZONTAL-STEPS = 3;
define constant $GTK-SCROLL-HORIZONTAL-PAGES = 4;
define constant $GTK-SCROLL-HORIZONTAL-ENDS = 5;

define constant <GtkCornerType> = <C-int>;
define constant $GTK-CORNER-TOP-LEFT = 0;
define constant $GTK-CORNER-BOTTOM-LEFT = 1;
define constant $GTK-CORNER-TOP-RIGHT = 2;
define constant $GTK-CORNER-BOTTOM-RIGHT = 3;

define constant <GtkPackType> = <C-int>;
define constant $GTK-PACK-START = 0;
define constant $GTK-PACK-END = 1;

define constant <GtkPathType> = <C-int>;
define constant $GTK-PATH-WIDGET = 0;
define constant $GTK-PATH-WIDGET-CLASS = 1;
define constant $GTK-PATH-CLASS = 2;

define constant <GtkPolicyType> = <C-int>;
define constant $GTK-POLICY-ALWAYS = 0;
define constant $GTK-POLICY-AUTOMATIC = 1;
define constant $GTK-POLICY-NEVER = 2;

define constant <GtkPreviewType> = <C-int>;
define constant $GTK-PREVIEW-COLOR = 0;
define constant $GTK-PREVIEW-GRAYSCALE = 1;

define constant <GtkReliefStyle> = <C-int>;
define constant $GTK-RELIEF-NORMAL = 0;
define constant $GTK-RELIEF-HALF = 1;
define constant $GTK-RELIEF-NONE = 2;

define constant <GtkResizeMode> = <C-int>;
define constant $GTK-RESIZE-PARENT = 0;
define constant $GTK-RESIZE-QUEUE = 1;
define constant $GTK-RESIZE-IMMEDIATE = 2;

define constant <GtkSignalRunType> = <C-int>;
define constant $GTK-RUN-FIRST = 1;
define constant $GTK-RUN-LAST = 2;
define constant $GTK-RUN-BOTH = 3;
define constant $GTK-RUN-NO-RECURSE = 8;
define constant $GTK-RUN-ACTION = 32;
define constant $GTK-RUN-NO-HOOKS = 64;

define constant <GtkScrollType> = <C-int>;
define constant $GTK-SCROLL-NONE = 0;
define constant $GTK-SCROLL-JUMP = 1;
define constant $GTK-SCROLL-STEP-BACKWARD = 2;
define constant $GTK-SCROLL-STEP-FORWARD = 3;
define constant $GTK-SCROLL-PAGE-BACKWARD = 4;
define constant $GTK-SCROLL-PAGE-FORWARD = 5;
define constant $GTK-SCROLL-STEP-UP = 6;
define constant $GTK-SCROLL-STEP-DOWN = 7;
define constant $GTK-SCROLL-PAGE-UP = 8;
define constant $GTK-SCROLL-PAGE-DOWN = 9;
define constant $GTK-SCROLL-STEP-LEFT = 10;
define constant $GTK-SCROLL-STEP-RIGHT = 11;
define constant $GTK-SCROLL-PAGE-LEFT = 12;
define constant $GTK-SCROLL-PAGE-RIGHT = 13;
define constant $GTK-SCROLL-START = 14;
define constant $GTK-SCROLL-END = 15;

define constant <GtkSelectionMode> = <C-int>;
define constant $GTK-SELECTION-NONE = 0;
define constant $GTK-SELECTION-SINGLE = 1;
define constant $GTK-SELECTION-BROWSE = 2;
define constant $GTK-SELECTION-MULTIPLE = 3;
define constant $GTK-SELECTION-EXTENDED = 3;

define constant <GtkSubmenuDirection> = <C-int>;
define constant $GTK-DIRECTION-LEFT = 0;
define constant $GTK-DIRECTION-RIGHT = 1;

define constant <GtkSubmenuPlacement> = <C-int>;
define constant $GTK-TOP-BOTTOM = 0;
define constant $GTK-LEFT-RIGHT = 1;

define constant <GtkToolbarStyle> = <C-int>;
define constant $GTK-TOOLBAR-ICONS = 0;
define constant $GTK-TOOLBAR-TEXT = 1;
define constant $GTK-TOOLBAR-BOTH = 2;
define constant $GTK-TOOLBAR-BOTH-HORIZ = 3;

define constant <GtkUpdateType> = <C-int>;
define constant $GTK-UPDATE-CONTINUOUS = 0;
define constant $GTK-UPDATE-DISCONTINUOUS = 1;
define constant $GTK-UPDATE-DELAYED = 2;

define constant <GtkVisibility> = <C-int>;
define constant $GTK-VISIBILITY-NONE = 0;
define constant $GTK-VISIBILITY-PARTIAL = 1;
define constant $GTK-VISIBILITY-FULL = 2;

define constant <GtkWrapMode> = <C-int>;
define constant $GTK-WRAP-NONE = 0;
define constant $GTK-WRAP-CHAR = 1;
define constant $GTK-WRAP-WORD = 2;
define constant $GTK-WRAP-WORD-CHAR = 3;

define constant <GtkSortType> = <C-int>;
define constant $GTK-SORT-ASCENDING = 0;
define constant $GTK-SORT-DESCENDING = 1;

define constant <GtkIMPreeditStyle> = <C-int>;
define constant $GTK-IM-PREEDIT-NOTHING = 0;
define constant $GTK-IM-PREEDIT-CALLBACK = 1;
define constant $GTK-IM-PREEDIT-NONE = 2;

define constant <GtkIMStatusStyle> = <C-int>;
define constant $GTK-IM-STATUS-NOTHING = 0;
define constant $GTK-IM-STATUS-CALLBACK = 1;
define constant $GTK-IM-STATUS-NONE = 2;

define constant <GtkPackDirection> = <C-int>;
define constant $GTK-PACK-DIRECTION-LTR = 0;
define constant $GTK-PACK-DIRECTION-RTL = 1;
define constant $GTK-PACK-DIRECTION-TTB = 2;
define constant $GTK-PACK-DIRECTION-BTT = 3;

define constant <GtkPrintPages> = <C-int>;
define constant $GTK-PRINT-PAGES-ALL = 0;
define constant $GTK-PRINT-PAGES-CURRENT = 1;
define constant $GTK-PRINT-PAGES-RANGES = 2;

define constant <GtkPageSet> = <C-int>;
define constant $GTK-PAGE-SET-ALL = 0;
define constant $GTK-PAGE-SET-EVEN = 1;
define constant $GTK-PAGE-SET-ODD = 2;

define constant <GtkPageOrientation> = <C-int>;
define constant $GTK-PAGE-ORIENTATION-PORTRAIT = 0;
define constant $GTK-PAGE-ORIENTATION-LANDSCAPE = 1;
define constant $GTK-PAGE-ORIENTATION-REVERSE-PORTRAIT = 2;
define constant $GTK-PAGE-ORIENTATION-REVERSE-LANDSCAPE = 3;

define constant <GtkPrintQuality> = <C-int>;
define constant $GTK-PRINT-QUALITY-LOW = 0;
define constant $GTK-PRINT-QUALITY-NORMAL = 1;
define constant $GTK-PRINT-QUALITY-HIGH = 2;
define constant $GTK-PRINT-QUALITY-DRAFT = 3;

define constant <GtkPrintDuplex> = <C-int>;
define constant $GTK-PRINT-DUPLEX-SIMPLEX = 0;
define constant $GTK-PRINT-DUPLEX-HORIZONTAL = 1;
define constant $GTK-PRINT-DUPLEX-VERTICAL = 2;

define constant <GtkUnit> = <C-int>;
define constant $GTK-UNIT-PIXEL = 0;
define constant $GTK-UNIT-POINTS = 1;
define constant $GTK-UNIT-INCH = 2;
define constant $GTK-UNIT-MM = 3;

define constant <GtkTreeViewGridLines> = <C-int>;
define constant $GTK-TREE-VIEW-GRID-LINES-NONE = 0;
define constant $GTK-TREE-VIEW-GRID-LINES-HORIZONTAL = 1;
define constant $GTK-TREE-VIEW-GRID-LINES-VERTICAL = 2;
define constant $GTK-TREE-VIEW-GRID-LINES-BOTH = 3;

define constant $GTK-PATH-PRIO-MASK = 15;

define C-function gdk-parse-args
  input parameter arg1 :: <gint*>;
  input parameter arg2 :: <gchar***>;
  c-name: "gdk_parse_args";
end;

define C-function gdk-init
  input parameter arg1 :: <gint*>;
  input parameter arg2 :: <gchar***>;
  c-name: "gdk_init";
end;

define C-function gdk-init-check
  input parameter arg1 :: <gint*>;
  input parameter arg2 :: <gchar***>;
  result res :: <gboolean>;
  c-name: "gdk_init_check";
end;

define C-function gdk-add-option-entries-libgtk-only
  input parameter arg1 :: <GOptionGroup>;
  c-name: "gdk_add_option_entries_libgtk_only";
end;

define C-function gdk-pre-parse-libgtk-only
  c-name: "gdk_pre_parse_libgtk_only";
end;

define C-function gdk-exit
  input parameter arg1 :: <gint>;
  c-name: "gdk_exit";
end;

define C-function gdk-set-locale
  result res :: <gchar*>;
  c-name: "gdk_set_locale";
end;

define C-function gdk-get-program-class
  result res :: <char*>;
  c-name: "gdk_get_program_class";
end;

define C-function gdk-set-program-class
  input parameter arg1 :: <char*>;
  c-name: "gdk_set_program_class";
end;

define C-function gdk-error-trap-push
  c-name: "gdk_error_trap_push";
end;

define C-function gdk-error-trap-pop
  result res :: <gint>;
  c-name: "gdk_error_trap_pop";
end;

define C-function gdk-set-use-xshm
  input parameter arg1 :: <gboolean>;
  c-name: "gdk_set_use_xshm";
end;

define C-function gdk-get-use-xshm
  result res :: <gboolean>;
  c-name: "gdk_get_use_xshm";
end;

define C-function gdk-get-display
  result res :: <gchar*>;
  c-name: "gdk_get_display";
end;

define C-function gdk-get-display-arg-name
  result res :: <gchar*>;
  c-name: "gdk_get_display_arg_name";
end;

define constant <GdkInputCondition> = <C-int>;
define constant $GDK-INPUT-READ = 1;
define constant $GDK-INPUT-WRITE = 2;
define constant $GDK-INPUT-EXCEPTION = 4;

define constant <anonymous-2297> = <C-function-pointer>;
define constant <GdkInputFunction> = <anonymous-2297>;

define constant <anonymous-2298> = <C-function-pointer>;
define constant <GdkDestroyNotify> = <anonymous-2298>;

define C-function gdk-input-add-full
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GdkInputCondition>;
  input parameter arg3 :: <GdkInputFunction>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GdkDestroyNotify>;
  result res :: <gint>;
  c-name: "gdk_input_add_full";
end;

define C-function gdk-input-add
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GdkInputCondition>;
  input parameter arg3 :: <GdkInputFunction>;
  input parameter arg4 :: <gpointer>;
  result res :: <gint>;
  c-name: "gdk_input_add";
end;

define C-function gdk-input-remove
  input parameter arg1 :: <gint>;
  c-name: "gdk_input_remove";
end;

define constant <GdkGrabStatus> = <C-int>;
define constant $GDK-GRAB-SUCCESS = 0;
define constant $GDK-GRAB-ALREADY-GRABBED = 1;
define constant $GDK-GRAB-INVALID-TIME = 2;
define constant $GDK-GRAB-NOT-VIEWABLE = 3;
define constant $GDK-GRAB-FROZEN = 4;

define constant <GdkEventMask> = <C-int>;
define constant $GDK-EXPOSURE-MASK = 2;
define constant $GDK-POINTER-MOTION-MASK = 4;
define constant $GDK-POINTER-MOTION-HINT-MASK = 8;
define constant $GDK-BUTTON-MOTION-MASK = 16;
define constant $GDK-BUTTON1-MOTION-MASK = 32;
define constant $GDK-BUTTON2-MOTION-MASK = 64;
define constant $GDK-BUTTON3-MOTION-MASK = 128;
define constant $GDK-BUTTON-PRESS-MASK = 256;
define constant $GDK-BUTTON-RELEASE-MASK = 512;
define constant $GDK-KEY-PRESS-MASK = 1024;
define constant $GDK-KEY-RELEASE-MASK = 2048;
define constant $GDK-ENTER-NOTIFY-MASK = 4096;
define constant $GDK-LEAVE-NOTIFY-MASK = 8192;
define constant $GDK-FOCUS-CHANGE-MASK = 16384;
define constant $GDK-STRUCTURE-MASK = 32768;
define constant $GDK-PROPERTY-CHANGE-MASK = 65536;
define constant $GDK-VISIBILITY-NOTIFY-MASK = 131072;
define constant $GDK-PROXIMITY-IN-MASK = 262144;
define constant $GDK-PROXIMITY-OUT-MASK = 524288;
define constant $GDK-SUBSTRUCTURE-MASK = 1048576;
define constant $GDK-SCROLL-MASK = 2097152;
define constant $GDK-ALL-EVENTS-MASK = 4194302;

define constant <GdkCursorType> = <C-int>;
define constant $GDK-X-CURSOR = 0;
define constant $GDK-ARROW = 2;
define constant $GDK-BASED-ARROW-DOWN = 4;
define constant $GDK-BASED-ARROW-UP = 6;
define constant $GDK-BOAT = 8;
define constant $GDK-BOGOSITY = 10;
define constant $GDK-BOTTOM-LEFT-CORNER = 12;
define constant $GDK-BOTTOM-RIGHT-CORNER = 14;
define constant $GDK-BOTTOM-SIDE = 16;
define constant $GDK-BOTTOM-TEE = 18;
define constant $GDK-BOX-SPIRAL = 20;
define constant $GDK-CENTER-PTR = 22;
define constant $GDK-CIRCLE = 24;
define constant $GDK-CLOCK = 26;
define constant $GDK-COFFEE-MUG = 28;
define constant $GDK-CROSS = 30;
define constant $GDK-CROSS-REVERSE = 32;
define constant $GDK-CROSSHAIR = 34;
define constant $GDK-DIAMOND-CROSS = 36;
define constant $GDK-DOT = 38;
define constant $GDK-DOTBOX = 40;
define constant $GDK-DOUBLE-ARROW = 42;
define constant $GDK-DRAFT-LARGE = 44;
define constant $GDK-DRAFT-SMALL = 46;
define constant $GDK-DRAPED-BOX = 48;
define constant $GDK-EXCHANGE = 50;
define constant $GDK-FLEUR = 52;
define constant $GDK-GOBBLER = 54;
define constant $GDK-GUMBY = 56;
define constant $GDK-HAND1 = 58;
define constant $GDK-HAND2 = 60;
define constant $GDK-HEART = 62;
define constant $GDK-ICON = 64;
define constant $GDK-IRON-CROSS = 66;
define constant $GDK-LEFT-PTR = 68;
define constant $GDK-LEFT-SIDE = 70;
define constant $GDK-LEFT-TEE = 72;
define constant $GDK-LEFTBUTTON = 74;
define constant $GDK-LL-ANGLE = 76;
define constant $GDK-LR-ANGLE = 78;
define constant $GDK-MAN = 80;
define constant $GDK-MIDDLEBUTTON = 82;
define constant $GDK-MOUSE = 84;
define constant $GDK-PENCIL = 86;
define constant $GDK-PIRATE = 88;
define constant $GDK-PLUS = 90;
define constant $GDK-QUESTION-ARROW = 92;
define constant $GDK-RIGHT-PTR = 94;
define constant $GDK-RIGHT-SIDE = 96;
define constant $GDK-RIGHT-TEE = 98;
define constant $GDK-RIGHTBUTTON = 100;
define constant $GDK-RTL-LOGO = 102;
define constant $GDK-SAILBOAT = 104;
define constant $GDK-SB-DOWN-ARROW = 106;
define constant $GDK-SB-H-DOUBLE-ARROW = 108;
define constant $GDK-SB-LEFT-ARROW = 110;
define constant $GDK-SB-RIGHT-ARROW = 112;
define constant $GDK-SB-UP-ARROW = 114;
define constant $GDK-SB-V-DOUBLE-ARROW = 116;
define constant $GDK-SHUTTLE = 118;
define constant $GDK-SIZING = 120;
define constant $GDK-SPIDER = 122;
define constant $GDK-SPRAYCAN = 124;
define constant $GDK-STAR = 126;
define constant $GDK-TARGET = 128;
define constant $GDK-TCROSS = 130;
define constant $GDK-TOP-LEFT-ARROW = 132;
define constant $GDK-TOP-LEFT-CORNER = 134;
define constant $GDK-TOP-RIGHT-CORNER = 136;
define constant $GDK-TOP-SIDE = 138;
define constant $GDK-TOP-TEE = 140;
define constant $GDK-TREK = 142;
define constant $GDK-UL-ANGLE = 144;
define constant $GDK-UMBRELLA = 146;
define constant $GDK-UR-ANGLE = 148;
define constant $GDK-WATCH = 150;
define constant $GDK-XTERM = 152;
define constant $GDK-LAST-CURSOR = 153;
define constant $GDK-CURSOR-IS-PIXMAP = -1;

define C-subtype <_GdkCursor> (<C-void*>) end;
define constant <GdkCursor> = <_GdkCursor>;

define C-function gdk-pointer-grab
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <GdkEventMask>;
  input parameter arg4 :: <GdkWindow>;
  input parameter arg5 :: <GdkCursor>;
  input parameter arg6 :: <guint32>;
  result res :: <GdkGrabStatus>;
  c-name: "gdk_pointer_grab";
end;

define C-function gdk-keyboard-grab
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <guint32>;
  result res :: <GdkGrabStatus>;
  c-name: "gdk_keyboard_grab";
end;

define C-function gdk-pointer-grab-info-libgtk-only
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkWindow*>;
  input parameter arg3 :: <gboolean*>;
  result res :: <gboolean>;
  c-name: "gdk_pointer_grab_info_libgtk_only";
end;

define C-function gdk-keyboard-grab-info-libgtk-only
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkWindow*>;
  input parameter arg3 :: <gboolean*>;
  result res :: <gboolean>;
  c-name: "gdk_keyboard_grab_info_libgtk_only";
end;

define C-function gdk-pointer-ungrab
  input parameter arg1 :: <guint32>;
  c-name: "gdk_pointer_ungrab";
end;

define C-function gdk-keyboard-ungrab
  input parameter arg1 :: <guint32>;
  c-name: "gdk_keyboard_ungrab";
end;

define C-function gdk-pointer-is-grabbed
  result res :: <gboolean>;
  c-name: "gdk_pointer_is_grabbed";
end;

define C-function gdk-screen-width
  result res :: <gint>;
  c-name: "gdk_screen_width";
end;

define C-function gdk-screen-height
  result res :: <gint>;
  c-name: "gdk_screen_height";
end;

define C-function gdk-screen-width-mm
  result res :: <gint>;
  c-name: "gdk_screen_width_mm";
end;

define C-function gdk-screen-height-mm
  result res :: <gint>;
  c-name: "gdk_screen_height_mm";
end;

define C-function gdk-beep
  c-name: "gdk_beep";
end;

define C-function gdk-flush
  c-name: "gdk_flush";
end;

define C-function gdk-set-double-click-time
  input parameter arg1 :: <guint>;
  c-name: "gdk_set_double_click_time";
end;

define C-function gdk-rectangle-intersect
  input parameter arg1 :: <GdkRectangle>;
  input parameter arg2 :: <GdkRectangle>;
  input parameter arg3 :: <GdkRectangle>;
  result res :: <gboolean>;
  c-name: "gdk_rectangle_intersect";
end;

define C-function gdk-rectangle-union
  input parameter arg1 :: <GdkRectangle>;
  input parameter arg2 :: <GdkRectangle>;
  input parameter arg3 :: <GdkRectangle>;
  c-name: "gdk_rectangle_union";
end;

define C-function gdk-rectangle-get-type
  result res :: <GType>;
  c-name: "gdk_rectangle_get_type";
end;

define constant <GdkWChar> = <guint32>;

define C-pointer-type <GdkWChar*> => <GdkWChar>;
define C-function gdk-wcstombs
  input parameter arg1 :: <GdkWChar*>;
  result res :: <gchar*>;
  c-name: "gdk_wcstombs";
end;

define C-function gdk-mbstowcs
  input parameter arg1 :: <GdkWChar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gdk_mbstowcs";
end;

define C-function gdk-event-send-client-message
  input parameter arg1 :: <GdkEvent>;
  input parameter arg2 :: <GdkNativeWindow>;
  result res :: <gboolean>;
  c-name: "gdk_event_send_client_message";
end;

define C-function gdk-event-send-clientmessage-toall
  input parameter arg1 :: <GdkEvent>;
  c-name: "gdk_event_send_clientmessage_toall";
end;

define C-function gdk-event-send-client-message-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkEvent>;
  input parameter arg3 :: <GdkNativeWindow>;
  result res :: <gboolean>;
  c-name: "gdk_event_send_client_message_for_display";
end;

define C-function gdk-notify-startup-complete
  c-name: "gdk_notify_startup_complete";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "gdk-threads-mutex"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gdk-threads-lock"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gdk-threads-unlock"*/
define C-function gdk-threads-enter
  c-name: "gdk_threads_enter";
end;

define C-function gdk-threads-leave
  c-name: "gdk_threads_leave";
end;

define C-function gdk-threads-init
  c-name: "gdk_threads_init";
end;

define C-function gdk-threads-set-lock-functions
  input parameter arg1 :: <GCallback>;
  input parameter arg2 :: <GCallback>;
  c-name: "gdk_threads_set_lock_functions";
end;

define constant $GDK-PRIORITY-EVENTS = 0;

define constant <GdkWindowClass> = <C-int>;
define constant $GDK-INPUT-OUTPUT = 0;
define constant $GDK-INPUT-ONLY = 1;

define constant <GdkWindowType> = <C-int>;
define constant $GDK-WINDOW-ROOT = 0;
define constant $GDK-WINDOW-TOPLEVEL = 1;
define constant $GDK-WINDOW-CHILD = 2;
define constant $GDK-WINDOW-DIALOG = 3;
define constant $GDK-WINDOW-TEMP = 4;
define constant $GDK-WINDOW-FOREIGN = 5;

define C-subtype <_GdkWindowAttr> (<C-void*>) end;
define constant <GdkWindowAttr> = <_GdkWindowAttr>;

define constant <anonymous-2978> = <C-function-pointer>;
define constant <anonymous-2979> = <C-function-pointer>;
define C-subtype <_GdkPointerHooks> (<C-void*>) end;
define constant <GdkPointerHooks> = <_GdkPointerHooks>;

define constant <GdkWindowAttributesType> = <C-int>;
define constant $GDK-WA-TITLE = 2;
define constant $GDK-WA-X = 4;
define constant $GDK-WA-Y = 8;
define constant $GDK-WA-CURSOR = 16;
define constant $GDK-WA-COLORMAP = 32;
define constant $GDK-WA-VISUAL = 64;
define constant $GDK-WA-WMCLASS = 128;
define constant $GDK-WA-NOREDIR = 256;

define constant <GdkWMDecoration> = <C-int>;
define constant $GDK-DECOR-ALL = 1;
define constant $GDK-DECOR-BORDER = 2;
define constant $GDK-DECOR-RESIZEH = 4;
define constant $GDK-DECOR-TITLE = 8;
define constant $GDK-DECOR-MENU = 16;
define constant $GDK-DECOR-MINIMIZE = 32;
define constant $GDK-DECOR-MAXIMIZE = 64;

define constant <GdkWMFunction> = <C-int>;
define constant $GDK-FUNC-ALL = 1;
define constant $GDK-FUNC-RESIZE = 2;
define constant $GDK-FUNC-MOVE = 4;
define constant $GDK-FUNC-MINIMIZE = 8;
define constant $GDK-FUNC-MAXIMIZE = 16;
define constant $GDK-FUNC-CLOSE = 32;

define constant <GdkWindowObject> = <_GdkWindowObject>;

define C-subtype <_GdkWindowObject> (<C-void*>) end;
define constant <GdkFunction> = <C-int>;
define constant $GDK-COPY = 0;
define constant $GDK-INVERT = 1;
define constant $GDK-XOR = 2;
define constant $GDK-CLEAR = 3;
define constant $GDK-AND = 4;
define constant $GDK-AND-REVERSE = 5;
define constant $GDK-AND-INVERT = 6;
define constant $GDK-NOOP = 7;
define constant $GDK-OR = 8;
define constant $GDK-EQUIV = 9;
define constant $GDK-OR-REVERSE = 10;
define constant $GDK-COPY-INVERT = 11;
define constant $GDK-OR-INVERT = 12;
define constant $GDK-NAND = 13;
define constant $GDK-NOR = 14;
define constant $GDK-SET = 15;

define constant <GdkFill> = <C-int>;
define constant $GDK-SOLID = 0;
define constant $GDK-TILED = 1;
define constant $GDK-STIPPLED = 2;
define constant $GDK-OPAQUE-STIPPLED = 3;

define constant <GdkSubwindowMode> = <C-int>;
define constant $GDK-CLIP-BY-CHILDREN = 0;
define constant $GDK-INCLUDE-INFERIORS = 1;

define constant <GdkLineStyle> = <C-int>;
define constant $GDK-LINE-SOLID = 0;
define constant $GDK-LINE-ON-OFF-DASH = 1;
define constant $GDK-LINE-DOUBLE-DASH = 2;

define constant <GdkCapStyle> = <C-int>;
define constant $GDK-CAP-NOT-LAST = 0;
define constant $GDK-CAP-BUTT = 1;
define constant $GDK-CAP-ROUND = 2;
define constant $GDK-CAP-PROJECTING = 3;

define constant <GdkJoinStyle> = <C-int>;
define constant $GDK-JOIN-MITER = 0;
define constant $GDK-JOIN-ROUND = 1;
define constant $GDK-JOIN-BEVEL = 2;

define C-subtype <_GdkGCValues> (<C-void*>) end;
define constant <GdkGCValues> = <_GdkGCValues>;

define constant <GdkGCValuesMask> = <C-int>;
define constant $GDK-GC-FOREGROUND = 1;
define constant $GDK-GC-BACKGROUND = 2;
define constant $GDK-GC-FONT = 4;
define constant $GDK-GC-FUNCTION = 8;
define constant $GDK-GC-FILL = 16;
define constant $GDK-GC-TILE = 32;
define constant $GDK-GC-STIPPLE = 64;
define constant $GDK-GC-CLIP-MASK = 128;
define constant $GDK-GC-SUBWINDOW = 256;
define constant $GDK-GC-TS-X-ORIGIN = 512;
define constant $GDK-GC-TS-Y-ORIGIN = 1024;
define constant $GDK-GC-CLIP-X-ORIGIN = 2048;
define constant $GDK-GC-CLIP-Y-ORIGIN = 4096;
define constant $GDK-GC-EXPOSURES = 8192;
define constant $GDK-GC-LINE-WIDTH = 16384;
define constant $GDK-GC-LINE-STYLE = 32768;
define constant $GDK-GC-CAP-STYLE = 65536;
define constant $GDK-GC-JOIN-STYLE = 131072;

define constant <anonymous-2658> = <C-function-pointer>;
define constant <anonymous-2659> = <C-function-pointer>;
define constant <anonymous-2660> = <C-function-pointer>;
define constant <anonymous-2661> = <C-function-pointer>;
define constant <anonymous-2662> = <C-function-pointer>;
define constant <anonymous-2663> = <C-function-pointer>;
define constant <anonymous-2664> = <C-function-pointer>;
define constant <anonymous-2665> = <C-function-pointer>;
define C-subtype <_GdkSegment> (<C-void*>) end;
define constant <GdkSegment> = <_GdkSegment>;

define constant <anonymous-2666> = <C-function-pointer>;
define constant <anonymous-2667> = <C-function-pointer>;
define constant <anonymous-2668> = <C-function-pointer>;
define constant <GdkImageType> = <C-int>;
define constant $GDK-IMAGE-NORMAL = 0;
define constant $GDK-IMAGE-SHARED = 1;
define constant $GDK-IMAGE-FASTEST = 2;

define C-subtype <_GdkImage> (<_GObject>) end;
define constant <GdkImage> = <_GdkImage>;

define constant <anonymous-2669> = <C-function-pointer>;
define constant <anonymous-2670> = <C-function-pointer>;
define constant <anonymous-2671> = <C-function-pointer>;
define constant <anonymous-2672> = <C-function-pointer>;
define constant <anonymous-2673> = <C-function-pointer>;
define constant <anonymous-2674> = <C-function-pointer>;
define constant <anonymous-2675> = <C-function-pointer>;
define constant <anonymous-2676> = <C-function-pointer>;
define constant <anonymous-2677> = <C-function-pointer>;
define constant <anonymous-2678> = <C-function-pointer>;
define constant <anonymous-2679> = <C-function-pointer>;
define constant <GdkRgbDither> = <C-int>;
define constant $GDK-RGB-DITHER-NONE = 0;
define constant $GDK-RGB-DITHER-NORMAL = 1;
define constant $GDK-RGB-DITHER-MAX = 2;

define constant <anonymous-2680> = <C-function-pointer>;
define constant <anonymous-2681> = <C-function-pointer>;
define constant <anonymous-2682> = <C-function-pointer>;
define C-subtype <_GdkTrapezoid> (<C-void*>) end;
define constant <GdkTrapezoid> = <_GdkTrapezoid>;

define constant <anonymous-2683> = <C-function-pointer>;
define C-subtype <_cairo-surface> (<C-void*>) end;
define constant <cairo-surface-t> = <_cairo-surface>;

define constant <anonymous-2684> = <C-function-pointer>;
define constant <anonymous-2685> = <C-function-pointer>;
define constant <anonymous-2686> = <C-function-pointer>;
define constant <anonymous-2687> = <C-function-pointer>;
define constant <anonymous-2688> = <C-function-pointer>;
define constant <anonymous-2689> = <C-function-pointer>;
define constant <anonymous-2690> = <C-function-pointer>;
define constant <anonymous-2691> = <C-function-pointer>;
define constant <anonymous-2692> = <C-function-pointer>;
define constant <anonymous-2693> = <C-function-pointer>;
define constant <anonymous-2694> = <C-function-pointer>;
define constant <anonymous-2695> = <C-function-pointer>;
define constant <anonymous-2696> = <C-function-pointer>;
define C-subtype <_GdkDrawableClass> (<C-void*>) end;
define constant <GdkDrawableClass> = <_GdkDrawableClass>;

define C-subtype <_GdkWindowObjectClass> (<C-void*>) end;
define constant <GdkWindowObjectClass> = <_GdkWindowObjectClass>;

define C-function gdk-window-object-get-type
  result res :: <GType>;
  c-name: "gdk_window_object_get_type";
end;

define C-function gdk-window-new
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWindowAttr>;
  input parameter arg3 :: <gint>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_new";
end;

define C-function gdk-window-destroy
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_destroy";
end;

define C-function gdk-window-get-window-type
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkWindowType>;
  c-name: "gdk_window_get_window_type";
end;

define C-function gdk-window-at-pointer
  input parameter arg1 :: <gint*>;
  input parameter arg2 :: <gint*>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_at_pointer";
end;

define C-function gdk-window-show
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_show";
end;

define C-function gdk-window-hide
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_hide";
end;

define C-function gdk-window-withdraw
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_withdraw";
end;

define C-function gdk-window-show-unraised
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_show_unraised";
end;

define C-function gdk-window-move
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_window_move";
end;

define C-function gdk-window-resize
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_window_resize";
end;

define C-function gdk-window-move-resize
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gdk_window_move_resize";
end;

define C-function gdk-window-reparent
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_window_reparent";
end;

define C-function gdk-window-clear
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_clear";
end;

define C-function gdk-window-clear-area
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gdk_window_clear_area";
end;

define C-function gdk-window-clear-area-e
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gdk_window_clear_area_e";
end;

define C-function gdk-window-raise
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_raise";
end;

define C-function gdk-window-lower
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_lower";
end;

define C-function gdk-window-focus
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <guint32>;
  c-name: "gdk_window_focus";
end;

define C-function gdk-window-set-user-data
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gpointer>;
  c-name: "gdk_window_set_user_data";
end;

define C-function gdk-window-set-override-redirect
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_override_redirect";
end;

define C-function gdk-window-set-accept-focus
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_accept_focus";
end;

define C-function gdk-window-set-focus-on-map
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_focus_on_map";
end;

define constant <GdkFilterReturn> = <C-int>;
define constant $GDK-FILTER-CONTINUE = 0;
define constant $GDK-FILTER-TRANSLATE = 1;
define constant $GDK-FILTER-REMOVE = 2;

define constant <GdkXEvent> = <C-int>;

define C-pointer-type <GdkXEvent*> => <GdkXEvent>;
define constant <anonymous-2533> = <C-function-pointer>;
define constant <GdkFilterFunc> = <anonymous-2533>;

define C-function gdk-window-add-filter
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkFilterFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gdk_window_add_filter";
end;

define C-function gdk-window-remove-filter
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkFilterFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gdk_window_remove_filter";
end;

define C-function gdk-window-scroll
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_window_scroll";
end;

define C-function gdk-window-move-region
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRegion>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_window_move_region";
end;

define C-function gdk-window-shape-combine-mask
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkBitmap>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_window_shape_combine_mask";
end;

define C-function gdk-window-shape-combine-region
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRegion>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_window_shape_combine_region";
end;

define C-function gdk-window-set-child-shapes
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_set_child_shapes";
end;

define C-function gdk-window-merge-child-shapes
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_merge_child_shapes";
end;

define C-function gdk-window-input-shape-combine-mask
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkBitmap>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_window_input_shape_combine_mask";
end;

define C-function gdk-window-input-shape-combine-region
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRegion>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_window_input_shape_combine_region";
end;

define C-function gdk-window-set-child-input-shapes
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_set_child_input_shapes";
end;

define C-function gdk-window-merge-child-input-shapes
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_merge_child_input_shapes";
end;

define C-function gdk-window-is-visible
  input parameter arg1 :: <GdkWindow>;
  result res :: <gboolean>;
  c-name: "gdk_window_is_visible";
end;

define C-function gdk-window-is-viewable
  input parameter arg1 :: <GdkWindow>;
  result res :: <gboolean>;
  c-name: "gdk_window_is_viewable";
end;

define C-function gdk-window-get-state
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkWindowState>;
  c-name: "gdk_window_get_state";
end;

define C-function gdk-window-set-static-gravities
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gdk_window_set_static_gravities";
end;

define C-function gdk-window-foreign-new
  input parameter arg1 :: <GdkNativeWindow>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_foreign_new";
end;

define C-function gdk-window-lookup
  input parameter arg1 :: <GdkNativeWindow>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_lookup";
end;

define C-function gdk-window-foreign-new-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkNativeWindow>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_foreign_new_for_display";
end;

define C-function gdk-window-lookup-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkNativeWindow>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_lookup_for_display";
end;

define C-function gdk-window-set-hints
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  c-name: "gdk_window_set_hints";
end;

define C-function gdk-window-set-type-hint
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWindowTypeHint>;
  c-name: "gdk_window_set_type_hint";
end;

define C-function gdk-window-get-type-hint
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkWindowTypeHint>;
  c-name: "gdk_window_get_type_hint";
end;

define C-function gdk-window-set-modal-hint
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_modal_hint";
end;

define C-function gdk-window-set-skip-taskbar-hint
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_skip_taskbar_hint";
end;

define C-function gdk-window-set-skip-pager-hint
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_skip_pager_hint";
end;

define C-function gdk-window-set-urgency-hint
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_urgency_hint";
end;

define C-function gdk-window-set-geometry-hints
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkGeometry>;
  input parameter arg3 :: <GdkWindowHints>;
  c-name: "gdk_window_set_geometry_hints";
end;

define C-function gdk-set-sm-client-id
  input parameter arg1 :: <gchar*>;
  c-name: "gdk_set_sm_client_id";
end;

define C-function gdk-window-begin-paint-rect
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gdk_window_begin_paint_rect";
end;

define C-function gdk-window-begin-paint-region
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRegion>;
  c-name: "gdk_window_begin_paint_region";
end;

define C-function gdk-window-end-paint
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_end_paint";
end;

define C-function gdk-window-set-title
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gchar*>;
  c-name: "gdk_window_set_title";
end;

define C-function gdk-window-set-role
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gchar*>;
  c-name: "gdk_window_set_role";
end;

define C-function gdk-window-set-transient-for
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWindow>;
  c-name: "gdk_window_set_transient_for";
end;

define C-function gdk-window-set-background
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gdk_window_set_background";
end;

define C-function gdk-window-set-back-pixmap
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkPixmap>;
  input parameter arg3 :: <gboolean>;
  c-name: "gdk_window_set_back_pixmap";
end;

define C-function gdk-window-set-cursor
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkCursor>;
  c-name: "gdk_window_set_cursor";
end;

define C-function gdk-window-get-user-data
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gpointer*>;
  c-name: "gdk_window_get_user_data";
end;

define C-function gdk-window-get-geometry
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  c-name: "gdk_window_get_geometry";
end;

define C-function gdk-window-get-position
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gdk_window_get_position";
end;

define C-function gdk-window-get-origin
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  result res :: <gint>;
  c-name: "gdk_window_get_origin";
end;

define C-function gdk-window-get-deskrelative-origin
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gdk_window_get_deskrelative_origin";
end;

define C-function gdk-window-get-root-origin
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gdk_window_get_root_origin";
end;

define C-function gdk-window-get-frame-extents
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gdk_window_get_frame_extents";
end;

define C-function gdk-window-get-pointer
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <GdkModifierType*>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_get_pointer";
end;

define C-function gdk-window-get-parent
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_get_parent";
end;

define C-function gdk-window-get-toplevel
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_get_toplevel";
end;

define C-function gdk-window-get-children
  input parameter arg1 :: <GdkWindow>;
  result res :: <GList>;
  c-name: "gdk_window_get_children";
end;

define C-function gdk-window-peek-children
  input parameter arg1 :: <GdkWindow>;
  result res :: <GList>;
  c-name: "gdk_window_peek_children";
end;

define C-function gdk-window-get-events
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkEventMask>;
  c-name: "gdk_window_get_events";
end;

define C-function gdk-window-set-events
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkEventMask>;
  c-name: "gdk_window_set_events";
end;

define C-function gdk-window-set-icon-list
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GList>;
  c-name: "gdk_window_set_icon_list";
end;

define C-function gdk-window-set-icon
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GdkPixmap>;
  input parameter arg4 :: <GdkBitmap>;
  c-name: "gdk_window_set_icon";
end;

define C-function gdk-window-set-icon-name
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gchar*>;
  c-name: "gdk_window_set_icon_name";
end;

define C-function gdk-window-set-group
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWindow>;
  c-name: "gdk_window_set_group";
end;

define C-function gdk-window-get-group
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkWindow>;
  c-name: "gdk_window_get_group";
end;

define C-function gdk-window-set-decorations
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWMDecoration>;
  c-name: "gdk_window_set_decorations";
end;

define C-pointer-type <GdkWMDecoration*> => <GdkWMDecoration>;
define C-function gdk-window-get-decorations
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWMDecoration*>;
  result res :: <gboolean>;
  c-name: "gdk_window_get_decorations";
end;

define C-function gdk-window-set-functions
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWMFunction>;
  c-name: "gdk_window_set_functions";
end;

define C-function gdk-window-get-toplevels
  result res :: <GList>;
  c-name: "gdk_window_get_toplevels";
end;

define C-function gdk-window-iconify
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_iconify";
end;

define C-function gdk-window-deiconify
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_deiconify";
end;

define C-function gdk-window-stick
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_stick";
end;

define C-function gdk-window-unstick
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_unstick";
end;

define C-function gdk-window-maximize
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_maximize";
end;

define C-function gdk-window-unmaximize
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_unmaximize";
end;

define C-function gdk-window-fullscreen
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_fullscreen";
end;

define C-function gdk-window-unfullscreen
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_unfullscreen";
end;

define C-function gdk-window-set-keep-above
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_keep_above";
end;

define C-function gdk-window-set-keep-below
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_set_keep_below";
end;

define C-function gdk-window-register-dnd
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_register_dnd";
end;

define C-function gdk-window-begin-resize-drag
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkWindowEdge>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <guint32>;
  c-name: "gdk_window_begin_resize_drag";
end;

define C-function gdk-window-begin-move-drag
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <guint32>;
  c-name: "gdk_window_begin_move_drag";
end;

define C-function gdk-window-invalidate-rect
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRectangle>;
  input parameter arg3 :: <gboolean>;
  c-name: "gdk_window_invalidate_rect";
end;

define C-function gdk-window-invalidate-region
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRegion>;
  input parameter arg3 :: <gboolean>;
  c-name: "gdk_window_invalidate_region";
end;

define constant <anonymous-3086> = <C-function-pointer>;
define C-function gdk-window-invalidate-maybe-recurse
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkRegion>;
  input parameter arg3 :: <anonymous-3086>;
  input parameter arg4 :: <gpointer>;
  c-name: "gdk_window_invalidate_maybe_recurse";
end;

define C-function gdk-window-get-update-area
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkRegion>;
  c-name: "gdk_window_get_update_area";
end;

define C-function gdk-window-freeze-updates
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_freeze_updates";
end;

define C-function gdk-window-thaw-updates
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_thaw_updates";
end;

define C-function gdk-window-process-all-updates
  c-name: "gdk_window_process_all_updates";
end;

define C-function gdk-window-process-updates
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_window_process_updates";
end;

define C-function gdk-window-set-debug-updates
  input parameter arg1 :: <gboolean>;
  c-name: "gdk_window_set_debug_updates";
end;

define C-function gdk-window-constrain-size
  input parameter arg1 :: <GdkGeometry>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  c-name: "gdk_window_constrain_size";
end;

define C-pointer-type <GdkDrawable*> => <GdkDrawable>;
define C-function gdk-window-get-internal-paint-info
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkDrawable*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  c-name: "gdk_window_get_internal_paint_info";
end;

define C-function gdk-window-enable-synchronized-configure
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_enable_synchronized_configure";
end;

define C-function gdk-window-configure-finished
  input parameter arg1 :: <GdkWindow>;
  c-name: "gdk_window_configure_finished";
end;

define C-function gdk-set-pointer-hooks
  input parameter arg1 :: <GdkPointerHooks>;
  result res :: <GdkPointerHooks>;
  c-name: "gdk_set_pointer_hooks";
end;

define C-function gdk-get-default-root-window
  result res :: <GdkWindow>;
  c-name: "gdk_get_default_root_window";
end;

define C-function gdk-drawable-get-size
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gdk_drawable_get_size";
end;

define constant gdk-window-get-size = gdk-drawable-get-size;

define constant gdk-window-get-type = gdk-window-get-window-type;

define C-function gdk-drawable-get-colormap
  input parameter arg1 :: <GdkDrawable>;
  result res :: <GdkColormap>;
  c-name: "gdk_drawable_get_colormap";
end;

define constant gdk-window-get-colormap = gdk-drawable-get-colormap;

define C-function gdk-drawable-set-colormap
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkColormap>;
  c-name: "gdk_drawable_set_colormap";
end;

define constant gdk-window-set-colormap = gdk-drawable-set-colormap;

define C-function gdk-drawable-get-visual
  input parameter arg1 :: <GdkDrawable>;
  result res :: <GdkVisual>;
  c-name: "gdk_drawable_get_visual";
end;

define constant gdk-window-get-visual = gdk-drawable-get-visual;

define C-function gdk-drawable-ref
  input parameter arg1 :: <GdkDrawable>;
  result res :: <GdkDrawable>;
  c-name: "gdk_drawable_ref";
end;

define constant gdk-window-ref = gdk-drawable-ref;

define C-function gdk-drawable-unref
  input parameter arg1 :: <GdkDrawable>;
  c-name: "gdk_drawable_unref";
end;

define constant gdk-window-unref = gdk-drawable-unref;

define constant <anonymous-2531> = <C-function-pointer>;
define constant <GdkEventFunc> = <anonymous-2531>;

define constant <GdkPropertyState> = <C-int>;
define constant $GDK-PROPERTY-NEW-VALUE = 0;
define constant $GDK-PROPERTY-DELETE = 1;

define C-function gdk-event-get-type
  result res :: <GType>;
  c-name: "gdk_event_get_type";
end;

define C-function gdk-events-pending
  result res :: <gboolean>;
  c-name: "gdk_events_pending";
end;

define C-function gdk-event-get
  result res :: <GdkEvent>;
  c-name: "gdk_event_get";
end;

define C-function gdk-event-peek
  result res :: <GdkEvent>;
  c-name: "gdk_event_peek";
end;

define C-function gdk-event-get-graphics-expose
  input parameter arg1 :: <GdkWindow>;
  result res :: <GdkEvent>;
  c-name: "gdk_event_get_graphics_expose";
end;

define C-function gdk-event-put
  input parameter arg1 :: <GdkEvent>;
  c-name: "gdk_event_put";
end;

define C-function gdk-event-new
  input parameter arg1 :: <GdkEventType>;
  result res :: <GdkEvent>;
  c-name: "gdk_event_new";
end;

define C-function gdk-event-copy
  input parameter arg1 :: <GdkEvent>;
  result res :: <GdkEvent>;
  c-name: "gdk_event_copy";
end;

define C-function gdk-event-free
  input parameter arg1 :: <GdkEvent>;
  c-name: "gdk_event_free";
end;

define C-function gdk-event-get-time
  input parameter arg1 :: <GdkEvent>;
  result res :: <guint32>;
  c-name: "gdk_event_get_time";
end;

define C-function gdk-event-get-state
  input parameter arg1 :: <GdkEvent>;
  input parameter arg2 :: <GdkModifierType*>;
  result res :: <gboolean>;
  c-name: "gdk_event_get_state";
end;

define C-function gdk-event-get-coords
  input parameter arg1 :: <GdkEvent>;
  input parameter arg2 :: <gdouble*>;
  input parameter arg3 :: <gdouble*>;
  result res :: <gboolean>;
  c-name: "gdk_event_get_coords";
end;

define C-function gdk-event-get-root-coords
  input parameter arg1 :: <GdkEvent>;
  input parameter arg2 :: <gdouble*>;
  input parameter arg3 :: <gdouble*>;
  result res :: <gboolean>;
  c-name: "gdk_event_get_root_coords";
end;

define C-function gdk-event-get-axis
  input parameter arg1 :: <GdkEvent>;
  input parameter arg2 :: <GdkAxisUse>;
  input parameter arg3 :: <gdouble*>;
  result res :: <gboolean>;
  c-name: "gdk_event_get_axis";
end;

define C-function gdk-event-handler-set
  input parameter arg1 :: <GdkEventFunc>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GDestroyNotify>;
  c-name: "gdk_event_handler_set";
end;

define C-function gdk-event-set-screen
  input parameter arg1 :: <GdkEvent>;
  input parameter arg2 :: <GdkScreen>;
  c-name: "gdk_event_set_screen";
end;

define C-function gdk-event-get-screen
  input parameter arg1 :: <GdkEvent>;
  result res :: <GdkScreen>;
  c-name: "gdk_event_get_screen";
end;

define C-function gdk-set-show-events
  input parameter arg1 :: <gboolean>;
  c-name: "gdk_set_show_events";
end;

define C-function gdk-get-show-events
  result res :: <gboolean>;
  c-name: "gdk_get_show_events";
end;

define C-function gdk-add-client-message-filter
  input parameter arg1 :: <GdkAtom>;
  input parameter arg2 :: <GdkFilterFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gdk_add_client_message_filter";
end;

define C-function gdk-setting-get
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GValue>;
  result res :: <gboolean>;
  c-name: "gdk_setting_get";
end;

define constant $GDK-PRIORITY-REDRAW = 120;

define C-subtype <_GdkDeviceClass> (<C-void*>) end;
define constant <GdkDeviceClass> = <_GdkDeviceClass>;

define constant <gdouble<@128>> = <gdouble*>;
define C-subtype <_GdkTimeCoord> (<C-void*>) end;
define constant <GdkTimeCoord> = <_GdkTimeCoord>;

define C-function gdk-device-get-type
  result res :: <GType>;
  c-name: "gdk_device_get_type";
end;

define C-function gdk-devices-list
  result res :: <GList>;
  c-name: "gdk_devices_list";
end;

define C-function gdk-device-set-source
  input parameter arg1 :: <GdkDevice>;
  input parameter arg2 :: <GdkInputSource>;
  c-name: "gdk_device_set_source";
end;

define C-function gdk-device-set-mode
  input parameter arg1 :: <GdkDevice>;
  input parameter arg2 :: <GdkInputMode>;
  result res :: <gboolean>;
  c-name: "gdk_device_set_mode";
end;

define C-function gdk-device-set-key
  input parameter arg1 :: <GdkDevice>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GdkModifierType>;
  c-name: "gdk_device_set_key";
end;

define C-function gdk-device-set-axis-use
  input parameter arg1 :: <GdkDevice>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkAxisUse>;
  c-name: "gdk_device_set_axis_use";
end;

define C-function gdk-device-get-state
  input parameter arg1 :: <GdkDevice>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <gdouble*>;
  input parameter arg4 :: <GdkModifierType*>;
  c-name: "gdk_device_get_state";
end;

define C-pointer-type <GdkTimeCoord*> => <GdkTimeCoord>;
define C-pointer-type <GdkTimeCoord**> => <GdkTimeCoord*>;
define C-function gdk-device-get-history
  input parameter arg1 :: <GdkDevice>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <guint32>;
  input parameter arg4 :: <guint32>;
  input parameter arg5 :: <GdkTimeCoord**>;
  input parameter arg6 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gdk_device_get_history";
end;

define C-function gdk-device-free-history
  input parameter arg1 :: <GdkTimeCoord*>;
  input parameter arg2 :: <gint>;
  c-name: "gdk_device_free_history";
end;

define C-function gdk-device-get-axis
  input parameter arg1 :: <GdkDevice>;
  input parameter arg2 :: <gdouble*>;
  input parameter arg3 :: <GdkAxisUse>;
  input parameter arg4 :: <gdouble*>;
  result res :: <gboolean>;
  c-name: "gdk_device_get_axis";
end;

define C-function gdk-input-set-extension-events
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GdkExtensionMode>;
  c-name: "gdk_input_set_extension_events";
end;

define C-function gdk-device-get-core-pointer
  result res :: <GdkDevice>;
  c-name: "gdk_device_get_core_pointer";
end;

define constant $GDK-MAX-TIMECOORD-AXES = 128;

define C-subtype <_GdkSpan> (<C-void*>) end;
define constant <GdkSpan> = <_GdkSpan>;

define constant <GdkStatus> = <C-int>;
define constant $GDK-OK = 0;
define constant $GDK-ERROR = -1;
define constant $GDK-ERROR-PARAM = -2;
define constant $GDK-ERROR-FILE = -3;
define constant $GDK-ERROR-MEM = -4;

define constant $GDK-CURRENT-TIME = 0;

define constant $GDK-PARENT-RELATIVE = 1;

define constant $GDK-HAVE-WCHAR-H = 1;

define constant $GDK-HAVE-WCTYPE-H = 1;

define constant $GDK-HAVE-BROKEN-WCTYPE = 1;

define C-subtype <_GdkDragContextClass> (<C-void*>) end;
define constant <GdkDragContextClass> = <_GdkDragContextClass>;

define C-function gdk-drag-context-get-type
  result res :: <GType>;
  c-name: "gdk_drag_context_get_type";
end;

define C-function gdk-drag-context-new
  result res :: <GdkDragContext>;
  c-name: "gdk_drag_context_new";
end;

define C-function gdk-drag-context-ref
  input parameter arg1 :: <GdkDragContext>;
  c-name: "gdk_drag_context_ref";
end;

define C-function gdk-drag-context-unref
  input parameter arg1 :: <GdkDragContext>;
  c-name: "gdk_drag_context_unref";
end;

define C-function gdk-drag-status
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <GdkDragAction>;
  input parameter arg3 :: <guint32>;
  c-name: "gdk_drag_status";
end;

define C-function gdk-drop-reply
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <guint32>;
  c-name: "gdk_drop_reply";
end;

define C-function gdk-drop-finish
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <guint32>;
  c-name: "gdk_drop_finish";
end;

define C-function gdk-drag-get-selection
  input parameter arg1 :: <GdkDragContext>;
  result res :: <GdkAtom>;
  c-name: "gdk_drag_get_selection";
end;

define C-function gdk-drag-begin
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GList>;
  result res :: <GdkDragContext>;
  c-name: "gdk_drag_begin";
end;

define C-pointer-type <GdkDragProtocol*> => <GdkDragProtocol>;
define C-function gdk-drag-get-protocol-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <guint32>;
  input parameter arg3 :: <GdkDragProtocol*>;
  result res :: <guint32>;
  c-name: "gdk_drag_get_protocol_for_display";
end;

define C-function gdk-drag-find-window-for-screen
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GdkScreen>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <GdkWindow*>;
  input parameter arg7 :: <GdkDragProtocol*>;
  c-name: "gdk_drag_find_window_for_screen";
end;

define C-function gdk-drag-get-protocol
  input parameter arg1 :: <guint32>;
  input parameter arg2 :: <GdkDragProtocol*>;
  result res :: <guint32>;
  c-name: "gdk_drag_get_protocol";
end;

define C-function gdk-drag-find-window
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GdkWindow*>;
  input parameter arg6 :: <GdkDragProtocol*>;
  c-name: "gdk_drag_find_window";
end;

define C-function gdk-drag-motion
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GdkDragProtocol>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <GdkDragAction>;
  input parameter arg7 :: <GdkDragAction>;
  input parameter arg8 :: <guint32>;
  result res :: <gboolean>;
  c-name: "gdk_drag_motion";
end;

define C-function gdk-drag-drop
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <guint32>;
  c-name: "gdk_drag_drop";
end;

define C-function gdk-drag-abort
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <guint32>;
  c-name: "gdk_drag_abort";
end;

define C-function gdk-drag-drop-succeeded
  input parameter arg1 :: <GdkDragContext>;
  result res :: <gboolean>;
  c-name: "gdk_drag_drop_succeeded";
end;

define C-subtype <_GdkColormapClass> (<C-void*>) end;
define constant <GdkColormapClass> = <_GdkColormapClass>;

define C-function gdk-colormap-get-type
  result res :: <GType>;
  c-name: "gdk_colormap_get_type";
end;

define C-function gdk-colormap-new
  input parameter arg1 :: <GdkVisual>;
  input parameter arg2 :: <gboolean>;
  result res :: <GdkColormap>;
  c-name: "gdk_colormap_new";
end;

define C-function gdk-colormap-ref
  input parameter arg1 :: <GdkColormap>;
  result res :: <GdkColormap>;
  c-name: "gdk_colormap_ref";
end;

define C-function gdk-colormap-unref
  input parameter arg1 :: <GdkColormap>;
  c-name: "gdk_colormap_unref";
end;

define C-function gdk-colormap-get-system
  result res :: <GdkColormap>;
  c-name: "gdk_colormap_get_system";
end;

define C-function gdk-colormap-get-screen
  input parameter arg1 :: <GdkColormap>;
  result res :: <GdkScreen>;
  c-name: "gdk_colormap_get_screen";
end;

define C-function gdk-colormap-get-system-size
  result res :: <gint>;
  c-name: "gdk_colormap_get_system_size";
end;

define C-function gdk-colormap-change
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <gint>;
  c-name: "gdk_colormap_change";
end;

define C-function gdk-colormap-alloc-colors
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <gboolean>;
  input parameter arg6 :: <gboolean*>;
  result res :: <gint>;
  c-name: "gdk_colormap_alloc_colors";
end;

define C-function gdk-colormap-alloc-color
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gdk_colormap_alloc_color";
end;

define C-function gdk-colormap-free-colors
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_colormap_free_colors";
end;

define C-function gdk-colormap-query-color
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <gulong>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gdk_colormap_query_color";
end;

define C-function gdk-colormap-get-visual
  input parameter arg1 :: <GdkColormap>;
  result res :: <GdkVisual>;
  c-name: "gdk_colormap_get_visual";
end;

define C-function gdk-color-copy
  input parameter arg1 :: <GdkColor>;
  result res :: <GdkColor>;
  c-name: "gdk_color_copy";
end;

define C-function gdk-color-free
  input parameter arg1 :: <GdkColor>;
  c-name: "gdk_color_free";
end;

define C-function gdk-color-parse
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GdkColor>;
  result res :: <gboolean>;
  c-name: "gdk_color_parse";
end;

define C-function gdk-color-hash
  input parameter arg1 :: <GdkColor>;
  result res :: <guint>;
  c-name: "gdk_color_hash";
end;

define C-function gdk-color-equal
  input parameter arg1 :: <GdkColor>;
  input parameter arg2 :: <GdkColor>;
  result res :: <gboolean>;
  c-name: "gdk_color_equal";
end;

define C-function gdk-color-get-type
  result res :: <GType>;
  c-name: "gdk_color_get_type";
end;

define C-function gdk-colors-store
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_colors_store";
end;

define C-function gdk-color-white
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  result res :: <gint>;
  c-name: "gdk_color_white";
end;

define C-function gdk-color-black
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  result res :: <gint>;
  c-name: "gdk_color_black";
end;

define C-function gdk-color-alloc
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  result res :: <gint>;
  c-name: "gdk_color_alloc";
end;

define C-function gdk-color-change
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  result res :: <gint>;
  c-name: "gdk_color_change";
end;

define C-function gdk-colors-alloc
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <gulong*>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gulong*>;
  input parameter arg6 :: <gint>;
  result res :: <gint>;
  c-name: "gdk_colors_alloc";
end;

define C-function gdk-colors-free
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <gulong*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gulong>;
  c-name: "gdk_colors_free";
end;

define C-function cairo-version
  result res :: <C-signed-int>;
  c-name: "cairo_version";
end;

define C-function cairo-version-string
  result res :: <char*>;
  c-name: "cairo_version_string";
end;

define constant <cairo-bool-t> = <C-signed-int>;

define C-subtype <_cairo> (<C-void*>) end;
define constant <cairo-t> = <_cairo>;

define C-subtype <_cairo-matrix> (<C-void*>) end;
define constant <cairo-matrix-t> = <_cairo-matrix>;

define C-subtype <_cairo-pattern> (<C-void*>) end;
define constant <cairo-pattern-t> = <_cairo-pattern>;

define constant <anonymous-2> = <C-function-pointer>;
define constant <cairo-destroy-func-t> = <anonymous-2>;

define C-subtype <_cairo-user-data-key> (<C-void*>) end;
define constant <cairo-user-data-key-t> = <_cairo-user-data-key>;

define constant <_cairo-status> = <C-int>;
define constant $CAIRO-STATUS-SUCCESS = 0;
define constant $CAIRO-STATUS-NO-MEMORY = 1;
define constant $CAIRO-STATUS-INVALID-RESTORE = 2;
define constant $CAIRO-STATUS-INVALID-POP-GROUP = 3;
define constant $CAIRO-STATUS-NO-CURRENT-POINT = 4;
define constant $CAIRO-STATUS-INVALID-MATRIX = 5;
define constant $CAIRO-STATUS-INVALID-STATUS = 6;
define constant $CAIRO-STATUS-NULL-POINTER = 7;
define constant $CAIRO-STATUS-INVALID-STRING = 8;
define constant $CAIRO-STATUS-INVALID-PATH-DATA = 9;
define constant $CAIRO-STATUS-READ-ERROR = 10;
define constant $CAIRO-STATUS-WRITE-ERROR = 11;
define constant $CAIRO-STATUS-SURFACE-FINISHED = 12;
define constant $CAIRO-STATUS-SURFACE-TYPE-MISMATCH = 13;
define constant $CAIRO-STATUS-PATTERN-TYPE-MISMATCH = 14;
define constant $CAIRO-STATUS-INVALID-CONTENT = 15;
define constant $CAIRO-STATUS-INVALID-FORMAT = 16;
define constant $CAIRO-STATUS-INVALID-VISUAL = 17;
define constant $CAIRO-STATUS-FILE-NOT-FOUND = 18;
define constant $CAIRO-STATUS-INVALID-DASH = 19;
define constant $CAIRO-STATUS-INVALID-DSC-COMMENT = 20;

define constant <cairo-status-t> = <_cairo-status>;

define constant <_cairo-content> = <C-int>;
define constant $CAIRO-CONTENT-COLOR = 4096;
define constant $CAIRO-CONTENT-ALPHA = 8192;
define constant $CAIRO-CONTENT-COLOR-ALPHA = 12288;

define constant <cairo-content-t> = <_cairo-content>;

define C-pointer-type <unsigned-char*> => <C-unsigned-char>;
define constant <anonymous-3> = <C-function-pointer>;
define constant <cairo-write-func-t> = <anonymous-3>;

define constant <anonymous-4> = <C-function-pointer>;
define constant <cairo-read-func-t> = <anonymous-4>;

define C-function cairo-create
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <cairo-t>;
  c-name: "cairo_create";
end;

define C-function cairo-reference
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-t>;
  c-name: "cairo_reference";
end;

define C-function cairo-destroy
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_destroy";
end;

define C-function cairo-save
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_save";
end;

define C-function cairo-restore
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_restore";
end;

define C-function cairo-push-group
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_push_group";
end;

define C-function cairo-push-group-with-content
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-content-t>;
  c-name: "cairo_push_group_with_content";
end;

define C-function cairo-pop-group
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-pattern-t>;
  c-name: "cairo_pop_group";
end;

define C-function cairo-pop-group-to-source
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_pop_group_to_source";
end;

define constant <_cairo-operator> = <C-int>;
define constant $CAIRO-OPERATOR-CLEAR = 0;
define constant $CAIRO-OPERATOR-SOURCE = 1;
define constant $CAIRO-OPERATOR-OVER = 2;
define constant $CAIRO-OPERATOR-IN = 3;
define constant $CAIRO-OPERATOR-OUT = 4;
define constant $CAIRO-OPERATOR-ATOP = 5;
define constant $CAIRO-OPERATOR-DEST = 6;
define constant $CAIRO-OPERATOR-DEST-OVER = 7;
define constant $CAIRO-OPERATOR-DEST-IN = 8;
define constant $CAIRO-OPERATOR-DEST-OUT = 9;
define constant $CAIRO-OPERATOR-DEST-ATOP = 10;
define constant $CAIRO-OPERATOR-XOR = 11;
define constant $CAIRO-OPERATOR-ADD = 12;
define constant $CAIRO-OPERATOR-SATURATE = 13;

define constant <cairo-operator-t> = <_cairo-operator>;

define C-function cairo-set-operator
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-operator-t>;
  c-name: "cairo_set_operator";
end;

define C-function cairo-set-source
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-pattern-t>;
  c-name: "cairo_set_source";
end;

define C-function cairo-set-source-rgb
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  c-name: "cairo_set_source_rgb";
end;

define C-function cairo-set-source-rgba
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  c-name: "cairo_set_source_rgba";
end;

define C-function cairo-set-source-surface
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-surface-t>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  c-name: "cairo_set_source_surface";
end;

define C-function cairo-set-tolerance
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  c-name: "cairo_set_tolerance";
end;

define constant <_cairo-antialias> = <C-int>;
define constant $CAIRO-ANTIALIAS-DEFAULT = 0;
define constant $CAIRO-ANTIALIAS-NONE = 1;
define constant $CAIRO-ANTIALIAS-GRAY = 2;
define constant $CAIRO-ANTIALIAS-SUBPIXEL = 3;

define constant <cairo-antialias-t> = <_cairo-antialias>;

define C-function cairo-set-antialias
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-antialias-t>;
  c-name: "cairo_set_antialias";
end;

define constant <_cairo-fill-rule> = <C-int>;
define constant $CAIRO-FILL-RULE-WINDING = 0;
define constant $CAIRO-FILL-RULE-EVEN-ODD = 1;

define constant <cairo-fill-rule-t> = <_cairo-fill-rule>;

define C-function cairo-set-fill-rule
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-fill-rule-t>;
  c-name: "cairo_set_fill_rule";
end;

define C-function cairo-set-line-width
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  c-name: "cairo_set_line_width";
end;

define constant <_cairo-line-cap> = <C-int>;
define constant $CAIRO-LINE-CAP-BUTT = 0;
define constant $CAIRO-LINE-CAP-ROUND = 1;
define constant $CAIRO-LINE-CAP-SQUARE = 2;

define constant <cairo-line-cap-t> = <_cairo-line-cap>;

define C-function cairo-set-line-cap
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-line-cap-t>;
  c-name: "cairo_set_line_cap";
end;

define constant <_cairo-line-join> = <C-int>;
define constant $CAIRO-LINE-JOIN-MITER = 0;
define constant $CAIRO-LINE-JOIN-ROUND = 1;
define constant $CAIRO-LINE-JOIN-BEVEL = 2;

define constant <cairo-line-join-t> = <_cairo-line-join>;

define C-function cairo-set-line-join
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-line-join-t>;
  c-name: "cairo_set_line_join";
end;

define C-function cairo-set-dash
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-double>;
  c-name: "cairo_set_dash";
end;

define C-function cairo-set-miter-limit
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  c-name: "cairo_set_miter_limit";
end;

define C-function cairo-translate
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_translate";
end;

define C-function cairo-scale
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_scale";
end;

define C-function cairo-rotate
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  c-name: "cairo_rotate";
end;

define C-function cairo-transform
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_transform";
end;

define C-function cairo-set-matrix
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_set_matrix";
end;

define C-function cairo-identity-matrix
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_identity_matrix";
end;

define C-function cairo-user-to-device
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "cairo_user_to_device";
end;

define C-function cairo-user-to-device-distance
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "cairo_user_to_device_distance";
end;

define C-function cairo-device-to-user
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "cairo_device_to_user";
end;

define C-function cairo-device-to-user-distance
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "cairo_device_to_user_distance";
end;

define C-function cairo-new-path
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_new_path";
end;

define C-function cairo-move-to
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_move_to";
end;

define C-function cairo-new-sub-path
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_new_sub_path";
end;

define C-function cairo-line-to
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_line_to";
end;

define C-function cairo-curve-to
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  input parameter arg6 :: <C-double>;
  input parameter arg7 :: <C-double>;
  c-name: "cairo_curve_to";
end;

define C-function cairo-arc
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  input parameter arg6 :: <C-double>;
  c-name: "cairo_arc";
end;

define C-function cairo-arc-negative
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  input parameter arg6 :: <C-double>;
  c-name: "cairo_arc_negative";
end;

define C-function cairo-rel-move-to
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_rel_move_to";
end;

define C-function cairo-rel-line-to
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_rel_line_to";
end;

define C-function cairo-rel-curve-to
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  input parameter arg6 :: <C-double>;
  input parameter arg7 :: <C-double>;
  c-name: "cairo_rel_curve_to";
end;

define C-function cairo-rectangle
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  c-name: "cairo_rectangle";
end;

define C-function cairo-close-path
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_close_path";
end;

define C-function cairo-paint
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_paint";
end;

define C-function cairo-paint-with-alpha
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  c-name: "cairo_paint_with_alpha";
end;

define C-function cairo-mask
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-pattern-t>;
  c-name: "cairo_mask";
end;

define C-function cairo-mask-surface
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-surface-t>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  c-name: "cairo_mask_surface";
end;

define C-function cairo-stroke
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_stroke";
end;

define C-function cairo-stroke-preserve
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_stroke_preserve";
end;

define C-function cairo-fill
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_fill";
end;

define C-function cairo-fill-preserve
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_fill_preserve";
end;

define C-function cairo-copy-page
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_copy_page";
end;

define C-function cairo-show-page
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_show_page";
end;

define C-function cairo-in-stroke
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  result res :: <cairo-bool-t>;
  c-name: "cairo_in_stroke";
end;

define C-function cairo-in-fill
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  result res :: <cairo-bool-t>;
  c-name: "cairo_in_fill";
end;

define C-function cairo-stroke-extents
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  input parameter arg4 :: <double*>;
  input parameter arg5 :: <double*>;
  c-name: "cairo_stroke_extents";
end;

define C-function cairo-fill-extents
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  input parameter arg4 :: <double*>;
  input parameter arg5 :: <double*>;
  c-name: "cairo_fill_extents";
end;

define C-function cairo-reset-clip
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_reset_clip";
end;

define C-function cairo-clip
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_clip";
end;

define C-function cairo-clip-preserve
  input parameter arg1 :: <cairo-t>;
  c-name: "cairo_clip_preserve";
end;

define C-subtype <_cairo-scaled-font> (<C-void*>) end;
define constant <cairo-scaled-font-t> = <_cairo-scaled-font>;

define C-subtype <_cairo-font-face> (<C-void*>) end;
define constant <cairo-font-face-t> = <_cairo-font-face>;

define C-subtype <cairo-glyph-t> (<C-void*>) end;
define C-subtype <cairo-text-extents-t> (<C-void*>) end;
define C-subtype <cairo-font-extents-t> (<C-void*>) end;
define constant <_cairo-font-slant> = <C-int>;
define constant $CAIRO-FONT-SLANT-NORMAL = 0;
define constant $CAIRO-FONT-SLANT-ITALIC = 1;
define constant $CAIRO-FONT-SLANT-OBLIQUE = 2;

define constant <cairo-font-slant-t> = <_cairo-font-slant>;

define constant <_cairo-font-weight> = <C-int>;
define constant $CAIRO-FONT-WEIGHT-NORMAL = 0;
define constant $CAIRO-FONT-WEIGHT-BOLD = 1;

define constant <cairo-font-weight-t> = <_cairo-font-weight>;

define constant <_cairo-subpixel-order> = <C-int>;
define constant $CAIRO-SUBPIXEL-ORDER-DEFAULT = 0;
define constant $CAIRO-SUBPIXEL-ORDER-RGB = 1;
define constant $CAIRO-SUBPIXEL-ORDER-BGR = 2;
define constant $CAIRO-SUBPIXEL-ORDER-VRGB = 3;
define constant $CAIRO-SUBPIXEL-ORDER-VBGR = 4;

define constant <cairo-subpixel-order-t> = <_cairo-subpixel-order>;

define constant <_cairo-hint-style> = <C-int>;
define constant $CAIRO-HINT-STYLE-DEFAULT = 0;
define constant $CAIRO-HINT-STYLE-NONE = 1;
define constant $CAIRO-HINT-STYLE-SLIGHT = 2;
define constant $CAIRO-HINT-STYLE-MEDIUM = 3;
define constant $CAIRO-HINT-STYLE-FULL = 4;

define constant <cairo-hint-style-t> = <_cairo-hint-style>;

define constant <_cairo-hint-metrics> = <C-int>;
define constant $CAIRO-HINT-METRICS-DEFAULT = 0;
define constant $CAIRO-HINT-METRICS-OFF = 1;
define constant $CAIRO-HINT-METRICS-ON = 2;

define constant <cairo-hint-metrics-t> = <_cairo-hint-metrics>;

define C-function cairo-font-options-create
  result res :: <cairo-font-options-t>;
  c-name: "cairo_font_options_create";
end;

define C-function cairo-font-options-copy
  input parameter arg1 :: <cairo-font-options-t>;
  result res :: <cairo-font-options-t>;
  c-name: "cairo_font_options_copy";
end;

define C-function cairo-font-options-destroy
  input parameter arg1 :: <cairo-font-options-t>;
  c-name: "cairo_font_options_destroy";
end;

define C-function cairo-font-options-status
  input parameter arg1 :: <cairo-font-options-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_font_options_status";
end;

define C-function cairo-font-options-merge
  input parameter arg1 :: <cairo-font-options-t>;
  input parameter arg2 :: <cairo-font-options-t>;
  c-name: "cairo_font_options_merge";
end;

define C-function cairo-font-options-equal
  input parameter arg1 :: <cairo-font-options-t>;
  input parameter arg2 :: <cairo-font-options-t>;
  result res :: <cairo-bool-t>;
  c-name: "cairo_font_options_equal";
end;

define C-function cairo-font-options-hash
  input parameter arg1 :: <cairo-font-options-t>;
  result res :: <C-unsigned-long>;
  c-name: "cairo_font_options_hash";
end;

define C-function cairo-font-options-set-antialias
  input parameter arg1 :: <cairo-font-options-t>;
  input parameter arg2 :: <cairo-antialias-t>;
  c-name: "cairo_font_options_set_antialias";
end;

define C-function cairo-font-options-get-antialias
  input parameter arg1 :: <cairo-font-options-t>;
  result res :: <cairo-antialias-t>;
  c-name: "cairo_font_options_get_antialias";
end;

define C-function cairo-font-options-set-subpixel-order
  input parameter arg1 :: <cairo-font-options-t>;
  input parameter arg2 :: <cairo-subpixel-order-t>;
  c-name: "cairo_font_options_set_subpixel_order";
end;

define C-function cairo-font-options-get-subpixel-order
  input parameter arg1 :: <cairo-font-options-t>;
  result res :: <cairo-subpixel-order-t>;
  c-name: "cairo_font_options_get_subpixel_order";
end;

define C-function cairo-font-options-set-hint-style
  input parameter arg1 :: <cairo-font-options-t>;
  input parameter arg2 :: <cairo-hint-style-t>;
  c-name: "cairo_font_options_set_hint_style";
end;

define C-function cairo-font-options-get-hint-style
  input parameter arg1 :: <cairo-font-options-t>;
  result res :: <cairo-hint-style-t>;
  c-name: "cairo_font_options_get_hint_style";
end;

define C-function cairo-font-options-set-hint-metrics
  input parameter arg1 :: <cairo-font-options-t>;
  input parameter arg2 :: <cairo-hint-metrics-t>;
  c-name: "cairo_font_options_set_hint_metrics";
end;

define C-function cairo-font-options-get-hint-metrics
  input parameter arg1 :: <cairo-font-options-t>;
  result res :: <cairo-hint-metrics-t>;
  c-name: "cairo_font_options_get_hint_metrics";
end;

define C-function cairo-select-font-face
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <cairo-font-slant-t>;
  input parameter arg4 :: <cairo-font-weight-t>;
  c-name: "cairo_select_font_face";
end;

define C-function cairo-set-font-size
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  c-name: "cairo_set_font_size";
end;

define C-function cairo-set-font-matrix
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_set_font_matrix";
end;

define C-function cairo-get-font-matrix
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_get_font_matrix";
end;

define C-function cairo-set-font-options
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-font-options-t>;
  c-name: "cairo_set_font_options";
end;

define C-function cairo-get-font-options
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-font-options-t>;
  c-name: "cairo_get_font_options";
end;

define C-function cairo-set-scaled-font
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-scaled-font-t>;
  c-name: "cairo_set_scaled_font";
end;

define C-function cairo-show-text
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <char*>;
  c-name: "cairo_show_text";
end;

define C-function cairo-show-glyphs
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-glyph-t>;
  input parameter arg3 :: <C-signed-int>;
  c-name: "cairo_show_glyphs";
end;

define C-function cairo-get-font-face
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-font-face-t>;
  c-name: "cairo_get_font_face";
end;

define C-function cairo-font-extents
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-font-extents-t>;
  c-name: "cairo_font_extents";
end;

define C-function cairo-set-font-face
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-font-face-t>;
  c-name: "cairo_set_font_face";
end;

define C-function cairo-text-extents
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <cairo-text-extents-t>;
  c-name: "cairo_text_extents";
end;

define C-function cairo-glyph-extents
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-glyph-t>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <cairo-text-extents-t>;
  c-name: "cairo_glyph_extents";
end;

define C-function cairo-text-path
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <char*>;
  c-name: "cairo_text_path";
end;

define C-function cairo-glyph-path
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-glyph-t>;
  input parameter arg3 :: <C-signed-int>;
  c-name: "cairo_glyph_path";
end;

define C-function cairo-font-face-reference
  input parameter arg1 :: <cairo-font-face-t>;
  result res :: <cairo-font-face-t>;
  c-name: "cairo_font_face_reference";
end;

define C-function cairo-font-face-destroy
  input parameter arg1 :: <cairo-font-face-t>;
  c-name: "cairo_font_face_destroy";
end;

define C-function cairo-font-face-status
  input parameter arg1 :: <cairo-font-face-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_font_face_status";
end;

define constant <_cairo-font-type> = <C-int>;
define constant $CAIRO-FONT-TYPE-TOY = 0;
define constant $CAIRO-FONT-TYPE-FT = 1;
define constant $CAIRO-FONT-TYPE-WIN32 = 2;
define constant $CAIRO-FONT-TYPE-ATSUI = 3;

define constant <cairo-font-type-t> = <_cairo-font-type>;

define C-function cairo-font-face-get-type
  input parameter arg1 :: <cairo-font-face-t>;
  result res :: <cairo-font-type-t>;
  c-name: "cairo_font_face_get_type";
end;

define C-function cairo-font-face-get-user-data
  input parameter arg1 :: <cairo-font-face-t>;
  input parameter arg2 :: <cairo-user-data-key-t>;
  result res :: <C-void*>;
  c-name: "cairo_font_face_get_user_data";
end;

define C-function cairo-font-face-set-user-data
  input parameter arg1 :: <cairo-font-face-t>;
  input parameter arg2 :: <cairo-user-data-key-t>;
  input parameter arg3 :: <C-void*>;
  input parameter arg4 :: <cairo-destroy-func-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_font_face_set_user_data";
end;

define C-function cairo-scaled-font-create
  input parameter arg1 :: <cairo-font-face-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  input parameter arg3 :: <cairo-matrix-t>;
  input parameter arg4 :: <cairo-font-options-t>;
  result res :: <cairo-scaled-font-t>;
  c-name: "cairo_scaled_font_create";
end;

define C-function cairo-scaled-font-reference
  input parameter arg1 :: <cairo-scaled-font-t>;
  result res :: <cairo-scaled-font-t>;
  c-name: "cairo_scaled_font_reference";
end;

define C-function cairo-scaled-font-destroy
  input parameter arg1 :: <cairo-scaled-font-t>;
  c-name: "cairo_scaled_font_destroy";
end;

define C-function cairo-scaled-font-status
  input parameter arg1 :: <cairo-scaled-font-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_scaled_font_status";
end;

define C-function cairo-scaled-font-get-type
  input parameter arg1 :: <cairo-scaled-font-t>;
  result res :: <cairo-font-type-t>;
  c-name: "cairo_scaled_font_get_type";
end;

define C-function cairo-scaled-font-extents
  input parameter arg1 :: <cairo-scaled-font-t>;
  input parameter arg2 :: <cairo-font-extents-t>;
  c-name: "cairo_scaled_font_extents";
end;

define C-function cairo-scaled-font-text-extents
  input parameter arg1 :: <cairo-scaled-font-t>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <cairo-text-extents-t>;
  c-name: "cairo_scaled_font_text_extents";
end;

define C-function cairo-scaled-font-glyph-extents
  input parameter arg1 :: <cairo-scaled-font-t>;
  input parameter arg2 :: <cairo-glyph-t>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <cairo-text-extents-t>;
  c-name: "cairo_scaled_font_glyph_extents";
end;

define C-function cairo-scaled-font-get-font-face
  input parameter arg1 :: <cairo-scaled-font-t>;
  result res :: <cairo-font-face-t>;
  c-name: "cairo_scaled_font_get_font_face";
end;

define C-function cairo-scaled-font-get-font-matrix
  input parameter arg1 :: <cairo-scaled-font-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_scaled_font_get_font_matrix";
end;

define C-function cairo-scaled-font-get-ctm
  input parameter arg1 :: <cairo-scaled-font-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_scaled_font_get_ctm";
end;

define C-function cairo-scaled-font-get-font-options
  input parameter arg1 :: <cairo-scaled-font-t>;
  input parameter arg2 :: <cairo-font-options-t>;
  c-name: "cairo_scaled_font_get_font_options";
end;

define C-function cairo-get-operator
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-operator-t>;
  c-name: "cairo_get_operator";
end;

define C-function cairo-get-source
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-pattern-t>;
  c-name: "cairo_get_source";
end;

define C-function cairo-get-tolerance
  input parameter arg1 :: <cairo-t>;
  result res :: <C-double>;
  c-name: "cairo_get_tolerance";
end;

define C-function cairo-get-antialias
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-antialias-t>;
  c-name: "cairo_get_antialias";
end;

define C-function cairo-get-current-point
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "cairo_get_current_point";
end;

define C-function cairo-get-fill-rule
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-fill-rule-t>;
  c-name: "cairo_get_fill_rule";
end;

define C-function cairo-get-line-width
  input parameter arg1 :: <cairo-t>;
  result res :: <C-double>;
  c-name: "cairo_get_line_width";
end;

define C-function cairo-get-line-cap
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-line-cap-t>;
  c-name: "cairo_get_line_cap";
end;

define C-function cairo-get-line-join
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-line-join-t>;
  c-name: "cairo_get_line_join";
end;

define C-function cairo-get-miter-limit
  input parameter arg1 :: <cairo-t>;
  result res :: <C-double>;
  c-name: "cairo_get_miter_limit";
end;

define C-function cairo-get-matrix
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_get_matrix";
end;

define C-function cairo-get-target
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-surface-t>;
  c-name: "cairo_get_target";
end;

define C-function cairo-get-group-target
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-surface-t>;
  c-name: "cairo_get_group_target";
end;

define constant <_cairo-path-data-type> = <C-int>;
define constant $CAIRO-PATH-MOVE-TO = 0;
define constant $CAIRO-PATH-LINE-TO = 1;
define constant $CAIRO-PATH-CURVE-TO = 2;
define constant $CAIRO-PATH-CLOSE-PATH = 3;

define constant <cairo-path-data-type-t> = <_cairo-path-data-type>;

define C-subtype <anonymous-131> (<C-void*>) end;
define C-subtype <anonymous-132> (<C-void*>) end;
define C-subtype <_cairo-path-data-t> (<C-void*>) end;
define constant <cairo-path-data-t> = <_cairo-path-data-t>;

define C-subtype <cairo-path> (<C-void*>) end;
define constant <cairo-path-t> = <cairo-path>;

define C-function cairo-copy-path
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-path-t>;
  c-name: "cairo_copy_path";
end;

define C-function cairo-copy-path-flat
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-path-t>;
  c-name: "cairo_copy_path_flat";
end;

define C-function cairo-append-path
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <cairo-path-t>;
  c-name: "cairo_append_path";
end;

define C-function cairo-path-destroy
  input parameter arg1 :: <cairo-path-t>;
  c-name: "cairo_path_destroy";
end;

define C-function cairo-status
  input parameter arg1 :: <cairo-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_status";
end;

define C-function cairo-status-to-string
  input parameter arg1 :: <cairo-status-t>;
  result res :: <char*>;
  c-name: "cairo_status_to_string";
end;

define C-function cairo-surface-create-similar
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <cairo-content-t>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  result res :: <cairo-surface-t>;
  c-name: "cairo_surface_create_similar";
end;

define C-function cairo-surface-reference
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <cairo-surface-t>;
  c-name: "cairo_surface_reference";
end;

define C-function cairo-surface-finish
  input parameter arg1 :: <cairo-surface-t>;
  c-name: "cairo_surface_finish";
end;

define C-function cairo-surface-destroy
  input parameter arg1 :: <cairo-surface-t>;
  c-name: "cairo_surface_destroy";
end;

define C-function cairo-surface-status
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_surface_status";
end;

define constant <_cairo-surface-type> = <C-int>;
define constant $CAIRO-SURFACE-TYPE-IMAGE = 0;
define constant $CAIRO-SURFACE-TYPE-PDF = 1;
define constant $CAIRO-SURFACE-TYPE-PS = 2;
define constant $CAIRO-SURFACE-TYPE-XLIB = 3;
define constant $CAIRO-SURFACE-TYPE-XCB = 4;
define constant $CAIRO-SURFACE-TYPE-GLITZ = 5;
define constant $CAIRO-SURFACE-TYPE-QUARTZ = 6;
define constant $CAIRO-SURFACE-TYPE-WIN32 = 7;
define constant $CAIRO-SURFACE-TYPE-BEOS = 8;
define constant $CAIRO-SURFACE-TYPE-DIRECTFB = 9;
define constant $CAIRO-SURFACE-TYPE-SVG = 10;

define constant <cairo-surface-type-t> = <_cairo-surface-type>;

define C-function cairo-surface-get-type
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <cairo-surface-type-t>;
  c-name: "cairo_surface_get_type";
end;

define C-function cairo-surface-get-content
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <cairo-content-t>;
  c-name: "cairo_surface_get_content";
end;

define C-function cairo-surface-write-to-png
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <char*>;
  result res :: <cairo-status-t>;
  c-name: "cairo_surface_write_to_png";
end;

define C-function cairo-surface-write-to-png-stream
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <cairo-write-func-t>;
  input parameter arg3 :: <C-void*>;
  result res :: <cairo-status-t>;
  c-name: "cairo_surface_write_to_png_stream";
end;

define C-function cairo-surface-get-user-data
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <cairo-user-data-key-t>;
  result res :: <C-void*>;
  c-name: "cairo_surface_get_user_data";
end;

define C-function cairo-surface-set-user-data
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <cairo-user-data-key-t>;
  input parameter arg3 :: <C-void*>;
  input parameter arg4 :: <cairo-destroy-func-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_surface_set_user_data";
end;

define C-function cairo-surface-get-font-options
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <cairo-font-options-t>;
  c-name: "cairo_surface_get_font_options";
end;

define C-function cairo-surface-flush
  input parameter arg1 :: <cairo-surface-t>;
  c-name: "cairo_surface_flush";
end;

define C-function cairo-surface-mark-dirty
  input parameter arg1 :: <cairo-surface-t>;
  c-name: "cairo_surface_mark_dirty";
end;

define C-function cairo-surface-mark-dirty-rectangle
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  c-name: "cairo_surface_mark_dirty_rectangle";
end;

define C-function cairo-surface-set-device-offset
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_surface_set_device_offset";
end;

define C-function cairo-surface-get-device-offset
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "cairo_surface_get_device_offset";
end;

define C-function cairo-surface-set-fallback-resolution
  input parameter arg1 :: <cairo-surface-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_surface_set_fallback_resolution";
end;

define constant <_cairo-format> = <C-int>;
define constant $CAIRO-FORMAT-ARGB32 = 0;
define constant $CAIRO-FORMAT-RGB24 = 1;
define constant $CAIRO-FORMAT-A8 = 2;
define constant $CAIRO-FORMAT-A1 = 3;
define constant $CAIRO-FORMAT-RGB16-565 = 4;

define constant <cairo-format-t> = <_cairo-format>;

define C-function cairo-image-surface-create
  input parameter arg1 :: <cairo-format-t>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  result res :: <cairo-surface-t>;
  c-name: "cairo_image_surface_create";
end;

define C-function cairo-image-surface-create-for-data
  input parameter arg1 :: <unsigned-char*>;
  input parameter arg2 :: <cairo-format-t>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  result res :: <cairo-surface-t>;
  c-name: "cairo_image_surface_create_for_data";
end;

define C-function cairo-image-surface-get-data
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <unsigned-char*>;
  c-name: "cairo_image_surface_get_data";
end;

define C-function cairo-image-surface-get-format
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <cairo-format-t>;
  c-name: "cairo_image_surface_get_format";
end;

define C-function cairo-image-surface-get-width
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <C-signed-int>;
  c-name: "cairo_image_surface_get_width";
end;

define C-function cairo-image-surface-get-height
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <C-signed-int>;
  c-name: "cairo_image_surface_get_height";
end;

define C-function cairo-image-surface-get-stride
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <C-signed-int>;
  c-name: "cairo_image_surface_get_stride";
end;

define C-function cairo-image-surface-create-from-png
  input parameter arg1 :: <char*>;
  result res :: <cairo-surface-t>;
  c-name: "cairo_image_surface_create_from_png";
end;

define C-function cairo-image-surface-create-from-png-stream
  input parameter arg1 :: <cairo-read-func-t>;
  input parameter arg2 :: <C-void*>;
  result res :: <cairo-surface-t>;
  c-name: "cairo_image_surface_create_from_png_stream";
end;

define C-function cairo-pattern-create-rgb
  input parameter arg1 :: <C-double>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  result res :: <cairo-pattern-t>;
  c-name: "cairo_pattern_create_rgb";
end;

define C-function cairo-pattern-create-rgba
  input parameter arg1 :: <C-double>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  result res :: <cairo-pattern-t>;
  c-name: "cairo_pattern_create_rgba";
end;

define C-function cairo-pattern-create-for-surface
  input parameter arg1 :: <cairo-surface-t>;
  result res :: <cairo-pattern-t>;
  c-name: "cairo_pattern_create_for_surface";
end;

define C-function cairo-pattern-create-linear
  input parameter arg1 :: <C-double>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  result res :: <cairo-pattern-t>;
  c-name: "cairo_pattern_create_linear";
end;

define C-function cairo-pattern-create-radial
  input parameter arg1 :: <C-double>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  input parameter arg6 :: <C-double>;
  result res :: <cairo-pattern-t>;
  c-name: "cairo_pattern_create_radial";
end;

define C-function cairo-pattern-reference
  input parameter arg1 :: <cairo-pattern-t>;
  result res :: <cairo-pattern-t>;
  c-name: "cairo_pattern_reference";
end;

define C-function cairo-pattern-destroy
  input parameter arg1 :: <cairo-pattern-t>;
  c-name: "cairo_pattern_destroy";
end;

define C-function cairo-pattern-status
  input parameter arg1 :: <cairo-pattern-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_pattern_status";
end;

define constant <_cairo-pattern-type> = <C-int>;
define constant $CAIRO-PATTERN-TYPE-SOLID = 0;
define constant $CAIRO-PATTERN-TYPE-SURFACE = 1;
define constant $CAIRO-PATTERN-TYPE-LINEAR = 2;
define constant $CAIRO-PATTERN-TYPE-RADIAL = 3;

define constant <cairo-pattern-type-t> = <_cairo-pattern-type>;

define C-function cairo-pattern-get-type
  input parameter arg1 :: <cairo-pattern-t>;
  result res :: <cairo-pattern-type-t>;
  c-name: "cairo_pattern_get_type";
end;

define C-function cairo-pattern-add-color-stop-rgb
  input parameter arg1 :: <cairo-pattern-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  c-name: "cairo_pattern_add_color_stop_rgb";
end;

define C-function cairo-pattern-add-color-stop-rgba
  input parameter arg1 :: <cairo-pattern-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  input parameter arg6 :: <C-double>;
  c-name: "cairo_pattern_add_color_stop_rgba";
end;

define C-function cairo-pattern-set-matrix
  input parameter arg1 :: <cairo-pattern-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_pattern_set_matrix";
end;

define C-function cairo-pattern-get-matrix
  input parameter arg1 :: <cairo-pattern-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  c-name: "cairo_pattern_get_matrix";
end;

define constant <_cairo-extend> = <C-int>;
define constant $CAIRO-EXTEND-NONE = 0;
define constant $CAIRO-EXTEND-REPEAT = 1;
define constant $CAIRO-EXTEND-REFLECT = 2;
define constant $CAIRO-EXTEND-PAD = 3;

define constant <cairo-extend-t> = <_cairo-extend>;

define C-function cairo-pattern-set-extend
  input parameter arg1 :: <cairo-pattern-t>;
  input parameter arg2 :: <cairo-extend-t>;
  c-name: "cairo_pattern_set_extend";
end;

define C-function cairo-pattern-get-extend
  input parameter arg1 :: <cairo-pattern-t>;
  result res :: <cairo-extend-t>;
  c-name: "cairo_pattern_get_extend";
end;

define constant <_cairo-filter> = <C-int>;
define constant $CAIRO-FILTER-FAST = 0;
define constant $CAIRO-FILTER-GOOD = 1;
define constant $CAIRO-FILTER-BEST = 2;
define constant $CAIRO-FILTER-NEAREST = 3;
define constant $CAIRO-FILTER-BILINEAR = 4;
define constant $CAIRO-FILTER-GAUSSIAN = 5;

define constant <cairo-filter-t> = <_cairo-filter>;

define C-function cairo-pattern-set-filter
  input parameter arg1 :: <cairo-pattern-t>;
  input parameter arg2 :: <cairo-filter-t>;
  c-name: "cairo_pattern_set_filter";
end;

define C-function cairo-pattern-get-filter
  input parameter arg1 :: <cairo-pattern-t>;
  result res :: <cairo-filter-t>;
  c-name: "cairo_pattern_get_filter";
end;

define C-function cairo-matrix-init
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  input parameter arg6 :: <C-double>;
  input parameter arg7 :: <C-double>;
  c-name: "cairo_matrix_init";
end;

define C-function cairo-matrix-init-identity
  input parameter arg1 :: <cairo-matrix-t>;
  c-name: "cairo_matrix_init_identity";
end;

define C-function cairo-matrix-init-translate
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_matrix_init_translate";
end;

define C-function cairo-matrix-init-scale
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_matrix_init_scale";
end;

define C-function cairo-matrix-init-rotate
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <C-double>;
  c-name: "cairo_matrix_init_rotate";
end;

define C-function cairo-matrix-translate
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_matrix_translate";
end;

define C-function cairo-matrix-scale
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  c-name: "cairo_matrix_scale";
end;

define C-function cairo-matrix-rotate
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <C-double>;
  c-name: "cairo_matrix_rotate";
end;

define C-function cairo-matrix-invert
  input parameter arg1 :: <cairo-matrix-t>;
  result res :: <cairo-status-t>;
  c-name: "cairo_matrix_invert";
end;

define C-function cairo-matrix-multiply
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <cairo-matrix-t>;
  input parameter arg3 :: <cairo-matrix-t>;
  c-name: "cairo_matrix_multiply";
end;

define C-function cairo-matrix-transform-distance
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "cairo_matrix_transform_distance";
end;

define C-function cairo-matrix-transform-point
  input parameter arg1 :: <cairo-matrix-t>;
  input parameter arg2 :: <double*>;
  input parameter arg3 :: <double*>;
  c-name: "cairo_matrix_transform_point";
end;

define C-function cairo-debug-reset-static-data
  c-name: "cairo_debug_reset_static_data";
end;

define constant $CAIRO-VERSION = 10206;

define constant $CAIRO-VERSION-MAJOR = 1;

define constant $CAIRO-VERSION-MINOR = 2;

define constant $CAIRO-VERSION-MICRO = 6;

define constant $CAIRO-VERSION-STRING = "1.2.6";

define constant $CAIRO-HAS-SVG-SURFACE = 1;

define constant $CAIRO-HAS-PDF-SURFACE = 1;

define constant $CAIRO-HAS-PS-SURFACE = 1;

define constant $CAIRO-HAS-FT-FONT = 1;

define constant $CAIRO-HAS-PNG-FUNCTIONS = 1;

define constant $CAIRO-HAS-WIN32-FONT = 1;

define constant $CAIRO-HAS-WIN32-SURFACE = 1;

define C-function gdk-drawable-get-type
  result res :: <GType>;
  c-name: "gdk_drawable_get_type";
end;

define C-function gdk-drawable-set-data
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "gdk_drawable_set_data";
end;

define C-function gdk-drawable-get-data
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <gchar*>;
  result res :: <gpointer>;
  c-name: "gdk_drawable_get_data";
end;

define C-function gdk-drawable-get-depth
  input parameter arg1 :: <GdkDrawable>;
  result res :: <gint>;
  c-name: "gdk_drawable_get_depth";
end;

define C-function gdk-drawable-get-screen
  input parameter arg1 :: <GdkDrawable>;
  result res :: <GdkScreen>;
  c-name: "gdk_drawable_get_screen";
end;

define C-function gdk-drawable-get-display
  input parameter arg1 :: <GdkDrawable>;
  result res :: <GdkDisplay>;
  c-name: "gdk_drawable_get_display";
end;

define C-function gdk-draw-point
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_draw_point";
end;

define C-function gdk-draw-line
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  c-name: "gdk_draw_line";
end;

define C-function gdk-draw-rectangle
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  c-name: "gdk_draw_rectangle";
end;

define C-function gdk-draw-arc
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  c-name: "gdk_draw_arc";
end;

define C-function gdk-draw-polygon
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <GdkPoint>;
  input parameter arg5 :: <gint>;
  c-name: "gdk_draw_polygon";
end;

define C-function gdk-draw-string
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkFont>;
  input parameter arg3 :: <GdkGC>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gchar*>;
  c-name: "gdk_draw_string";
end;

define C-function gdk-draw-text
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkFont>;
  input parameter arg3 :: <GdkGC>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gchar*>;
  input parameter arg7 :: <gint>;
  c-name: "gdk_draw_text";
end;

define C-function gdk-draw-text-wc
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkFont>;
  input parameter arg3 :: <GdkGC>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <GdkWChar*>;
  input parameter arg7 :: <gint>;
  c-name: "gdk_draw_text_wc";
end;

define C-function gdk-draw-drawable
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <GdkDrawable>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  c-name: "gdk_draw_drawable";
end;

define C-function gdk-draw-image
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <GdkImage>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  c-name: "gdk_draw_image";
end;

define C-function gdk-draw-points
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <GdkPoint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_draw_points";
end;

define C-function gdk-draw-segments
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <GdkSegment>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_draw_segments";
end;

define C-function gdk-draw-lines
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <GdkPoint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_draw_lines";
end;

define C-function gdk-draw-pixbuf
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <GdkPixbuf>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <GdkRgbDither>;
  input parameter arg11 :: <gint>;
  input parameter arg12 :: <gint>;
  c-name: "gdk_draw_pixbuf";
end;

define C-function gdk-draw-glyphs
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <PangoFont>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <PangoGlyphString>;
  c-name: "gdk_draw_glyphs";
end;

define C-function gdk-draw-layout-line
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <PangoLayoutLine>;
  c-name: "gdk_draw_layout_line";
end;

define C-function gdk-draw-layout
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <PangoLayout>;
  c-name: "gdk_draw_layout";
end;

define C-function gdk-draw-layout-line-with-colors
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <PangoLayoutLine>;
  input parameter arg6 :: <GdkColor>;
  input parameter arg7 :: <GdkColor>;
  c-name: "gdk_draw_layout_line_with_colors";
end;

define C-function gdk-draw-layout-with-colors
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <PangoLayout>;
  input parameter arg6 :: <GdkColor>;
  input parameter arg7 :: <GdkColor>;
  c-name: "gdk_draw_layout_with_colors";
end;

define C-function gdk-draw-glyphs-transformed
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <PangoMatrix>;
  input parameter arg4 :: <PangoFont>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <PangoGlyphString>;
  c-name: "gdk_draw_glyphs_transformed";
end;

define C-function gdk-draw-trapezoids
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <GdkTrapezoid>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_draw_trapezoids";
end;

define C-function gdk-drawable-get-image
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  result res :: <GdkImage>;
  c-name: "gdk_drawable_get_image";
end;

define C-function gdk-drawable-copy-to-image
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkImage>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  result res :: <GdkImage>;
  c-name: "gdk_drawable_copy_to_image";
end;

define C-function gdk-drawable-get-clip-region
  input parameter arg1 :: <GdkDrawable>;
  result res :: <GdkRegion>;
  c-name: "gdk_drawable_get_clip_region";
end;

define C-function gdk-drawable-get-visible-region
  input parameter arg1 :: <GdkDrawable>;
  result res :: <GdkRegion>;
  c-name: "gdk_drawable_get_visible_region";
end;

define constant gdk-draw-pixmap = gdk-draw-drawable;

define constant gdk-draw-bitmap = gdk-draw-drawable;

define C-function gdk-pixbuf-alpha-mode-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_alpha_mode_get_type";
end;

define C-function gdk-colorspace-get-type
  result res :: <GType>;
  c-name: "gdk_colorspace_get_type";
end;

define C-function gdk-pixbuf-error-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_error_get_type";
end;

define C-function gdk-interp-type-get-type
  result res :: <GType>;
  c-name: "gdk_interp_type_get_type";
end;

define C-function gdk-pixbuf-rotation-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_rotation_get_type";
end;

define C-subtype <_GdkPixbufLoader> (<_GObject>) end;
define constant <GdkPixbufLoader> = <_GdkPixbufLoader>;

define constant <anonymous-2432> = <C-function-pointer>;
define constant <anonymous-2433> = <C-function-pointer>;
define constant <anonymous-2434> = <C-function-pointer>;
define constant <anonymous-2435> = <C-function-pointer>;
define C-subtype <_GdkPixbufLoaderClass> (<C-void*>) end;
define constant <GdkPixbufLoaderClass> = <_GdkPixbufLoaderClass>;

define C-function gdk-pixbuf-loader-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_loader_get_type";
end;

define C-function gdk-pixbuf-loader-new
  result res :: <GdkPixbufLoader>;
  c-name: "gdk_pixbuf_loader_new";
end;

define C-function gdk-pixbuf-loader-new-with-type
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <GError*>;
  result res :: <GdkPixbufLoader>;
  c-name: "gdk_pixbuf_loader_new_with_type";
end;

define C-function gdk-pixbuf-loader-new-with-mime-type
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <GError*>;
  result res :: <GdkPixbufLoader>;
  c-name: "gdk_pixbuf_loader_new_with_mime_type";
end;

define C-function gdk-pixbuf-loader-set-size
  input parameter arg1 :: <GdkPixbufLoader>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  c-name: "gdk_pixbuf_loader_set_size";
end;

define C-function gdk-pixbuf-loader-write
  input parameter arg1 :: <GdkPixbufLoader>;
  input parameter arg2 :: <guchar*>;
  input parameter arg3 :: <gsize>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_loader_write";
end;

define C-function gdk-pixbuf-loader-get-pixbuf
  input parameter arg1 :: <GdkPixbufLoader>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_loader_get_pixbuf";
end;

define C-subtype <_GdkPixbufAnimation> (<_GObject>) end;
define constant <GdkPixbufAnimation> = <_GdkPixbufAnimation>;

define C-function gdk-pixbuf-loader-get-animation
  input parameter arg1 :: <GdkPixbufLoader>;
  result res :: <GdkPixbufAnimation>;
  c-name: "gdk_pixbuf_loader_get_animation";
end;

define C-function gdk-pixbuf-loader-close
  input parameter arg1 :: <GdkPixbufLoader>;
  input parameter arg2 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_loader_close";
end;

define C-subtype <_GdkPixbufFormat> (<C-void*>) end;
define constant <GdkPixbufFormat> = <_GdkPixbufFormat>;

define C-function gdk-pixbuf-loader-get-format
  input parameter arg1 :: <GdkPixbufLoader>;
  result res :: <GdkPixbufFormat>;
  c-name: "gdk_pixbuf_loader_get_format";
end;

define C-function gdk-pixbuf-get-formats
  result res :: <GSList>;
  c-name: "gdk_pixbuf_get_formats";
end;

define C-function gdk-pixbuf-format-get-name
  input parameter arg1 :: <GdkPixbufFormat>;
  result res :: <gchar*>;
  c-name: "gdk_pixbuf_format_get_name";
end;

define C-function gdk-pixbuf-format-get-description
  input parameter arg1 :: <GdkPixbufFormat>;
  result res :: <gchar*>;
  c-name: "gdk_pixbuf_format_get_description";
end;

define C-function gdk-pixbuf-format-get-mime-types
  input parameter arg1 :: <GdkPixbufFormat>;
  result res :: <gchar**>;
  c-name: "gdk_pixbuf_format_get_mime_types";
end;

define C-function gdk-pixbuf-format-get-extensions
  input parameter arg1 :: <GdkPixbufFormat>;
  result res :: <gchar**>;
  c-name: "gdk_pixbuf_format_get_extensions";
end;

define C-function gdk-pixbuf-format-is-writable
  input parameter arg1 :: <GdkPixbufFormat>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_format_is_writable";
end;

define C-function gdk-pixbuf-format-is-scalable
  input parameter arg1 :: <GdkPixbufFormat>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_format_is_scalable";
end;

define C-function gdk-pixbuf-format-is-disabled
  input parameter arg1 :: <GdkPixbufFormat>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_format_is_disabled";
end;

define C-function gdk-pixbuf-format-set-disabled
  input parameter arg1 :: <GdkPixbufFormat>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_pixbuf_format_set_disabled";
end;

define C-function gdk-pixbuf-format-get-license
  input parameter arg1 :: <GdkPixbufFormat>;
  result res :: <gchar*>;
  c-name: "gdk_pixbuf_format_get_license";
end;

define C-function gdk-pixbuf-get-file-info
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  result res :: <GdkPixbufFormat>;
  c-name: "gdk_pixbuf_get_file_info";
end;

define C-subtype <_GdkPixbufAnimationIter> (<_GObject>) end;
define constant <GdkPixbufAnimationIter> = <_GdkPixbufAnimationIter>;

define C-function gdk-pixbuf-animation-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_animation_get_type";
end;

define C-function gdk-pixbuf-animation-new-from-file-utf8
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <GError*>;
  result res :: <GdkPixbufAnimation>;
  c-name: "gdk_pixbuf_animation_new_from_file_utf8";
end;

define C-function gdk-pixbuf-animation-ref
  input parameter arg1 :: <GdkPixbufAnimation>;
  result res :: <GdkPixbufAnimation>;
  c-name: "gdk_pixbuf_animation_ref";
end;

define C-function gdk-pixbuf-animation-unref
  input parameter arg1 :: <GdkPixbufAnimation>;
  c-name: "gdk_pixbuf_animation_unref";
end;

define C-function gdk-pixbuf-animation-get-width
  input parameter arg1 :: <GdkPixbufAnimation>;
  result res :: <C-signed-int>;
  c-name: "gdk_pixbuf_animation_get_width";
end;

define C-function gdk-pixbuf-animation-get-height
  input parameter arg1 :: <GdkPixbufAnimation>;
  result res :: <C-signed-int>;
  c-name: "gdk_pixbuf_animation_get_height";
end;

define C-function gdk-pixbuf-animation-is-static-image
  input parameter arg1 :: <GdkPixbufAnimation>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_animation_is_static_image";
end;

define C-function gdk-pixbuf-animation-get-static-image
  input parameter arg1 :: <GdkPixbufAnimation>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_animation_get_static_image";
end;

define C-function gdk-pixbuf-animation-get-iter
  input parameter arg1 :: <GdkPixbufAnimation>;
  input parameter arg2 :: <GTimeVal>;
  result res :: <GdkPixbufAnimationIter>;
  c-name: "gdk_pixbuf_animation_get_iter";
end;

define C-function gdk-pixbuf-animation-iter-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_animation_iter_get_type";
end;

define C-function gdk-pixbuf-animation-iter-get-delay-time
  input parameter arg1 :: <GdkPixbufAnimationIter>;
  result res :: <C-signed-int>;
  c-name: "gdk_pixbuf_animation_iter_get_delay_time";
end;

define C-function gdk-pixbuf-animation-iter-get-pixbuf
  input parameter arg1 :: <GdkPixbufAnimationIter>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_animation_iter_get_pixbuf";
end;

define C-function gdk-pixbuf-animation-iter-on-currently-loading-frame
  input parameter arg1 :: <GdkPixbufAnimationIter>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_animation_iter_on_currently_loading_frame";
end;

define C-function gdk-pixbuf-animation-iter-advance
  input parameter arg1 :: <GdkPixbufAnimationIter>;
  input parameter arg2 :: <GTimeVal>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_animation_iter_advance";
end;

define constant gdk-pixbuf-animation-new-from-file = gdk-pixbuf-animation-new-from-file-utf8;

define constant <GdkPixbufAlphaMode> = <C-int>;
define constant $GDK-PIXBUF-ALPHA-BILEVEL = 0;
define constant $GDK-PIXBUF-ALPHA-FULL = 1;

define constant <GdkColorspace> = <C-int>;
define constant $GDK-COLORSPACE-RGB = 0;

define constant <anonymous-2348> = <C-function-pointer>;
define constant <GdkPixbufDestroyNotify> = <anonymous-2348>;

define constant <GdkPixbufError> = <C-int>;
define constant $GDK-PIXBUF-ERROR-CORRUPT-IMAGE = 0;
define constant $GDK-PIXBUF-ERROR-INSUFFICIENT-MEMORY = 1;
define constant $GDK-PIXBUF-ERROR-BAD-OPTION = 2;
define constant $GDK-PIXBUF-ERROR-UNKNOWN-TYPE = 3;
define constant $GDK-PIXBUF-ERROR-UNSUPPORTED-OPERATION = 4;
define constant $GDK-PIXBUF-ERROR-FAILED = 5;

define C-function gdk-pixbuf-error-quark
  result res :: <GQuark>;
  c-name: "gdk_pixbuf_error_quark";
end;

define C-function gdk-pixbuf-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_get_type";
end;

define C-function gdk-pixbuf-ref
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_ref";
end;

define C-function gdk-pixbuf-unref
  input parameter arg1 :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_unref";
end;

define C-function gdk-pixbuf-get-colorspace
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <GdkColorspace>;
  c-name: "gdk_pixbuf_get_colorspace";
end;

define C-function gdk-pixbuf-get-n-channels
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <C-signed-int>;
  c-name: "gdk_pixbuf_get_n_channels";
end;

define C-function gdk-pixbuf-get-has-alpha
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_get_has_alpha";
end;

define C-function gdk-pixbuf-get-bits-per-sample
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <C-signed-int>;
  c-name: "gdk_pixbuf_get_bits_per_sample";
end;

define C-function gdk-pixbuf-get-pixels
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <guchar*>;
  c-name: "gdk_pixbuf_get_pixels";
end;

define C-function gdk-pixbuf-get-width
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <C-signed-int>;
  c-name: "gdk_pixbuf_get_width";
end;

define C-function gdk-pixbuf-get-height
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <C-signed-int>;
  c-name: "gdk_pixbuf_get_height";
end;

define C-function gdk-pixbuf-get-rowstride
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <C-signed-int>;
  c-name: "gdk_pixbuf_get_rowstride";
end;

define C-function gdk-pixbuf-new
  input parameter arg1 :: <GdkColorspace>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_new";
end;

define C-function gdk-pixbuf-copy
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_copy";
end;

define C-function gdk-pixbuf-new-subpixbuf
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_new_subpixbuf";
end;

define C-function gdk-pixbuf-new-from-file-utf8
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <GError*>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_new_from_file_utf8";
end;

define C-function gdk-pixbuf-new-from-file-at-size-utf8
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <GError*>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_new_from_file_at_size_utf8";
end;

define C-function gdk-pixbuf-new-from-file-at-scale-utf8
  input parameter arg1 :: <char*>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <GError*>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_new_from_file_at_scale_utf8";
end;

define C-function gdk-pixbuf-new-from-data
  input parameter arg1 :: <guchar*>;
  input parameter arg2 :: <GdkColorspace>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-signed-int>;
  input parameter arg8 :: <GdkPixbufDestroyNotify>;
  input parameter arg9 :: <gpointer>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_new_from_data";
end;

define C-function gdk-pixbuf-new-from-xpm-data
  input parameter arg1 :: <c-string-vector>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_new_from_xpm_data";
end;

define C-function gdk-pixbuf-new-from-inline
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <guint8*>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <GError*>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_new_from_inline";
end;

define C-function gdk-pixbuf-fill
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <guint32>;
  c-name: "gdk_pixbuf_fill";
end;

define C-function gdk-pixbuf-save-utf8
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_save_utf8";
end;

define C-function gdk-pixbuf-savev-utf8
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <c-string-vector>;
  input parameter arg5 :: <c-string-vector>;
  input parameter arg6 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_savev_utf8";
end;

define constant <anonymous-2374> = <C-function-pointer>;
define constant <GdkPixbufSaveFunc> = <anonymous-2374>;

define C-function gdk-pixbuf-save-to-callback
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkPixbufSaveFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_save_to_callback";
end;

define C-function gdk-pixbuf-save-to-callbackv
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkPixbufSaveFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <c-string-vector>;
  input parameter arg6 :: <c-string-vector>;
  input parameter arg7 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_save_to_callbackv";
end;

define C-function gdk-pixbuf-save-to-buffer
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_save_to_buffer";
end;

define C-function gdk-pixbuf-save-to-bufferv
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gsize*>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <c-string-vector>;
  input parameter arg6 :: <c-string-vector>;
  input parameter arg7 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_pixbuf_save_to_bufferv";
end;

define C-function gdk-pixbuf-add-alpha
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <guchar>;
  input parameter arg4 :: <guchar>;
  input parameter arg5 :: <guchar>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_add_alpha";
end;

define C-function gdk-pixbuf-copy-area
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <GdkPixbuf>;
  input parameter arg7 :: <C-signed-int>;
  input parameter arg8 :: <C-signed-int>;
  c-name: "gdk_pixbuf_copy_area";
end;

define C-function gdk-pixbuf-saturate-and-pixelate
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkPixbuf>;
  input parameter arg3 :: <gfloat>;
  input parameter arg4 :: <gboolean>;
  c-name: "gdk_pixbuf_saturate_and_pixelate";
end;

define C-function gdk-pixbuf-get-option
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "gdk_pixbuf_get_option";
end;

define constant gdk-pixbuf-new-from-file = gdk-pixbuf-new-from-file-utf8;

define constant gdk-pixbuf-new-from-file-at-size = gdk-pixbuf-new-from-file-at-size-utf8;

define constant gdk-pixbuf-new-from-file-at-scale = gdk-pixbuf-new-from-file-at-scale-utf8;

define constant gdk-pixbuf-save = gdk-pixbuf-save-utf8;

define constant gdk-pixbuf-savev = gdk-pixbuf-savev-utf8;

define constant <GModuleFlags> = <C-int>;
define constant $G-MODULE-BIND-LAZY = 1;
define constant $G-MODULE-BIND-LOCAL = 2;
define constant $G-MODULE-BIND-MASK = 3;

define C-subtype <_GModule> (<C-void*>) end;
define constant <GModule> = <_GModule>;

define constant <anonymous-2411> = <C-function-pointer>;
define constant <GModuleCheckInit> = <anonymous-2411>;

define constant <anonymous-2412> = <C-function-pointer>;
define constant <GModuleUnload> = <anonymous-2412>;

define C-function g-module-supported
  result res :: <gboolean>;
  c-name: "g_module_supported";
end;

define C-function g-module-open-utf8
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GModuleFlags>;
  result res :: <GModule>;
  c-name: "g_module_open_utf8";
end;

define C-function g-module-close
  input parameter arg1 :: <GModule>;
  result res :: <gboolean>;
  c-name: "g_module_close";
end;

define C-function g-module-make-resident
  input parameter arg1 :: <GModule>;
  c-name: "g_module_make_resident";
end;

define C-function g-module-error
  result res :: <gchar*>;
  c-name: "g_module_error";
end;

define C-function g-module-symbol
  input parameter arg1 :: <GModule>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gpointer*>;
  result res :: <gboolean>;
  c-name: "g_module_symbol";
end;

define C-function g-module-name-utf8
  input parameter arg1 :: <GModule>;
  result res :: <gchar*>;
  c-name: "g_module_name_utf8";
end;

define C-function g-module-build-path
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "g_module_build_path";
end;

define constant g-module-open = g-module-open-utf8;

define constant g-module-name = g-module-name-utf8;

define C-subtype <_GdkPixbufSimpleAnim> (<_GdkPixbufAnimation>) end;
define constant <GdkPixbufSimpleAnim> = <_GdkPixbufSimpleAnim>;

define C-subtype <_GdkPixbufSimpleAnimClass> (<C-void*>) end;
define constant <GdkPixbufSimpleAnimClass> = <_GdkPixbufSimpleAnimClass>;

define C-function gdk-pixbuf-simple-anim-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_simple_anim_get_type";
end;

define C-function gdk-pixbuf-simple-anim-iter-get-type
  result res :: <GType>;
  c-name: "gdk_pixbuf_simple_anim_iter_get_type";
end;

define C-function gdk-pixbuf-simple-anim-new
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gfloat>;
  result res :: <GdkPixbufSimpleAnim>;
  c-name: "gdk_pixbuf_simple_anim_new";
end;

define C-function gdk-pixbuf-simple-anim-add-frame
  input parameter arg1 :: <GdkPixbufSimpleAnim>;
  input parameter arg2 :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_simple_anim_add_frame";
end;

define constant <GdkInterpType> = <C-int>;
define constant $GDK-INTERP-NEAREST = 0;
define constant $GDK-INTERP-TILES = 1;
define constant $GDK-INTERP-BILINEAR = 2;
define constant $GDK-INTERP-HYPER = 3;

define constant <GdkPixbufRotation> = <C-int>;
define constant $GDK-PIXBUF-ROTATE-NONE = 0;
define constant $GDK-PIXBUF-ROTATE-COUNTERCLOCKWISE = 90;
define constant $GDK-PIXBUF-ROTATE-UPSIDEDOWN = 180;
define constant $GDK-PIXBUF-ROTATE-CLOCKWISE = 270;

define C-function gdk-pixbuf-scale
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkPixbuf>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-double>;
  input parameter arg8 :: <C-double>;
  input parameter arg9 :: <C-double>;
  input parameter arg10 :: <C-double>;
  input parameter arg11 :: <GdkInterpType>;
  c-name: "gdk_pixbuf_scale";
end;

define C-function gdk-pixbuf-composite
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkPixbuf>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-double>;
  input parameter arg8 :: <C-double>;
  input parameter arg9 :: <C-double>;
  input parameter arg10 :: <C-double>;
  input parameter arg11 :: <GdkInterpType>;
  input parameter arg12 :: <C-signed-int>;
  c-name: "gdk_pixbuf_composite";
end;

define C-function gdk-pixbuf-composite-color
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkPixbuf>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-double>;
  input parameter arg8 :: <C-double>;
  input parameter arg9 :: <C-double>;
  input parameter arg10 :: <C-double>;
  input parameter arg11 :: <GdkInterpType>;
  input parameter arg12 :: <C-signed-int>;
  input parameter arg13 :: <C-signed-int>;
  input parameter arg14 :: <C-signed-int>;
  input parameter arg15 :: <C-signed-int>;
  input parameter arg16 :: <guint32>;
  input parameter arg17 :: <guint32>;
  c-name: "gdk_pixbuf_composite_color";
end;

define C-function gdk-pixbuf-scale-simple
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <GdkInterpType>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_scale_simple";
end;

define C-function gdk-pixbuf-composite-color-simple
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <GdkInterpType>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <guint32>;
  input parameter arg8 :: <guint32>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_composite_color_simple";
end;

define C-function gdk-pixbuf-rotate-simple
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkPixbufRotation>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_rotate_simple";
end;

define C-function gdk-pixbuf-flip
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <gboolean>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_flip";
end;

 /* Ignoring declaration for {instance of <variable-declaration>} "gdk-pixbuf-major-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gdk-pixbuf-minor-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gdk-pixbuf-micro-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gdk-pixbuf-version"*/
define constant $GDK-PIXBUF-FEATURES-H = 1;

define constant $GDK-PIXBUF-MAJOR = 2;

define constant $GDK-PIXBUF-MINOR = 10;

define constant $GDK-PIXBUF-MICRO = 11;

define constant $GDK-PIXBUF-VERSION = "2.10.11";

define constant <guint32<@256>> = <guint32*>;
define C-subtype <_GdkRgbCmap> (<C-void*>) end;
define constant <GdkRgbCmap> = <_GdkRgbCmap>;

define C-function gdk-rgb-init
  c-name: "gdk_rgb_init";
end;

define C-function gdk-rgb-xpixel-from-rgb
  input parameter arg1 :: <guint32>;
  result res :: <gulong>;
  c-name: "gdk_rgb_xpixel_from_rgb";
end;

define C-function gdk-rgb-gc-set-foreground
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <guint32>;
  c-name: "gdk_rgb_gc_set_foreground";
end;

define C-function gdk-rgb-gc-set-background
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <guint32>;
  c-name: "gdk_rgb_gc_set_background";
end;

define C-function gdk-rgb-find-color
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gdk_rgb_find_color";
end;

define C-function gdk-draw-rgb-image
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <GdkRgbDither>;
  input parameter arg8 :: <guchar*>;
  input parameter arg9 :: <gint>;
  c-name: "gdk_draw_rgb_image";
end;

define C-function gdk-draw-rgb-image-dithalign
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <GdkRgbDither>;
  input parameter arg8 :: <guchar*>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gdk_draw_rgb_image_dithalign";
end;

define C-function gdk-draw-rgb-32-image
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <GdkRgbDither>;
  input parameter arg8 :: <guchar*>;
  input parameter arg9 :: <gint>;
  c-name: "gdk_draw_rgb_32_image";
end;

define C-function gdk-draw-rgb-32-image-dithalign
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <GdkRgbDither>;
  input parameter arg8 :: <guchar*>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <gint>;
  input parameter arg11 :: <gint>;
  c-name: "gdk_draw_rgb_32_image_dithalign";
end;

define C-function gdk-draw-gray-image
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <GdkRgbDither>;
  input parameter arg8 :: <guchar*>;
  input parameter arg9 :: <gint>;
  c-name: "gdk_draw_gray_image";
end;

define C-function gdk-draw-indexed-image
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGC>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <GdkRgbDither>;
  input parameter arg8 :: <guchar*>;
  input parameter arg9 :: <gint>;
  input parameter arg10 :: <GdkRgbCmap>;
  c-name: "gdk_draw_indexed_image";
end;

define C-function gdk-rgb-cmap-new
  input parameter arg1 :: <guint32*>;
  input parameter arg2 :: <gint>;
  result res :: <GdkRgbCmap>;
  c-name: "gdk_rgb_cmap_new";
end;

define C-function gdk-rgb-cmap-free
  input parameter arg1 :: <GdkRgbCmap>;
  c-name: "gdk_rgb_cmap_free";
end;

define C-function gdk-rgb-set-verbose
  input parameter arg1 :: <gboolean>;
  c-name: "gdk_rgb_set_verbose";
end;

define C-function gdk-rgb-set-install
  input parameter arg1 :: <gboolean>;
  c-name: "gdk_rgb_set_install";
end;

define C-function gdk-rgb-set-min-colors
  input parameter arg1 :: <gint>;
  c-name: "gdk_rgb_set_min_colors";
end;

define C-function gdk-rgb-get-colormap
  result res :: <GdkColormap>;
  c-name: "gdk_rgb_get_colormap";
end;

define C-function gdk-rgb-get-visual
  result res :: <GdkVisual>;
  c-name: "gdk_rgb_get_visual";
end;

define C-function gdk-rgb-ditherable
  result res :: <gboolean>;
  c-name: "gdk_rgb_ditherable";
end;

define C-function gdk-rgb-colormap-ditherable
  input parameter arg1 :: <GdkColormap>;
  result res :: <gboolean>;
  c-name: "gdk_rgb_colormap_ditherable";
end;

define constant gdk-rgb-get-cmap = gdk-rgb-get-colormap;

define constant <anonymous-2621> = <C-function-pointer>;
define constant <anonymous-2622> = <C-function-pointer>;
define C-pointer-type <gint8*> => <gint8>;
define constant <gint8<@>> = <gint8*>;
define constant <anonymous-2623> = <C-function-pointer>;
define constant <anonymous-2624> = <C-function-pointer>;
define constant <anonymous-2625> = <C-function-pointer>;
define constant <anonymous-2626> = <C-function-pointer>;
define constant <anonymous-2627> = <C-function-pointer>;
define C-subtype <_GdkGCClass> (<C-void*>) end;
define constant <GdkGCClass> = <_GdkGCClass>;

define C-function gdk-gc-get-type
  result res :: <GType>;
  c-name: "gdk_gc_get_type";
end;

define C-function gdk-gc-new
  input parameter arg1 :: <GdkDrawable>;
  result res :: <GdkGC>;
  c-name: "gdk_gc_new";
end;

define C-function gdk-gc-new-with-values
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkGCValues>;
  input parameter arg3 :: <GdkGCValuesMask>;
  result res :: <GdkGC>;
  c-name: "gdk_gc_new_with_values";
end;

define C-function gdk-gc-ref
  input parameter arg1 :: <GdkGC>;
  result res :: <GdkGC>;
  c-name: "gdk_gc_ref";
end;

define C-function gdk-gc-unref
  input parameter arg1 :: <GdkGC>;
  c-name: "gdk_gc_unref";
end;

define C-function gdk-gc-get-values
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkGCValues>;
  c-name: "gdk_gc_get_values";
end;

define C-function gdk-gc-set-values
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkGCValues>;
  input parameter arg3 :: <GdkGCValuesMask>;
  c-name: "gdk_gc_set_values";
end;

define C-function gdk-gc-set-foreground
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gdk_gc_set_foreground";
end;

define C-function gdk-gc-set-background
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gdk_gc_set_background";
end;

define C-function gdk-gc-set-font
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkFont>;
  c-name: "gdk_gc_set_font";
end;

define C-function gdk-gc-set-function
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkFunction>;
  c-name: "gdk_gc_set_function";
end;

define C-function gdk-gc-set-fill
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkFill>;
  c-name: "gdk_gc_set_fill";
end;

define C-function gdk-gc-set-tile
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkPixmap>;
  c-name: "gdk_gc_set_tile";
end;

define C-function gdk-gc-set-stipple
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkPixmap>;
  c-name: "gdk_gc_set_stipple";
end;

define C-function gdk-gc-set-ts-origin
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_gc_set_ts_origin";
end;

define C-function gdk-gc-set-clip-origin
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_gc_set_clip_origin";
end;

define C-function gdk-gc-set-clip-mask
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkBitmap>;
  c-name: "gdk_gc_set_clip_mask";
end;

define C-function gdk-gc-set-clip-rectangle
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gdk_gc_set_clip_rectangle";
end;

define C-function gdk-gc-set-clip-region
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkRegion>;
  c-name: "gdk_gc_set_clip_region";
end;

define C-function gdk-gc-set-subwindow
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkSubwindowMode>;
  c-name: "gdk_gc_set_subwindow";
end;

define C-function gdk-gc-set-exposures
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <gboolean>;
  c-name: "gdk_gc_set_exposures";
end;

define C-function gdk-gc-set-line-attributes
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GdkLineStyle>;
  input parameter arg4 :: <GdkCapStyle>;
  input parameter arg5 :: <GdkJoinStyle>;
  c-name: "gdk_gc_set_line_attributes";
end;

define C-function gdk-gc-set-dashes
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint8<@>>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_gc_set_dashes";
end;

define C-function gdk-gc-offset
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_gc_offset";
end;

define C-function gdk-gc-copy
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkGC>;
  c-name: "gdk_gc_copy";
end;

define C-function gdk-gc-set-colormap
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkColormap>;
  c-name: "gdk_gc_set_colormap";
end;

define C-function gdk-gc-get-colormap
  input parameter arg1 :: <GdkGC>;
  result res :: <GdkColormap>;
  c-name: "gdk_gc_get_colormap";
end;

define C-function gdk-gc-set-rgb-fg-color
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gdk_gc_set_rgb_fg_color";
end;

define C-function gdk-gc-set-rgb-bg-color
  input parameter arg1 :: <GdkGC>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gdk_gc_set_rgb_bg_color";
end;

define C-function gdk-gc-get-screen
  input parameter arg1 :: <GdkGC>;
  result res :: <GdkScreen>;
  c-name: "gdk_gc_get_screen";
end;

define constant gdk-gc-destroy = gdk-gc-unref;

define C-subtype <_GdkVisualClass> (<C-void*>) end;
define constant <GdkVisualClass> = <_GdkVisualClass>;

define C-function gdk-visual-get-type
  result res :: <GType>;
  c-name: "gdk_visual_get_type";
end;

define C-function gdk-visual-get-best-depth
  result res :: <gint>;
  c-name: "gdk_visual_get_best_depth";
end;

define C-function gdk-visual-get-best-type
  result res :: <GdkVisualType>;
  c-name: "gdk_visual_get_best_type";
end;

define C-function gdk-visual-get-system
  result res :: <GdkVisual>;
  c-name: "gdk_visual_get_system";
end;

define C-function gdk-visual-get-best
  result res :: <GdkVisual>;
  c-name: "gdk_visual_get_best";
end;

define C-function gdk-visual-get-best-with-depth
  input parameter arg1 :: <gint>;
  result res :: <GdkVisual>;
  c-name: "gdk_visual_get_best_with_depth";
end;

define C-function gdk-visual-get-best-with-type
  input parameter arg1 :: <GdkVisualType>;
  result res :: <GdkVisual>;
  c-name: "gdk_visual_get_best_with_type";
end;

define C-function gdk-visual-get-best-with-both
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GdkVisualType>;
  result res :: <GdkVisual>;
  c-name: "gdk_visual_get_best_with_both";
end;

define C-function gdk-query-depths
  input parameter arg1 :: <gint**>;
  input parameter arg2 :: <gint*>;
  c-name: "gdk_query_depths";
end;

define C-pointer-type <GdkVisualType*> => <GdkVisualType>;
define C-pointer-type <GdkVisualType**> => <GdkVisualType*>;
define C-function gdk-query-visual-types
  input parameter arg1 :: <GdkVisualType**>;
  input parameter arg2 :: <gint*>;
  c-name: "gdk_query_visual_types";
end;

define C-function gdk-list-visuals
  result res :: <GList>;
  c-name: "gdk_list_visuals";
end;

define C-function gdk-visual-get-screen
  input parameter arg1 :: <GdkVisual>;
  result res :: <GdkScreen>;
  c-name: "gdk_visual_get_screen";
end;

define C-function gdk-spawn-on-screen
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <gchar**>;
  input parameter arg5 :: <GSpawnFlags>;
  input parameter arg6 :: <GSpawnChildSetupFunc>;
  input parameter arg7 :: <gpointer>;
  input parameter arg8 :: <gint*>;
  input parameter arg9 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_spawn_on_screen";
end;

define C-function gdk-spawn-on-screen-with-pipes
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <gchar**>;
  input parameter arg5 :: <GSpawnFlags>;
  input parameter arg6 :: <GSpawnChildSetupFunc>;
  input parameter arg7 :: <gpointer>;
  input parameter arg8 :: <gint*>;
  input parameter arg9 :: <gint*>;
  input parameter arg10 :: <gint*>;
  input parameter arg11 :: <gint*>;
  input parameter arg12 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_spawn_on_screen_with_pipes";
end;

define C-function gdk-spawn-command-line-on-screen
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gdk_spawn_command_line_on_screen";
end;

define constant <anonymous-2910> = <C-function-pointer>;
define constant <anonymous-2911> = <C-function-pointer>;
define C-subtype <_GdkScreenClass> (<C-void*>) end;
define constant <GdkScreenClass> = <_GdkScreenClass>;

define C-function gdk-screen-get-type
  result res :: <GType>;
  c-name: "gdk_screen_get_type";
end;

define C-function gdk-screen-get-default-colormap
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkColormap>;
  c-name: "gdk_screen_get_default_colormap";
end;

define C-function gdk-screen-set-default-colormap
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <GdkColormap>;
  c-name: "gdk_screen_set_default_colormap";
end;

define C-function gdk-screen-get-system-colormap
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkColormap>;
  c-name: "gdk_screen_get_system_colormap";
end;

define C-function gdk-screen-get-system-visual
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkVisual>;
  c-name: "gdk_screen_get_system_visual";
end;

define C-function gdk-screen-get-rgb-colormap
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkColormap>;
  c-name: "gdk_screen_get_rgb_colormap";
end;

define C-function gdk-screen-get-rgb-visual
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkVisual>;
  c-name: "gdk_screen_get_rgb_visual";
end;

define C-function gdk-screen-get-rgba-colormap
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkColormap>;
  c-name: "gdk_screen_get_rgba_colormap";
end;

define C-function gdk-screen-get-rgba-visual
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkVisual>;
  c-name: "gdk_screen_get_rgba_visual";
end;

define C-function gdk-screen-is-composited
  input parameter arg1 :: <GdkScreen>;
  result res :: <gboolean>;
  c-name: "gdk_screen_is_composited";
end;

define C-function gdk-screen-get-root-window
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkWindow>;
  c-name: "gdk_screen_get_root_window";
end;

define C-function gdk-screen-get-display
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkDisplay>;
  c-name: "gdk_screen_get_display";
end;

define C-function gdk-screen-get-number
  input parameter arg1 :: <GdkScreen>;
  result res :: <gint>;
  c-name: "gdk_screen_get_number";
end;

define C-function gdk-screen-get-width
  input parameter arg1 :: <GdkScreen>;
  result res :: <gint>;
  c-name: "gdk_screen_get_width";
end;

define C-function gdk-screen-get-height
  input parameter arg1 :: <GdkScreen>;
  result res :: <gint>;
  c-name: "gdk_screen_get_height";
end;

define C-function gdk-screen-get-width-mm
  input parameter arg1 :: <GdkScreen>;
  result res :: <gint>;
  c-name: "gdk_screen_get_width_mm";
end;

define C-function gdk-screen-get-height-mm
  input parameter arg1 :: <GdkScreen>;
  result res :: <gint>;
  c-name: "gdk_screen_get_height_mm";
end;

define C-function gdk-screen-list-visuals
  input parameter arg1 :: <GdkScreen>;
  result res :: <GList>;
  c-name: "gdk_screen_list_visuals";
end;

define C-function gdk-screen-get-toplevel-windows
  input parameter arg1 :: <GdkScreen>;
  result res :: <GList>;
  c-name: "gdk_screen_get_toplevel_windows";
end;

define C-function gdk-screen-make-display-name
  input parameter arg1 :: <GdkScreen>;
  result res :: <gchar*>;
  c-name: "gdk_screen_make_display_name";
end;

define C-function gdk-screen-get-n-monitors
  input parameter arg1 :: <GdkScreen>;
  result res :: <gint>;
  c-name: "gdk_screen_get_n_monitors";
end;

define C-function gdk-screen-get-monitor-geometry
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GdkRectangle>;
  c-name: "gdk_screen_get_monitor_geometry";
end;

define C-function gdk-screen-get-monitor-at-point
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gdk_screen_get_monitor_at_point";
end;

define C-function gdk-screen-get-monitor-at-window
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <GdkWindow>;
  result res :: <gint>;
  c-name: "gdk_screen_get_monitor_at_window";
end;

define C-function gdk-screen-broadcast-client-message
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <GdkEvent>;
  c-name: "gdk_screen_broadcast_client_message";
end;

define C-function gdk-screen-get-default
  result res :: <GdkScreen>;
  c-name: "gdk_screen_get_default";
end;

define C-function gdk-screen-get-setting
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GValue>;
  result res :: <gboolean>;
  c-name: "gdk_screen_get_setting";
end;

define C-function gdk-screen-set-font-options
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <cairo-font-options-t>;
  c-name: "gdk_screen_set_font_options";
end;

define C-function gdk-screen-get-font-options
  input parameter arg1 :: <GdkScreen>;
  result res :: <cairo-font-options-t>;
  c-name: "gdk_screen_get_font_options";
end;

define C-function gdk-screen-set-resolution
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <gdouble>;
  c-name: "gdk_screen_set_resolution";
end;

define C-function gdk-screen-get-resolution
  input parameter arg1 :: <GdkScreen>;
  result res :: <gdouble>;
  c-name: "gdk_screen_get_resolution";
end;

define C-function gdk-screen-get-active-window
  input parameter arg1 :: <GdkScreen>;
  result res :: <GdkWindow>;
  c-name: "gdk_screen_get_active_window";
end;

define C-function gdk-screen-get-window-stack
  input parameter arg1 :: <GdkScreen>;
  result res :: <GList>;
  c-name: "gdk_screen_get_window_stack";
end;

define constant <anonymous-2568> = <C-function-pointer>;
define constant <anonymous-2569> = <C-function-pointer>;
define constant <anonymous-2570> = <C-function-pointer>;
define constant <anonymous-2571> = <C-function-pointer>;
define constant <anonymous-2572> = <C-function-pointer>;
define C-subtype <_GdkDisplayClass> (<C-void*>) end;
define constant <GdkDisplayClass> = <_GdkDisplayClass>;

define C-function gdk-display-get-type
  result res :: <GType>;
  c-name: "gdk_display_get_type";
end;

define C-function gdk-display-open
  input parameter arg1 :: <gchar*>;
  result res :: <GdkDisplay>;
  c-name: "gdk_display_open";
end;

define C-function gdk-display-get-name
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gchar*>;
  c-name: "gdk_display_get_name";
end;

define C-function gdk-display-get-n-screens
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gint>;
  c-name: "gdk_display_get_n_screens";
end;

define C-function gdk-display-get-screen
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <gint>;
  result res :: <GdkScreen>;
  c-name: "gdk_display_get_screen";
end;

define C-function gdk-display-get-default-screen
  input parameter arg1 :: <GdkDisplay>;
  result res :: <GdkScreen>;
  c-name: "gdk_display_get_default_screen";
end;

define C-function gdk-display-pointer-ungrab
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <guint32>;
  c-name: "gdk_display_pointer_ungrab";
end;

define C-function gdk-display-keyboard-ungrab
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <guint32>;
  c-name: "gdk_display_keyboard_ungrab";
end;

define C-function gdk-display-pointer-is-grabbed
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gboolean>;
  c-name: "gdk_display_pointer_is_grabbed";
end;

define C-function gdk-display-beep
  input parameter arg1 :: <GdkDisplay>;
  c-name: "gdk_display_beep";
end;

define C-function gdk-display-sync
  input parameter arg1 :: <GdkDisplay>;
  c-name: "gdk_display_sync";
end;

define C-function gdk-display-flush
  input parameter arg1 :: <GdkDisplay>;
  c-name: "gdk_display_flush";
end;

define C-function gdk-display-close
  input parameter arg1 :: <GdkDisplay>;
  c-name: "gdk_display_close";
end;

define C-function gdk-display-list-devices
  input parameter arg1 :: <GdkDisplay>;
  result res :: <GList>;
  c-name: "gdk_display_list_devices";
end;

define C-function gdk-display-get-event
  input parameter arg1 :: <GdkDisplay>;
  result res :: <GdkEvent>;
  c-name: "gdk_display_get_event";
end;

define C-function gdk-display-peek-event
  input parameter arg1 :: <GdkDisplay>;
  result res :: <GdkEvent>;
  c-name: "gdk_display_peek_event";
end;

define C-function gdk-display-put-event
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkEvent>;
  c-name: "gdk_display_put_event";
end;

define C-function gdk-display-add-client-message-filter
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GdkFilterFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "gdk_display_add_client_message_filter";
end;

define C-function gdk-display-set-double-click-time
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <guint>;
  c-name: "gdk_display_set_double_click_time";
end;

define C-function gdk-display-set-double-click-distance
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <guint>;
  c-name: "gdk_display_set_double_click_distance";
end;

define C-function gdk-display-get-default
  result res :: <GdkDisplay>;
  c-name: "gdk_display_get_default";
end;

define C-function gdk-display-get-core-pointer
  input parameter arg1 :: <GdkDisplay>;
  result res :: <GdkDevice>;
  c-name: "gdk_display_get_core_pointer";
end;

define C-function gdk-display-get-pointer
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkScreen*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <GdkModifierType*>;
  c-name: "gdk_display_get_pointer";
end;

define C-function gdk-display-get-window-at-pointer
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  result res :: <GdkWindow>;
  c-name: "gdk_display_get_window_at_pointer";
end;

define C-function gdk-display-warp-pointer
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkScreen>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gdk_display_warp_pointer";
end;

define C-function gdk-display-set-pointer-hooks
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkDisplayPointerHooks>;
  result res :: <GdkDisplayPointerHooks>;
  c-name: "gdk_display_set_pointer_hooks";
end;

define C-function gdk-display-open-default-libgtk-only
  result res :: <GdkDisplay>;
  c-name: "gdk_display_open_default_libgtk_only";
end;

define C-function gdk-display-supports-cursor-alpha
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gboolean>;
  c-name: "gdk_display_supports_cursor_alpha";
end;

define C-function gdk-display-supports-cursor-color
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gboolean>;
  c-name: "gdk_display_supports_cursor_color";
end;

define C-function gdk-display-get-default-cursor-size
  input parameter arg1 :: <GdkDisplay>;
  result res :: <guint>;
  c-name: "gdk_display_get_default_cursor_size";
end;

define C-function gdk-display-get-maximal-cursor-size
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <guint*>;
  input parameter arg3 :: <guint*>;
  c-name: "gdk_display_get_maximal_cursor_size";
end;

define C-function gdk-display-get-default-group
  input parameter arg1 :: <GdkDisplay>;
  result res :: <GdkWindow>;
  c-name: "gdk_display_get_default_group";
end;

define C-function gdk-display-supports-selection-notification
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gboolean>;
  c-name: "gdk_display_supports_selection_notification";
end;

define C-function gdk-display-request-selection-notification
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkAtom>;
  result res :: <gboolean>;
  c-name: "gdk_display_request_selection_notification";
end;

define C-function gdk-display-supports-clipboard-persistence
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gboolean>;
  c-name: "gdk_display_supports_clipboard_persistence";
end;

define C-pointer-type <GdkAtom*> => <GdkAtom>;
define C-function gdk-display-store-clipboard
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <guint32>;
  input parameter arg4 :: <GdkAtom*>;
  input parameter arg5 :: <gint>;
  c-name: "gdk_display_store_clipboard";
end;

define C-function gdk-display-supports-shapes
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gboolean>;
  c-name: "gdk_display_supports_shapes";
end;

define C-function gdk-display-supports-input-shapes
  input parameter arg1 :: <GdkDisplay>;
  result res :: <gboolean>;
  c-name: "gdk_display_supports_input_shapes";
end;

define constant <GdkSelection> = <GdkAtom>;

define constant <GdkTarget> = <GdkAtom>;

define constant <GdkSelectionType> = <GdkAtom>;

define C-function gdk-selection-owner-set
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <guint32>;
  input parameter arg4 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gdk_selection_owner_set";
end;

define C-function gdk-selection-owner-get
  input parameter arg1 :: <GdkAtom>;
  result res :: <GdkWindow>;
  c-name: "gdk_selection_owner_get";
end;

define C-function gdk-selection-owner-set-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <guint32>;
  input parameter arg5 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gdk_selection_owner_set_for_display";
end;

define C-function gdk-selection-owner-get-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkAtom>;
  result res :: <GdkWindow>;
  c-name: "gdk_selection_owner_get_for_display";
end;

define C-function gdk-selection-convert
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <guint32>;
  c-name: "gdk_selection_convert";
end;

define C-function gdk-selection-property-get
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <guchar**>;
  input parameter arg3 :: <GdkAtom*>;
  input parameter arg4 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gdk_selection_property_get";
end;

define C-function gdk-selection-send-notify
  input parameter arg1 :: <guint32>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <GdkAtom>;
  input parameter arg5 :: <guint32>;
  c-name: "gdk_selection_send_notify";
end;

define C-function gdk-selection-send-notify-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <guint32>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <GdkAtom>;
  input parameter arg5 :: <GdkAtom>;
  input parameter arg6 :: <guint32>;
  c-name: "gdk_selection_send_notify_for_display";
end;

define constant <GdkFillRule> = <C-int>;
define constant $GDK-EVEN-ODD-RULE = 0;
define constant $GDK-WINDING-RULE = 1;

define constant <GdkOverlapType> = <C-int>;
define constant $GDK-OVERLAP-RECTANGLE-IN = 0;
define constant $GDK-OVERLAP-RECTANGLE-OUT = 1;
define constant $GDK-OVERLAP-RECTANGLE-PART = 2;

define constant <anonymous-2889> = <C-function-pointer>;
define constant <GdkSpanFunc> = <anonymous-2889>;

define C-function gdk-region-new
  result res :: <GdkRegion>;
  c-name: "gdk_region_new";
end;

define C-function gdk-region-polygon
  input parameter arg1 :: <GdkPoint>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GdkFillRule>;
  result res :: <GdkRegion>;
  c-name: "gdk_region_polygon";
end;

define C-function gdk-region-copy
  input parameter arg1 :: <GdkRegion>;
  result res :: <GdkRegion>;
  c-name: "gdk_region_copy";
end;

define C-function gdk-region-rectangle
  input parameter arg1 :: <GdkRectangle>;
  result res :: <GdkRegion>;
  c-name: "gdk_region_rectangle";
end;

define C-function gdk-region-destroy
  input parameter arg1 :: <GdkRegion>;
  c-name: "gdk_region_destroy";
end;

define C-function gdk-region-get-clipbox
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gdk_region_get_clipbox";
end;

define C-pointer-type <GdkRectangle*> => <GdkRectangle>;
define C-function gdk-region-get-rectangles
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRectangle*>;
  input parameter arg3 :: <gint*>;
  c-name: "gdk_region_get_rectangles";
end;

define C-function gdk-region-empty
  input parameter arg1 :: <GdkRegion>;
  result res :: <gboolean>;
  c-name: "gdk_region_empty";
end;

define C-function gdk-region-equal
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRegion>;
  result res :: <gboolean>;
  c-name: "gdk_region_equal";
end;

define C-function gdk-region-point-in
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <C-signed-int>;
  result res :: <gboolean>;
  c-name: "gdk_region_point_in";
end;

define C-function gdk-region-rect-in
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRectangle>;
  result res :: <GdkOverlapType>;
  c-name: "gdk_region_rect_in";
end;

define C-function gdk-region-offset
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_region_offset";
end;

define C-function gdk-region-shrink
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gdk_region_shrink";
end;

define C-function gdk-region-union-with-rect
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gdk_region_union_with_rect";
end;

define C-function gdk-region-intersect
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRegion>;
  c-name: "gdk_region_intersect";
end;

define C-function gdk-region-union
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRegion>;
  c-name: "gdk_region_union";
end;

define C-function gdk-region-subtract
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRegion>;
  c-name: "gdk_region_subtract";
end;

define C-function gdk-region-xor
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkRegion>;
  c-name: "gdk_region_xor";
end;

define C-function gdk-region-spans-intersect-foreach
  input parameter arg1 :: <GdkRegion>;
  input parameter arg2 :: <GdkSpan>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <GdkSpanFunc>;
  input parameter arg6 :: <gpointer>;
  c-name: "gdk_region_spans_intersect_foreach";
end;

define constant <GdkPropMode> = <C-int>;
define constant $GDK-PROP-MODE-REPLACE = 0;
define constant $GDK-PROP-MODE-PREPEND = 1;
define constant $GDK-PROP-MODE-APPEND = 2;

define C-function gdk-atom-intern
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gboolean>;
  result res :: <GdkAtom>;
  c-name: "gdk_atom_intern";
end;

define C-function gdk-atom-intern-static-string
  input parameter arg1 :: <gchar*>;
  result res :: <GdkAtom>;
  c-name: "gdk_atom_intern_static_string";
end;

define C-function gdk-atom-name
  input parameter arg1 :: <GdkAtom>;
  result res :: <gchar*>;
  c-name: "gdk_atom_name";
end;

define C-function gdk-property-get
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <gulong>;
  input parameter arg5 :: <gulong>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <GdkAtom*>;
  input parameter arg8 :: <gint*>;
  input parameter arg9 :: <gint*>;
  input parameter arg10 :: <guchar**>;
  result res :: <gboolean>;
  c-name: "gdk_property_get";
end;

define C-function gdk-property-change
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GdkPropMode>;
  input parameter arg6 :: <guchar*>;
  input parameter arg7 :: <gint>;
  c-name: "gdk_property_change";
end;

define C-function gdk-property-delete
  input parameter arg1 :: <GdkWindow>;
  input parameter arg2 :: <GdkAtom>;
  c-name: "gdk_property_delete";
end;

define C-function gdk-text-property-to-text-list
  input parameter arg1 :: <GdkAtom>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <guchar*>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gchar***>;
  result res :: <gint>;
  c-name: "gdk_text_property_to_text_list";
end;

define C-function gdk-text-property-to-utf8-list
  input parameter arg1 :: <GdkAtom>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <guchar*>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gchar***>;
  result res :: <gint>;
  c-name: "gdk_text_property_to_utf8_list";
end;

define C-function gdk-utf8-to-compound-text
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GdkAtom*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <guchar**>;
  input parameter arg5 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gdk_utf8_to_compound_text";
end;

define C-function gdk-string-to-compound-text
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GdkAtom*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <guchar**>;
  input parameter arg5 :: <gint*>;
  result res :: <gint>;
  c-name: "gdk_string_to_compound_text";
end;

define C-function gdk-text-property-to-text-list-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <guchar*>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gchar***>;
  result res :: <gint>;
  c-name: "gdk_text_property_to_text_list_for_display";
end;

define C-function gdk-text-property-to-utf8-list-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <guchar*>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gchar***>;
  result res :: <gint>;
  c-name: "gdk_text_property_to_utf8_list_for_display";
end;

define C-function gdk-utf8-to-string-target
  input parameter arg1 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "gdk_utf8_to_string_target";
end;

define C-function gdk-string-to-compound-text-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GdkAtom*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <guchar**>;
  input parameter arg6 :: <gint*>;
  result res :: <gint>;
  c-name: "gdk_string_to_compound_text_for_display";
end;

define C-function gdk-utf8-to-compound-text-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GdkAtom*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <guchar**>;
  input parameter arg6 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gdk_utf8_to_compound_text_for_display";
end;

define C-function gdk-free-text-list
  input parameter arg1 :: <gchar**>;
  c-name: "gdk_free_text_list";
end;

define C-function gdk-free-compound-text
  input parameter arg1 :: <guchar*>;
  c-name: "gdk_free_compound_text";
end;

define C-subtype <_GdkPixmapObject> (<C-void*>) end;
define constant <GdkPixmapObject> = <_GdkPixmapObject>;

define C-subtype <_GdkPixmapObjectClass> (<C-void*>) end;
define constant <GdkPixmapObjectClass> = <_GdkPixmapObjectClass>;

define C-function gdk-pixmap-get-type
  result res :: <GType>;
  c-name: "gdk_pixmap_get_type";
end;

define C-function gdk-pixmap-new
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_new";
end;

define C-function gdk-bitmap-create-from-data
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  result res :: <GdkBitmap>;
  c-name: "gdk_bitmap_create_from_data";
end;

define C-function gdk-pixmap-create-from-data
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <GdkColor>;
  input parameter arg7 :: <GdkColor>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_create_from_data";
end;

define C-pointer-type <GdkBitmap*> => <GdkBitmap>;
define C-function gdk-pixmap-create-from-xpm
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkBitmap*>;
  input parameter arg3 :: <GdkColor>;
  input parameter arg4 :: <gchar*>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_create_from_xpm";
end;

define C-function gdk-pixmap-colormap-create-from-xpm
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkColormap>;
  input parameter arg3 :: <GdkBitmap*>;
  input parameter arg4 :: <GdkColor>;
  input parameter arg5 :: <gchar*>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_colormap_create_from_xpm";
end;

define C-function gdk-pixmap-create-from-xpm-d
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkBitmap*>;
  input parameter arg3 :: <GdkColor>;
  input parameter arg4 :: <gchar**>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_create_from_xpm_d";
end;

define C-function gdk-pixmap-colormap-create-from-xpm-d
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <GdkColormap>;
  input parameter arg3 :: <GdkBitmap*>;
  input parameter arg4 :: <GdkColor>;
  input parameter arg5 :: <gchar**>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_colormap_create_from_xpm_d";
end;

define C-function gdk-pixmap-foreign-new
  input parameter arg1 :: <GdkNativeWindow>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_foreign_new";
end;

define C-function gdk-pixmap-lookup
  input parameter arg1 :: <GdkNativeWindow>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_lookup";
end;

define C-function gdk-pixmap-foreign-new-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkNativeWindow>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_foreign_new_for_display";
end;

define C-function gdk-pixmap-lookup-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkNativeWindow>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_lookup_for_display";
end;

define C-function gdk-pixmap-foreign-new-for-screen
  input parameter arg1 :: <GdkScreen>;
  input parameter arg2 :: <GdkNativeWindow>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  result res :: <GdkPixmap>;
  c-name: "gdk_pixmap_foreign_new_for_screen";
end;

define constant gdk-bitmap-ref = gdk-drawable-ref;

define constant gdk-bitmap-unref = gdk-drawable-unref;

define constant gdk-pixmap-ref = gdk-drawable-ref;

define constant gdk-pixmap-unref = gdk-drawable-unref;

define C-function gdk-pixbuf-render-threshold-alpha
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkBitmap>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-signed-int>;
  input parameter arg8 :: <C-signed-int>;
  input parameter arg9 :: <C-signed-int>;
  c-name: "gdk_pixbuf_render_threshold_alpha";
end;

define C-function gdk-pixbuf-render-to-drawable
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkDrawable>;
  input parameter arg3 :: <GdkGC>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-signed-int>;
  input parameter arg8 :: <C-signed-int>;
  input parameter arg9 :: <C-signed-int>;
  input parameter arg10 :: <GdkRgbDither>;
  input parameter arg11 :: <C-signed-int>;
  input parameter arg12 :: <C-signed-int>;
  c-name: "gdk_pixbuf_render_to_drawable";
end;

define C-function gdk-pixbuf-render-to-drawable-alpha
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkDrawable>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-signed-int>;
  input parameter arg8 :: <C-signed-int>;
  input parameter arg9 :: <GdkPixbufAlphaMode>;
  input parameter arg10 :: <C-signed-int>;
  input parameter arg11 :: <GdkRgbDither>;
  input parameter arg12 :: <C-signed-int>;
  input parameter arg13 :: <C-signed-int>;
  c-name: "gdk_pixbuf_render_to_drawable_alpha";
end;

define C-function gdk-pixbuf-render-pixmap-and-mask-for-colormap
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkColormap>;
  input parameter arg3 :: <GdkPixmap*>;
  input parameter arg4 :: <GdkBitmap*>;
  input parameter arg5 :: <C-signed-int>;
  c-name: "gdk_pixbuf_render_pixmap_and_mask_for_colormap";
end;

define C-function gdk-pixbuf-render-pixmap-and-mask
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkPixmap*>;
  input parameter arg3 :: <GdkBitmap*>;
  input parameter arg4 :: <C-signed-int>;
  c-name: "gdk_pixbuf_render_pixmap_and_mask";
end;

define C-function gdk-pixbuf-get-from-drawable
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkDrawable>;
  input parameter arg3 :: <GdkColormap>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-signed-int>;
  input parameter arg8 :: <C-signed-int>;
  input parameter arg9 :: <C-signed-int>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_get_from_drawable";
end;

define C-function gdk-pixbuf-get-from-image
  input parameter arg1 :: <GdkPixbuf>;
  input parameter arg2 :: <GdkImage>;
  input parameter arg3 :: <GdkColormap>;
  input parameter arg4 :: <C-signed-int>;
  input parameter arg5 :: <C-signed-int>;
  input parameter arg6 :: <C-signed-int>;
  input parameter arg7 :: <C-signed-int>;
  input parameter arg8 :: <C-signed-int>;
  input parameter arg9 :: <C-signed-int>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_pixbuf_get_from_image";
end;

define C-subtype <_GdkPangoRendererPrivate> (<C-void*>) end;
define constant <GdkPangoRendererPrivate> = <_GdkPangoRendererPrivate>;

define C-subtype <_GdkPangoRenderer> (<_PangoRenderer>) end;
define constant <GdkPangoRenderer> = <_GdkPangoRenderer>;

define C-subtype <_GdkPangoRendererClass> (<C-void*>) end;
define constant <GdkPangoRendererClass> = <_GdkPangoRendererClass>;

define C-function gdk-pango-renderer-get-type
  result res :: <GType>;
  c-name: "gdk_pango_renderer_get_type";
end;

define C-function gdk-pango-renderer-new
  input parameter arg1 :: <GdkScreen>;
  result res :: <PangoRenderer>;
  c-name: "gdk_pango_renderer_new";
end;

define C-function gdk-pango-renderer-get-default
  input parameter arg1 :: <GdkScreen>;
  result res :: <PangoRenderer>;
  c-name: "gdk_pango_renderer_get_default";
end;

define C-function gdk-pango-renderer-set-drawable
  input parameter arg1 :: <GdkPangoRenderer>;
  input parameter arg2 :: <GdkDrawable>;
  c-name: "gdk_pango_renderer_set_drawable";
end;

define C-function gdk-pango-renderer-set-gc
  input parameter arg1 :: <GdkPangoRenderer>;
  input parameter arg2 :: <GdkGC>;
  c-name: "gdk_pango_renderer_set_gc";
end;

define C-function gdk-pango-renderer-set-stipple
  input parameter arg1 :: <GdkPangoRenderer>;
  input parameter arg2 :: <PangoRenderPart>;
  input parameter arg3 :: <GdkBitmap>;
  c-name: "gdk_pango_renderer_set_stipple";
end;

define C-function gdk-pango-renderer-set-override-color
  input parameter arg1 :: <GdkPangoRenderer>;
  input parameter arg2 :: <PangoRenderPart>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gdk_pango_renderer_set_override_color";
end;

define C-function gdk-pango-context-get-for-screen
  input parameter arg1 :: <GdkScreen>;
  result res :: <PangoContext>;
  c-name: "gdk_pango_context_get_for_screen";
end;

define C-function gdk-pango-context-get
  result res :: <PangoContext>;
  c-name: "gdk_pango_context_get";
end;

define C-function gdk-pango-context-set-colormap
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <GdkColormap>;
  c-name: "gdk_pango_context_set_colormap";
end;

define C-function gdk-pango-layout-line-get-clip-region
  input parameter arg1 :: <PangoLayoutLine>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint>;
  result res :: <GdkRegion>;
  c-name: "gdk_pango_layout_line_get_clip_region";
end;

define C-function gdk-pango-layout-get-clip-region
  input parameter arg1 :: <PangoLayout>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint>;
  result res :: <GdkRegion>;
  c-name: "gdk_pango_layout_get_clip_region";
end;

define C-subtype <_GdkPangoAttrStipple> (<C-void*>) end;
define constant <GdkPangoAttrStipple> = <_GdkPangoAttrStipple>;

define C-subtype <_GdkPangoAttrEmbossed> (<C-void*>) end;
define constant <GdkPangoAttrEmbossed> = <_GdkPangoAttrEmbossed>;

define C-function gdk-pango-attr-stipple-new
  input parameter arg1 :: <GdkBitmap>;
  result res :: <PangoAttribute>;
  c-name: "gdk_pango_attr_stipple_new";
end;

define C-function gdk-pango-attr-embossed-new
  input parameter arg1 :: <gboolean>;
  result res :: <PangoAttribute>;
  c-name: "gdk_pango_attr_embossed_new";
end;

define C-subtype <_GdkDisplayManager> (<_GObject>) end;
define constant <GdkDisplayManager> = <_GdkDisplayManager>;

define constant <anonymous-2836> = <C-function-pointer>;
define C-subtype <_GdkDisplayManagerClass> (<C-void*>) end;
define constant <GdkDisplayManagerClass> = <_GdkDisplayManagerClass>;

define C-function gdk-display-manager-get-type
  result res :: <GType>;
  c-name: "gdk_display_manager_get_type";
end;

define C-function gdk-display-manager-get
  result res :: <GdkDisplayManager>;
  c-name: "gdk_display_manager_get";
end;

define C-function gdk-display-manager-get-default-display
  input parameter arg1 :: <GdkDisplayManager>;
  result res :: <GdkDisplay>;
  c-name: "gdk_display_manager_get_default_display";
end;

define C-function gdk-display-manager-set-default-display
  input parameter arg1 :: <GdkDisplayManager>;
  input parameter arg2 :: <GdkDisplay>;
  c-name: "gdk_display_manager_set_default_display";
end;

define C-function gdk-display-manager-list-displays
  input parameter arg1 :: <GdkDisplayManager>;
  result res :: <GSList>;
  c-name: "gdk_display_manager_list_displays";
end;

define C-subtype <_GdkKeymapKey> (<C-void*>) end;
define constant <GdkKeymapKey> = <_GdkKeymapKey>;

define C-subtype <_GdkKeymap> (<_GObject>) end;
define constant <GdkKeymap> = <_GdkKeymap>;

define constant <anonymous-2817> = <C-function-pointer>;
define constant <anonymous-2818> = <C-function-pointer>;
define C-subtype <_GdkKeymapClass> (<C-void*>) end;
define constant <GdkKeymapClass> = <_GdkKeymapClass>;

define C-function gdk-keymap-get-type
  result res :: <GType>;
  c-name: "gdk_keymap_get_type";
end;

define C-function gdk-keymap-get-default
  result res :: <GdkKeymap>;
  c-name: "gdk_keymap_get_default";
end;

define C-function gdk-keymap-get-for-display
  input parameter arg1 :: <GdkDisplay>;
  result res :: <GdkKeymap>;
  c-name: "gdk_keymap_get_for_display";
end;

define C-function gdk-keymap-lookup-key
  input parameter arg1 :: <GdkKeymap>;
  input parameter arg2 :: <GdkKeymapKey>;
  result res :: <guint>;
  c-name: "gdk_keymap_lookup_key";
end;

define C-function gdk-keymap-translate-keyboard-state
  input parameter arg1 :: <GdkKeymap>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <guint*>;
  input parameter arg6 :: <gint*>;
  input parameter arg7 :: <gint*>;
  input parameter arg8 :: <GdkModifierType*>;
  result res :: <gboolean>;
  c-name: "gdk_keymap_translate_keyboard_state";
end;

define C-pointer-type <GdkKeymapKey*> => <GdkKeymapKey>;
define C-function gdk-keymap-get-entries-for-keyval
  input parameter arg1 :: <GdkKeymap>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkKeymapKey*>;
  input parameter arg4 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gdk_keymap_get_entries_for_keyval";
end;

define C-pointer-type <guint**> => <guint*>;
define C-function gdk-keymap-get-entries-for-keycode
  input parameter arg1 :: <GdkKeymap>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkKeymapKey*>;
  input parameter arg4 :: <guint**>;
  input parameter arg5 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gdk_keymap_get_entries_for_keycode";
end;

define C-function gdk-keymap-get-direction
  input parameter arg1 :: <GdkKeymap>;
  result res :: <PangoDirection>;
  c-name: "gdk_keymap_get_direction";
end;

define C-function gdk-keyval-name
  input parameter arg1 :: <guint>;
  result res :: <gchar*>;
  c-name: "gdk_keyval_name";
end;

define C-function gdk-keyval-from-name
  input parameter arg1 :: <gchar*>;
  result res :: <guint>;
  c-name: "gdk_keyval_from_name";
end;

define C-function gdk-keyval-convert-case
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <guint*>;
  input parameter arg3 :: <guint*>;
  c-name: "gdk_keyval_convert_case";
end;

define C-function gdk-keyval-to-upper
  input parameter arg1 :: <guint>;
  result res :: <guint>;
  c-name: "gdk_keyval_to_upper";
end;

define C-function gdk-keyval-to-lower
  input parameter arg1 :: <guint>;
  result res :: <guint>;
  c-name: "gdk_keyval_to_lower";
end;

define C-function gdk-keyval-is-upper
  input parameter arg1 :: <guint>;
  result res :: <gboolean>;
  c-name: "gdk_keyval_is_upper";
end;

define C-function gdk-keyval-is-lower
  input parameter arg1 :: <guint>;
  result res :: <gboolean>;
  c-name: "gdk_keyval_is_lower";
end;

define C-function gdk-keyval-to-unicode
  input parameter arg1 :: <guint>;
  result res :: <guint32>;
  c-name: "gdk_keyval_to_unicode";
end;

define C-function gdk-unicode-to-keyval
  input parameter arg1 :: <guint32>;
  result res :: <guint>;
  c-name: "gdk_unicode_to_keyval";
end;

define C-subtype <_GdkImageClass> (<C-void*>) end;
define constant <GdkImageClass> = <_GdkImageClass>;

define C-function gdk-image-get-type
  result res :: <GType>;
  c-name: "gdk_image_get_type";
end;

define C-function gdk-image-new
  input parameter arg1 :: <GdkImageType>;
  input parameter arg2 :: <GdkVisual>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  result res :: <GdkImage>;
  c-name: "gdk_image_new";
end;

define C-function gdk-image-get
  input parameter arg1 :: <GdkDrawable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  result res :: <GdkImage>;
  c-name: "gdk_image_get";
end;

define C-function gdk-image-ref
  input parameter arg1 :: <GdkImage>;
  result res :: <GdkImage>;
  c-name: "gdk_image_ref";
end;

define C-function gdk-image-unref
  input parameter arg1 :: <GdkImage>;
  c-name: "gdk_image_unref";
end;

define C-function gdk-image-put-pixel
  input parameter arg1 :: <GdkImage>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <guint32>;
  c-name: "gdk_image_put_pixel";
end;

define C-function gdk-image-get-pixel
  input parameter arg1 :: <GdkImage>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <guint32>;
  c-name: "gdk_image_get_pixel";
end;

define C-function gdk-image-set-colormap
  input parameter arg1 :: <GdkImage>;
  input parameter arg2 :: <GdkColormap>;
  c-name: "gdk_image_set_colormap";
end;

define C-function gdk-image-get-colormap
  input parameter arg1 :: <GdkImage>;
  result res :: <GdkColormap>;
  c-name: "gdk_image_get_colormap";
end;

define constant gdk-image-destroy = gdk-image-unref;

define C-function gdk-font-get-type
  result res :: <GType>;
  c-name: "gdk_font_get_type";
end;

define C-function gdk-font-ref
  input parameter arg1 :: <GdkFont>;
  result res :: <GdkFont>;
  c-name: "gdk_font_ref";
end;

define C-function gdk-font-unref
  input parameter arg1 :: <GdkFont>;
  c-name: "gdk_font_unref";
end;

define C-function gdk-font-id
  input parameter arg1 :: <GdkFont>;
  result res :: <gint>;
  c-name: "gdk_font_id";
end;

define C-function gdk-font-equal
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <GdkFont>;
  result res :: <gboolean>;
  c-name: "gdk_font_equal";
end;

define C-function gdk-font-load-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <gchar*>;
  result res :: <GdkFont>;
  c-name: "gdk_font_load_for_display";
end;

define C-function gdk-fontset-load-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <gchar*>;
  result res :: <GdkFont>;
  c-name: "gdk_fontset_load_for_display";
end;

define C-function gdk-font-from-description-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <PangoFontDescription>;
  result res :: <GdkFont>;
  c-name: "gdk_font_from_description_for_display";
end;

define C-function gdk-font-load
  input parameter arg1 :: <gchar*>;
  result res :: <GdkFont>;
  c-name: "gdk_font_load";
end;

define C-function gdk-fontset-load
  input parameter arg1 :: <gchar*>;
  result res :: <GdkFont>;
  c-name: "gdk_fontset_load";
end;

define C-function gdk-font-from-description
  input parameter arg1 :: <PangoFontDescription>;
  result res :: <GdkFont>;
  c-name: "gdk_font_from_description";
end;

define C-function gdk-string-width
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint>;
  c-name: "gdk_string_width";
end;

define C-function gdk-text-width
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gdk_text_width";
end;

define C-function gdk-text-width-wc
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <GdkWChar*>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gdk_text_width_wc";
end;

define C-function gdk-char-width
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar>;
  result res :: <gint>;
  c-name: "gdk_char_width";
end;

define C-function gdk-char-width-wc
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <GdkWChar>;
  result res :: <gint>;
  c-name: "gdk_char_width_wc";
end;

define C-function gdk-string-measure
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint>;
  c-name: "gdk_string_measure";
end;

define C-function gdk-text-measure
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gdk_text_measure";
end;

define C-function gdk-char-measure
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar>;
  result res :: <gint>;
  c-name: "gdk_char_measure";
end;

define C-function gdk-string-height
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint>;
  c-name: "gdk_string_height";
end;

define C-function gdk-text-height
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gdk_text_height";
end;

define C-function gdk-char-height
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar>;
  result res :: <gint>;
  c-name: "gdk_char_height";
end;

define C-function gdk-text-extents
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  input parameter arg7 :: <gint*>;
  input parameter arg8 :: <gint*>;
  c-name: "gdk_text_extents";
end;

define C-function gdk-text-extents-wc
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <GdkWChar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  input parameter arg7 :: <gint*>;
  input parameter arg8 :: <gint*>;
  c-name: "gdk_text_extents_wc";
end;

define C-function gdk-string-extents
  input parameter arg1 :: <GdkFont>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  input parameter arg7 :: <gint*>;
  c-name: "gdk_string_extents";
end;

define C-function gdk-font-get-display
  input parameter arg1 :: <GdkFont>;
  result res :: <GdkDisplay>;
  c-name: "gdk_font_get_display";
end;

define C-function gdk-cursor-type-get-type
  result res :: <GType>;
  c-name: "gdk_cursor_type_get_type";
end;

define C-function gdk-drag-action-get-type
  result res :: <GType>;
  c-name: "gdk_drag_action_get_type";
end;

define C-function gdk-drag-protocol-get-type
  result res :: <GType>;
  c-name: "gdk_drag_protocol_get_type";
end;

define C-function gdk-filter-return-get-type
  result res :: <GType>;
  c-name: "gdk_filter_return_get_type";
end;

define C-function gdk-event-type-get-type
  result res :: <GType>;
  c-name: "gdk_event_type_get_type";
end;

define C-function gdk-event-mask-get-type
  result res :: <GType>;
  c-name: "gdk_event_mask_get_type";
end;

define C-function gdk-visibility-state-get-type
  result res :: <GType>;
  c-name: "gdk_visibility_state_get_type";
end;

define C-function gdk-scroll-direction-get-type
  result res :: <GType>;
  c-name: "gdk_scroll_direction_get_type";
end;

define C-function gdk-notify-type-get-type
  result res :: <GType>;
  c-name: "gdk_notify_type_get_type";
end;

define C-function gdk-crossing-mode-get-type
  result res :: <GType>;
  c-name: "gdk_crossing_mode_get_type";
end;

define C-function gdk-property-state-get-type
  result res :: <GType>;
  c-name: "gdk_property_state_get_type";
end;

define C-function gdk-window-state-get-type
  result res :: <GType>;
  c-name: "gdk_window_state_get_type";
end;

define C-function gdk-setting-action-get-type
  result res :: <GType>;
  c-name: "gdk_setting_action_get_type";
end;

define C-function gdk-owner-change-get-type
  result res :: <GType>;
  c-name: "gdk_owner_change_get_type";
end;

define C-function gdk-font-type-get-type
  result res :: <GType>;
  c-name: "gdk_font_type_get_type";
end;

define C-function gdk-cap-style-get-type
  result res :: <GType>;
  c-name: "gdk_cap_style_get_type";
end;

define C-function gdk-fill-get-type
  result res :: <GType>;
  c-name: "gdk_fill_get_type";
end;

define C-function gdk-function-get-type
  result res :: <GType>;
  c-name: "gdk_function_get_type";
end;

define C-function gdk-join-style-get-type
  result res :: <GType>;
  c-name: "gdk_join_style_get_type";
end;

define C-function gdk-line-style-get-type
  result res :: <GType>;
  c-name: "gdk_line_style_get_type";
end;

define C-function gdk-subwindow-mode-get-type
  result res :: <GType>;
  c-name: "gdk_subwindow_mode_get_type";
end;

define C-function gdk-gc-values-mask-get-type
  result res :: <GType>;
  c-name: "gdk_gc_values_mask_get_type";
end;

define C-function gdk-image-type-get-type
  result res :: <GType>;
  c-name: "gdk_image_type_get_type";
end;

define C-function gdk-extension-mode-get-type
  result res :: <GType>;
  c-name: "gdk_extension_mode_get_type";
end;

define C-function gdk-input-source-get-type
  result res :: <GType>;
  c-name: "gdk_input_source_get_type";
end;

define C-function gdk-input-mode-get-type
  result res :: <GType>;
  c-name: "gdk_input_mode_get_type";
end;

define C-function gdk-axis-use-get-type
  result res :: <GType>;
  c-name: "gdk_axis_use_get_type";
end;

define C-function gdk-prop-mode-get-type
  result res :: <GType>;
  c-name: "gdk_prop_mode_get_type";
end;

define C-function gdk-fill-rule-get-type
  result res :: <GType>;
  c-name: "gdk_fill_rule_get_type";
end;

define C-function gdk-overlap-type-get-type
  result res :: <GType>;
  c-name: "gdk_overlap_type_get_type";
end;

define C-function gdk-rgb-dither-get-type
  result res :: <GType>;
  c-name: "gdk_rgb_dither_get_type";
end;

define C-function gdk-byte-order-get-type
  result res :: <GType>;
  c-name: "gdk_byte_order_get_type";
end;

define C-function gdk-modifier-type-get-type
  result res :: <GType>;
  c-name: "gdk_modifier_type_get_type";
end;

define C-function gdk-input-condition-get-type
  result res :: <GType>;
  c-name: "gdk_input_condition_get_type";
end;

define C-function gdk-status-get-type
  result res :: <GType>;
  c-name: "gdk_status_get_type";
end;

define C-function gdk-grab-status-get-type
  result res :: <GType>;
  c-name: "gdk_grab_status_get_type";
end;

define C-function gdk-visual-type-get-type
  result res :: <GType>;
  c-name: "gdk_visual_type_get_type";
end;

define C-function gdk-window-class-get-type
  result res :: <GType>;
  c-name: "gdk_window_class_get_type";
end;

define C-function gdk-window-type-get-type
  result res :: <GType>;
  c-name: "gdk_window_type_get_type";
end;

define C-function gdk-window-attributes-type-get-type
  result res :: <GType>;
  c-name: "gdk_window_attributes_type_get_type";
end;

define C-function gdk-window-hints-get-type
  result res :: <GType>;
  c-name: "gdk_window_hints_get_type";
end;

define C-function gdk-window-type-hint-get-type
  result res :: <GType>;
  c-name: "gdk_window_type_hint_get_type";
end;

define C-function gdk-wm-decoration-get-type
  result res :: <GType>;
  c-name: "gdk_wm_decoration_get_type";
end;

define C-function gdk-wm-function-get-type
  result res :: <GType>;
  c-name: "gdk_wm_function_get_type";
end;

define C-function gdk-gravity-get-type
  result res :: <GType>;
  c-name: "gdk_gravity_get_type";
end;

define C-function gdk-window-edge-get-type
  result res :: <GType>;
  c-name: "gdk_window_edge_get_type";
end;

define C-function gdk-cursor-get-type
  result res :: <GType>;
  c-name: "gdk_cursor_get_type";
end;

define C-function gdk-cursor-new-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkCursorType>;
  result res :: <GdkCursor>;
  c-name: "gdk_cursor_new_for_display";
end;

define C-function gdk-cursor-new
  input parameter arg1 :: <GdkCursorType>;
  result res :: <GdkCursor>;
  c-name: "gdk_cursor_new";
end;

define C-function gdk-cursor-new-from-pixmap
  input parameter arg1 :: <GdkPixmap>;
  input parameter arg2 :: <GdkPixmap>;
  input parameter arg3 :: <GdkColor>;
  input parameter arg4 :: <GdkColor>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  result res :: <GdkCursor>;
  c-name: "gdk_cursor_new_from_pixmap";
end;

define C-function gdk-cursor-new-from-pixbuf
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkPixbuf>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  result res :: <GdkCursor>;
  c-name: "gdk_cursor_new_from_pixbuf";
end;

define C-function gdk-cursor-get-display
  input parameter arg1 :: <GdkCursor>;
  result res :: <GdkDisplay>;
  c-name: "gdk_cursor_get_display";
end;

define C-function gdk-cursor-ref
  input parameter arg1 :: <GdkCursor>;
  result res :: <GdkCursor>;
  c-name: "gdk_cursor_ref";
end;

define C-function gdk-cursor-unref
  input parameter arg1 :: <GdkCursor>;
  c-name: "gdk_cursor_unref";
end;

define C-function gdk-cursor-new-from-name
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <gchar*>;
  result res :: <GdkCursor>;
  c-name: "gdk_cursor_new_from_name";
end;

define C-function gdk-cursor-get-image
  input parameter arg1 :: <GdkCursor>;
  result res :: <GdkPixbuf>;
  c-name: "gdk_cursor_get_image";
end;

define constant gdk-cursor-destroy = gdk-cursor-unref;

define C-function gdk-cairo-create
  input parameter arg1 :: <GdkDrawable>;
  result res :: <cairo-t>;
  c-name: "gdk_cairo_create";
end;

define C-function gdk-cairo-set-source-color
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gdk_cairo_set_source_color";
end;

define C-function gdk-cairo-set-source-pixbuf
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <GdkPixbuf>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  c-name: "gdk_cairo_set_source_pixbuf";
end;

define C-function gdk-cairo-set-source-pixmap
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <GdkPixmap>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  c-name: "gdk_cairo_set_source_pixmap";
end;

define C-function gdk-cairo-rectangle
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gdk_cairo_rectangle";
end;

define C-function gdk-cairo-region
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <GdkRegion>;
  c-name: "gdk_cairo_region";
end;

define C-subtype <_PangoCairoFontMap> (<C-void*>) end;
define constant <PangoCairoFontMap> = <_PangoCairoFontMap>;

define C-function pango-cairo-font-map-get-type
  result res :: <GType>;
  c-name: "pango_cairo_font_map_get_type";
end;

define C-function pango-cairo-font-map-new
  result res :: <PangoFontMap>;
  c-name: "pango_cairo_font_map_new";
end;

define C-function pango-cairo-font-map-get-default
  result res :: <PangoFontMap>;
  c-name: "pango_cairo_font_map_get_default";
end;

define C-function pango-cairo-font-map-set-resolution
  input parameter arg1 :: <PangoCairoFontMap>;
  input parameter arg2 :: <C-double>;
  c-name: "pango_cairo_font_map_set_resolution";
end;

define C-function pango-cairo-font-map-get-resolution
  input parameter arg1 :: <PangoCairoFontMap>;
  result res :: <C-double>;
  c-name: "pango_cairo_font_map_get_resolution";
end;

define C-function pango-cairo-font-map-create-context
  input parameter arg1 :: <PangoCairoFontMap>;
  result res :: <PangoContext>;
  c-name: "pango_cairo_font_map_create_context";
end;

define C-function pango-cairo-update-context
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <PangoContext>;
  c-name: "pango_cairo_update_context";
end;

define C-function pango-cairo-context-set-font-options
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <cairo-font-options-t>;
  c-name: "pango_cairo_context_set_font_options";
end;

define C-function pango-cairo-context-get-font-options
  input parameter arg1 :: <PangoContext>;
  result res :: <cairo-font-options-t>;
  c-name: "pango_cairo_context_get_font_options";
end;

define C-function pango-cairo-context-set-resolution
  input parameter arg1 :: <PangoContext>;
  input parameter arg2 :: <C-double>;
  c-name: "pango_cairo_context_set_resolution";
end;

define C-function pango-cairo-context-get-resolution
  input parameter arg1 :: <PangoContext>;
  result res :: <C-double>;
  c-name: "pango_cairo_context_get_resolution";
end;

define C-function pango-cairo-create-layout
  input parameter arg1 :: <cairo-t>;
  result res :: <PangoLayout>;
  c-name: "pango_cairo_create_layout";
end;

define C-function pango-cairo-update-layout
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <PangoLayout>;
  c-name: "pango_cairo_update_layout";
end;

define C-function pango-cairo-show-glyph-string
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <PangoFont>;
  input parameter arg3 :: <PangoGlyphString>;
  c-name: "pango_cairo_show_glyph_string";
end;

define C-function pango-cairo-show-layout-line
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <PangoLayoutLine>;
  c-name: "pango_cairo_show_layout_line";
end;

define C-function pango-cairo-show-layout
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <PangoLayout>;
  c-name: "pango_cairo_show_layout";
end;

define C-function pango-cairo-show-error-underline
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  c-name: "pango_cairo_show_error_underline";
end;

define C-function pango-cairo-glyph-string-path
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <PangoFont>;
  input parameter arg3 :: <PangoGlyphString>;
  c-name: "pango_cairo_glyph_string_path";
end;

define C-function pango-cairo-layout-line-path
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <PangoLayoutLine>;
  c-name: "pango_cairo_layout_line_path";
end;

define C-function pango-cairo-layout-path
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <PangoLayout>;
  c-name: "pango_cairo_layout_path";
end;

define C-function pango-cairo-error-underline-path
  input parameter arg1 :: <cairo-t>;
  input parameter arg2 :: <C-double>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  input parameter arg5 :: <C-double>;
  c-name: "pango_cairo_error_underline_path";
end;

define constant <anonymous-3384> = <C-function-pointer>;
define constant <anonymous-3385> = <C-function-pointer>;
define constant <anonymous-3386> = <C-function-pointer>;
define constant <anonymous-3387> = <C-function-pointer>;
define constant <anonymous-3388> = <C-function-pointer>;
define constant <anonymous-3389> = <C-function-pointer>;
define C-subtype <_GtkAdjustmentClass> (<C-void*>) end;
define constant <GtkAdjustmentClass> = <_GtkAdjustmentClass>;

define C-function gtk-adjustment-get-type
  result res :: <GType>;
  c-name: "gtk_adjustment_get_type";
end;

define C-function gtk-adjustment-new
  input parameter arg1 :: <gdouble>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <gdouble>;
  input parameter arg5 :: <gdouble>;
  input parameter arg6 :: <gdouble>;
  result res :: <GtkObject>;
  c-name: "gtk_adjustment_new";
end;

define C-function gtk-adjustment-changed
  input parameter arg1 :: <GtkAdjustment>;
  c-name: "gtk_adjustment_changed";
end;

define C-function gtk-adjustment-value-changed
  input parameter arg1 :: <GtkAdjustment>;
  c-name: "gtk_adjustment_value_changed";
end;

define C-function gtk-adjustment-clamp-page
  input parameter arg1 :: <GtkAdjustment>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  c-name: "gtk_adjustment_clamp_page";
end;

define C-function gtk-adjustment-get-value
  input parameter arg1 :: <GtkAdjustment>;
  result res :: <gdouble>;
  c-name: "gtk_adjustment_get_value";
end;

define C-function gtk-adjustment-set-value
  input parameter arg1 :: <GtkAdjustment>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_adjustment_set_value";
end;

define constant <GtkObjectFlags> = <C-int>;
define constant $GTK-IN-DESTRUCTION = 1;
define constant $GTK-FLOATING = 2;
define constant $GTK-RESERVED-1 = 4;
define constant $GTK-RESERVED-2 = 8;

define C-function gtk-object-get-type
  result res :: <GtkType>;
  c-name: "gtk_object_get_type";
end;

define C-function gtk-object-sink
  input parameter arg1 :: <GtkObject>;
  c-name: "gtk_object_sink";
end;

define C-function gtk-object-destroy
  input parameter arg1 :: <GtkObject>;
  c-name: "gtk_object_destroy";
end;

define C-function gtk-object-new
  input parameter arg1 :: <GtkType>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkObject>;
  c-name: "gtk_object_new";
end;

define C-function gtk-object-ref
  input parameter arg1 :: <GtkObject>;
  result res :: <GtkObject>;
  c-name: "gtk_object_ref";
end;

define C-function gtk-object-unref
  input parameter arg1 :: <GtkObject>;
  c-name: "gtk_object_unref";
end;

define constant <anonymous-3342> = <C-function-pointer>;
define constant <GtkDestroyNotify> = <anonymous-3342>;

define C-function gtk-object-weakref
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GtkDestroyNotify>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_object_weakref";
end;

define C-function gtk-object-weakunref
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GtkDestroyNotify>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_object_weakunref";
end;

define C-function gtk-object-set-data
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_object_set_data";
end;

define C-function gtk-object-set-data-full
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_object_set_data_full";
end;

define C-function gtk-object-remove-data
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_object_remove_data";
end;

define C-function gtk-object-get-data
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  result res :: <gpointer>;
  c-name: "gtk_object_get_data";
end;

define C-function gtk-object-remove-no-notify
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_object_remove_no_notify";
end;

define C-function gtk-object-set-user-data
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gpointer>;
  c-name: "gtk_object_set_user_data";
end;

define C-function gtk-object-get-user-data
  input parameter arg1 :: <GtkObject>;
  result res :: <gpointer>;
  c-name: "gtk_object_get_user_data";
end;

define C-function gtk-object-set-data-by-id
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_object_set_data_by_id";
end;

define C-function gtk-object-set-data-by-id-full
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_object_set_data_by_id_full";
end;

define C-function gtk-object-get-data-by-id
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GQuark>;
  result res :: <gpointer>;
  c-name: "gtk_object_get_data_by_id";
end;

define C-function gtk-object-remove-data-by-id
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GQuark>;
  c-name: "gtk_object_remove_data_by_id";
end;

define C-function gtk-object-remove-no-notify-by-id
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GQuark>;
  c-name: "gtk_object_remove_no_notify_by_id";
end;

define constant <GtkArgFlags> = <C-int>;
define constant $GTK-ARG-READABLE = 1;
define constant $GTK-ARG-WRITABLE = 2;
define constant $GTK-ARG-CONSTRUCT = 4;
define constant $GTK-ARG-CONSTRUCT-ONLY = 8;
define constant $GTK-ARG-CHILD-ARG = 16;

define C-function gtk-object-get
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_object_get";
end;

define C-function gtk-object-set
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_object_set";
end;

define C-function gtk-object-add-arg-type
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkType>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  c-name: "gtk_object_add_arg_type";
end;

define constant gtk-object-data-try-key = g-quark-try-string;

define constant gtk-object-data-force-id = g-quark-from-string;

define constant $GTK-ARG-READWRITE = 0;

define constant <GtkDebugFlag> = <C-int>;
define constant $GTK-DEBUG-MISC = 1;
define constant $GTK-DEBUG-PLUGSOCKET = 2;
define constant $GTK-DEBUG-TEXT = 4;
define constant $GTK-DEBUG-TREE = 8;
define constant $GTK-DEBUG-UPDATES = 16;
define constant $GTK-DEBUG-KEYBINDINGS = 32;
define constant $GTK-DEBUG-MULTIHEAD = 64;
define constant $GTK-DEBUG-MODULES = 128;
define constant $GTK-DEBUG-GEOMETRY = 256;
define constant $GTK-DEBUG-ICONTHEME = 512;
define constant $GTK-DEBUG-PRINTING = 1024;

 /* Ignoring declaration for {instance of <variable-declaration>} "gtk-debug-flags"*/
define constant <GtkFundamentalType> = <GType>;

define constant <GtkTypeObject> = <GTypeInstance>;

define constant <GtkTypeClass> = <GTypeClass>;

define constant <GtkClassInitFunc> = <GBaseInitFunc>;

define constant <GtkObjectInitFunc> = <GInstanceInitFunc>;

define C-function gtk-identifier-get-type
  result res :: <GType>;
  c-name: "gtk_identifier_get_type";
end;

define constant <anonymous-3341> = <C-function-pointer>;
define constant <GtkFunction> = <anonymous-3341>;

define constant <anonymous-3343> = <C-function-pointer>;
define constant <GtkCallbackMarshal> = <anonymous-3343>;

define C-subtype <_GtkTypeInfo> (<C-void*>) end;
define constant <GtkTypeInfo> = <_GtkTypeInfo>;

define constant <GtkSignalMarshaller> = <GSignalCMarshaller>;

define C-function gtk-type-class
  input parameter arg1 :: <GtkType>;
  result res :: <gpointer>;
  c-name: "gtk_type_class";
end;

define C-function gtk-type-unique
  input parameter arg1 :: <GtkType>;
  input parameter arg2 :: <GtkTypeInfo>;
  result res :: <GtkType>;
  c-name: "gtk_type_unique";
end;

define C-function gtk-type-new
  input parameter arg1 :: <GtkType>;
  result res :: <gpointer>;
  c-name: "gtk_type_new";
end;

define constant <GtkEnumValue> = <GEnumValue>;

define constant <GtkFlagValue> = <GFlagsValue>;

define C-function gtk-type-enum-get-values
  input parameter arg1 :: <GtkType>;
  result res :: <GtkEnumValue>;
  c-name: "gtk_type_enum_get_values";
end;

define C-function gtk-type-flags-get-values
  input parameter arg1 :: <GtkType>;
  result res :: <GtkFlagValue>;
  c-name: "gtk_type_flags_get_values";
end;

define C-function gtk-type-enum-find-value
  input parameter arg1 :: <GtkType>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkEnumValue>;
  c-name: "gtk_type_enum_find_value";
end;

define C-function gtk-type-flags-find-value
  input parameter arg1 :: <GtkType>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkFlagValue>;
  c-name: "gtk_type_flags_find_value";
end;

define C-function gtk-type-init
  input parameter arg1 :: <GTypeDebugFlags>;
  c-name: "gtk_type_init";
end;

define constant $GTK-TYPE-INVALID = 0;

define constant $GTK-TYPE-NONE = 4;

define constant $GTK-TYPE-ENUM = 48;

define constant $GTK-TYPE-FLAGS = 52;

define constant $GTK-TYPE-CHAR = 12;

define constant $GTK-TYPE-UCHAR = 16;

define constant $GTK-TYPE-BOOL = 20;

define constant $GTK-TYPE-INT = 24;

define constant $GTK-TYPE-UINT = 28;

define constant $GTK-TYPE-LONG = 32;

define constant $GTK-TYPE-ULONG = 36;

define constant $GTK-TYPE-FLOAT = 56;

define constant $GTK-TYPE-DOUBLE = 60;

define constant $GTK-TYPE-STRING = 64;

define constant $GTK-TYPE-BOXED = 72;

define constant $GTK-TYPE-POINTER = 68;

define constant $GTK-TYPE-FUNDAMENTAL-LAST = -1;

define constant $GTK-TYPE-FUNDAMENTAL-MAX = 1020;

define C-function gtk-accel-flags-get-type
  result res :: <GType>;
  c-name: "gtk_accel_flags_get_type";
end;

define C-function gtk-assistant-page-type-get-type
  result res :: <GType>;
  c-name: "gtk_assistant_page_type_get_type";
end;

define C-function gtk-calendar-display-options-get-type
  result res :: <GType>;
  c-name: "gtk_calendar_display_options_get_type";
end;

define C-function gtk-cell-renderer-state-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_state_get_type";
end;

define C-function gtk-cell-renderer-mode-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_mode_get_type";
end;

define C-function gtk-cell-renderer-accel-mode-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_accel_mode_get_type";
end;

define C-function gtk-cell-type-get-type
  result res :: <GType>;
  c-name: "gtk_cell_type_get_type";
end;

define C-function gtk-clist-drag-pos-get-type
  result res :: <GType>;
  c-name: "gtk_clist_drag_pos_get_type";
end;

define C-function gtk-button-action-get-type
  result res :: <GType>;
  c-name: "gtk_button_action_get_type";
end;

define C-function gtk-ctree-pos-get-type
  result res :: <GType>;
  c-name: "gtk_ctree_pos_get_type";
end;

define C-function gtk-ctree-line-style-get-type
  result res :: <GType>;
  c-name: "gtk_ctree_line_style_get_type";
end;

define C-function gtk-ctree-expander-style-get-type
  result res :: <GType>;
  c-name: "gtk_ctree_expander_style_get_type";
end;

define C-function gtk-ctree-expansion-type-get-type
  result res :: <GType>;
  c-name: "gtk_ctree_expansion_type_get_type";
end;

define C-function gtk-debug-flag-get-type
  result res :: <GType>;
  c-name: "gtk_debug_flag_get_type";
end;

define C-function gtk-dialog-flags-get-type
  result res :: <GType>;
  c-name: "gtk_dialog_flags_get_type";
end;

define C-function gtk-response-type-get-type
  result res :: <GType>;
  c-name: "gtk_response_type_get_type";
end;

define C-function gtk-dest-defaults-get-type
  result res :: <GType>;
  c-name: "gtk_dest_defaults_get_type";
end;

define C-function gtk-target-flags-get-type
  result res :: <GType>;
  c-name: "gtk_target_flags_get_type";
end;

define C-function gtk-anchor-type-get-type
  result res :: <GType>;
  c-name: "gtk_anchor_type_get_type";
end;

define C-function gtk-arrow-type-get-type
  result res :: <GType>;
  c-name: "gtk_arrow_type_get_type";
end;

define C-function gtk-attach-options-get-type
  result res :: <GType>;
  c-name: "gtk_attach_options_get_type";
end;

define C-function gtk-button-box-style-get-type
  result res :: <GType>;
  c-name: "gtk_button_box_style_get_type";
end;

define C-function gtk-curve-type-get-type
  result res :: <GType>;
  c-name: "gtk_curve_type_get_type";
end;

define C-function gtk-delete-type-get-type
  result res :: <GType>;
  c-name: "gtk_delete_type_get_type";
end;

define C-function gtk-direction-type-get-type
  result res :: <GType>;
  c-name: "gtk_direction_type_get_type";
end;

define C-function gtk-expander-style-get-type
  result res :: <GType>;
  c-name: "gtk_expander_style_get_type";
end;

define C-function gtk-icon-size-get-type
  result res :: <GType>;
  c-name: "gtk_icon_size_get_type";
end;

define C-function gtk-sensitivity-type-get-type
  result res :: <GType>;
  c-name: "gtk_sensitivity_type_get_type";
end;

define C-function gtk-side-type-get-type
  result res :: <GType>;
  c-name: "gtk_side_type_get_type";
end;

define C-function gtk-text-direction-get-type
  result res :: <GType>;
  c-name: "gtk_text_direction_get_type";
end;

define C-function gtk-justification-get-type
  result res :: <GType>;
  c-name: "gtk_justification_get_type";
end;

define C-function gtk-match-type-get-type
  result res :: <GType>;
  c-name: "gtk_match_type_get_type";
end;

define C-function gtk-menu-direction-type-get-type
  result res :: <GType>;
  c-name: "gtk_menu_direction_type_get_type";
end;

define C-function gtk-metric-type-get-type
  result res :: <GType>;
  c-name: "gtk_metric_type_get_type";
end;

define C-function gtk-movement-step-get-type
  result res :: <GType>;
  c-name: "gtk_movement_step_get_type";
end;

define C-function gtk-scroll-step-get-type
  result res :: <GType>;
  c-name: "gtk_scroll_step_get_type";
end;

define C-function gtk-orientation-get-type
  result res :: <GType>;
  c-name: "gtk_orientation_get_type";
end;

define C-function gtk-corner-type-get-type
  result res :: <GType>;
  c-name: "gtk_corner_type_get_type";
end;

define C-function gtk-pack-type-get-type
  result res :: <GType>;
  c-name: "gtk_pack_type_get_type";
end;

define C-function gtk-path-priority-type-get-type
  result res :: <GType>;
  c-name: "gtk_path_priority_type_get_type";
end;

define C-function gtk-path-type-get-type
  result res :: <GType>;
  c-name: "gtk_path_type_get_type";
end;

define C-function gtk-policy-type-get-type
  result res :: <GType>;
  c-name: "gtk_policy_type_get_type";
end;

define C-function gtk-position-type-get-type
  result res :: <GType>;
  c-name: "gtk_position_type_get_type";
end;

define C-function gtk-preview-type-get-type
  result res :: <GType>;
  c-name: "gtk_preview_type_get_type";
end;

define C-function gtk-relief-style-get-type
  result res :: <GType>;
  c-name: "gtk_relief_style_get_type";
end;

define C-function gtk-resize-mode-get-type
  result res :: <GType>;
  c-name: "gtk_resize_mode_get_type";
end;

define C-function gtk-signal-run-type-get-type
  result res :: <GType>;
  c-name: "gtk_signal_run_type_get_type";
end;

define C-function gtk-scroll-type-get-type
  result res :: <GType>;
  c-name: "gtk_scroll_type_get_type";
end;

define C-function gtk-selection-mode-get-type
  result res :: <GType>;
  c-name: "gtk_selection_mode_get_type";
end;

define C-function gtk-shadow-type-get-type
  result res :: <GType>;
  c-name: "gtk_shadow_type_get_type";
end;

define C-function gtk-state-type-get-type
  result res :: <GType>;
  c-name: "gtk_state_type_get_type";
end;

define C-function gtk-submenu-direction-get-type
  result res :: <GType>;
  c-name: "gtk_submenu_direction_get_type";
end;

define C-function gtk-submenu-placement-get-type
  result res :: <GType>;
  c-name: "gtk_submenu_placement_get_type";
end;

define C-function gtk-toolbar-style-get-type
  result res :: <GType>;
  c-name: "gtk_toolbar_style_get_type";
end;

define C-function gtk-update-type-get-type
  result res :: <GType>;
  c-name: "gtk_update_type_get_type";
end;

define C-function gtk-visibility-get-type
  result res :: <GType>;
  c-name: "gtk_visibility_get_type";
end;

define C-function gtk-window-position-get-type
  result res :: <GType>;
  c-name: "gtk_window_position_get_type";
end;

define C-function gtk-window-type-get-type
  result res :: <GType>;
  c-name: "gtk_window_type_get_type";
end;

define C-function gtk-wrap-mode-get-type
  result res :: <GType>;
  c-name: "gtk_wrap_mode_get_type";
end;

define C-function gtk-sort-type-get-type
  result res :: <GType>;
  c-name: "gtk_sort_type_get_type";
end;

define C-function gtk-im-preedit-style-get-type
  result res :: <GType>;
  c-name: "gtk_im_preedit_style_get_type";
end;

define C-function gtk-im-status-style-get-type
  result res :: <GType>;
  c-name: "gtk_im_status_style_get_type";
end;

define C-function gtk-pack-direction-get-type
  result res :: <GType>;
  c-name: "gtk_pack_direction_get_type";
end;

define C-function gtk-print-pages-get-type
  result res :: <GType>;
  c-name: "gtk_print_pages_get_type";
end;

define C-function gtk-page-set-get-type
  result res :: <GType>;
  c-name: "gtk_page_set_get_type";
end;

define C-function gtk-page-orientation-get-type
  result res :: <GType>;
  c-name: "gtk_page_orientation_get_type";
end;

define C-function gtk-print-quality-get-type
  result res :: <GType>;
  c-name: "gtk_print_quality_get_type";
end;

define C-function gtk-print-duplex-get-type
  result res :: <GType>;
  c-name: "gtk_print_duplex_get_type";
end;

define C-function gtk-unit-get-type
  result res :: <GType>;
  c-name: "gtk_unit_get_type";
end;

define C-function gtk-tree-view-grid-lines-get-type
  result res :: <GType>;
  c-name: "gtk_tree_view_grid_lines_get_type";
end;

define C-function gtk-file-chooser-action-get-type
  result res :: <GType>;
  c-name: "gtk_file_chooser_action_get_type";
end;

define C-function gtk-file-chooser-confirmation-get-type
  result res :: <GType>;
  c-name: "gtk_file_chooser_confirmation_get_type";
end;

define C-function gtk-file-chooser-error-get-type
  result res :: <GType>;
  c-name: "gtk_file_chooser_error_get_type";
end;

define C-function gtk-file-filter-flags-get-type
  result res :: <GType>;
  c-name: "gtk_file_filter_flags_get_type";
end;

define C-function gtk-icon-lookup-flags-get-type
  result res :: <GType>;
  c-name: "gtk_icon_lookup_flags_get_type";
end;

define C-function gtk-icon-theme-error-get-type
  result res :: <GType>;
  c-name: "gtk_icon_theme_error_get_type";
end;

define C-function gtk-icon-view-drop-position-get-type
  result res :: <GType>;
  c-name: "gtk_icon_view_drop_position_get_type";
end;

define C-function gtk-image-type-get-type
  result res :: <GType>;
  c-name: "gtk_image_type_get_type";
end;

define C-function gtk-message-type-get-type
  result res :: <GType>;
  c-name: "gtk_message_type_get_type";
end;

define C-function gtk-buttons-type-get-type
  result res :: <GType>;
  c-name: "gtk_buttons_type_get_type";
end;

define C-function gtk-notebook-tab-get-type
  result res :: <GType>;
  c-name: "gtk_notebook_tab_get_type";
end;

define C-function gtk-object-flags-get-type
  result res :: <GType>;
  c-name: "gtk_object_flags_get_type";
end;

define C-function gtk-arg-flags-get-type
  result res :: <GType>;
  c-name: "gtk_arg_flags_get_type";
end;

define C-function gtk-print-status-get-type
  result res :: <GType>;
  c-name: "gtk_print_status_get_type";
end;

define C-function gtk-print-operation-result-get-type
  result res :: <GType>;
  c-name: "gtk_print_operation_result_get_type";
end;

define C-function gtk-print-operation-action-get-type
  result res :: <GType>;
  c-name: "gtk_print_operation_action_get_type";
end;

define C-function gtk-print-error-get-type
  result res :: <GType>;
  c-name: "gtk_print_error_get_type";
end;

define C-function gtk-private-flags-get-type
  result res :: <GType>;
  c-name: "gtk_private_flags_get_type";
end;

define C-function gtk-progress-bar-style-get-type
  result res :: <GType>;
  c-name: "gtk_progress_bar_style_get_type";
end;

define C-function gtk-progress-bar-orientation-get-type
  result res :: <GType>;
  c-name: "gtk_progress_bar_orientation_get_type";
end;

define C-function gtk-rc-flags-get-type
  result res :: <GType>;
  c-name: "gtk_rc_flags_get_type";
end;

define C-function gtk-rc-token-type-get-type
  result res :: <GType>;
  c-name: "gtk_rc_token_type_get_type";
end;

define C-function gtk-recent-sort-type-get-type
  result res :: <GType>;
  c-name: "gtk_recent_sort_type_get_type";
end;

define C-function gtk-recent-chooser-error-get-type
  result res :: <GType>;
  c-name: "gtk_recent_chooser_error_get_type";
end;

define C-function gtk-recent-filter-flags-get-type
  result res :: <GType>;
  c-name: "gtk_recent_filter_flags_get_type";
end;

define C-function gtk-recent-manager-error-get-type
  result res :: <GType>;
  c-name: "gtk_recent_manager_error_get_type";
end;

define C-function gtk-size-group-mode-get-type
  result res :: <GType>;
  c-name: "gtk_size_group_mode_get_type";
end;

define C-function gtk-spin-button-update-policy-get-type
  result res :: <GType>;
  c-name: "gtk_spin_button_update_policy_get_type";
end;

define C-function gtk-spin-type-get-type
  result res :: <GType>;
  c-name: "gtk_spin_type_get_type";
end;

define C-function gtk-text-buffer-target-info-get-type
  result res :: <GType>;
  c-name: "gtk_text_buffer_target_info_get_type";
end;

define C-function gtk-text-search-flags-get-type
  result res :: <GType>;
  c-name: "gtk_text_search_flags_get_type";
end;

define C-function gtk-text-window-type-get-type
  result res :: <GType>;
  c-name: "gtk_text_window_type_get_type";
end;

define C-function gtk-toolbar-child-type-get-type
  result res :: <GType>;
  c-name: "gtk_toolbar_child_type_get_type";
end;

define C-function gtk-toolbar-space-style-get-type
  result res :: <GType>;
  c-name: "gtk_toolbar_space_style_get_type";
end;

define C-function gtk-tree-view-mode-get-type
  result res :: <GType>;
  c-name: "gtk_tree_view_mode_get_type";
end;

define C-function gtk-tree-model-flags-get-type
  result res :: <GType>;
  c-name: "gtk_tree_model_flags_get_type";
end;

define C-function gtk-tree-view-drop-position-get-type
  result res :: <GType>;
  c-name: "gtk_tree_view_drop_position_get_type";
end;

define C-function gtk-tree-view-column-sizing-get-type
  result res :: <GType>;
  c-name: "gtk_tree_view_column_sizing_get_type";
end;

define C-function gtk-ui-manager-item-type-get-type
  result res :: <GType>;
  c-name: "gtk_ui_manager_item_type_get_type";
end;

define C-function gtk-widget-flags-get-type
  result res :: <GType>;
  c-name: "gtk_widget_flags_get_type";
end;

define C-function gtk-widget-help-type-get-type
  result res :: <GType>;
  c-name: "gtk_widget_help_type_get_type";
end;

define constant <anonymous-3200> = <C-function-pointer>;
define constant <anonymous-3201> = <C-function-pointer>;
define constant <anonymous-3202> = <C-function-pointer>;
define constant <anonymous-3203> = <C-function-pointer>;
define constant <anonymous-3204> = <C-function-pointer>;
define C-subtype <_GtkAccelGroupClass> (<C-void*>) end;
define constant <GtkAccelGroupClass> = <_GtkAccelGroupClass>;

define constant <anonymous-3198> = <C-function-pointer>;
define constant <GtkAccelGroupActivate> = <anonymous-3198>;

define constant <anonymous-3199> = <C-function-pointer>;
define constant <GtkAccelGroupFindFunc> = <anonymous-3199>;

define C-function gtk-accel-group-get-type
  result res :: <GType>;
  c-name: "gtk_accel_group_get_type";
end;

define C-function gtk-accel-group-new
  result res :: <GtkAccelGroup>;
  c-name: "gtk_accel_group_new";
end;

define C-function gtk-accel-group-lock
  input parameter arg1 :: <GtkAccelGroup>;
  c-name: "gtk_accel_group_lock";
end;

define C-function gtk-accel-group-unlock
  input parameter arg1 :: <GtkAccelGroup>;
  c-name: "gtk_accel_group_unlock";
end;

define C-function gtk-accel-group-connect
  input parameter arg1 :: <GtkAccelGroup>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  input parameter arg4 :: <GtkAccelFlags>;
  input parameter arg5 :: <GClosure>;
  c-name: "gtk_accel_group_connect";
end;

define C-function gtk-accel-group-connect-by-path
  input parameter arg1 :: <GtkAccelGroup>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GClosure>;
  c-name: "gtk_accel_group_connect_by_path";
end;

define C-function gtk-accel-group-disconnect
  input parameter arg1 :: <GtkAccelGroup>;
  input parameter arg2 :: <GClosure>;
  result res :: <gboolean>;
  c-name: "gtk_accel_group_disconnect";
end;

define C-function gtk-accel-group-disconnect-key
  input parameter arg1 :: <GtkAccelGroup>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  result res :: <gboolean>;
  c-name: "gtk_accel_group_disconnect_key";
end;

define C-function gtk-accel-group-activate
  input parameter arg1 :: <GtkAccelGroup>;
  input parameter arg2 :: <GQuark>;
  input parameter arg3 :: <GObject>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <GdkModifierType>;
  result res :: <gboolean>;
  c-name: "gtk_accel_group_activate";
end;

define C-function gtk-accel-groups-activate
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  result res :: <gboolean>;
  c-name: "gtk_accel_groups_activate";
end;

define C-function gtk-accel-groups-from-object
  input parameter arg1 :: <GObject>;
  result res :: <GSList>;
  c-name: "gtk_accel_groups_from_object";
end;

define C-function gtk-accel-group-find
  input parameter arg1 :: <GtkAccelGroup>;
  input parameter arg2 :: <GtkAccelGroupFindFunc>;
  input parameter arg3 :: <gpointer>;
  result res :: <GtkAccelKey>;
  c-name: "gtk_accel_group_find";
end;

define C-function gtk-accel-group-from-accel-closure
  input parameter arg1 :: <GClosure>;
  result res :: <GtkAccelGroup>;
  c-name: "gtk_accel_group_from_accel_closure";
end;

define C-function gtk-accelerator-valid
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GdkModifierType>;
  result res :: <gboolean>;
  c-name: "gtk_accelerator_valid";
end;

define C-function gtk-accelerator-parse
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <guint*>;
  input parameter arg3 :: <GdkModifierType*>;
  c-name: "gtk_accelerator_parse";
end;

define C-function gtk-accelerator-name
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GdkModifierType>;
  result res :: <gchar*>;
  c-name: "gtk_accelerator_name";
end;

define C-function gtk-accelerator-get-label
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GdkModifierType>;
  result res :: <gchar*>;
  c-name: "gtk_accelerator_get_label";
end;

define C-function gtk-accelerator-set-default-mod-mask
  input parameter arg1 :: <GdkModifierType>;
  c-name: "gtk_accelerator_set_default_mod_mask";
end;

define C-function gtk-accelerator-get-default-mod-mask
  result res :: <guint>;
  c-name: "gtk_accelerator_get_default_mod_mask";
end;

define C-function gtk-accel-group-query
  input parameter arg1 :: <GtkAccelGroup>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  input parameter arg4 :: <guint*>;
  result res :: <GtkAccelGroupEntry>;
  c-name: "gtk_accel_group_query";
end;

define constant gtk-accel-group-ref = g-object-ref;

define constant gtk-accel-group-unref = g-object-unref;

define C-function gtk-bin-get-type
  result res :: <GType>;
  c-name: "gtk_bin_get_type";
end;

define C-function gtk-bin-get-child
  input parameter arg1 :: <GtkBin>;
  result res :: <GtkWidget>;
  c-name: "gtk_bin_get_child";
end;

define C-function gtk-container-get-type
  result res :: <GType>;
  c-name: "gtk_container_get_type";
end;

define C-function gtk-container-set-border-width
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_container_set_border_width";
end;

define C-function gtk-container-get-border-width
  input parameter arg1 :: <GtkContainer>;
  result res :: <guint>;
  c-name: "gtk_container_get_border_width";
end;

define C-function gtk-container-add
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_container_add";
end;

define C-function gtk-container-remove
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_container_remove";
end;

define C-function gtk-container-set-resize-mode
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkResizeMode>;
  c-name: "gtk_container_set_resize_mode";
end;

define C-function gtk-container-get-resize-mode
  input parameter arg1 :: <GtkContainer>;
  result res :: <GtkResizeMode>;
  c-name: "gtk_container_get_resize_mode";
end;

define C-function gtk-container-check-resize
  input parameter arg1 :: <GtkContainer>;
  c-name: "gtk_container_check_resize";
end;

define C-function gtk-container-foreach
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkCallback>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_container_foreach";
end;

define C-function gtk-container-foreach-full
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkCallback>;
  input parameter arg3 :: <GtkCallbackMarshal>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GtkDestroyNotify>;
  c-name: "gtk_container_foreach_full";
end;

define C-function gtk-container-get-children
  input parameter arg1 :: <GtkContainer>;
  result res :: <GList>;
  c-name: "gtk_container_get_children";
end;

define C-function gtk-container-propagate-expose
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GdkEventExpose>;
  c-name: "gtk_container_propagate_expose";
end;

define C-function gtk-container-set-focus-chain
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GList>;
  c-name: "gtk_container_set_focus_chain";
end;

define C-pointer-type <GList*> => <GList>;
define C-function gtk-container-get-focus-chain
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GList*>;
  result res :: <gboolean>;
  c-name: "gtk_container_get_focus_chain";
end;

define C-function gtk-container-unset-focus-chain
  input parameter arg1 :: <GtkContainer>;
  c-name: "gtk_container_unset_focus_chain";
end;

define C-function gtk-container-set-reallocate-redraws
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_container_set_reallocate_redraws";
end;

define C-function gtk-container-set-focus-child
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_container_set_focus_child";
end;

define C-function gtk-container-set-focus-vadjustment
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_container_set_focus_vadjustment";
end;

define C-function gtk-container-get-focus-vadjustment
  input parameter arg1 :: <GtkContainer>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_container_get_focus_vadjustment";
end;

define C-function gtk-container-set-focus-hadjustment
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_container_set_focus_hadjustment";
end;

define C-function gtk-container-get-focus-hadjustment
  input parameter arg1 :: <GtkContainer>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_container_get_focus_hadjustment";
end;

define C-function gtk-container-resize-children
  input parameter arg1 :: <GtkContainer>;
  c-name: "gtk_container_resize_children";
end;

define C-function gtk-container-child-type
  input parameter arg1 :: <GtkContainer>;
  result res :: <GType>;
  c-name: "gtk_container_child_type";
end;

define C-function gtk-container-class-install-child-property
  input parameter arg1 :: <GtkContainerClass>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GParamSpec>;
  c-name: "gtk_container_class_install_child_property";
end;

define C-function gtk-container-class-find-child-property
  input parameter arg1 :: <GObjectClass>;
  input parameter arg2 :: <gchar*>;
  result res :: <GParamSpec>;
  c-name: "gtk_container_class_find_child_property";
end;

define C-function gtk-container-class-list-child-properties
  input parameter arg1 :: <GObjectClass>;
  input parameter arg2 :: <guint*>;
  result res :: <GParamSpec*>;
  c-name: "gtk_container_class_list_child_properties";
end;

define C-function gtk-container-add-with-properties
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_container_add_with_properties";
end;

define C-function gtk-container-child-set
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_container_child_set";
end;

define C-function gtk-container-child-get
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_container_child_get";
end;

define C-function gtk-container-child-set-valist
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <va-list>;
  c-name: "gtk_container_child_set_valist";
end;

define C-function gtk-container-child-get-valist
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <va-list>;
  c-name: "gtk_container_child_get_valist";
end;

define C-function gtk-container-child-set-property
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GValue>;
  c-name: "gtk_container_child_set_property";
end;

define C-function gtk-container-child-get-property
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GValue>;
  c-name: "gtk_container_child_get_property";
end;

define C-function gtk-container-forall
  input parameter arg1 :: <GtkContainer>;
  input parameter arg2 :: <GtkCallback>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_container_forall";
end;

define constant gtk-container-children = gtk-container-get-children;

define constant gtk-container-border-width = gtk-container-set-border-width;

define C-subtype <_GtkSeparator> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkSeparator> = <_GtkSeparator>;

define C-subtype <_GtkVSeparator> (<_GtkSeparator>, <_AtkImplementorIface>) end;
define constant <GtkVSeparator> = <_GtkVSeparator>;

define C-subtype <_GtkSeparatorClass> (<C-void*>) end;
define constant <GtkSeparatorClass> = <_GtkSeparatorClass>;

define C-subtype <_GtkVSeparatorClass> (<C-void*>) end;
define constant <GtkVSeparatorClass> = <_GtkVSeparatorClass>;

define C-function gtk-vseparator-get-type
  result res :: <GType>;
  c-name: "gtk_vseparator_get_type";
end;

define C-function gtk-vseparator-new
  result res :: <GtkWidget>;
  c-name: "gtk_vseparator_new";
end;

define C-function gtk-separator-get-type
  result res :: <GType>;
  c-name: "gtk_separator_get_type";
end;

define C-subtype <_GtkRangeLayout> (<C-void*>) end;
define constant <GtkRangeLayout> = <_GtkRangeLayout>;

define C-subtype <_GtkRangeStepTimer> (<C-void*>) end;
define constant <GtkRangeStepTimer> = <_GtkRangeStepTimer>;

define C-subtype <_GtkRange> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkRange> = <_GtkRange>;

define C-subtype <_GtkScrollbar> (<_GtkRange>, <_AtkImplementorIface>) end;
define constant <GtkScrollbar> = <_GtkScrollbar>;

define C-subtype <_GtkVScrollbar> (<_GtkScrollbar>, <_AtkImplementorIface>) end;
define constant <GtkVScrollbar> = <_GtkVScrollbar>;

define constant <anonymous-5607> = <C-function-pointer>;
define constant <anonymous-5608> = <C-function-pointer>;
define constant <anonymous-5609> = <C-function-pointer>;
define constant <anonymous-5610> = <C-function-pointer>;
define constant <anonymous-5611> = <C-function-pointer>;
define constant <anonymous-5612> = <C-function-pointer>;
define constant <anonymous-5613> = <C-function-pointer>;
define constant <anonymous-5614> = <C-function-pointer>;
define C-subtype <_GtkRangeClass> (<C-void*>) end;
define constant <GtkRangeClass> = <_GtkRangeClass>;

define constant <anonymous-5631> = <C-function-pointer>;
define constant <anonymous-5632> = <C-function-pointer>;
define constant <anonymous-5633> = <C-function-pointer>;
define constant <anonymous-5634> = <C-function-pointer>;
define C-subtype <_GtkScrollbarClass> (<C-void*>) end;
define constant <GtkScrollbarClass> = <_GtkScrollbarClass>;

define C-subtype <_GtkVScrollbarClass> (<C-void*>) end;
define constant <GtkVScrollbarClass> = <_GtkVScrollbarClass>;

define C-function gtk-vscrollbar-get-type
  result res :: <GType>;
  c-name: "gtk_vscrollbar_get_type";
end;

define C-function gtk-vscrollbar-new
  input parameter arg1 :: <GtkAdjustment>;
  result res :: <GtkWidget>;
  c-name: "gtk_vscrollbar_new";
end;

define C-function gtk-scrollbar-get-type
  result res :: <GType>;
  c-name: "gtk_scrollbar_get_type";
end;

define C-function gtk-range-get-type
  result res :: <GType>;
  c-name: "gtk_range_get_type";
end;

define C-function gtk-range-set-update-policy
  input parameter arg1 :: <GtkRange>;
  input parameter arg2 :: <GtkUpdateType>;
  c-name: "gtk_range_set_update_policy";
end;

define C-function gtk-range-get-update-policy
  input parameter arg1 :: <GtkRange>;
  result res :: <GtkUpdateType>;
  c-name: "gtk_range_get_update_policy";
end;

define C-function gtk-range-set-adjustment
  input parameter arg1 :: <GtkRange>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_range_set_adjustment";
end;

define C-function gtk-range-get-adjustment
  input parameter arg1 :: <GtkRange>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_range_get_adjustment";
end;

define C-function gtk-range-set-inverted
  input parameter arg1 :: <GtkRange>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_range_set_inverted";
end;

define C-function gtk-range-get-inverted
  input parameter arg1 :: <GtkRange>;
  result res :: <gboolean>;
  c-name: "gtk_range_get_inverted";
end;

define C-function gtk-range-set-lower-stepper-sensitivity
  input parameter arg1 :: <GtkRange>;
  input parameter arg2 :: <GtkSensitivityType>;
  c-name: "gtk_range_set_lower_stepper_sensitivity";
end;

define C-function gtk-range-get-lower-stepper-sensitivity
  input parameter arg1 :: <GtkRange>;
  result res :: <GtkSensitivityType>;
  c-name: "gtk_range_get_lower_stepper_sensitivity";
end;

define C-function gtk-range-set-upper-stepper-sensitivity
  input parameter arg1 :: <GtkRange>;
  input parameter arg2 :: <GtkSensitivityType>;
  c-name: "gtk_range_set_upper_stepper_sensitivity";
end;

define C-function gtk-range-get-upper-stepper-sensitivity
  input parameter arg1 :: <GtkRange>;
  result res :: <GtkSensitivityType>;
  c-name: "gtk_range_get_upper_stepper_sensitivity";
end;

define C-function gtk-range-set-increments
  input parameter arg1 :: <GtkRange>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  c-name: "gtk_range_set_increments";
end;

define C-function gtk-range-set-range
  input parameter arg1 :: <GtkRange>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  c-name: "gtk_range_set_range";
end;

define C-function gtk-range-set-value
  input parameter arg1 :: <GtkRange>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_range_set_value";
end;

define C-function gtk-range-get-value
  input parameter arg1 :: <GtkRange>;
  result res :: <gdouble>;
  c-name: "gtk_range_get_value";
end;

define C-subtype <_GtkScale> (<_GtkRange>, <_AtkImplementorIface>) end;
define constant <GtkScale> = <_GtkScale>;

define C-subtype <_GtkVScale> (<_GtkScale>, <_AtkImplementorIface>) end;
define constant <GtkVScale> = <_GtkVScale>;

define constant <anonymous-6580> = <C-function-pointer>;
define constant <anonymous-6581> = <C-function-pointer>;
define constant <anonymous-6582> = <C-function-pointer>;
define constant <anonymous-6583> = <C-function-pointer>;
define constant <anonymous-6584> = <C-function-pointer>;
define constant <anonymous-6585> = <C-function-pointer>;
define C-subtype <_GtkScaleClass> (<C-void*>) end;
define constant <GtkScaleClass> = <_GtkScaleClass>;

define C-subtype <_GtkVScaleClass> (<C-void*>) end;
define constant <GtkVScaleClass> = <_GtkVScaleClass>;

define C-function gtk-vscale-get-type
  result res :: <GType>;
  c-name: "gtk_vscale_get_type";
end;

define C-function gtk-vscale-new
  input parameter arg1 :: <GtkAdjustment>;
  result res :: <GtkWidget>;
  c-name: "gtk_vscale_new";
end;

define C-function gtk-vscale-new-with-range
  input parameter arg1 :: <gdouble>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  result res :: <GtkWidget>;
  c-name: "gtk_vscale_new_with_range";
end;

define C-function gtk-scale-get-type
  result res :: <GType>;
  c-name: "gtk_scale_get_type";
end;

define C-function gtk-scale-set-digits
  input parameter arg1 :: <GtkScale>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_scale_set_digits";
end;

define C-function gtk-scale-get-digits
  input parameter arg1 :: <GtkScale>;
  result res :: <gint>;
  c-name: "gtk_scale_get_digits";
end;

define C-function gtk-scale-set-draw-value
  input parameter arg1 :: <GtkScale>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_scale_set_draw_value";
end;

define C-function gtk-scale-get-draw-value
  input parameter arg1 :: <GtkScale>;
  result res :: <gboolean>;
  c-name: "gtk_scale_get_draw_value";
end;

define C-function gtk-scale-set-value-pos
  input parameter arg1 :: <GtkScale>;
  input parameter arg2 :: <GtkPositionType>;
  c-name: "gtk_scale_set_value_pos";
end;

define C-function gtk-scale-get-value-pos
  input parameter arg1 :: <GtkScale>;
  result res :: <GtkPositionType>;
  c-name: "gtk_scale_get_value_pos";
end;

define C-function gtk-scale-get-layout
  input parameter arg1 :: <GtkScale>;
  result res :: <PangoLayout>;
  c-name: "gtk_scale_get_layout";
end;

define C-function gtk-scale-get-layout-offsets
  input parameter arg1 :: <GtkScale>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_scale_get_layout_offsets";
end;

define constant <gdouble<@10>> = <gdouble*>;
define constant <gint<@5>> = <gint*>;
define C-subtype <_GtkRulerMetric> (<C-void*>) end;
define constant <GtkRulerMetric> = <_GtkRulerMetric>;

define C-subtype <_GtkRuler> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkRuler> = <_GtkRuler>;

define C-subtype <_GtkVRuler> (<_GtkRuler>, <_AtkImplementorIface>) end;
define constant <GtkVRuler> = <_GtkVRuler>;

define constant <anonymous-6563> = <C-function-pointer>;
define constant <anonymous-6564> = <C-function-pointer>;
define constant <anonymous-6565> = <C-function-pointer>;
define constant <anonymous-6566> = <C-function-pointer>;
define constant <anonymous-6567> = <C-function-pointer>;
define constant <anonymous-6568> = <C-function-pointer>;
define C-subtype <_GtkRulerClass> (<C-void*>) end;
define constant <GtkRulerClass> = <_GtkRulerClass>;

define C-subtype <_GtkVRulerClass> (<C-void*>) end;
define constant <GtkVRulerClass> = <_GtkVRulerClass>;

define C-function gtk-vruler-get-type
  result res :: <GType>;
  c-name: "gtk_vruler_get_type";
end;

define C-function gtk-vruler-new
  result res :: <GtkWidget>;
  c-name: "gtk_vruler_new";
end;

define C-function gtk-ruler-get-type
  result res :: <GType>;
  c-name: "gtk_ruler_get_type";
end;

define C-function gtk-ruler-set-metric
  input parameter arg1 :: <GtkRuler>;
  input parameter arg2 :: <GtkMetricType>;
  c-name: "gtk_ruler_set_metric";
end;

define C-function gtk-ruler-set-range
  input parameter arg1 :: <GtkRuler>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <gdouble>;
  input parameter arg5 :: <gdouble>;
  c-name: "gtk_ruler_set_range";
end;

define C-function gtk-ruler-draw-ticks
  input parameter arg1 :: <GtkRuler>;
  c-name: "gtk_ruler_draw_ticks";
end;

define C-function gtk-ruler-draw-pos
  input parameter arg1 :: <GtkRuler>;
  c-name: "gtk_ruler_draw_pos";
end;

define C-function gtk-ruler-get-metric
  input parameter arg1 :: <GtkRuler>;
  result res :: <GtkMetricType>;
  c-name: "gtk_ruler_get_metric";
end;

define C-function gtk-ruler-get-range
  input parameter arg1 :: <GtkRuler>;
  input parameter arg2 :: <gdouble*>;
  input parameter arg3 :: <gdouble*>;
  input parameter arg4 :: <gdouble*>;
  input parameter arg5 :: <gdouble*>;
  c-name: "gtk_ruler_get_range";
end;

define C-subtype <_GtkPanedPrivate> (<C-void*>) end;
define constant <GtkPanedPrivate> = <_GtkPanedPrivate>;

define C-subtype <_GtkPaned> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkPaned> = <_GtkPaned>;

define C-subtype <_GtkVPaned> (<_GtkPaned>, <_AtkImplementorIface>) end;
define constant <GtkVPaned> = <_GtkVPaned>;

define constant <anonymous-6541> = <C-function-pointer>;
define constant <anonymous-6542> = <C-function-pointer>;
define constant <anonymous-6543> = <C-function-pointer>;
define constant <anonymous-6544> = <C-function-pointer>;
define constant <anonymous-6545> = <C-function-pointer>;
define constant <anonymous-6546> = <C-function-pointer>;
define constant <anonymous-6547> = <C-function-pointer>;
define constant <anonymous-6548> = <C-function-pointer>;
define constant <anonymous-6549> = <C-function-pointer>;
define constant <anonymous-6550> = <C-function-pointer>;
define C-subtype <_GtkPanedClass> (<C-void*>) end;
define constant <GtkPanedClass> = <_GtkPanedClass>;

define C-subtype <_GtkVPanedClass> (<C-void*>) end;
define constant <GtkVPanedClass> = <_GtkVPanedClass>;

define C-function gtk-vpaned-get-type
  result res :: <GType>;
  c-name: "gtk_vpaned_get_type";
end;

define C-function gtk-vpaned-new
  result res :: <GtkWidget>;
  c-name: "gtk_vpaned_new";
end;

define C-function gtk-paned-get-type
  result res :: <GType>;
  c-name: "gtk_paned_get_type";
end;

define C-function gtk-paned-add1
  input parameter arg1 :: <GtkPaned>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_paned_add1";
end;

define C-function gtk-paned-add2
  input parameter arg1 :: <GtkPaned>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_paned_add2";
end;

define C-function gtk-paned-pack1
  input parameter arg1 :: <GtkPaned>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gboolean>;
  c-name: "gtk_paned_pack1";
end;

define C-function gtk-paned-pack2
  input parameter arg1 :: <GtkPaned>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gboolean>;
  c-name: "gtk_paned_pack2";
end;

define C-function gtk-paned-get-position
  input parameter arg1 :: <GtkPaned>;
  result res :: <gint>;
  c-name: "gtk_paned_get_position";
end;

define C-function gtk-paned-set-position
  input parameter arg1 :: <GtkPaned>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_paned_set_position";
end;

define C-function gtk-paned-get-child1
  input parameter arg1 :: <GtkPaned>;
  result res :: <GtkWidget>;
  c-name: "gtk_paned_get_child1";
end;

define C-function gtk-paned-get-child2
  input parameter arg1 :: <GtkPaned>;
  result res :: <GtkWidget>;
  c-name: "gtk_paned_get_child2";
end;

define C-function gtk-paned-compute-position
  input parameter arg1 :: <GtkPaned>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_paned_compute_position";
end;

define C-subtype <_GtkViewport> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkViewport> = <_GtkViewport>;

define constant <anonymous-7616> = <C-function-pointer>;
define C-subtype <_GtkViewportClass> (<C-void*>) end;
define constant <GtkViewportClass> = <_GtkViewportClass>;

define C-function gtk-viewport-get-type
  result res :: <GType>;
  c-name: "gtk_viewport_get_type";
end;

define C-function gtk-viewport-new
  input parameter arg1 :: <GtkAdjustment>;
  input parameter arg2 :: <GtkAdjustment>;
  result res :: <GtkWidget>;
  c-name: "gtk_viewport_new";
end;

define C-function gtk-viewport-get-hadjustment
  input parameter arg1 :: <GtkViewport>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_viewport_get_hadjustment";
end;

define C-function gtk-viewport-get-vadjustment
  input parameter arg1 :: <GtkViewport>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_viewport_get_vadjustment";
end;

define C-function gtk-viewport-set-hadjustment
  input parameter arg1 :: <GtkViewport>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_viewport_set_hadjustment";
end;

define C-function gtk-viewport-set-vadjustment
  input parameter arg1 :: <GtkViewport>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_viewport_set_vadjustment";
end;

define C-function gtk-viewport-set-shadow-type
  input parameter arg1 :: <GtkViewport>;
  input parameter arg2 :: <GtkShadowType>;
  c-name: "gtk_viewport_set_shadow_type";
end;

define C-function gtk-viewport-get-shadow-type
  input parameter arg1 :: <GtkViewport>;
  result res :: <GtkShadowType>;
  c-name: "gtk_viewport_get_shadow_type";
end;

define constant $GTK-MAJOR-VERSION = 2;

define constant $GTK-MINOR-VERSION = 10;

define constant $GTK-MICRO-VERSION = 11;

define constant $GTK-BINARY-AGE = 1011;

define constant $GTK-INTERFACE-AGE = 11;

define C-subtype <_GtkBox> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkBox> = <_GtkBox>;

define C-subtype <_GtkVBox> (<_GtkBox>, <_AtkImplementorIface>) end;
define constant <GtkVBox> = <_GtkVBox>;

define C-subtype <_GtkBoxClass> (<C-void*>) end;
define constant <GtkBoxClass> = <_GtkBoxClass>;

define C-subtype <_GtkVBoxClass> (<C-void*>) end;
define constant <GtkVBoxClass> = <_GtkVBoxClass>;

define C-function gtk-vbox-get-type
  result res :: <GType>;
  c-name: "gtk_vbox_get_type";
end;

define C-function gtk-vbox-new
  input parameter arg1 :: <gboolean>;
  input parameter arg2 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_vbox_new";
end;

define C-subtype <_GtkBoxChild> (<C-void*>) end;
define constant <GtkBoxChild> = <_GtkBoxChild>;

define C-function gtk-box-get-type
  result res :: <GType>;
  c-name: "gtk_box_get_type";
end;

define C-function gtk-box-pack-start
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <guint>;
  c-name: "gtk_box_pack_start";
end;

define C-function gtk-box-pack-end
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <guint>;
  c-name: "gtk_box_pack_end";
end;

define C-function gtk-box-pack-start-defaults
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_box_pack_start_defaults";
end;

define C-function gtk-box-pack-end-defaults
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_box_pack_end_defaults";
end;

define C-function gtk-box-set-homogeneous
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_box_set_homogeneous";
end;

define C-function gtk-box-get-homogeneous
  input parameter arg1 :: <GtkBox>;
  result res :: <gboolean>;
  c-name: "gtk_box_get_homogeneous";
end;

define C-function gtk-box-set-spacing
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_box_set_spacing";
end;

define C-function gtk-box-get-spacing
  input parameter arg1 :: <GtkBox>;
  result res :: <gint>;
  c-name: "gtk_box_get_spacing";
end;

define C-function gtk-box-reorder-child
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_box_reorder_child";
end;

define C-pointer-type <GtkPackType*> => <GtkPackType>;
define C-function gtk-box-query-child-packing
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean*>;
  input parameter arg4 :: <gboolean*>;
  input parameter arg5 :: <guint*>;
  input parameter arg6 :: <GtkPackType*>;
  c-name: "gtk_box_query_child_packing";
end;

define C-function gtk-box-set-child-packing
  input parameter arg1 :: <GtkBox>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <guint>;
  input parameter arg6 :: <GtkPackType>;
  c-name: "gtk_box_set_child_packing";
end;

define C-subtype <_GtkButtonBox> (<_GtkBox>, <_AtkImplementorIface>) end;
define constant <GtkButtonBox> = <_GtkButtonBox>;

define C-subtype <_GtkVButtonBox> (<_GtkButtonBox>, <_AtkImplementorIface>) end;
define constant <GtkVButtonBox> = <_GtkVButtonBox>;

define C-subtype <_GtkButtonBoxClass> (<C-void*>) end;
define constant <GtkButtonBoxClass> = <_GtkButtonBoxClass>;

define C-subtype <_GtkVButtonBoxClass> (<C-void*>) end;
define constant <GtkVButtonBoxClass> = <_GtkVButtonBoxClass>;

define C-function gtk-vbutton-box-get-type
  result res :: <GType>;
  c-name: "gtk_vbutton_box_get_type";
end;

define C-function gtk-vbutton-box-new
  result res :: <GtkWidget>;
  c-name: "gtk_vbutton_box_new";
end;

define C-function gtk-vbutton-box-get-spacing-default
  result res :: <gint>;
  c-name: "gtk_vbutton_box_get_spacing_default";
end;

define C-function gtk-vbutton-box-set-spacing-default
  input parameter arg1 :: <gint>;
  c-name: "gtk_vbutton_box_set_spacing_default";
end;

define C-function gtk-vbutton-box-get-layout-default
  result res :: <GtkButtonBoxStyle>;
  c-name: "gtk_vbutton_box_get_layout_default";
end;

define C-function gtk-vbutton-box-set-layout-default
  input parameter arg1 :: <GtkButtonBoxStyle>;
  c-name: "gtk_vbutton_box_set_layout_default";
end;

define C-function gtk-button-box-get-type
  result res :: <GType>;
  c-name: "gtk_button_box_get_type";
end;

define C-function gtk-button-box-get-layout
  input parameter arg1 :: <GtkButtonBox>;
  result res :: <GtkButtonBoxStyle>;
  c-name: "gtk_button_box_get_layout";
end;

define C-function gtk-button-box-set-layout
  input parameter arg1 :: <GtkButtonBox>;
  input parameter arg2 :: <GtkButtonBoxStyle>;
  c-name: "gtk_button_box_set_layout";
end;

define C-function gtk-button-box-get-child-secondary
  input parameter arg1 :: <GtkButtonBox>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_button_box_get_child_secondary";
end;

define C-function gtk-button-box-set-child-secondary
  input parameter arg1 :: <GtkButtonBox>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_button_box_set_child_secondary";
end;

define C-function gtk-button-box-set-child-size
  input parameter arg1 :: <GtkButtonBox>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_button_box_set_child_size";
end;

define C-function gtk-button-box-set-child-ipadding
  input parameter arg1 :: <GtkButtonBox>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_button_box_set_child_ipadding";
end;

define C-function gtk-button-box-get-child-size
  input parameter arg1 :: <GtkButtonBox>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_button_box_get_child_size";
end;

define C-function gtk-button-box-get-child-ipadding
  input parameter arg1 :: <GtkButtonBox>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_button_box_get_child_ipadding";
end;

define constant $GTK-BUTTONBOX-DEFAULT = -1;

define C-subtype <_GtkUIManagerPrivate> (<C-void*>) end;
define constant <GtkUIManagerPrivate> = <_GtkUIManagerPrivate>;

define C-subtype <_GtkUIManager> (<_GObject>) end;
define constant <GtkUIManager> = <_GtkUIManager>;

define constant <anonymous-8173> = <C-function-pointer>;
define constant <anonymous-8174> = <C-function-pointer>;
define C-subtype <_GtkActionPrivate> (<C-void*>) end;
define constant <GtkActionPrivate> = <_GtkActionPrivate>;

define C-subtype <_GtkAction> (<_GObject>) end;
define constant <GtkAction> = <_GtkAction>;

define constant <anonymous-8175> = <C-function-pointer>;
define constant <anonymous-8176> = <C-function-pointer>;
define constant <anonymous-8177> = <C-function-pointer>;
define constant <anonymous-8178> = <C-function-pointer>;
define constant <anonymous-8179> = <C-function-pointer>;
define constant <anonymous-8180> = <C-function-pointer>;
define constant <anonymous-8181> = <C-function-pointer>;
define constant <anonymous-8182> = <C-function-pointer>;
define C-subtype <_GtkUIManagerClass> (<C-void*>) end;
define constant <GtkUIManagerClass> = <_GtkUIManagerClass>;

define constant <GtkUIManagerItemType> = <C-int>;
define constant $GTK-UI-MANAGER-AUTO = 0;
define constant $GTK-UI-MANAGER-MENUBAR = 1;
define constant $GTK-UI-MANAGER-MENU = 2;
define constant $GTK-UI-MANAGER-TOOLBAR = 4;
define constant $GTK-UI-MANAGER-PLACEHOLDER = 8;
define constant $GTK-UI-MANAGER-POPUP = 16;
define constant $GTK-UI-MANAGER-MENUITEM = 32;
define constant $GTK-UI-MANAGER-TOOLITEM = 64;
define constant $GTK-UI-MANAGER-SEPARATOR = 128;
define constant $GTK-UI-MANAGER-ACCELERATOR = 256;

define C-function gtk-ui-manager-get-type
  result res :: <GType>;
  c-name: "gtk_ui_manager_get_type";
end;

define C-function gtk-ui-manager-new
  result res :: <GtkUIManager>;
  c-name: "gtk_ui_manager_new";
end;

define C-function gtk-ui-manager-set-add-tearoffs
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_ui_manager_set_add_tearoffs";
end;

define C-function gtk-ui-manager-get-add-tearoffs
  input parameter arg1 :: <GtkUIManager>;
  result res :: <gboolean>;
  c-name: "gtk_ui_manager_get_add_tearoffs";
end;

define C-subtype <_GtkActionGroupPrivate> (<C-void*>) end;
define constant <GtkActionGroupPrivate> = <_GtkActionGroupPrivate>;

define C-subtype <_GtkActionGroup> (<_GObject>) end;
define constant <GtkActionGroup> = <_GtkActionGroup>;

define C-function gtk-ui-manager-insert-action-group
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <GtkActionGroup>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_ui_manager_insert_action_group";
end;

define C-function gtk-ui-manager-remove-action-group
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <GtkActionGroup>;
  c-name: "gtk_ui_manager_remove_action_group";
end;

define C-function gtk-ui-manager-get-action-groups
  input parameter arg1 :: <GtkUIManager>;
  result res :: <GList>;
  c-name: "gtk_ui_manager_get_action_groups";
end;

define C-function gtk-ui-manager-get-accel-group
  input parameter arg1 :: <GtkUIManager>;
  result res :: <GtkAccelGroup>;
  c-name: "gtk_ui_manager_get_accel_group";
end;

define C-function gtk-ui-manager-get-widget
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_ui_manager_get_widget";
end;

define C-function gtk-ui-manager-get-toplevels
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <GtkUIManagerItemType>;
  result res :: <GSList>;
  c-name: "gtk_ui_manager_get_toplevels";
end;

define C-function gtk-ui-manager-get-action
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkAction>;
  c-name: "gtk_ui_manager_get_action";
end;

define C-function gtk-ui-manager-add-ui-from-string
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gssize>;
  input parameter arg4 :: <GError*>;
  result res :: <guint>;
  c-name: "gtk_ui_manager_add_ui_from_string";
end;

define C-function gtk-ui-manager-add-ui-from-file-utf8
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <guint>;
  c-name: "gtk_ui_manager_add_ui_from_file_utf8";
end;

define C-function gtk-ui-manager-add-ui
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gchar*>;
  input parameter arg6 :: <GtkUIManagerItemType>;
  input parameter arg7 :: <gboolean>;
  c-name: "gtk_ui_manager_add_ui";
end;

define C-function gtk-ui-manager-remove-ui
  input parameter arg1 :: <GtkUIManager>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_ui_manager_remove_ui";
end;

define C-function gtk-ui-manager-get-ui
  input parameter arg1 :: <GtkUIManager>;
  result res :: <gchar*>;
  c-name: "gtk_ui_manager_get_ui";
end;

define C-function gtk-ui-manager-ensure-update
  input parameter arg1 :: <GtkUIManager>;
  c-name: "gtk_ui_manager_ensure_update";
end;

define C-function gtk-ui-manager-new-merge-id
  input parameter arg1 :: <GtkUIManager>;
  result res :: <guint>;
  c-name: "gtk_ui_manager_new_merge_id";
end;

define constant gtk-ui-manager-add-ui-from-file = gtk-ui-manager-add-ui-from-file-utf8;

define constant <anonymous-4706> = <C-function-pointer>;
define constant <anonymous-4707> = <C-function-pointer>;
define constant <anonymous-4708> = <C-function-pointer>;
define constant <anonymous-4709> = <C-function-pointer>;
define constant <anonymous-4710> = <C-function-pointer>;
define C-subtype <_GtkActionGroupClass> (<C-void*>) end;
define constant <GtkActionGroupClass> = <_GtkActionGroupClass>;

define C-subtype <_GtkActionEntry> (<C-void*>) end;
define constant <GtkActionEntry> = <_GtkActionEntry>;

define C-subtype <_GtkToggleActionEntry> (<C-void*>) end;
define constant <GtkToggleActionEntry> = <_GtkToggleActionEntry>;

define C-subtype <_GtkRadioActionEntry> (<C-void*>) end;
define constant <GtkRadioActionEntry> = <_GtkRadioActionEntry>;

define C-function gtk-action-group-get-type
  result res :: <GType>;
  c-name: "gtk_action_group_get_type";
end;

define C-function gtk-action-group-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkActionGroup>;
  c-name: "gtk_action_group_new";
end;

define C-function gtk-action-group-get-name
  input parameter arg1 :: <GtkActionGroup>;
  result res :: <gchar*>;
  c-name: "gtk_action_group_get_name";
end;

define C-function gtk-action-group-get-sensitive
  input parameter arg1 :: <GtkActionGroup>;
  result res :: <gboolean>;
  c-name: "gtk_action_group_get_sensitive";
end;

define C-function gtk-action-group-set-sensitive
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_action_group_set_sensitive";
end;

define C-function gtk-action-group-get-visible
  input parameter arg1 :: <GtkActionGroup>;
  result res :: <gboolean>;
  c-name: "gtk_action_group_get_visible";
end;

define C-function gtk-action-group-set-visible
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_action_group_set_visible";
end;

define C-function gtk-action-group-get-action
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkAction>;
  c-name: "gtk_action_group_get_action";
end;

define C-function gtk-action-group-list-actions
  input parameter arg1 :: <GtkActionGroup>;
  result res :: <GList>;
  c-name: "gtk_action_group_list_actions";
end;

define C-function gtk-action-group-add-action
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkAction>;
  c-name: "gtk_action_group_add_action";
end;

define C-function gtk-action-group-add-action-with-accel
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkAction>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_action_group_add_action_with_accel";
end;

define C-function gtk-action-group-remove-action
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkAction>;
  c-name: "gtk_action_group_remove_action";
end;

define C-function gtk-action-group-add-actions
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkActionEntry>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <gpointer>;
  c-name: "gtk_action_group_add_actions";
end;

define C-function gtk-action-group-add-toggle-actions
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkToggleActionEntry>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <gpointer>;
  c-name: "gtk_action_group_add_toggle_actions";
end;

define C-function gtk-action-group-add-radio-actions
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkRadioActionEntry>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GCallback>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_action_group_add_radio_actions";
end;

define C-function gtk-action-group-add-actions-full
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkActionEntry>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  c-name: "gtk_action_group_add_actions_full";
end;

define C-function gtk-action-group-add-toggle-actions-full
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkToggleActionEntry>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  c-name: "gtk_action_group_add_toggle_actions_full";
end;

define C-function gtk-action-group-add-radio-actions-full
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkRadioActionEntry>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GCallback>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <GDestroyNotify>;
  c-name: "gtk_action_group_add_radio_actions_full";
end;

define constant <anonymous-4671> = <C-function-pointer>;
define constant <GtkTranslateFunc> = <anonymous-4671>;

define C-function gtk-action-group-set-translate-func
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <GtkTranslateFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_action_group_set_translate_func";
end;

define C-function gtk-action-group-set-translation-domain
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_action_group_set_translation_domain";
end;

define C-function gtk-action-group-translate-string
  input parameter arg1 :: <GtkActionGroup>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "gtk_action_group_translate_string";
end;

define constant <anonymous-4672> = <C-function-pointer>;
define constant <GtkPrintFunc> = <anonymous-4672>;

define constant <anonymous-4673> = <C-function-pointer>;
define constant <GtkItemFactoryCallback> = <anonymous-4673>;

define constant <anonymous-4674> = <C-function-pointer>;
define constant <GtkItemFactoryCallback1> = <anonymous-4674>;

define C-subtype <_GtkItemFactory> (<_GtkObject>) end;
define constant <GtkItemFactory> = <_GtkItemFactory>;

define constant <anonymous-4675> = <C-function-pointer>;
define constant <anonymous-4676> = <C-function-pointer>;
define constant <anonymous-4677> = <C-function-pointer>;
define constant <anonymous-4678> = <C-function-pointer>;
define C-subtype <_GtkItemFactoryClass> (<C-void*>) end;
define constant <GtkItemFactoryClass> = <_GtkItemFactoryClass>;

define C-subtype <_GtkItemFactoryEntry> (<C-void*>) end;
define constant <GtkItemFactoryEntry> = <_GtkItemFactoryEntry>;

define C-subtype <_GtkItemFactoryItem> (<C-void*>) end;
define constant <GtkItemFactoryItem> = <_GtkItemFactoryItem>;

define C-function gtk-item-factory-get-type
  result res :: <GType>;
  c-name: "gtk_item_factory_get_type";
end;

define C-function gtk-item-factory-new
  input parameter arg1 :: <GType>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkAccelGroup>;
  result res :: <GtkItemFactory>;
  c-name: "gtk_item_factory_new";
end;

define C-function gtk-item-factory-construct
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GtkAccelGroup>;
  c-name: "gtk_item_factory_construct";
end;

define C-function gtk-item-factory-add-foreign
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkAccelGroup>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <GdkModifierType>;
  c-name: "gtk_item_factory_add_foreign";
end;

define C-function gtk-item-factory-from-widget
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkItemFactory>;
  c-name: "gtk_item_factory_from_widget";
end;

define C-function gtk-item-factory-path-from-widget
  input parameter arg1 :: <GtkWidget>;
  result res :: <gchar*>;
  c-name: "gtk_item_factory_path_from_widget";
end;

define C-function gtk-item-factory-get-item
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_item_factory_get_item";
end;

define C-function gtk-item-factory-get-widget
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_item_factory_get_widget";
end;

define C-function gtk-item-factory-get-widget-by-action
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <guint>;
  result res :: <GtkWidget>;
  c-name: "gtk_item_factory_get_widget_by_action";
end;

define C-function gtk-item-factory-get-item-by-action
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <guint>;
  result res :: <GtkWidget>;
  c-name: "gtk_item_factory_get_item_by_action";
end;

define C-function gtk-item-factory-create-item
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <GtkItemFactoryEntry>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <guint>;
  c-name: "gtk_item_factory_create_item";
end;

define C-function gtk-item-factory-create-items
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GtkItemFactoryEntry>;
  input parameter arg4 :: <gpointer>;
  c-name: "gtk_item_factory_create_items";
end;

define C-function gtk-item-factory-delete-item
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_item_factory_delete_item";
end;

define C-function gtk-item-factory-delete-entry
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <GtkItemFactoryEntry>;
  c-name: "gtk_item_factory_delete_entry";
end;

define C-function gtk-item-factory-delete-entries
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GtkItemFactoryEntry>;
  c-name: "gtk_item_factory_delete_entries";
end;

define C-function gtk-item-factory-popup
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <guint32>;
  c-name: "gtk_item_factory_popup";
end;

define C-function gtk-item-factory-popup-with-data
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GtkDestroyNotify>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <guint>;
  input parameter arg6 :: <guint>;
  input parameter arg7 :: <guint32>;
  c-name: "gtk_item_factory_popup_with_data";
end;

define C-function gtk-item-factory-popup-data
  input parameter arg1 :: <GtkItemFactory>;
  result res :: <gpointer>;
  c-name: "gtk_item_factory_popup_data";
end;

define C-function gtk-item-factory-popup-data-from-widget
  input parameter arg1 :: <GtkWidget>;
  result res :: <gpointer>;
  c-name: "gtk_item_factory_popup_data_from_widget";
end;

define C-function gtk-item-factory-set-translate-func
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <GtkTranslateFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_item_factory_set_translate_func";
end;

define constant <anonymous-4699> = <C-function-pointer>;
define constant <GtkMenuCallback> = <anonymous-4699>;

define C-subtype <GtkMenuEntry> (<C-void*>) end;
define constant <anonymous-4701> = <C-function-pointer>;
define constant <GtkItemFactoryCallback2> = <anonymous-4701>;

define C-function gtk-item-factory-create-items-ac
  input parameter arg1 :: <GtkItemFactory>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GtkItemFactoryEntry>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <guint>;
  c-name: "gtk_item_factory_create_items_ac";
end;

define C-function gtk-item-factory-from-path
  input parameter arg1 :: <gchar*>;
  result res :: <GtkItemFactory>;
  c-name: "gtk_item_factory_from_path";
end;

define C-function gtk-item-factory-create-menu-entries
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GtkMenuEntry>;
  c-name: "gtk_item_factory_create_menu_entries";
end;

define C-function gtk-item-factories-path-delete
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_item_factories_path_delete";
end;

define constant <anonymous-4633> = <C-function-pointer>;
define constant <anonymous-4634> = <C-function-pointer>;
define constant <anonymous-4635> = <C-function-pointer>;
define constant <anonymous-4636> = <C-function-pointer>;
define constant <anonymous-4637> = <C-function-pointer>;
define constant <anonymous-4638> = <C-function-pointer>;
define constant <anonymous-4639> = <C-function-pointer>;
define constant <anonymous-4640> = <C-function-pointer>;
define constant <anonymous-4641> = <C-function-pointer>;
define C-subtype <_GtkActionClass> (<C-void*>) end;
define constant <GtkActionClass> = <_GtkActionClass>;

define C-function gtk-action-get-type
  result res :: <GType>;
  c-name: "gtk_action_get_type";
end;

define C-function gtk-action-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  result res :: <GtkAction>;
  c-name: "gtk_action_new";
end;

define C-function gtk-action-get-name
  input parameter arg1 :: <GtkAction>;
  result res :: <gchar*>;
  c-name: "gtk_action_get_name";
end;

define C-function gtk-action-is-sensitive
  input parameter arg1 :: <GtkAction>;
  result res :: <gboolean>;
  c-name: "gtk_action_is_sensitive";
end;

define C-function gtk-action-get-sensitive
  input parameter arg1 :: <GtkAction>;
  result res :: <gboolean>;
  c-name: "gtk_action_get_sensitive";
end;

define C-function gtk-action-set-sensitive
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_action_set_sensitive";
end;

define C-function gtk-action-is-visible
  input parameter arg1 :: <GtkAction>;
  result res :: <gboolean>;
  c-name: "gtk_action_is_visible";
end;

define C-function gtk-action-get-visible
  input parameter arg1 :: <GtkAction>;
  result res :: <gboolean>;
  c-name: "gtk_action_get_visible";
end;

define C-function gtk-action-set-visible
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_action_set_visible";
end;

define C-function gtk-action-activate
  input parameter arg1 :: <GtkAction>;
  c-name: "gtk_action_activate";
end;

define C-function gtk-action-create-icon
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <GtkIconSize>;
  result res :: <GtkWidget>;
  c-name: "gtk_action_create_icon";
end;

define C-function gtk-action-create-menu-item
  input parameter arg1 :: <GtkAction>;
  result res :: <GtkWidget>;
  c-name: "gtk_action_create_menu_item";
end;

define C-function gtk-action-create-tool-item
  input parameter arg1 :: <GtkAction>;
  result res :: <GtkWidget>;
  c-name: "gtk_action_create_tool_item";
end;

define C-function gtk-action-connect-proxy
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_action_connect_proxy";
end;

define C-function gtk-action-disconnect-proxy
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_action_disconnect_proxy";
end;

define C-function gtk-action-get-proxies
  input parameter arg1 :: <GtkAction>;
  result res :: <GSList>;
  c-name: "gtk_action_get_proxies";
end;

define C-function gtk-widget-get-action
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkAction>;
  c-name: "gtk_widget_get_action";
end;

define C-function gtk-action-connect-accelerator
  input parameter arg1 :: <GtkAction>;
  c-name: "gtk_action_connect_accelerator";
end;

define C-function gtk-action-disconnect-accelerator
  input parameter arg1 :: <GtkAction>;
  c-name: "gtk_action_disconnect_accelerator";
end;

define C-function gtk-action-get-accel-path
  input parameter arg1 :: <GtkAction>;
  result res :: <gchar*>;
  c-name: "gtk_action_get_accel_path";
end;

define C-function gtk-action-get-accel-closure
  input parameter arg1 :: <GtkAction>;
  result res :: <GClosure>;
  c-name: "gtk_action_get_accel_closure";
end;

define C-function gtk-action-block-activate-from
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_action_block_activate_from";
end;

define C-function gtk-action-unblock-activate-from
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_action_unblock_activate_from";
end;

define C-function gtk-action-set-accel-path
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_action_set_accel_path";
end;

define C-function gtk-action-set-accel-group
  input parameter arg1 :: <GtkAction>;
  input parameter arg2 :: <GtkAccelGroup>;
  c-name: "gtk_action_set_accel_group";
end;

define constant <GtkTreeViewColumnSizing> = <C-int>;
define constant $GTK-TREE-VIEW-COLUMN-GROW-ONLY = 0;
define constant $GTK-TREE-VIEW-COLUMN-AUTOSIZE = 1;
define constant $GTK-TREE-VIEW-COLUMN-FIXED = 2;

define C-subtype <_GtkCellEditable> (<C-void*>) end;
define constant <GtkCellEditable> = <_GtkCellEditable>;

define C-subtype <_GtkTreeViewColumn> (<_GtkObject>, <_GtkCellLayout>) end;
define constant <GtkTreeViewColumn> = <_GtkTreeViewColumn>;

define constant <anonymous-5122> = <C-function-pointer>;
define constant <anonymous-5123> = <C-function-pointer>;
define constant <anonymous-5124> = <C-function-pointer>;
define constant <anonymous-5125> = <C-function-pointer>;
define constant <anonymous-5126> = <C-function-pointer>;
define C-subtype <_GtkTreeViewColumnClass> (<C-void*>) end;
define constant <GtkTreeViewColumnClass> = <_GtkTreeViewColumnClass>;

define C-subtype <_GtkCellRenderer> (<_GtkObject>) end;
define constant <GtkCellRenderer> = <_GtkCellRenderer>;

define C-subtype <_GtkTreeModel> (<C-void*>) end;
define constant <GtkTreeModel> = <_GtkTreeModel>;

define C-subtype <_GtkTreeIter> (<C-void*>) end;
define constant <GtkTreeIter> = <_GtkTreeIter>;

define constant <anonymous-5112> = <C-function-pointer>;
define constant <GtkTreeCellDataFunc> = <anonymous-5112>;

define C-function gtk-tree-view-column-get-type
  result res :: <GType>;
  c-name: "gtk_tree_view_column_get_type";
end;

define C-function gtk-tree-view-column-new
  result res :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_column_new";
end;

define C-function gtk-tree-view-column-new-with-attributes
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkCellRenderer>;
  result res :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_column_new_with_attributes";
end;

define C-function gtk-tree-view-column-pack-start
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_tree_view_column_pack_start";
end;

define C-function gtk-tree-view-column-pack-end
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_tree_view_column_pack_end";
end;

define C-function gtk-tree-view-column-clear
  input parameter arg1 :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_column_clear";
end;

define C-function gtk-tree-view-column-get-cell-renderers
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <GList>;
  c-name: "gtk_tree_view_column_get_cell_renderers";
end;

define C-function gtk-tree-view-column-add-attribute
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_tree_view_column_add_attribute";
end;

define C-function gtk-tree-view-column-set-attributes
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkCellRenderer>;
  c-name: "gtk_tree_view_column_set_attributes";
end;

define C-function gtk-tree-view-column-set-cell-data-func
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <GtkTreeCellDataFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_view_column_set_cell_data_func";
end;

define C-function gtk-tree-view-column-clear-attributes
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkCellRenderer>;
  c-name: "gtk_tree_view_column_clear_attributes";
end;

define C-function gtk-tree-view-column-set-spacing
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_view_column_set_spacing";
end;

define C-function gtk-tree-view-column-get-spacing
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gint>;
  c-name: "gtk_tree_view_column_get_spacing";
end;

define C-function gtk-tree-view-column-set-visible
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_column_set_visible";
end;

define C-function gtk-tree-view-column-get-visible
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_column_get_visible";
end;

define C-function gtk-tree-view-column-set-resizable
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_column_set_resizable";
end;

define C-function gtk-tree-view-column-get-resizable
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_column_get_resizable";
end;

define C-function gtk-tree-view-column-set-sizing
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkTreeViewColumnSizing>;
  c-name: "gtk_tree_view_column_set_sizing";
end;

define C-function gtk-tree-view-column-get-sizing
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <GtkTreeViewColumnSizing>;
  c-name: "gtk_tree_view_column_get_sizing";
end;

define C-function gtk-tree-view-column-get-width
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gint>;
  c-name: "gtk_tree_view_column_get_width";
end;

define C-function gtk-tree-view-column-get-fixed-width
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gint>;
  c-name: "gtk_tree_view_column_get_fixed_width";
end;

define C-function gtk-tree-view-column-set-fixed-width
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_view_column_set_fixed_width";
end;

define C-function gtk-tree-view-column-set-min-width
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_view_column_set_min_width";
end;

define C-function gtk-tree-view-column-get-min-width
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gint>;
  c-name: "gtk_tree_view_column_get_min_width";
end;

define C-function gtk-tree-view-column-set-max-width
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_view_column_set_max_width";
end;

define C-function gtk-tree-view-column-get-max-width
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gint>;
  c-name: "gtk_tree_view_column_get_max_width";
end;

define C-function gtk-tree-view-column-clicked
  input parameter arg1 :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_column_clicked";
end;

define C-function gtk-tree-view-column-set-title
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_tree_view_column_set_title";
end;

define C-function gtk-tree-view-column-get-title
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gchar*>;
  c-name: "gtk_tree_view_column_get_title";
end;

define C-function gtk-tree-view-column-set-expand
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_column_set_expand";
end;

define C-function gtk-tree-view-column-get-expand
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_column_get_expand";
end;

define C-function gtk-tree-view-column-set-clickable
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_column_set_clickable";
end;

define C-function gtk-tree-view-column-get-clickable
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_column_get_clickable";
end;

define C-function gtk-tree-view-column-set-widget
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_tree_view_column_set_widget";
end;

define C-function gtk-tree-view-column-get-widget
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <GtkWidget>;
  c-name: "gtk_tree_view_column_get_widget";
end;

define C-function gtk-tree-view-column-set-alignment
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gfloat>;
  c-name: "gtk_tree_view_column_set_alignment";
end;

define C-function gtk-tree-view-column-get-alignment
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gfloat>;
  c-name: "gtk_tree_view_column_get_alignment";
end;

define C-function gtk-tree-view-column-set-reorderable
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_column_set_reorderable";
end;

define C-function gtk-tree-view-column-get-reorderable
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_column_get_reorderable";
end;

define C-function gtk-tree-view-column-set-sort-column-id
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_view_column_set_sort_column_id";
end;

define C-function gtk-tree-view-column-get-sort-column-id
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gint>;
  c-name: "gtk_tree_view_column_get_sort_column_id";
end;

define C-function gtk-tree-view-column-set-sort-indicator
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_column_set_sort_indicator";
end;

define C-function gtk-tree-view-column-get-sort-indicator
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_column_get_sort_indicator";
end;

define C-function gtk-tree-view-column-set-sort-order
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkSortType>;
  c-name: "gtk_tree_view_column_set_sort_order";
end;

define C-function gtk-tree-view-column-get-sort-order
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <GtkSortType>;
  c-name: "gtk_tree_view_column_get_sort_order";
end;

define C-function gtk-tree-view-column-cell-set-cell-data
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkTreeModel>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <gboolean>;
  c-name: "gtk_tree_view_column_cell_set_cell_data";
end;

define C-function gtk-tree-view-column-cell-get-size
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GdkRectangle>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  c-name: "gtk_tree_view_column_cell_get_size";
end;

define C-function gtk-tree-view-column-cell-is-visible
  input parameter arg1 :: <GtkTreeViewColumn>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_column_cell_is_visible";
end;

define C-function gtk-tree-view-column-focus-cell
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkCellRenderer>;
  c-name: "gtk_tree_view_column_focus_cell";
end;

define C-function gtk-tree-view-column-cell-get-position
  input parameter arg1 :: <GtkTreeViewColumn>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_column_cell_get_position";
end;

define C-function gtk-tree-view-column-queue-resize
  input parameter arg1 :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_column_queue_resize";
end;

define constant <anonymous-5096> = <C-int>;
define constant $GTK-TREE-SORTABLE-DEFAULT-SORT-COLUMN-ID = -1;
define constant $GTK-TREE-SORTABLE-UNSORTED-SORT-COLUMN-ID = -2;

define C-subtype <_GtkTreeSortable> (<C-void*>) end;
define constant <GtkTreeSortable> = <_GtkTreeSortable>;

define constant <anonymous-5098> = <C-function-pointer>;
define C-pointer-type <GtkSortType*> => <GtkSortType>;
define constant <anonymous-5099> = <C-function-pointer>;
define constant <anonymous-5100> = <C-function-pointer>;
define constant <anonymous-5097> = <C-function-pointer>;
define constant <GtkTreeIterCompareFunc> = <anonymous-5097>;

define constant <anonymous-5101> = <C-function-pointer>;
define constant <anonymous-5102> = <C-function-pointer>;
define constant <anonymous-5103> = <C-function-pointer>;
define C-subtype <_GtkTreeSortableIface> (<C-void*>) end;
define constant <GtkTreeSortableIface> = <_GtkTreeSortableIface>;

define C-function gtk-tree-sortable-get-type
  result res :: <GType>;
  c-name: "gtk_tree_sortable_get_type";
end;

define C-function gtk-tree-sortable-sort-column-changed
  input parameter arg1 :: <GtkTreeSortable>;
  c-name: "gtk_tree_sortable_sort_column_changed";
end;

define C-function gtk-tree-sortable-get-sort-column-id
  input parameter arg1 :: <GtkTreeSortable>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <GtkSortType*>;
  result res :: <gboolean>;
  c-name: "gtk_tree_sortable_get_sort_column_id";
end;

define C-function gtk-tree-sortable-set-sort-column-id
  input parameter arg1 :: <GtkTreeSortable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GtkSortType>;
  c-name: "gtk_tree_sortable_set_sort_column_id";
end;

define C-function gtk-tree-sortable-set-sort-func
  input parameter arg1 :: <GtkTreeSortable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GtkTreeIterCompareFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_sortable_set_sort_func";
end;

define C-function gtk-tree-sortable-set-default-sort-func
  input parameter arg1 :: <GtkTreeSortable>;
  input parameter arg2 :: <GtkTreeIterCompareFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_sortable_set_default_sort_func";
end;

define C-function gtk-tree-sortable-has-default-sort-func
  input parameter arg1 :: <GtkTreeSortable>;
  result res :: <gboolean>;
  c-name: "gtk_tree_sortable_has_default_sort_func";
end;

define C-subtype <_GtkTreePath> (<C-void*>) end;
define constant <GtkTreePath> = <_GtkTreePath>;

define C-subtype <_GtkTreeRowReference> (<C-void*>) end;
define constant <GtkTreeRowReference> = <_GtkTreeRowReference>;

define constant <anonymous-5018> = <C-function-pointer>;
define constant <anonymous-5019> = <C-function-pointer>;
define constant <anonymous-5020> = <C-function-pointer>;
define constant <anonymous-5021> = <C-function-pointer>;
define constant <anonymous-5022> = <C-function-pointer>;
define constant <GtkTreeModelFlags> = <C-int>;
define constant $GTK-TREE-MODEL-ITERS-PERSIST = 1;
define constant $GTK-TREE-MODEL-LIST-ONLY = 2;

define constant <anonymous-5023> = <C-function-pointer>;
define constant <anonymous-5024> = <C-function-pointer>;
define constant <anonymous-5025> = <C-function-pointer>;
define constant <anonymous-5026> = <C-function-pointer>;
define constant <anonymous-5027> = <C-function-pointer>;
define constant <anonymous-5028> = <C-function-pointer>;
define constant <anonymous-5029> = <C-function-pointer>;
define constant <anonymous-5030> = <C-function-pointer>;
define constant <anonymous-5031> = <C-function-pointer>;
define constant <anonymous-5032> = <C-function-pointer>;
define constant <anonymous-5033> = <C-function-pointer>;
define constant <anonymous-5034> = <C-function-pointer>;
define constant <anonymous-5035> = <C-function-pointer>;
define constant <anonymous-5036> = <C-function-pointer>;
define C-subtype <_GtkTreeModelIface> (<C-void*>) end;
define constant <GtkTreeModelIface> = <_GtkTreeModelIface>;

define constant <anonymous-5016> = <C-function-pointer>;
define constant <GtkTreeModelForeachFunc> = <anonymous-5016>;

define C-function gtk-tree-path-new
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_path_new";
end;

define C-function gtk-tree-path-new-from-string
  input parameter arg1 :: <gchar*>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_path_new_from_string";
end;

define C-function gtk-tree-path-new-from-indices
  input parameter arg1 :: <gint>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_path_new_from_indices";
end;

define C-function gtk-tree-path-to-string
  input parameter arg1 :: <GtkTreePath>;
  result res :: <gchar*>;
  c-name: "gtk_tree_path_to_string";
end;

define C-function gtk-tree-path-new-first
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_path_new_first";
end;

define C-function gtk-tree-path-append-index
  input parameter arg1 :: <GtkTreePath>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_path_append_index";
end;

define C-function gtk-tree-path-prepend-index
  input parameter arg1 :: <GtkTreePath>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_path_prepend_index";
end;

define C-function gtk-tree-path-get-depth
  input parameter arg1 :: <GtkTreePath>;
  result res :: <gint>;
  c-name: "gtk_tree_path_get_depth";
end;

define C-function gtk-tree-path-get-indices
  input parameter arg1 :: <GtkTreePath>;
  result res :: <gint*>;
  c-name: "gtk_tree_path_get_indices";
end;

define C-function gtk-tree-path-free
  input parameter arg1 :: <GtkTreePath>;
  c-name: "gtk_tree_path_free";
end;

define C-function gtk-tree-path-copy
  input parameter arg1 :: <GtkTreePath>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_path_copy";
end;

define C-function gtk-tree-path-get-type
  result res :: <GType>;
  c-name: "gtk_tree_path_get_type";
end;

define C-function gtk-tree-path-compare
  input parameter arg1 :: <GtkTreePath>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gint>;
  c-name: "gtk_tree_path_compare";
end;

define C-function gtk-tree-path-next
  input parameter arg1 :: <GtkTreePath>;
  c-name: "gtk_tree_path_next";
end;

define C-function gtk-tree-path-prev
  input parameter arg1 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_path_prev";
end;

define C-function gtk-tree-path-up
  input parameter arg1 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_path_up";
end;

define C-function gtk-tree-path-down
  input parameter arg1 :: <GtkTreePath>;
  c-name: "gtk_tree_path_down";
end;

define C-function gtk-tree-path-is-ancestor
  input parameter arg1 :: <GtkTreePath>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_path_is_ancestor";
end;

define C-function gtk-tree-path-is-descendant
  input parameter arg1 :: <GtkTreePath>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_path_is_descendant";
end;

define C-function gtk-tree-row-reference-get-type
  result res :: <GType>;
  c-name: "gtk_tree_row_reference_get_type";
end;

define C-function gtk-tree-row-reference-new
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <GtkTreeRowReference>;
  c-name: "gtk_tree_row_reference_new";
end;

define C-function gtk-tree-row-reference-new-proxy
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GtkTreeModel>;
  input parameter arg3 :: <GtkTreePath>;
  result res :: <GtkTreeRowReference>;
  c-name: "gtk_tree_row_reference_new_proxy";
end;

define C-function gtk-tree-row-reference-get-path
  input parameter arg1 :: <GtkTreeRowReference>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_row_reference_get_path";
end;

define C-function gtk-tree-row-reference-get-model
  input parameter arg1 :: <GtkTreeRowReference>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_tree_row_reference_get_model";
end;

define C-function gtk-tree-row-reference-valid
  input parameter arg1 :: <GtkTreeRowReference>;
  result res :: <gboolean>;
  c-name: "gtk_tree_row_reference_valid";
end;

define C-function gtk-tree-row-reference-copy
  input parameter arg1 :: <GtkTreeRowReference>;
  result res :: <GtkTreeRowReference>;
  c-name: "gtk_tree_row_reference_copy";
end;

define C-function gtk-tree-row-reference-free
  input parameter arg1 :: <GtkTreeRowReference>;
  c-name: "gtk_tree_row_reference_free";
end;

define C-function gtk-tree-row-reference-inserted
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_tree_row_reference_inserted";
end;

define C-function gtk-tree-row-reference-deleted
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_tree_row_reference_deleted";
end;

define C-function gtk-tree-row-reference-reordered
  input parameter arg1 :: <GObject>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <gint*>;
  c-name: "gtk_tree_row_reference_reordered";
end;

define C-function gtk-tree-iter-copy
  input parameter arg1 :: <GtkTreeIter>;
  result res :: <GtkTreeIter>;
  c-name: "gtk_tree_iter_copy";
end;

define C-function gtk-tree-iter-free
  input parameter arg1 :: <GtkTreeIter>;
  c-name: "gtk_tree_iter_free";
end;

define C-function gtk-tree-iter-get-type
  result res :: <GType>;
  c-name: "gtk_tree_iter_get_type";
end;

define C-function gtk-tree-model-get-type
  result res :: <GType>;
  c-name: "gtk_tree_model_get_type";
end;

define C-function gtk-tree-model-get-flags
  input parameter arg1 :: <GtkTreeModel>;
  result res :: <GtkTreeModelFlags>;
  c-name: "gtk_tree_model_get_flags";
end;

define C-function gtk-tree-model-get-n-columns
  input parameter arg1 :: <GtkTreeModel>;
  result res :: <gint>;
  c-name: "gtk_tree_model_get_n_columns";
end;

define C-function gtk-tree-model-get-column-type
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <gint>;
  result res :: <GType>;
  c-name: "gtk_tree_model_get_column_type";
end;

define C-function gtk-tree-model-get-iter
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_get_iter";
end;

define C-function gtk-tree-model-get-iter-from-string
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_get_iter_from_string";
end;

define C-function gtk-tree-model-get-string-from-iter
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gchar*>;
  c-name: "gtk_tree_model_get_string_from_iter";
end;

define C-function gtk-tree-model-get-iter-first
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_get_iter_first";
end;

define C-function gtk-tree-model-get-path
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_model_get_path";
end;

define C-function gtk-tree-model-get-value
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GValue>;
  c-name: "gtk_tree_model_get_value";
end;

define C-function gtk-tree-model-iter-next
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_iter_next";
end;

define C-function gtk-tree-model-iter-children
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_iter_children";
end;

define C-function gtk-tree-model-iter-has-child
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_iter_has_child";
end;

define C-function gtk-tree-model-iter-n-children
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gint>;
  c-name: "gtk_tree_model_iter_n_children";
end;

define C-function gtk-tree-model-iter-nth-child
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_iter_nth_child";
end;

define C-function gtk-tree-model-iter-parent
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_iter_parent";
end;

define C-function gtk-tree-model-ref-node
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_ref_node";
end;

define C-function gtk-tree-model-unref-node
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_unref_node";
end;

define C-function gtk-tree-model-get
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_get";
end;

define C-function gtk-tree-model-get-valist
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <va-list>;
  c-name: "gtk_tree_model_get_valist";
end;

define C-function gtk-tree-model-foreach
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreeModelForeachFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_tree_model_foreach";
end;

define C-function gtk-tree-model-row-changed
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_row_changed";
end;

define C-function gtk-tree-model-row-inserted
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_row_inserted";
end;

define C-function gtk-tree-model-row-has-child-toggled
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_row_has_child_toggled";
end;

define C-function gtk-tree-model-row-deleted
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_tree_model_row_deleted";
end;

define C-function gtk-tree-model-rows-reordered
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <gint*>;
  c-name: "gtk_tree_model_rows_reordered";
end;

define constant <GtkCellRendererState> = <C-int>;
define constant $GTK-CELL-RENDERER-SELECTED = 1;
define constant $GTK-CELL-RENDERER-PRELIT = 2;
define constant $GTK-CELL-RENDERER-INSENSITIVE = 4;
define constant $GTK-CELL-RENDERER-SORTED = 8;
define constant $GTK-CELL-RENDERER-FOCUSED = 16;

define constant <GtkCellRendererMode> = <C-int>;
define constant $GTK-CELL-RENDERER-MODE-INERT = 0;
define constant $GTK-CELL-RENDERER-MODE-ACTIVATABLE = 1;
define constant $GTK-CELL-RENDERER-MODE-EDITABLE = 2;

define constant <anonymous-4999> = <C-function-pointer>;
define constant <anonymous-5000> = <C-function-pointer>;
define constant <anonymous-5001> = <C-function-pointer>;
define constant <anonymous-5002> = <C-function-pointer>;
define constant <anonymous-5003> = <C-function-pointer>;
define constant <anonymous-5004> = <C-function-pointer>;
define constant <anonymous-5005> = <C-function-pointer>;
define constant <anonymous-5006> = <C-function-pointer>;
define C-subtype <_GtkCellRendererClass> (<C-void*>) end;
define constant <GtkCellRendererClass> = <_GtkCellRendererClass>;

define C-function gtk-cell-renderer-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_get_type";
end;

define C-function gtk-cell-renderer-get-size
  input parameter arg1 :: <GtkCellRenderer>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GdkRectangle>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  input parameter arg7 :: <gint*>;
  c-name: "gtk_cell_renderer_get_size";
end;

define C-function gtk-cell-renderer-render
  input parameter arg1 :: <GtkCellRenderer>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <GdkRectangle>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GdkRectangle>;
  input parameter arg7 :: <GtkCellRendererState>;
  c-name: "gtk_cell_renderer_render";
end;

define C-function gtk-cell-renderer-activate
  input parameter arg1 :: <GtkCellRenderer>;
  input parameter arg2 :: <GdkEvent>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GdkRectangle>;
  input parameter arg7 :: <GtkCellRendererState>;
  result res :: <gboolean>;
  c-name: "gtk_cell_renderer_activate";
end;

define C-function gtk-cell-renderer-start-editing
  input parameter arg1 :: <GtkCellRenderer>;
  input parameter arg2 :: <GdkEvent>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <GdkRectangle>;
  input parameter arg6 :: <GdkRectangle>;
  input parameter arg7 :: <GtkCellRendererState>;
  result res :: <GtkCellEditable>;
  c-name: "gtk_cell_renderer_start_editing";
end;

define C-function gtk-cell-renderer-set-fixed-size
  input parameter arg1 :: <GtkCellRenderer>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_cell_renderer_set_fixed_size";
end;

define C-function gtk-cell-renderer-get-fixed-size
  input parameter arg1 :: <GtkCellRenderer>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_cell_renderer_get_fixed_size";
end;

define C-function gtk-cell-renderer-editing-canceled
  input parameter arg1 :: <GtkCellRenderer>;
  c-name: "gtk_cell_renderer_editing_canceled";
end;

define C-function gtk-cell-renderer-stop-editing
  input parameter arg1 :: <GtkCellRenderer>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_cell_renderer_stop_editing";
end;

define constant <anonymous-4983> = <C-function-pointer>;
define constant <anonymous-4984> = <C-function-pointer>;
define constant <anonymous-4985> = <C-function-pointer>;
define C-subtype <_GtkCellEditableIface> (<C-void*>) end;
define constant <GtkCellEditableIface> = <_GtkCellEditableIface>;

define C-function gtk-cell-editable-get-type
  result res :: <GType>;
  c-name: "gtk_cell_editable_get_type";
end;

define C-function gtk-cell-editable-start-editing
  input parameter arg1 :: <GtkCellEditable>;
  input parameter arg2 :: <GdkEvent>;
  c-name: "gtk_cell_editable_start_editing";
end;

define C-function gtk-cell-editable-editing-done
  input parameter arg1 :: <GtkCellEditable>;
  c-name: "gtk_cell_editable_editing_done";
end;

define C-function gtk-cell-editable-remove-widget
  input parameter arg1 :: <GtkCellEditable>;
  c-name: "gtk_cell_editable_remove_widget";
end;

define constant <GtkTreeViewDropPosition> = <C-int>;
define constant $GTK-TREE-VIEW-DROP-BEFORE = 0;
define constant $GTK-TREE-VIEW-DROP-AFTER = 1;
define constant $GTK-TREE-VIEW-DROP-INTO-OR-BEFORE = 2;
define constant $GTK-TREE-VIEW-DROP-INTO-OR-AFTER = 3;

define C-subtype <_GtkTreeViewPrivate> (<C-void*>) end;
define constant <GtkTreeViewPrivate> = <_GtkTreeViewPrivate>;

define C-subtype <_GtkTreeView> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkTreeView> = <_GtkTreeView>;

define constant <anonymous-6068> = <C-function-pointer>;
define constant <anonymous-6069> = <C-function-pointer>;
define constant <anonymous-6070> = <C-function-pointer>;
define constant <anonymous-6071> = <C-function-pointer>;
define constant <anonymous-6072> = <C-function-pointer>;
define constant <anonymous-6073> = <C-function-pointer>;
define constant <anonymous-6074> = <C-function-pointer>;
define constant <anonymous-6075> = <C-function-pointer>;
define constant <anonymous-6076> = <C-function-pointer>;
define constant <anonymous-6077> = <C-function-pointer>;
define constant <anonymous-6078> = <C-function-pointer>;
define constant <anonymous-6079> = <C-function-pointer>;
define constant <anonymous-6080> = <C-function-pointer>;
define constant <anonymous-6081> = <C-function-pointer>;
define constant <anonymous-6082> = <C-function-pointer>;
define constant <anonymous-6083> = <C-function-pointer>;
define constant <anonymous-6084> = <C-function-pointer>;
define constant <anonymous-6085> = <C-function-pointer>;
define constant <anonymous-6086> = <C-function-pointer>;
define constant <anonymous-6087> = <C-function-pointer>;
define constant <anonymous-6088> = <C-function-pointer>;
define C-subtype <_GtkTreeViewClass> (<C-void*>) end;
define constant <GtkTreeViewClass> = <_GtkTreeViewClass>;

define constant <GtkTreeSelection> = <_GtkTreeSelection>;

define constant <anonymous-8118> = <C-function-pointer>;
define constant <GtkTreeSelectionFunc> = <anonymous-8118>;

define C-subtype <_GtkTreeSelection> (<_GObject>) end;
define constant <anonymous-8120> = <C-function-pointer>;
define constant <anonymous-8121> = <C-function-pointer>;
define constant <anonymous-8122> = <C-function-pointer>;
define constant <anonymous-8123> = <C-function-pointer>;
define constant <anonymous-8124> = <C-function-pointer>;
define C-subtype <_GtkTreeSelectionClass> (<C-void*>) end;
define constant <GtkTreeSelectionClass> = <_GtkTreeSelectionClass>;

define constant <anonymous-6089> = <C-function-pointer>;
define constant <GtkTreeViewColumnDropFunc> = <anonymous-6089>;

define constant <anonymous-6090> = <C-function-pointer>;
define constant <GtkTreeViewMappingFunc> = <anonymous-6090>;

define constant <anonymous-6091> = <C-function-pointer>;
define constant <GtkTreeViewSearchEqualFunc> = <anonymous-6091>;

define constant <anonymous-6092> = <C-function-pointer>;
define constant <GtkTreeViewRowSeparatorFunc> = <anonymous-6092>;

define constant <anonymous-6093> = <C-function-pointer>;
define constant <GtkTreeViewSearchPositionFunc> = <anonymous-6093>;

define C-function gtk-tree-view-get-type
  result res :: <GType>;
  c-name: "gtk_tree_view_get_type";
end;

define C-function gtk-tree-view-new
  result res :: <GtkWidget>;
  c-name: "gtk_tree_view_new";
end;

define C-function gtk-tree-view-new-with-model
  input parameter arg1 :: <GtkTreeModel>;
  result res :: <GtkWidget>;
  c-name: "gtk_tree_view_new_with_model";
end;

define C-function gtk-tree-view-get-model
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_tree_view_get_model";
end;

define C-function gtk-tree-view-set-model
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeModel>;
  c-name: "gtk_tree_view_set_model";
end;

define C-function gtk-tree-view-get-selection
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkTreeSelection>;
  c-name: "gtk_tree_view_get_selection";
end;

define C-function gtk-tree-view-get-hadjustment
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_tree_view_get_hadjustment";
end;

define C-function gtk-tree-view-set-hadjustment
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_tree_view_set_hadjustment";
end;

define C-function gtk-tree-view-get-vadjustment
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_tree_view_get_vadjustment";
end;

define C-function gtk-tree-view-set-vadjustment
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_tree_view_set_vadjustment";
end;

define C-function gtk-tree-view-get-headers-visible
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_headers_visible";
end;

define C-function gtk-tree-view-set-headers-visible
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_headers_visible";
end;

define C-function gtk-tree-view-columns-autosize
  input parameter arg1 :: <GtkTreeView>;
  c-name: "gtk_tree_view_columns_autosize";
end;

define C-function gtk-tree-view-get-headers-clickable
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_headers_clickable";
end;

define C-function gtk-tree-view-set-headers-clickable
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_headers_clickable";
end;

define C-function gtk-tree-view-set-rules-hint
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_rules_hint";
end;

define C-function gtk-tree-view-get-rules-hint
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_rules_hint";
end;

define C-function gtk-tree-view-append-column
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewColumn>;
  result res :: <gint>;
  c-name: "gtk_tree_view_append_column";
end;

define C-function gtk-tree-view-remove-column
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewColumn>;
  result res :: <gint>;
  c-name: "gtk_tree_view_remove_column";
end;

define C-function gtk-tree-view-insert-column
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewColumn>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_tree_view_insert_column";
end;

define C-function gtk-tree-view-insert-column-with-attributes
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GtkCellRenderer>;
  result res :: <gint>;
  c-name: "gtk_tree_view_insert_column_with_attributes";
end;

define C-function gtk-tree-view-insert-column-with-data-func
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GtkCellRenderer>;
  input parameter arg5 :: <GtkTreeCellDataFunc>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <GDestroyNotify>;
  result res :: <gint>;
  c-name: "gtk_tree_view_insert_column_with_data_func";
end;

define C-function gtk-tree-view-get-column
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  result res :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_get_column";
end;

define C-function gtk-tree-view-get-columns
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GList>;
  c-name: "gtk_tree_view_get_columns";
end;

define C-function gtk-tree-view-move-column-after
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewColumn>;
  input parameter arg3 :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_move_column_after";
end;

define C-function gtk-tree-view-set-expander-column
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_set_expander_column";
end;

define C-function gtk-tree-view-get-expander-column
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_get_expander_column";
end;

define C-function gtk-tree-view-set-column-drag-function
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewColumnDropFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_view_set_column_drag_function";
end;

define C-function gtk-tree-view-scroll-to-point
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_tree_view_scroll_to_point";
end;

define C-function gtk-tree-view-scroll-to-cell
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeViewColumn>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <gfloat>;
  input parameter arg6 :: <gfloat>;
  c-name: "gtk_tree_view_scroll_to_cell";
end;

define C-function gtk-tree-view-row-activated
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeViewColumn>;
  c-name: "gtk_tree_view_row_activated";
end;

define C-function gtk-tree-view-expand-all
  input parameter arg1 :: <GtkTreeView>;
  c-name: "gtk_tree_view_expand_all";
end;

define C-function gtk-tree-view-collapse-all
  input parameter arg1 :: <GtkTreeView>;
  c-name: "gtk_tree_view_collapse_all";
end;

define C-function gtk-tree-view-expand-to-path
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_tree_view_expand_to_path";
end;

define C-function gtk-tree-view-expand-row
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_expand_row";
end;

define C-function gtk-tree-view-collapse-row
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_collapse_row";
end;

define C-function gtk-tree-view-map-expanded-rows
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewMappingFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_tree_view_map_expanded_rows";
end;

define C-function gtk-tree-view-row-expanded
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_row_expanded";
end;

define C-function gtk-tree-view-set-reorderable
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_reorderable";
end;

define C-function gtk-tree-view-get-reorderable
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_reorderable";
end;

define C-function gtk-tree-view-set-cursor
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeViewColumn>;
  input parameter arg4 :: <gboolean>;
  c-name: "gtk_tree_view_set_cursor";
end;

define C-function gtk-tree-view-set-cursor-on-cell
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeViewColumn>;
  input parameter arg4 :: <GtkCellRenderer>;
  input parameter arg5 :: <gboolean>;
  c-name: "gtk_tree_view_set_cursor_on_cell";
end;

define C-pointer-type <GtkTreePath*> => <GtkTreePath>;
define C-pointer-type <GtkTreeViewColumn*> => <GtkTreeViewColumn>;
define C-function gtk-tree-view-get-cursor
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath*>;
  input parameter arg3 :: <GtkTreeViewColumn*>;
  c-name: "gtk_tree_view_get_cursor";
end;

define C-function gtk-tree-view-get-bin-window
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GdkWindow>;
  c-name: "gtk_tree_view_get_bin_window";
end;

define C-function gtk-tree-view-get-path-at-pos
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkTreePath*>;
  input parameter arg5 :: <GtkTreeViewColumn*>;
  input parameter arg6 :: <gint*>;
  input parameter arg7 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_path_at_pos";
end;

define C-function gtk-tree-view-get-cell-area
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeViewColumn>;
  input parameter arg4 :: <GdkRectangle>;
  c-name: "gtk_tree_view_get_cell_area";
end;

define C-function gtk-tree-view-get-background-area
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeViewColumn>;
  input parameter arg4 :: <GdkRectangle>;
  c-name: "gtk_tree_view_get_background_area";
end;

define C-function gtk-tree-view-get-visible-rect
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gtk_tree_view_get_visible_rect";
end;

define C-function gtk-tree-view-widget-to-tree-coords
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  c-name: "gtk_tree_view_widget_to_tree_coords";
end;

define C-function gtk-tree-view-tree-to-widget-coords
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  c-name: "gtk_tree_view_tree_to_widget_coords";
end;

define C-function gtk-tree-view-get-visible-range
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath*>;
  input parameter arg3 :: <GtkTreePath*>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_visible_range";
end;

define C-subtype <_GtkTargetEntry> (<C-void*>) end;
define constant <GtkTargetEntry> = <_GtkTargetEntry>;

define C-function gtk-tree-view-enable-model-drag-source
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GdkModifierType>;
  input parameter arg3 :: <GtkTargetEntry>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GdkDragAction>;
  c-name: "gtk_tree_view_enable_model_drag_source";
end;

define C-function gtk-tree-view-enable-model-drag-dest
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTargetEntry>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GdkDragAction>;
  c-name: "gtk_tree_view_enable_model_drag_dest";
end;

define C-function gtk-tree-view-unset-rows-drag-source
  input parameter arg1 :: <GtkTreeView>;
  c-name: "gtk_tree_view_unset_rows_drag_source";
end;

define C-function gtk-tree-view-unset-rows-drag-dest
  input parameter arg1 :: <GtkTreeView>;
  c-name: "gtk_tree_view_unset_rows_drag_dest";
end;

define C-function gtk-tree-view-set-drag-dest-row
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreeViewDropPosition>;
  c-name: "gtk_tree_view_set_drag_dest_row";
end;

define C-pointer-type <GtkTreeViewDropPosition*> => <GtkTreeViewDropPosition>;
define C-function gtk-tree-view-get-drag-dest-row
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath*>;
  input parameter arg3 :: <GtkTreeViewDropPosition*>;
  c-name: "gtk_tree_view_get_drag_dest_row";
end;

define C-function gtk-tree-view-get-dest-row-at-pos
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkTreePath*>;
  input parameter arg5 :: <GtkTreeViewDropPosition*>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_dest_row_at_pos";
end;

define C-function gtk-tree-view-create-row-drag-icon
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <GdkPixmap>;
  c-name: "gtk_tree_view_create_row_drag_icon";
end;

define C-function gtk-tree-view-set-enable-search
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_enable_search";
end;

define C-function gtk-tree-view-get-enable-search
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_enable_search";
end;

define C-function gtk-tree-view-get-search-column
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gint>;
  c-name: "gtk_tree_view_get_search_column";
end;

define C-function gtk-tree-view-set-search-column
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_view_set_search_column";
end;

define C-function gtk-tree-view-get-search-equal-func
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkTreeViewSearchEqualFunc>;
  c-name: "gtk_tree_view_get_search_equal_func";
end;

define C-function gtk-tree-view-set-search-equal-func
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewSearchEqualFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_view_set_search_equal_func";
end;

define C-subtype <_GtkIMContext> (<_GObject>) end;
define constant <GtkIMContext> = <_GtkIMContext>;

define C-subtype <_GtkEntry> (<_GtkWidget>, <_AtkImplementorIface>, <_GtkCellEditable>, <_GtkEditable>) end;
define constant <GtkEntry> = <_GtkEntry>;

define C-function gtk-tree-view-get-search-entry
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkEntry>;
  c-name: "gtk_tree_view_get_search_entry";
end;

define C-function gtk-tree-view-set-search-entry
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkEntry>;
  c-name: "gtk_tree_view_set_search_entry";
end;

define C-function gtk-tree-view-get-search-position-func
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkTreeViewSearchPositionFunc>;
  c-name: "gtk_tree_view_get_search_position_func";
end;

define C-function gtk-tree-view-set-search-position-func
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewSearchPositionFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "gtk_tree_view_set_search_position_func";
end;

define constant <anonymous-6163> = <C-function-pointer>;
define constant <GtkTreeDestroyCountFunc> = <anonymous-6163>;

define C-function gtk-tree-view-set-destroy-count-func
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeDestroyCountFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_view_set_destroy_count_func";
end;

define C-function gtk-tree-view-set-fixed-height-mode
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_fixed_height_mode";
end;

define C-function gtk-tree-view-get-fixed-height-mode
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_fixed_height_mode";
end;

define C-function gtk-tree-view-set-hover-selection
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_hover_selection";
end;

define C-function gtk-tree-view-get-hover-selection
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_hover_selection";
end;

define C-function gtk-tree-view-set-hover-expand
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_hover_expand";
end;

define C-function gtk-tree-view-get-hover-expand
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_hover_expand";
end;

define C-function gtk-tree-view-set-rubber-banding
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_rubber_banding";
end;

define C-function gtk-tree-view-get-rubber-banding
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_rubber_banding";
end;

define C-function gtk-tree-view-get-row-separator-func
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkTreeViewRowSeparatorFunc>;
  c-name: "gtk_tree_view_get_row_separator_func";
end;

define C-function gtk-tree-view-set-row-separator-func
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewRowSeparatorFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_view_set_row_separator_func";
end;

define C-function gtk-tree-view-get-grid-lines
  input parameter arg1 :: <GtkTreeView>;
  result res :: <GtkTreeViewGridLines>;
  c-name: "gtk_tree_view_get_grid_lines";
end;

define C-function gtk-tree-view-set-grid-lines
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <GtkTreeViewGridLines>;
  c-name: "gtk_tree_view_set_grid_lines";
end;

define C-function gtk-tree-view-get-enable-tree-lines
  input parameter arg1 :: <GtkTreeView>;
  result res :: <gboolean>;
  c-name: "gtk_tree_view_get_enable_tree_lines";
end;

define C-function gtk-tree-view-set-enable-tree-lines
  input parameter arg1 :: <GtkTreeView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tree_view_set_enable_tree_lines";
end;

define C-subtype <_GtkMenuShell> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkMenuShell> = <_GtkMenuShell>;

define constant <anonymous-4154> = <C-function-pointer>;
define constant <GtkMenuPositionFunc> = <anonymous-4154>;

define C-subtype <_GtkMenu> (<_GtkMenuShell>, <_AtkImplementorIface>) end;
define constant <GtkMenu> = <_GtkMenu>;

define constant <anonymous-6022> = <C-function-pointer>;
define constant <anonymous-6023> = <C-function-pointer>;
define constant <anonymous-6024> = <C-function-pointer>;
define constant <anonymous-6025> = <C-function-pointer>;
define constant <anonymous-6026> = <C-function-pointer>;
define constant <anonymous-6027> = <C-function-pointer>;
define constant <anonymous-6028> = <C-function-pointer>;
define constant <anonymous-6029> = <C-function-pointer>;
define constant <anonymous-6030> = <C-function-pointer>;
define constant <anonymous-6031> = <C-function-pointer>;
define constant <anonymous-6032> = <C-function-pointer>;
define constant <anonymous-6033> = <C-function-pointer>;
define constant <anonymous-6034> = <C-function-pointer>;
define C-subtype <_GtkEntryClass> (<C-void*>) end;
define constant <GtkEntryClass> = <_GtkEntryClass>;

define C-function gtk-entry-get-type
  result res :: <GType>;
  c-name: "gtk_entry_get_type";
end;

define C-function gtk-entry-new
  result res :: <GtkWidget>;
  c-name: "gtk_entry_new";
end;

define C-function gtk-entry-set-visibility
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_entry_set_visibility";
end;

define C-function gtk-entry-get-visibility
  input parameter arg1 :: <GtkEntry>;
  result res :: <gboolean>;
  c-name: "gtk_entry_get_visibility";
end;

define C-function gtk-entry-set-invisible-char
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gunichar>;
  c-name: "gtk_entry_set_invisible_char";
end;

define C-function gtk-entry-get-invisible-char
  input parameter arg1 :: <GtkEntry>;
  result res :: <gunichar>;
  c-name: "gtk_entry_get_invisible_char";
end;

define C-function gtk-entry-set-has-frame
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_entry_set_has_frame";
end;

define C-function gtk-entry-get-has-frame
  input parameter arg1 :: <GtkEntry>;
  result res :: <gboolean>;
  c-name: "gtk_entry_get_has_frame";
end;

define C-function gtk-entry-set-inner-border
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <GtkBorder>;
  c-name: "gtk_entry_set_inner_border";
end;

define C-function gtk-entry-get-inner-border
  input parameter arg1 :: <GtkEntry>;
  result res :: <GtkBorder>;
  c-name: "gtk_entry_get_inner_border";
end;

define C-function gtk-entry-set-max-length
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_entry_set_max_length";
end;

define C-function gtk-entry-get-max-length
  input parameter arg1 :: <GtkEntry>;
  result res :: <gint>;
  c-name: "gtk_entry_get_max_length";
end;

define C-function gtk-entry-set-activates-default
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_entry_set_activates_default";
end;

define C-function gtk-entry-get-activates-default
  input parameter arg1 :: <GtkEntry>;
  result res :: <gboolean>;
  c-name: "gtk_entry_get_activates_default";
end;

define C-function gtk-entry-set-width-chars
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_entry_set_width_chars";
end;

define C-function gtk-entry-get-width-chars
  input parameter arg1 :: <GtkEntry>;
  result res :: <gint>;
  c-name: "gtk_entry_get_width_chars";
end;

define C-function gtk-entry-set-text
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_entry_set_text";
end;

define C-function gtk-entry-get-text
  input parameter arg1 :: <GtkEntry>;
  result res :: <gchar*>;
  c-name: "gtk_entry_get_text";
end;

define C-function gtk-entry-get-layout
  input parameter arg1 :: <GtkEntry>;
  result res :: <PangoLayout>;
  c-name: "gtk_entry_get_layout";
end;

define C-function gtk-entry-get-layout-offsets
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_entry_get_layout_offsets";
end;

define C-function gtk-entry-set-alignment
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gfloat>;
  c-name: "gtk_entry_set_alignment";
end;

define C-function gtk-entry-get-alignment
  input parameter arg1 :: <GtkEntry>;
  result res :: <gfloat>;
  c-name: "gtk_entry_get_alignment";
end;

define C-subtype <_GtkEntryCompletionPrivate> (<C-void*>) end;
define constant <GtkEntryCompletionPrivate> = <_GtkEntryCompletionPrivate>;

define C-subtype <_GtkEntryCompletion> (<_GObject>, <_GtkCellLayout>) end;
define constant <GtkEntryCompletion> = <_GtkEntryCompletion>;

define C-function gtk-entry-set-completion
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <GtkEntryCompletion>;
  c-name: "gtk_entry_set_completion";
end;

define C-function gtk-entry-get-completion
  input parameter arg1 :: <GtkEntry>;
  result res :: <GtkEntryCompletion>;
  c-name: "gtk_entry_get_completion";
end;

define C-function gtk-entry-layout-index-to-text-index
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_entry_layout_index_to_text_index";
end;

define C-function gtk-entry-text-index-to-layout-index
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_entry_text_index_to_layout_index";
end;

define C-function gtk-entry-new-with-max-length
  input parameter arg1 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_entry_new_with_max_length";
end;

define C-function gtk-entry-append-text
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_entry_append_text";
end;

define C-function gtk-entry-prepend-text
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_entry_prepend_text";
end;

define C-function gtk-entry-set-position
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_entry_set_position";
end;

define C-function gtk-entry-select-region
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_entry_select_region";
end;

define C-function gtk-entry-set-editable
  input parameter arg1 :: <GtkEntry>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_entry_set_editable";
end;

define constant <anonymous-5976> = <C-function-pointer>;
define constant <anonymous-5977> = <C-function-pointer>;
define constant <anonymous-5978> = <C-function-pointer>;
define constant <anonymous-5979> = <C-function-pointer>;
define constant <anonymous-5980> = <C-function-pointer>;
define constant <anonymous-5981> = <C-function-pointer>;
define C-subtype <_GtkEntryCompletionClass> (<C-void*>) end;
define constant <GtkEntryCompletionClass> = <_GtkEntryCompletionClass>;

define constant <anonymous-5975> = <C-function-pointer>;
define constant <GtkEntryCompletionMatchFunc> = <anonymous-5975>;

define C-function gtk-entry-completion-get-type
  result res :: <GType>;
  c-name: "gtk_entry_completion_get_type";
end;

define C-function gtk-entry-completion-new
  result res :: <GtkEntryCompletion>;
  c-name: "gtk_entry_completion_new";
end;

define C-function gtk-entry-completion-get-entry
  input parameter arg1 :: <GtkEntryCompletion>;
  result res :: <GtkWidget>;
  c-name: "gtk_entry_completion_get_entry";
end;

define C-function gtk-entry-completion-set-model
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <GtkTreeModel>;
  c-name: "gtk_entry_completion_set_model";
end;

define C-function gtk-entry-completion-get-model
  input parameter arg1 :: <GtkEntryCompletion>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_entry_completion_get_model";
end;

define C-function gtk-entry-completion-set-match-func
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <GtkEntryCompletionMatchFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "gtk_entry_completion_set_match_func";
end;

define C-function gtk-entry-completion-set-minimum-key-length
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_entry_completion_set_minimum_key_length";
end;

define C-function gtk-entry-completion-get-minimum-key-length
  input parameter arg1 :: <GtkEntryCompletion>;
  result res :: <gint>;
  c-name: "gtk_entry_completion_get_minimum_key_length";
end;

define C-function gtk-entry-completion-complete
  input parameter arg1 :: <GtkEntryCompletion>;
  c-name: "gtk_entry_completion_complete";
end;

define C-function gtk-entry-completion-insert-prefix
  input parameter arg1 :: <GtkEntryCompletion>;
  c-name: "gtk_entry_completion_insert_prefix";
end;

define C-function gtk-entry-completion-insert-action-text
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_entry_completion_insert_action_text";
end;

define C-function gtk-entry-completion-insert-action-markup
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_entry_completion_insert_action_markup";
end;

define C-function gtk-entry-completion-delete-action
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_entry_completion_delete_action";
end;

define C-function gtk-entry-completion-set-inline-completion
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_entry_completion_set_inline_completion";
end;

define C-function gtk-entry-completion-get-inline-completion
  input parameter arg1 :: <GtkEntryCompletion>;
  result res :: <gboolean>;
  c-name: "gtk_entry_completion_get_inline_completion";
end;

define C-function gtk-entry-completion-set-popup-completion
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_entry_completion_set_popup_completion";
end;

define C-function gtk-entry-completion-get-popup-completion
  input parameter arg1 :: <GtkEntryCompletion>;
  result res :: <gboolean>;
  c-name: "gtk_entry_completion_get_popup_completion";
end;

define C-function gtk-entry-completion-set-popup-set-width
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_entry_completion_set_popup_set_width";
end;

define C-function gtk-entry-completion-get-popup-set-width
  input parameter arg1 :: <GtkEntryCompletion>;
  result res :: <gboolean>;
  c-name: "gtk_entry_completion_get_popup_set_width";
end;

define C-function gtk-entry-completion-set-popup-single-match
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_entry_completion_set_popup_single_match";
end;

define C-function gtk-entry-completion-get-popup-single-match
  input parameter arg1 :: <GtkEntryCompletion>;
  result res :: <gboolean>;
  c-name: "gtk_entry_completion_get_popup_single_match";
end;

define C-function gtk-entry-completion-set-text-column
  input parameter arg1 :: <GtkEntryCompletion>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_entry_completion_set_text_column";
end;

define C-function gtk-entry-completion-get-text-column
  input parameter arg1 :: <GtkEntryCompletion>;
  result res :: <gint>;
  c-name: "gtk_entry_completion_get_text_column";
end;

define constant <anonymous-5957> = <C-function-pointer>;
define constant <GtkTreeModelFilterVisibleFunc> = <anonymous-5957>;

define constant <anonymous-5958> = <C-function-pointer>;
define constant <GtkTreeModelFilterModifyFunc> = <anonymous-5958>;

define C-subtype <_GtkTreeModelFilterPrivate> (<C-void*>) end;
define constant <GtkTreeModelFilterPrivate> = <_GtkTreeModelFilterPrivate>;

define C-subtype <_GtkTreeModelFilter> (<_GObject>, <_GtkTreeModel>, <_GtkTreeDragSource>) end;
define constant <GtkTreeModelFilter> = <_GtkTreeModelFilter>;

define constant <anonymous-5959> = <C-function-pointer>;
define constant <anonymous-5960> = <C-function-pointer>;
define constant <anonymous-5961> = <C-function-pointer>;
define constant <anonymous-5962> = <C-function-pointer>;
define C-subtype <_GtkTreeModelFilterClass> (<C-void*>) end;
define constant <GtkTreeModelFilterClass> = <_GtkTreeModelFilterClass>;

define C-function gtk-tree-model-filter-get-type
  result res :: <GType>;
  c-name: "gtk_tree_model_filter_get_type";
end;

define C-function gtk-tree-model-filter-new
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_tree_model_filter_new";
end;

define C-function gtk-tree-model-filter-set-visible-func
  input parameter arg1 :: <GtkTreeModelFilter>;
  input parameter arg2 :: <GtkTreeModelFilterVisibleFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_model_filter_set_visible_func";
end;

define C-function gtk-tree-model-filter-set-modify-func
  input parameter arg1 :: <GtkTreeModelFilter>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GType*>;
  input parameter arg4 :: <GtkTreeModelFilterModifyFunc>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_model_filter_set_modify_func";
end;

define C-function gtk-tree-model-filter-set-visible-column
  input parameter arg1 :: <GtkTreeModelFilter>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_tree_model_filter_set_visible_column";
end;

define C-function gtk-tree-model-filter-get-model
  input parameter arg1 :: <GtkTreeModelFilter>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_tree_model_filter_get_model";
end;

define C-function gtk-tree-model-filter-convert-child-iter-to-iter
  input parameter arg1 :: <GtkTreeModelFilter>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_filter_convert_child_iter_to_iter";
end;

define C-function gtk-tree-model-filter-convert-iter-to-child-iter
  input parameter arg1 :: <GtkTreeModelFilter>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_filter_convert_iter_to_child_iter";
end;

define C-function gtk-tree-model-filter-convert-child-path-to-path
  input parameter arg1 :: <GtkTreeModelFilter>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_model_filter_convert_child_path_to_path";
end;

define C-function gtk-tree-model-filter-convert-path-to-child-path
  input parameter arg1 :: <GtkTreeModelFilter>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_model_filter_convert_path_to_child_path";
end;

define C-function gtk-tree-model-filter-refilter
  input parameter arg1 :: <GtkTreeModelFilter>;
  c-name: "gtk_tree_model_filter_refilter";
end;

define C-function gtk-tree-model-filter-clear-cache
  input parameter arg1 :: <GtkTreeModelFilter>;
  c-name: "gtk_tree_model_filter_clear_cache";
end;

define C-subtype <_GtkListStore> (<_GObject>, <_GtkTreeModel>, <_GtkTreeDragSource>, <_GtkTreeDragDest>, <_GtkTreeSortable>) end;
define constant <GtkListStore> = <_GtkListStore>;

define constant <anonymous-5932> = <C-function-pointer>;
define constant <anonymous-5933> = <C-function-pointer>;
define constant <anonymous-5934> = <C-function-pointer>;
define constant <anonymous-5935> = <C-function-pointer>;
define C-subtype <_GtkListStoreClass> (<C-void*>) end;
define constant <GtkListStoreClass> = <_GtkListStoreClass>;

define C-function gtk-list-store-get-type
  result res :: <GType>;
  c-name: "gtk_list_store_get_type";
end;

define C-function gtk-list-store-new
  input parameter arg1 :: <gint>;
  result res :: <GtkListStore>;
  c-name: "gtk_list_store_new";
end;

define C-function gtk-list-store-newv
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GType*>;
  result res :: <GtkListStore>;
  c-name: "gtk_list_store_newv";
end;

define C-function gtk-list-store-set-column-types
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GType*>;
  c-name: "gtk_list_store_set_column_types";
end;

define C-function gtk-list-store-set-value
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GValue>;
  c-name: "gtk_list_store_set_value";
end;

define C-function gtk-list-store-set
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_list_store_set";
end;

define C-function gtk-list-store-set-valist
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <va-list>;
  c-name: "gtk_list_store_set_valist";
end;

define C-function gtk-list-store-remove
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_list_store_remove";
end;

define C-function gtk-list-store-insert
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_list_store_insert";
end;

define C-function gtk-list-store-insert-before
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_list_store_insert_before";
end;

define C-function gtk-list-store-insert-after
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_list_store_insert_after";
end;

define C-function gtk-list-store-insert-with-values
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_list_store_insert_with_values";
end;

define C-function gtk-list-store-insert-with-valuesv
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <GValue>;
  input parameter arg6 :: <gint>;
  c-name: "gtk_list_store_insert_with_valuesv";
end;

define C-function gtk-list-store-prepend
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_list_store_prepend";
end;

define C-function gtk-list-store-append
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_list_store_append";
end;

define C-function gtk-list-store-clear
  input parameter arg1 :: <GtkListStore>;
  c-name: "gtk_list_store_clear";
end;

define C-function gtk-list-store-iter-is-valid
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_list_store_iter_is_valid";
end;

define C-function gtk-list-store-reorder
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <gint*>;
  c-name: "gtk_list_store_reorder";
end;

define C-function gtk-list-store-swap
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_list_store_swap";
end;

define C-function gtk-list-store-move-after
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_list_store_move_after";
end;

define C-function gtk-list-store-move-before
  input parameter arg1 :: <GtkListStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_list_store_move_before";
end;

define constant <anonymous-4126> = <C-function-pointer>;
define constant <anonymous-4127> = <C-function-pointer>;
define constant <anonymous-4128> = <C-function-pointer>;
define constant <anonymous-4129> = <C-function-pointer>;
define constant <anonymous-4130> = <C-function-pointer>;
define constant <anonymous-4131> = <C-function-pointer>;
define constant <anonymous-4132> = <C-function-pointer>;
define constant <anonymous-4133> = <C-function-pointer>;
define constant <anonymous-4134> = <C-function-pointer>;
define constant <anonymous-4135> = <C-function-pointer>;
define constant <anonymous-4136> = <C-function-pointer>;
define C-subtype <_GtkMenuShellClass> (<C-void*>) end;
define constant <GtkMenuShellClass> = <_GtkMenuShellClass>;

define constant <anonymous-4164> = <C-function-pointer>;
define constant <anonymous-4165> = <C-function-pointer>;
define constant <anonymous-4166> = <C-function-pointer>;
define constant <anonymous-4167> = <C-function-pointer>;
define C-subtype <_GtkMenuClass> (<C-void*>) end;
define constant <GtkMenuClass> = <_GtkMenuClass>;

define constant <anonymous-4155> = <C-function-pointer>;
define constant <GtkMenuDetachFunc> = <anonymous-4155>;

define C-function gtk-menu-get-type
  result res :: <GType>;
  c-name: "gtk_menu_get_type";
end;

define C-function gtk-menu-new
  result res :: <GtkWidget>;
  c-name: "gtk_menu_new";
end;

define C-function gtk-menu-popup
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <GtkMenuPositionFunc>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <guint>;
  input parameter arg7 :: <guint32>;
  c-name: "gtk_menu_popup";
end;

define C-function gtk-menu-reposition
  input parameter arg1 :: <GtkMenu>;
  c-name: "gtk_menu_reposition";
end;

define C-function gtk-menu-popdown
  input parameter arg1 :: <GtkMenu>;
  c-name: "gtk_menu_popdown";
end;

define C-function gtk-menu-get-active
  input parameter arg1 :: <GtkMenu>;
  result res :: <GtkWidget>;
  c-name: "gtk_menu_get_active";
end;

define C-function gtk-menu-set-active
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_menu_set_active";
end;

define C-function gtk-menu-set-accel-group
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <GtkAccelGroup>;
  c-name: "gtk_menu_set_accel_group";
end;

define C-function gtk-menu-get-accel-group
  input parameter arg1 :: <GtkMenu>;
  result res :: <GtkAccelGroup>;
  c-name: "gtk_menu_get_accel_group";
end;

define C-function gtk-menu-set-accel-path
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_menu_set_accel_path";
end;

define C-function gtk-menu-attach-to-widget
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkMenuDetachFunc>;
  c-name: "gtk_menu_attach_to_widget";
end;

define C-function gtk-menu-detach
  input parameter arg1 :: <GtkMenu>;
  c-name: "gtk_menu_detach";
end;

define C-function gtk-menu-get-attach-widget
  input parameter arg1 :: <GtkMenu>;
  result res :: <GtkWidget>;
  c-name: "gtk_menu_get_attach_widget";
end;

define C-function gtk-menu-set-tearoff-state
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_menu_set_tearoff_state";
end;

define C-function gtk-menu-get-tearoff-state
  input parameter arg1 :: <GtkMenu>;
  result res :: <gboolean>;
  c-name: "gtk_menu_get_tearoff_state";
end;

define C-function gtk-menu-set-title
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_menu_set_title";
end;

define C-function gtk-menu-get-title
  input parameter arg1 :: <GtkMenu>;
  result res :: <gchar*>;
  c-name: "gtk_menu_get_title";
end;

define C-function gtk-menu-reorder-child
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_menu_reorder_child";
end;

define C-function gtk-menu-set-screen
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <GdkScreen>;
  c-name: "gtk_menu_set_screen";
end;

define C-function gtk-menu-attach
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <guint>;
  input parameter arg6 :: <guint>;
  c-name: "gtk_menu_attach";
end;

define C-function gtk-menu-set-monitor
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_menu_set_monitor";
end;

define C-function gtk-menu-get-for-attach-widget
  input parameter arg1 :: <GtkWidget>;
  result res :: <GList>;
  c-name: "gtk_menu_get_for_attach_widget";
end;

define C-function gtk-menu-shell-get-type
  result res :: <GType>;
  c-name: "gtk_menu_shell_get_type";
end;

define C-function gtk-menu-shell-append
  input parameter arg1 :: <GtkMenuShell>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_menu_shell_append";
end;

define C-function gtk-menu-shell-prepend
  input parameter arg1 :: <GtkMenuShell>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_menu_shell_prepend";
end;

define C-function gtk-menu-shell-insert
  input parameter arg1 :: <GtkMenuShell>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_menu_shell_insert";
end;

define C-function gtk-menu-shell-deactivate
  input parameter arg1 :: <GtkMenuShell>;
  c-name: "gtk_menu_shell_deactivate";
end;

define C-function gtk-menu-shell-select-item
  input parameter arg1 :: <GtkMenuShell>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_menu_shell_select_item";
end;

define C-function gtk-menu-shell-deselect
  input parameter arg1 :: <GtkMenuShell>;
  c-name: "gtk_menu_shell_deselect";
end;

define C-function gtk-menu-shell-activate-item
  input parameter arg1 :: <GtkMenuShell>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_menu_shell_activate_item";
end;

define C-function gtk-menu-shell-select-first
  input parameter arg1 :: <GtkMenuShell>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_menu_shell_select_first";
end;

define C-function gtk-menu-shell-cancel
  input parameter arg1 :: <GtkMenuShell>;
  c-name: "gtk_menu_shell_cancel";
end;

define C-function gtk-menu-shell-get-take-focus
  input parameter arg1 :: <GtkMenuShell>;
  result res :: <gboolean>;
  c-name: "gtk_menu_shell_get_take_focus";
end;

define C-function gtk-menu-shell-set-take-focus
  input parameter arg1 :: <GtkMenuShell>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_menu_shell_set_take_focus";
end;

define constant <anonymous-5897> = <C-function-pointer>;
define constant <anonymous-5898> = <C-function-pointer>;
define constant <anonymous-5899> = <C-function-pointer>;
define constant <anonymous-5900> = <C-function-pointer>;
define constant <anonymous-5901> = <C-function-pointer>;
define constant <anonymous-5902> = <C-function-pointer>;
define constant <anonymous-5903> = <C-function-pointer>;
define constant <anonymous-5904> = <C-function-pointer>;
define constant <anonymous-5905> = <C-function-pointer>;
define constant <anonymous-5906> = <C-function-pointer>;
define constant <anonymous-5907> = <C-function-pointer>;
define constant <anonymous-5908> = <C-function-pointer>;
define constant <anonymous-5909> = <C-function-pointer>;
define constant <anonymous-5910> = <C-function-pointer>;
define constant <anonymous-5911> = <C-function-pointer>;
define constant <anonymous-5912> = <C-function-pointer>;
define constant <anonymous-5913> = <C-function-pointer>;
define constant <anonymous-5914> = <C-function-pointer>;
define constant <anonymous-5915> = <C-function-pointer>;
define constant <anonymous-5916> = <C-function-pointer>;
define constant <anonymous-5917> = <C-function-pointer>;
define constant <anonymous-5918> = <C-function-pointer>;
define C-subtype <_GtkIMContextClass> (<C-void*>) end;
define constant <GtkIMContextClass> = <_GtkIMContextClass>;

define C-function gtk-im-context-get-type
  result res :: <GType>;
  c-name: "gtk_im_context_get_type";
end;

define C-function gtk-im-context-set-client-window
  input parameter arg1 :: <GtkIMContext>;
  input parameter arg2 :: <GdkWindow>;
  c-name: "gtk_im_context_set_client_window";
end;

define C-function gtk-im-context-get-preedit-string
  input parameter arg1 :: <GtkIMContext>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <PangoAttrList*>;
  input parameter arg4 :: <gint*>;
  c-name: "gtk_im_context_get_preedit_string";
end;

define C-function gtk-im-context-filter-keypress
  input parameter arg1 :: <GtkIMContext>;
  input parameter arg2 :: <GdkEventKey>;
  result res :: <gboolean>;
  c-name: "gtk_im_context_filter_keypress";
end;

define C-function gtk-im-context-focus-in
  input parameter arg1 :: <GtkIMContext>;
  c-name: "gtk_im_context_focus_in";
end;

define C-function gtk-im-context-focus-out
  input parameter arg1 :: <GtkIMContext>;
  c-name: "gtk_im_context_focus_out";
end;

define C-function gtk-im-context-reset
  input parameter arg1 :: <GtkIMContext>;
  c-name: "gtk_im_context_reset";
end;

define C-function gtk-im-context-set-cursor-location
  input parameter arg1 :: <GtkIMContext>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gtk_im_context_set_cursor_location";
end;

define C-function gtk-im-context-set-use-preedit
  input parameter arg1 :: <GtkIMContext>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_im_context_set_use_preedit";
end;

define C-function gtk-im-context-set-surrounding
  input parameter arg1 :: <GtkIMContext>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_im_context_set_surrounding";
end;

define C-function gtk-im-context-get-surrounding
  input parameter arg1 :: <GtkIMContext>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_im_context_get_surrounding";
end;

define C-function gtk-im-context-delete-surrounding
  input parameter arg1 :: <GtkIMContext>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_im_context_delete_surrounding";
end;

define C-subtype <_GtkEditable> (<C-void*>) end;
define constant <GtkEditable> = <_GtkEditable>;

define constant <anonymous-5873> = <C-function-pointer>;
define constant <anonymous-5874> = <C-function-pointer>;
define constant <anonymous-5875> = <C-function-pointer>;
define constant <anonymous-5876> = <C-function-pointer>;
define constant <anonymous-5877> = <C-function-pointer>;
define constant <anonymous-5878> = <C-function-pointer>;
define constant <anonymous-5879> = <C-function-pointer>;
define constant <anonymous-5880> = <C-function-pointer>;
define constant <anonymous-5881> = <C-function-pointer>;
define constant <anonymous-5882> = <C-function-pointer>;
define C-subtype <_GtkEditableClass> (<C-void*>) end;
define constant <GtkEditableClass> = <_GtkEditableClass>;

define C-function gtk-editable-get-type
  result res :: <GType>;
  c-name: "gtk_editable_get_type";
end;

define C-function gtk-editable-select-region
  input parameter arg1 :: <GtkEditable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_editable_select_region";
end;

define C-function gtk-editable-get-selection-bounds
  input parameter arg1 :: <GtkEditable>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_editable_get_selection_bounds";
end;

define C-function gtk-editable-insert-text
  input parameter arg1 :: <GtkEditable>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  c-name: "gtk_editable_insert_text";
end;

define C-function gtk-editable-delete-text
  input parameter arg1 :: <GtkEditable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_editable_delete_text";
end;

define C-function gtk-editable-get-chars
  input parameter arg1 :: <GtkEditable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gchar*>;
  c-name: "gtk_editable_get_chars";
end;

define C-function gtk-editable-cut-clipboard
  input parameter arg1 :: <GtkEditable>;
  c-name: "gtk_editable_cut_clipboard";
end;

define C-function gtk-editable-copy-clipboard
  input parameter arg1 :: <GtkEditable>;
  c-name: "gtk_editable_copy_clipboard";
end;

define C-function gtk-editable-paste-clipboard
  input parameter arg1 :: <GtkEditable>;
  c-name: "gtk_editable_paste_clipboard";
end;

define C-function gtk-editable-delete-selection
  input parameter arg1 :: <GtkEditable>;
  c-name: "gtk_editable_delete_selection";
end;

define C-function gtk-editable-set-position
  input parameter arg1 :: <GtkEditable>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_editable_set_position";
end;

define C-function gtk-editable-get-position
  input parameter arg1 :: <GtkEditable>;
  result res :: <gint>;
  c-name: "gtk_editable_get_position";
end;

define C-function gtk-editable-set-editable
  input parameter arg1 :: <GtkEditable>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_editable_set_editable";
end;

define C-function gtk-editable-get-editable
  input parameter arg1 :: <GtkEditable>;
  result res :: <gboolean>;
  c-name: "gtk_editable_get_editable";
end;

define constant <GtkDestDefaults> = <C-int>;
define constant $GTK-DEST-DEFAULT-MOTION = 1;
define constant $GTK-DEST-DEFAULT-HIGHLIGHT = 2;
define constant $GTK-DEST-DEFAULT-DROP = 4;
define constant $GTK-DEST-DEFAULT-ALL = 7;

define constant <GtkTargetFlags> = <C-int>;
define constant $GTK-TARGET-SAME-APP = 1;
define constant $GTK-TARGET-SAME-WIDGET = 2;

define C-function gtk-drag-get-data
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkDragContext>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <guint32>;
  c-name: "gtk_drag_get_data";
end;

define C-function gtk-drag-finish
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <guint32>;
  c-name: "gtk_drag_finish";
end;

define C-function gtk-drag-get-source-widget
  input parameter arg1 :: <GdkDragContext>;
  result res :: <GtkWidget>;
  c-name: "gtk_drag_get_source_widget";
end;

define C-function gtk-drag-highlight
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_highlight";
end;

define C-function gtk-drag-unhighlight
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_unhighlight";
end;

define C-function gtk-drag-dest-set
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkDestDefaults>;
  input parameter arg3 :: <GtkTargetEntry>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GdkDragAction>;
  c-name: "gtk_drag_dest_set";
end;

define C-function gtk-drag-dest-set-proxy
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GdkDragProtocol>;
  input parameter arg4 :: <gboolean>;
  c-name: "gtk_drag_dest_set_proxy";
end;

define C-function gtk-drag-dest-unset
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_dest_unset";
end;

define C-subtype <_GtkTargetList> (<C-void*>) end;
define constant <GtkTargetList> = <_GtkTargetList>;

define C-function gtk-drag-dest-find-target
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkDragContext>;
  input parameter arg3 :: <GtkTargetList>;
  result res :: <GdkAtom>;
  c-name: "gtk_drag_dest_find_target";
end;

define C-function gtk-drag-dest-get-target-list
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkTargetList>;
  c-name: "gtk_drag_dest_get_target_list";
end;

define C-function gtk-drag-dest-set-target-list
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkTargetList>;
  c-name: "gtk_drag_dest_set_target_list";
end;

define C-function gtk-drag-dest-add-text-targets
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_dest_add_text_targets";
end;

define C-function gtk-drag-dest-add-image-targets
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_dest_add_image_targets";
end;

define C-function gtk-drag-dest-add-uri-targets
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_dest_add_uri_targets";
end;

define C-function gtk-drag-dest-set-track-motion
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_drag_dest_set_track_motion";
end;

define C-function gtk-drag-dest-get-track-motion
  input parameter arg1 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_drag_dest_get_track_motion";
end;

define C-function gtk-drag-source-set
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkModifierType>;
  input parameter arg3 :: <GtkTargetEntry>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GdkDragAction>;
  c-name: "gtk_drag_source_set";
end;

define C-function gtk-drag-source-unset
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_source_unset";
end;

define C-function gtk-drag-source-get-target-list
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkTargetList>;
  c-name: "gtk_drag_source_get_target_list";
end;

define C-function gtk-drag-source-set-target-list
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkTargetList>;
  c-name: "gtk_drag_source_set_target_list";
end;

define C-function gtk-drag-source-add-text-targets
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_source_add_text_targets";
end;

define C-function gtk-drag-source-add-image-targets
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_source_add_image_targets";
end;

define C-function gtk-drag-source-add-uri-targets
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_drag_source_add_uri_targets";
end;

define C-function gtk-drag-source-set-icon
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkColormap>;
  input parameter arg3 :: <GdkPixmap>;
  input parameter arg4 :: <GdkBitmap>;
  c-name: "gtk_drag_source_set_icon";
end;

define C-function gtk-drag-source-set-icon-pixbuf
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkPixbuf>;
  c-name: "gtk_drag_source_set_icon_pixbuf";
end;

define C-function gtk-drag-source-set-icon-stock
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_drag_source_set_icon_stock";
end;

define C-function gtk-drag-source-set-icon-name
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_drag_source_set_icon_name";
end;

define C-function gtk-drag-begin
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GtkTargetList>;
  input parameter arg3 :: <GdkDragAction>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GdkEvent>;
  result res :: <GdkDragContext>;
  c-name: "gtk_drag_begin";
end;

define C-function gtk-drag-set-icon-widget
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_drag_set_icon_widget";
end;

define C-function gtk-drag-set-icon-pixmap
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <GdkColormap>;
  input parameter arg3 :: <GdkPixmap>;
  input parameter arg4 :: <GdkBitmap>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  c-name: "gtk_drag_set_icon_pixmap";
end;

define C-function gtk-drag-set-icon-pixbuf
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <GdkPixbuf>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_drag_set_icon_pixbuf";
end;

define C-function gtk-drag-set-icon-stock
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_drag_set_icon_stock";
end;

define C-function gtk-drag-set-icon-name
  input parameter arg1 :: <GdkDragContext>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_drag_set_icon_name";
end;

define C-function gtk-drag-set-icon-default
  input parameter arg1 :: <GdkDragContext>;
  c-name: "gtk_drag_set_icon_default";
end;

define C-function gtk-drag-check-threshold
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_drag_check_threshold";
end;

define C-function gtk-drag-set-default-icon
  input parameter arg1 :: <GdkColormap>;
  input parameter arg2 :: <GdkPixmap>;
  input parameter arg3 :: <GdkBitmap>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_drag_set_default_icon";
end;

define C-subtype <_GtkTargetPair> (<C-void*>) end;
define constant <GtkTargetPair> = <_GtkTargetPair>;

define C-function gtk-target-list-new
  input parameter arg1 :: <GtkTargetEntry>;
  input parameter arg2 :: <guint>;
  result res :: <GtkTargetList>;
  c-name: "gtk_target_list_new";
end;

define C-function gtk-target-list-ref
  input parameter arg1 :: <GtkTargetList>;
  result res :: <GtkTargetList>;
  c-name: "gtk_target_list_ref";
end;

define C-function gtk-target-list-unref
  input parameter arg1 :: <GtkTargetList>;
  c-name: "gtk_target_list_unref";
end;

define C-function gtk-target-list-add
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  c-name: "gtk_target_list_add";
end;

define C-function gtk-target-list-add-text-targets
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_target_list_add_text_targets";
end;

define C-subtype <_GtkTextTagTable> (<_GObject>) end;
define constant <GtkTextTagTable> = <_GtkTextTagTable>;

define C-subtype <_GtkTextBTree> (<C-void*>) end;
define constant <GtkTextBTree> = <_GtkTextBTree>;

define C-subtype <_GtkTextLogAttrCache> (<C-void*>) end;
define constant <GtkTextLogAttrCache> = <_GtkTextLogAttrCache>;

define C-subtype <_GtkTextBuffer> (<_GObject>) end;
define constant <GtkTextBuffer> = <_GtkTextBuffer>;

define C-function gtk-target-list-add-rich-text-targets
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <GtkTextBuffer>;
  c-name: "gtk_target_list_add_rich_text_targets";
end;

define C-function gtk-target-list-add-image-targets
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_target_list_add_image_targets";
end;

define C-function gtk-target-list-add-uri-targets
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_target_list_add_uri_targets";
end;

define C-function gtk-target-list-add-table
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <GtkTargetEntry>;
  input parameter arg3 :: <guint>;
  c-name: "gtk_target_list_add_table";
end;

define C-function gtk-target-list-remove
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <GdkAtom>;
  c-name: "gtk_target_list_remove";
end;

define C-function gtk-target-list-find
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <guint*>;
  result res :: <gboolean>;
  c-name: "gtk_target_list_find";
end;

define C-function gtk-target-table-new-from-list
  input parameter arg1 :: <GtkTargetList>;
  input parameter arg2 :: <gint*>;
  result res :: <GtkTargetEntry>;
  c-name: "gtk_target_table_new_from_list";
end;

define C-function gtk-target-table-free
  input parameter arg1 :: <GtkTargetEntry>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_target_table_free";
end;

define C-function gtk-selection-owner-set
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <guint32>;
  result res :: <gboolean>;
  c-name: "gtk_selection_owner_set";
end;

define C-function gtk-selection-owner-set-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <guint32>;
  result res :: <gboolean>;
  c-name: "gtk_selection_owner_set_for_display";
end;

define C-function gtk-selection-add-target
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <guint>;
  c-name: "gtk_selection_add_target";
end;

define C-function gtk-selection-add-targets
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GtkTargetEntry>;
  input parameter arg4 :: <guint>;
  c-name: "gtk_selection_add_targets";
end;

define C-function gtk-selection-clear-targets
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkAtom>;
  c-name: "gtk_selection_clear_targets";
end;

define C-function gtk-selection-convert
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <guint32>;
  result res :: <gboolean>;
  c-name: "gtk_selection_convert";
end;

define C-function gtk-selection-data-set
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <guchar*>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_selection_data_set";
end;

define C-function gtk-selection-data-set-text
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_selection_data_set_text";
end;

define C-function gtk-selection-data-get-text
  input parameter arg1 :: <GtkSelectionData>;
  result res :: <guchar*>;
  c-name: "gtk_selection_data_get_text";
end;

define C-function gtk-selection-data-set-pixbuf
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <GdkPixbuf>;
  result res :: <gboolean>;
  c-name: "gtk_selection_data_set_pixbuf";
end;

define C-function gtk-selection-data-get-pixbuf
  input parameter arg1 :: <GtkSelectionData>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_selection_data_get_pixbuf";
end;

define C-function gtk-selection-data-set-uris
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <gchar**>;
  result res :: <gboolean>;
  c-name: "gtk_selection_data_set_uris";
end;

define C-function gtk-selection-data-get-uris
  input parameter arg1 :: <GtkSelectionData>;
  result res :: <gchar**>;
  c-name: "gtk_selection_data_get_uris";
end;

define C-pointer-type <GdkAtom**> => <GdkAtom*>;
define C-function gtk-selection-data-get-targets
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <GdkAtom**>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_selection_data_get_targets";
end;

define C-function gtk-selection-data-targets-include-text
  input parameter arg1 :: <GtkSelectionData>;
  result res :: <gboolean>;
  c-name: "gtk_selection_data_targets_include_text";
end;

define C-function gtk-selection-data-targets-include-rich-text
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <GtkTextBuffer>;
  result res :: <gboolean>;
  c-name: "gtk_selection_data_targets_include_rich_text";
end;

define C-function gtk-selection-data-targets-include-image
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_selection_data_targets_include_image";
end;

define C-function gtk-selection-data-targets-include-uri
  input parameter arg1 :: <GtkSelectionData>;
  result res :: <gboolean>;
  c-name: "gtk_selection_data_targets_include_uri";
end;

define C-function gtk-targets-include-text
  input parameter arg1 :: <GdkAtom*>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_targets_include_text";
end;

define C-function gtk-targets-include-rich-text
  input parameter arg1 :: <GdkAtom*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GtkTextBuffer>;
  result res :: <gboolean>;
  c-name: "gtk_targets_include_rich_text";
end;

define C-function gtk-targets-include-image
  input parameter arg1 :: <GdkAtom*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_targets_include_image";
end;

define C-function gtk-targets-include-uri
  input parameter arg1 :: <GdkAtom*>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_targets_include_uri";
end;

define C-function gtk-selection-remove-all
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_selection_remove_all";
end;

define C-function gtk-selection-clear
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkEventSelection>;
  result res :: <gboolean>;
  c-name: "gtk_selection_clear";
end;

define C-function gtk-selection-data-get-type
  result res :: <GType>;
  c-name: "gtk_selection_data_get_type";
end;

define C-function gtk-selection-data-copy
  input parameter arg1 :: <GtkSelectionData>;
  result res :: <GtkSelectionData>;
  c-name: "gtk_selection_data_copy";
end;

define C-function gtk-selection-data-free
  input parameter arg1 :: <GtkSelectionData>;
  c-name: "gtk_selection_data_free";
end;

define C-function gtk-target-list-get-type
  result res :: <GType>;
  c-name: "gtk_target_list_get_type";
end;

define constant <GtkTextSearchFlags> = <C-int>;
define constant $GTK-TEXT-SEARCH-VISIBLE-ONLY = 1;
define constant $GTK-TEXT-SEARCH-TEXT-ONLY = 2;

define C-subtype <_GtkTextIter> (<C-void*>) end;
define constant <GtkTextIter> = <_GtkTextIter>;

define C-function gtk-text-iter-get-buffer
  input parameter arg1 :: <GtkTextIter>;
  result res :: <GtkTextBuffer>;
  c-name: "gtk_text_iter_get_buffer";
end;

define C-function gtk-text-iter-copy
  input parameter arg1 :: <GtkTextIter>;
  result res :: <GtkTextIter>;
  c-name: "gtk_text_iter_copy";
end;

define C-function gtk-text-iter-free
  input parameter arg1 :: <GtkTextIter>;
  c-name: "gtk_text_iter_free";
end;

define C-function gtk-text-iter-get-type
  result res :: <GType>;
  c-name: "gtk_text_iter_get_type";
end;

define C-function gtk-text-iter-get-offset
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_get_offset";
end;

define C-function gtk-text-iter-get-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_get_line";
end;

define C-function gtk-text-iter-get-line-offset
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_get_line_offset";
end;

define C-function gtk-text-iter-get-line-index
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_get_line_index";
end;

define C-function gtk-text-iter-get-visible-line-offset
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_get_visible_line_offset";
end;

define C-function gtk-text-iter-get-visible-line-index
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_get_visible_line_index";
end;

define C-function gtk-text-iter-get-char
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gunichar>;
  c-name: "gtk_text_iter_get_char";
end;

define C-function gtk-text-iter-get-slice
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gchar*>;
  c-name: "gtk_text_iter_get_slice";
end;

define C-function gtk-text-iter-get-text
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gchar*>;
  c-name: "gtk_text_iter_get_text";
end;

define C-function gtk-text-iter-get-visible-slice
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gchar*>;
  c-name: "gtk_text_iter_get_visible_slice";
end;

define C-function gtk-text-iter-get-visible-text
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gchar*>;
  c-name: "gtk_text_iter_get_visible_text";
end;

define C-function gtk-text-iter-get-pixbuf
  input parameter arg1 :: <GtkTextIter>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_text_iter_get_pixbuf";
end;

define C-function gtk-text-iter-get-marks
  input parameter arg1 :: <GtkTextIter>;
  result res :: <GSList>;
  c-name: "gtk_text_iter_get_marks";
end;

define C-subtype <_GtkTextChildAnchor> (<_GObject>) end;
define constant <GtkTextChildAnchor> = <_GtkTextChildAnchor>;

define C-function gtk-text-iter-get-child-anchor
  input parameter arg1 :: <GtkTextIter>;
  result res :: <GtkTextChildAnchor>;
  c-name: "gtk_text_iter_get_child_anchor";
end;

define C-function gtk-text-iter-get-toggled-tags
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gboolean>;
  result res :: <GSList>;
  c-name: "gtk_text_iter_get_toggled_tags";
end;

define C-subtype <_GtkTextAppearance> (<C-void*>) end;
define constant <GtkTextAppearance> = <_GtkTextAppearance>;

define C-subtype <_GtkTextAttributes> (<C-void*>) end;
define constant <GtkTextAttributes> = <_GtkTextAttributes>;

define C-subtype <_GtkTextTag> (<_GObject>) end;
define constant <GtkTextTag> = <_GtkTextTag>;

define C-function gtk-text-iter-begins-tag
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextTag>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_begins_tag";
end;

define C-function gtk-text-iter-ends-tag
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextTag>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_ends_tag";
end;

define C-function gtk-text-iter-toggles-tag
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextTag>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_toggles_tag";
end;

define C-function gtk-text-iter-has-tag
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextTag>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_has_tag";
end;

define C-function gtk-text-iter-get-tags
  input parameter arg1 :: <GtkTextIter>;
  result res :: <GSList>;
  c-name: "gtk_text_iter_get_tags";
end;

define C-function gtk-text-iter-editable
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_editable";
end;

define C-function gtk-text-iter-can-insert
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_can_insert";
end;

define C-function gtk-text-iter-starts-word
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_starts_word";
end;

define C-function gtk-text-iter-ends-word
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_ends_word";
end;

define C-function gtk-text-iter-inside-word
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_inside_word";
end;

define C-function gtk-text-iter-starts-sentence
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_starts_sentence";
end;

define C-function gtk-text-iter-ends-sentence
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_ends_sentence";
end;

define C-function gtk-text-iter-inside-sentence
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_inside_sentence";
end;

define C-function gtk-text-iter-starts-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_starts_line";
end;

define C-function gtk-text-iter-ends-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_ends_line";
end;

define C-function gtk-text-iter-is-cursor-position
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_is_cursor_position";
end;

define C-function gtk-text-iter-get-chars-in-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_get_chars_in_line";
end;

define C-function gtk-text-iter-get-bytes-in-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_get_bytes_in_line";
end;

define C-function gtk-text-iter-get-attributes
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextAttributes>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_get_attributes";
end;

define C-function gtk-text-iter-get-language
  input parameter arg1 :: <GtkTextIter>;
  result res :: <PangoLanguage>;
  c-name: "gtk_text_iter_get_language";
end;

define C-function gtk-text-iter-is-end
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_is_end";
end;

define C-function gtk-text-iter-is-start
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_is_start";
end;

define C-function gtk-text-iter-forward-char
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_char";
end;

define C-function gtk-text-iter-backward-char
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_char";
end;

define C-function gtk-text-iter-forward-chars
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_chars";
end;

define C-function gtk-text-iter-backward-chars
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_chars";
end;

define C-function gtk-text-iter-forward-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_line";
end;

define C-function gtk-text-iter-backward-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_line";
end;

define C-function gtk-text-iter-forward-lines
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_lines";
end;

define C-function gtk-text-iter-backward-lines
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_lines";
end;

define C-function gtk-text-iter-forward-word-end
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_word_end";
end;

define C-function gtk-text-iter-backward-word-start
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_word_start";
end;

define C-function gtk-text-iter-forward-word-ends
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_word_ends";
end;

define C-function gtk-text-iter-backward-word-starts
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_word_starts";
end;

define C-function gtk-text-iter-forward-visible-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_visible_line";
end;

define C-function gtk-text-iter-backward-visible-line
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_visible_line";
end;

define C-function gtk-text-iter-forward-visible-lines
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_visible_lines";
end;

define C-function gtk-text-iter-backward-visible-lines
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_visible_lines";
end;

define C-function gtk-text-iter-forward-visible-word-end
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_visible_word_end";
end;

define C-function gtk-text-iter-backward-visible-word-start
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_visible_word_start";
end;

define C-function gtk-text-iter-forward-visible-word-ends
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_visible_word_ends";
end;

define C-function gtk-text-iter-backward-visible-word-starts
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_visible_word_starts";
end;

define C-function gtk-text-iter-forward-sentence-end
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_sentence_end";
end;

define C-function gtk-text-iter-backward-sentence-start
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_sentence_start";
end;

define C-function gtk-text-iter-forward-sentence-ends
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_sentence_ends";
end;

define C-function gtk-text-iter-backward-sentence-starts
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_sentence_starts";
end;

define C-function gtk-text-iter-forward-cursor-position
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_cursor_position";
end;

define C-function gtk-text-iter-backward-cursor-position
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_cursor_position";
end;

define C-function gtk-text-iter-forward-cursor-positions
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_cursor_positions";
end;

define C-function gtk-text-iter-backward-cursor-positions
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_cursor_positions";
end;

define C-function gtk-text-iter-forward-visible-cursor-position
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_visible_cursor_position";
end;

define C-function gtk-text-iter-backward-visible-cursor-position
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_visible_cursor_position";
end;

define C-function gtk-text-iter-forward-visible-cursor-positions
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_visible_cursor_positions";
end;

define C-function gtk-text-iter-backward-visible-cursor-positions
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_visible_cursor_positions";
end;

define C-function gtk-text-iter-set-offset
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_iter_set_offset";
end;

define C-function gtk-text-iter-set-line
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_iter_set_line";
end;

define C-function gtk-text-iter-set-line-offset
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_iter_set_line_offset";
end;

define C-function gtk-text-iter-set-line-index
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_iter_set_line_index";
end;

define C-function gtk-text-iter-forward-to-end
  input parameter arg1 :: <GtkTextIter>;
  c-name: "gtk_text_iter_forward_to_end";
end;

define C-function gtk-text-iter-forward-to-line-end
  input parameter arg1 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_to_line_end";
end;

define C-function gtk-text-iter-set-visible-line-offset
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_iter_set_visible_line_offset";
end;

define C-function gtk-text-iter-set-visible-line-index
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_iter_set_visible_line_index";
end;

define C-function gtk-text-iter-forward-to-tag-toggle
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextTag>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_to_tag_toggle";
end;

define C-function gtk-text-iter-backward-to-tag-toggle
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextTag>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_to_tag_toggle";
end;

define constant <anonymous-5508> = <C-function-pointer>;
define constant <GtkTextCharPredicate> = <anonymous-5508>;

define C-function gtk-text-iter-forward-find-char
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextCharPredicate>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_find_char";
end;

define C-function gtk-text-iter-backward-find-char
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextCharPredicate>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_find_char";
end;

define C-function gtk-text-iter-forward-search
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkTextSearchFlags>;
  input parameter arg4 :: <GtkTextIter>;
  input parameter arg5 :: <GtkTextIter>;
  input parameter arg6 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_forward_search";
end;

define C-function gtk-text-iter-backward-search
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkTextSearchFlags>;
  input parameter arg4 :: <GtkTextIter>;
  input parameter arg5 :: <GtkTextIter>;
  input parameter arg6 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_backward_search";
end;

define C-function gtk-text-iter-equal
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_equal";
end;

define C-function gtk-text-iter-compare
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gint>;
  c-name: "gtk_text_iter_compare";
end;

define C-function gtk-text-iter-in-range
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_iter_in_range";
end;

define C-function gtk-text-iter-order
  input parameter arg1 :: <GtkTextIter>;
  input parameter arg2 :: <GtkTextIter>;
  c-name: "gtk_text_iter_order";
end;

define constant <anonymous-5416> = <C-function-pointer>;
define constant <anonymous-5417> = <C-function-pointer>;
define constant <anonymous-5418> = <C-function-pointer>;
define constant <anonymous-5419> = <C-function-pointer>;
define C-subtype <_GtkTextChildAnchorClass> (<C-void*>) end;
define constant <GtkTextChildAnchorClass> = <_GtkTextChildAnchorClass>;

define C-function gtk-text-child-anchor-get-type
  result res :: <GType>;
  c-name: "gtk_text_child_anchor_get_type";
end;

define C-function gtk-text-child-anchor-new
  result res :: <GtkTextChildAnchor>;
  c-name: "gtk_text_child_anchor_new";
end;

define C-function gtk-text-child-anchor-get-widgets
  input parameter arg1 :: <GtkTextChildAnchor>;
  result res :: <GList>;
  c-name: "gtk_text_child_anchor_get_widgets";
end;

define C-function gtk-text-child-anchor-get-deleted
  input parameter arg1 :: <GtkTextChildAnchor>;
  result res :: <gboolean>;
  c-name: "gtk_text_child_anchor_get_deleted";
end;

define constant <anonymous-5383> = <C-function-pointer>;
define constant <anonymous-5384> = <C-function-pointer>;
define constant <anonymous-5385> = <C-function-pointer>;
define constant <anonymous-5386> = <C-function-pointer>;
define constant <anonymous-5387> = <C-function-pointer>;
define C-subtype <_GtkTextTagClass> (<C-void*>) end;
define constant <GtkTextTagClass> = <_GtkTextTagClass>;

define C-function gtk-text-tag-get-type
  result res :: <GType>;
  c-name: "gtk_text_tag_get_type";
end;

define C-function gtk-text-tag-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkTextTag>;
  c-name: "gtk_text_tag_new";
end;

define C-function gtk-text-tag-get-priority
  input parameter arg1 :: <GtkTextTag>;
  result res :: <gint>;
  c-name: "gtk_text_tag_get_priority";
end;

define C-function gtk-text-tag-set-priority
  input parameter arg1 :: <GtkTextTag>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_tag_set_priority";
end;

define C-function gtk-text-tag-event
  input parameter arg1 :: <GtkTextTag>;
  input parameter arg2 :: <GObject>;
  input parameter arg3 :: <GdkEvent>;
  input parameter arg4 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_tag_event";
end;

define C-function gtk-text-attributes-new
  result res :: <GtkTextAttributes>;
  c-name: "gtk_text_attributes_new";
end;

define C-function gtk-text-attributes-copy
  input parameter arg1 :: <GtkTextAttributes>;
  result res :: <GtkTextAttributes>;
  c-name: "gtk_text_attributes_copy";
end;

define C-function gtk-text-attributes-copy-values
  input parameter arg1 :: <GtkTextAttributes>;
  input parameter arg2 :: <GtkTextAttributes>;
  c-name: "gtk_text_attributes_copy_values";
end;

define C-function gtk-text-attributes-unref
  input parameter arg1 :: <GtkTextAttributes>;
  c-name: "gtk_text_attributes_unref";
end;

define C-function gtk-text-attributes-ref
  input parameter arg1 :: <GtkTextAttributes>;
  result res :: <GtkTextAttributes>;
  c-name: "gtk_text_attributes_ref";
end;

define C-function gtk-text-attributes-get-type
  result res :: <GType>;
  c-name: "gtk_text_attributes_get_type";
end;

define C-subtype <_GtkTreeStore> (<_GObject>, <_GtkTreeModel>, <_GtkTreeDragSource>, <_GtkTreeDragDest>, <_GtkTreeSortable>) end;
define constant <GtkTreeStore> = <_GtkTreeStore>;

define constant <anonymous-8146> = <C-function-pointer>;
define constant <anonymous-8147> = <C-function-pointer>;
define constant <anonymous-8148> = <C-function-pointer>;
define constant <anonymous-8149> = <C-function-pointer>;
define C-subtype <_GtkTreeStoreClass> (<C-void*>) end;
define constant <GtkTreeStoreClass> = <_GtkTreeStoreClass>;

define C-function gtk-tree-store-get-type
  result res :: <GType>;
  c-name: "gtk_tree_store_get_type";
end;

define C-function gtk-tree-store-new
  input parameter arg1 :: <gint>;
  result res :: <GtkTreeStore>;
  c-name: "gtk_tree_store_new";
end;

define C-function gtk-tree-store-newv
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GType*>;
  result res :: <GtkTreeStore>;
  c-name: "gtk_tree_store_newv";
end;

define C-function gtk-tree-store-set-column-types
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GType*>;
  c-name: "gtk_tree_store_set_column_types";
end;

define C-function gtk-tree-store-set-value
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GValue>;
  c-name: "gtk_tree_store_set_value";
end;

define C-function gtk-tree-store-set
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_tree_store_set";
end;

define C-function gtk-tree-store-set-valist
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <va-list>;
  c-name: "gtk_tree_store_set_valist";
end;

define C-function gtk-tree-store-remove
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_store_remove";
end;

define C-function gtk-tree-store-insert
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_tree_store_insert";
end;

define C-function gtk-tree-store-insert-before
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <GtkTreeIter>;
  c-name: "gtk_tree_store_insert_before";
end;

define C-function gtk-tree-store-insert-after
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <GtkTreeIter>;
  c-name: "gtk_tree_store_insert_after";
end;

define C-function gtk-tree-store-insert-with-values
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_tree_store_insert_with_values";
end;

define C-function gtk-tree-store-insert-with-valuesv
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <GValue>;
  input parameter arg7 :: <gint>;
  c-name: "gtk_tree_store_insert_with_valuesv";
end;

define C-function gtk-tree-store-prepend
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_store_prepend";
end;

define C-function gtk-tree-store-append
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_store_append";
end;

define C-function gtk-tree-store-is-ancestor
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_store_is_ancestor";
end;

define C-function gtk-tree-store-iter-depth
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gint>;
  c-name: "gtk_tree_store_iter_depth";
end;

define C-function gtk-tree-store-clear
  input parameter arg1 :: <GtkTreeStore>;
  c-name: "gtk_tree_store_clear";
end;

define C-function gtk-tree-store-iter-is-valid
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_store_iter_is_valid";
end;

define C-function gtk-tree-store-reorder
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_tree_store_reorder";
end;

define C-function gtk-tree-store-swap
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_store_swap";
end;

define C-function gtk-tree-store-move-before
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_store_move_before";
end;

define C-function gtk-tree-store-move-after
  input parameter arg1 :: <GtkTreeStore>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_store_move_after";
end;

define constant <anonymous-8119> = <C-function-pointer>;
define constant <GtkTreeSelectionForeachFunc> = <anonymous-8119>;

define C-function gtk-tree-selection-get-type
  result res :: <GType>;
  c-name: "gtk_tree_selection_get_type";
end;

define C-function gtk-tree-selection-set-mode
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkSelectionMode>;
  c-name: "gtk_tree_selection_set_mode";
end;

define C-function gtk-tree-selection-get-mode
  input parameter arg1 :: <GtkTreeSelection>;
  result res :: <GtkSelectionMode>;
  c-name: "gtk_tree_selection_get_mode";
end;

define C-function gtk-tree-selection-set-select-function
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreeSelectionFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_tree_selection_set_select_function";
end;

define C-function gtk-tree-selection-get-user-data
  input parameter arg1 :: <GtkTreeSelection>;
  result res :: <gpointer>;
  c-name: "gtk_tree_selection_get_user_data";
end;

define C-function gtk-tree-selection-get-tree-view
  input parameter arg1 :: <GtkTreeSelection>;
  result res :: <GtkTreeView>;
  c-name: "gtk_tree_selection_get_tree_view";
end;

define C-pointer-type <GtkTreeModel*> => <GtkTreeModel>;
define C-function gtk-tree-selection-get-selected
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreeModel*>;
  input parameter arg3 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_selection_get_selected";
end;

define C-function gtk-tree-selection-get-selected-rows
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreeModel*>;
  result res :: <GList>;
  c-name: "gtk_tree_selection_get_selected_rows";
end;

define C-function gtk-tree-selection-count-selected-rows
  input parameter arg1 :: <GtkTreeSelection>;
  result res :: <gint>;
  c-name: "gtk_tree_selection_count_selected_rows";
end;

define C-function gtk-tree-selection-selected-foreach
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreeSelectionForeachFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_tree_selection_selected_foreach";
end;

define C-function gtk-tree-selection-select-path
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_tree_selection_select_path";
end;

define C-function gtk-tree-selection-unselect-path
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_tree_selection_unselect_path";
end;

define C-function gtk-tree-selection-select-iter
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_tree_selection_select_iter";
end;

define C-function gtk-tree-selection-unselect-iter
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_tree_selection_unselect_iter";
end;

define C-function gtk-tree-selection-path-is-selected
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_selection_path_is_selected";
end;

define C-function gtk-tree-selection-iter-is-selected
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_selection_iter_is_selected";
end;

define C-function gtk-tree-selection-select-all
  input parameter arg1 :: <GtkTreeSelection>;
  c-name: "gtk_tree_selection_select_all";
end;

define C-function gtk-tree-selection-unselect-all
  input parameter arg1 :: <GtkTreeSelection>;
  c-name: "gtk_tree_selection_unselect_all";
end;

define C-function gtk-tree-selection-select-range
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreePath>;
  c-name: "gtk_tree_selection_select_range";
end;

define C-function gtk-tree-selection-unselect-range
  input parameter arg1 :: <GtkTreeSelection>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkTreePath>;
  c-name: "gtk_tree_selection_unselect_range";
end;

define C-subtype <_GtkTreeModelSort> (<_GObject>, <_GtkTreeModel>, <_GtkTreeDragSource>, <_GtkTreeSortable>) end;
define constant <GtkTreeModelSort> = <_GtkTreeModelSort>;

define constant <anonymous-8104> = <C-function-pointer>;
define constant <anonymous-8105> = <C-function-pointer>;
define constant <anonymous-8106> = <C-function-pointer>;
define constant <anonymous-8107> = <C-function-pointer>;
define C-subtype <_GtkTreeModelSortClass> (<C-void*>) end;
define constant <GtkTreeModelSortClass> = <_GtkTreeModelSortClass>;

define C-function gtk-tree-model-sort-get-type
  result res :: <GType>;
  c-name: "gtk_tree_model_sort_get_type";
end;

define C-function gtk-tree-model-sort-new-with-model
  input parameter arg1 :: <GtkTreeModel>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_tree_model_sort_new_with_model";
end;

define C-function gtk-tree-model-sort-get-model
  input parameter arg1 :: <GtkTreeModelSort>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_tree_model_sort_get_model";
end;

define C-function gtk-tree-model-sort-convert-child-path-to-path
  input parameter arg1 :: <GtkTreeModelSort>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_model_sort_convert_child_path_to_path";
end;

define C-function gtk-tree-model-sort-convert-child-iter-to-iter
  input parameter arg1 :: <GtkTreeModelSort>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_sort_convert_child_iter_to_iter";
end;

define C-function gtk-tree-model-sort-convert-path-to-child-path
  input parameter arg1 :: <GtkTreeModelSort>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <GtkTreePath>;
  c-name: "gtk_tree_model_sort_convert_path_to_child_path";
end;

define C-function gtk-tree-model-sort-convert-iter-to-child-iter
  input parameter arg1 :: <GtkTreeModelSort>;
  input parameter arg2 :: <GtkTreeIter>;
  input parameter arg3 :: <GtkTreeIter>;
  c-name: "gtk_tree_model_sort_convert_iter_to_child_iter";
end;

define C-function gtk-tree-model-sort-reset-default-sort-func
  input parameter arg1 :: <GtkTreeModelSort>;
  c-name: "gtk_tree_model_sort_reset_default_sort_func";
end;

define C-function gtk-tree-model-sort-clear-cache
  input parameter arg1 :: <GtkTreeModelSort>;
  c-name: "gtk_tree_model_sort_clear_cache";
end;

define C-function gtk-tree-model-sort-iter-is-valid
  input parameter arg1 :: <GtkTreeModelSort>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_tree_model_sort_iter_is_valid";
end;

define C-subtype <_GtkTreeDragSource> (<C-void*>) end;
define constant <GtkTreeDragSource> = <_GtkTreeDragSource>;

define constant <anonymous-8090> = <C-function-pointer>;
define constant <anonymous-8091> = <C-function-pointer>;
define constant <anonymous-8092> = <C-function-pointer>;
define C-subtype <_GtkTreeDragSourceIface> (<C-void*>) end;
define constant <GtkTreeDragSourceIface> = <_GtkTreeDragSourceIface>;

define C-function gtk-tree-drag-source-get-type
  result res :: <GType>;
  c-name: "gtk_tree_drag_source_get_type";
end;

define C-function gtk-tree-drag-source-row-draggable
  input parameter arg1 :: <GtkTreeDragSource>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_drag_source_row_draggable";
end;

define C-function gtk-tree-drag-source-drag-data-delete
  input parameter arg1 :: <GtkTreeDragSource>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_drag_source_drag_data_delete";
end;

define C-function gtk-tree-drag-source-drag-data-get
  input parameter arg1 :: <GtkTreeDragSource>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkSelectionData>;
  result res :: <gboolean>;
  c-name: "gtk_tree_drag_source_drag_data_get";
end;

define C-subtype <_GtkTreeDragDest> (<C-void*>) end;
define constant <GtkTreeDragDest> = <_GtkTreeDragDest>;

define constant <anonymous-8097> = <C-function-pointer>;
define constant <anonymous-8098> = <C-function-pointer>;
define C-subtype <_GtkTreeDragDestIface> (<C-void*>) end;
define constant <GtkTreeDragDestIface> = <_GtkTreeDragDestIface>;

define C-function gtk-tree-drag-dest-get-type
  result res :: <GType>;
  c-name: "gtk_tree_drag_dest_get_type";
end;

define C-function gtk-tree-drag-dest-drag-data-received
  input parameter arg1 :: <GtkTreeDragDest>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkSelectionData>;
  result res :: <gboolean>;
  c-name: "gtk_tree_drag_dest_drag_data_received";
end;

define C-function gtk-tree-drag-dest-row-drop-possible
  input parameter arg1 :: <GtkTreeDragDest>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkSelectionData>;
  result res :: <gboolean>;
  c-name: "gtk_tree_drag_dest_row_drop_possible";
end;

define C-function gtk-tree-set-row-drag-data
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <GtkTreeModel>;
  input parameter arg3 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_tree_set_row_drag_data";
end;

define C-function gtk-tree-get-row-drag-data
  input parameter arg1 :: <GtkSelectionData>;
  input parameter arg2 :: <GtkTreeModel*>;
  input parameter arg3 :: <GtkTreePath*>;
  result res :: <gboolean>;
  c-name: "gtk_tree_get_row_drag_data";
end;

define constant <GtkTooltips> = <_GtkTooltips>;

define C-subtype <_GtkTooltipsData> (<C-void*>) end;
define constant <GtkTooltipsData> = <_GtkTooltipsData>;

define C-subtype <_GtkTooltips> (<_GtkObject>) end;
define constant <anonymous-6928> = <C-function-pointer>;
define constant <anonymous-6929> = <C-function-pointer>;
define constant <anonymous-6930> = <C-function-pointer>;
define constant <anonymous-6931> = <C-function-pointer>;
define C-subtype <_GtkTooltipsClass> (<C-void*>) end;
define constant <GtkTooltipsClass> = <_GtkTooltipsClass>;

define C-function gtk-tooltips-get-type
  result res :: <GType>;
  c-name: "gtk_tooltips_get_type";
end;

define C-function gtk-tooltips-new
  result res :: <GtkTooltips>;
  c-name: "gtk_tooltips_new";
end;

define C-function gtk-tooltips-enable
  input parameter arg1 :: <GtkTooltips>;
  c-name: "gtk_tooltips_enable";
end;

define C-function gtk-tooltips-disable
  input parameter arg1 :: <GtkTooltips>;
  c-name: "gtk_tooltips_disable";
end;

define C-function gtk-tooltips-set-delay
  input parameter arg1 :: <GtkTooltips>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_tooltips_set_delay";
end;

define C-function gtk-tooltips-set-tip
  input parameter arg1 :: <GtkTooltips>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  c-name: "gtk_tooltips_set_tip";
end;

define C-function gtk-tooltips-data-get
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkTooltipsData>;
  c-name: "gtk_tooltips_data_get";
end;

define C-function gtk-tooltips-force-window
  input parameter arg1 :: <GtkTooltips>;
  c-name: "gtk_tooltips_force_window";
end;

define C-pointer-type <GtkTooltips*> => <GtkTooltips>;
define C-function gtk-tooltips-get-info-from-tip-window
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkTooltips*>;
  input parameter arg3 :: <GtkWidget*>;
  result res :: <gboolean>;
  c-name: "gtk_tooltips_get_info_from_tip_window";
end;

define C-subtype <_GtkToolItemPrivate> (<C-void*>) end;
define constant <GtkToolItemPrivate> = <_GtkToolItemPrivate>;

define C-subtype <_GtkToolItem> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkToolItem> = <_GtkToolItem>;

define constant <anonymous-6942> = <C-function-pointer>;
define constant <anonymous-6943> = <C-function-pointer>;
define constant <anonymous-6944> = <C-function-pointer>;
define constant <anonymous-6945> = <C-function-pointer>;
define constant <anonymous-6946> = <C-function-pointer>;
define constant <anonymous-6947> = <C-function-pointer>;
define constant <anonymous-6948> = <C-function-pointer>;
define C-subtype <_GtkToolItemClass> (<C-void*>) end;
define constant <GtkToolItemClass> = <_GtkToolItemClass>;

define C-function gtk-tool-item-get-type
  result res :: <GType>;
  c-name: "gtk_tool_item_get_type";
end;

define C-function gtk-tool-item-new
  result res :: <GtkToolItem>;
  c-name: "gtk_tool_item_new";
end;

define C-function gtk-tool-item-set-homogeneous
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tool_item_set_homogeneous";
end;

define C-function gtk-tool-item-get-homogeneous
  input parameter arg1 :: <GtkToolItem>;
  result res :: <gboolean>;
  c-name: "gtk_tool_item_get_homogeneous";
end;

define C-function gtk-tool-item-set-expand
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tool_item_set_expand";
end;

define C-function gtk-tool-item-get-expand
  input parameter arg1 :: <GtkToolItem>;
  result res :: <gboolean>;
  c-name: "gtk_tool_item_get_expand";
end;

define C-function gtk-tool-item-set-tooltip
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <GtkTooltips>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  c-name: "gtk_tool_item_set_tooltip";
end;

define C-function gtk-tool-item-set-use-drag-window
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tool_item_set_use_drag_window";
end;

define C-function gtk-tool-item-get-use-drag-window
  input parameter arg1 :: <GtkToolItem>;
  result res :: <gboolean>;
  c-name: "gtk_tool_item_get_use_drag_window";
end;

define C-function gtk-tool-item-set-visible-horizontal
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tool_item_set_visible_horizontal";
end;

define C-function gtk-tool-item-get-visible-horizontal
  input parameter arg1 :: <GtkToolItem>;
  result res :: <gboolean>;
  c-name: "gtk_tool_item_get_visible_horizontal";
end;

define C-function gtk-tool-item-set-visible-vertical
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tool_item_set_visible_vertical";
end;

define C-function gtk-tool-item-get-visible-vertical
  input parameter arg1 :: <GtkToolItem>;
  result res :: <gboolean>;
  c-name: "gtk_tool_item_get_visible_vertical";
end;

define C-function gtk-tool-item-get-is-important
  input parameter arg1 :: <GtkToolItem>;
  result res :: <gboolean>;
  c-name: "gtk_tool_item_get_is_important";
end;

define C-function gtk-tool-item-set-is-important
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tool_item_set_is_important";
end;

define C-function gtk-tool-item-get-icon-size
  input parameter arg1 :: <GtkToolItem>;
  result res :: <GtkIconSize>;
  c-name: "gtk_tool_item_get_icon_size";
end;

define C-function gtk-tool-item-get-orientation
  input parameter arg1 :: <GtkToolItem>;
  result res :: <GtkOrientation>;
  c-name: "gtk_tool_item_get_orientation";
end;

define C-function gtk-tool-item-get-toolbar-style
  input parameter arg1 :: <GtkToolItem>;
  result res :: <GtkToolbarStyle>;
  c-name: "gtk_tool_item_get_toolbar_style";
end;

define C-function gtk-tool-item-get-relief-style
  input parameter arg1 :: <GtkToolItem>;
  result res :: <GtkReliefStyle>;
  c-name: "gtk_tool_item_get_relief_style";
end;

define C-function gtk-tool-item-retrieve-proxy-menu-item
  input parameter arg1 :: <GtkToolItem>;
  result res :: <GtkWidget>;
  c-name: "gtk_tool_item_retrieve_proxy_menu_item";
end;

define C-function gtk-tool-item-get-proxy-menu-item
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_tool_item_get_proxy_menu_item";
end;

define C-function gtk-tool-item-set-proxy-menu-item
  input parameter arg1 :: <GtkToolItem>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkWidget>;
  c-name: "gtk_tool_item_set_proxy_menu_item";
end;

define C-function gtk-tool-item-rebuild-menu
  input parameter arg1 :: <GtkToolItem>;
  c-name: "gtk_tool_item_rebuild_menu";
end;

define C-subtype <_GtkItem> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkItem> = <_GtkItem>;

define C-subtype <_GtkMenuItem> (<_GtkItem>, <_AtkImplementorIface>) end;
define constant <GtkMenuItem> = <_GtkMenuItem>;

define constant <anonymous-5293> = <C-function-pointer>;
define constant <anonymous-5294> = <C-function-pointer>;
define constant <anonymous-5295> = <C-function-pointer>;
define constant <anonymous-5296> = <C-function-pointer>;
define constant <anonymous-5297> = <C-function-pointer>;
define constant <anonymous-5298> = <C-function-pointer>;
define constant <anonymous-5299> = <C-function-pointer>;
define C-subtype <_GtkItemClass> (<C-void*>) end;
define constant <GtkItemClass> = <_GtkItemClass>;

define constant <anonymous-5311> = <C-function-pointer>;
define constant <anonymous-5312> = <C-function-pointer>;
define constant <anonymous-5313> = <C-function-pointer>;
define constant <anonymous-5314> = <C-function-pointer>;
define constant <anonymous-5315> = <C-function-pointer>;
define constant <anonymous-5316> = <C-function-pointer>;
define constant <anonymous-5317> = <C-function-pointer>;
define constant <anonymous-5318> = <C-function-pointer>;
define C-subtype <_GtkMenuItemClass> (<C-void*>) end;
define constant <GtkMenuItemClass> = <_GtkMenuItemClass>;

define C-function gtk-menu-item-get-type
  result res :: <GType>;
  c-name: "gtk_menu_item_get_type";
end;

define C-function gtk-menu-item-new
  result res :: <GtkWidget>;
  c-name: "gtk_menu_item_new";
end;

define C-function gtk-menu-item-new-with-label
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_menu_item_new_with_label";
end;

define C-function gtk-menu-item-new-with-mnemonic
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_menu_item_new_with_mnemonic";
end;

define C-function gtk-menu-item-set-submenu
  input parameter arg1 :: <GtkMenuItem>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_menu_item_set_submenu";
end;

define C-function gtk-menu-item-get-submenu
  input parameter arg1 :: <GtkMenuItem>;
  result res :: <GtkWidget>;
  c-name: "gtk_menu_item_get_submenu";
end;

define C-function gtk-menu-item-remove-submenu
  input parameter arg1 :: <GtkMenuItem>;
  c-name: "gtk_menu_item_remove_submenu";
end;

define C-function gtk-menu-item-select
  input parameter arg1 :: <GtkMenuItem>;
  c-name: "gtk_menu_item_select";
end;

define C-function gtk-menu-item-deselect
  input parameter arg1 :: <GtkMenuItem>;
  c-name: "gtk_menu_item_deselect";
end;

define C-function gtk-menu-item-activate
  input parameter arg1 :: <GtkMenuItem>;
  c-name: "gtk_menu_item_activate";
end;

define C-function gtk-menu-item-toggle-size-request
  input parameter arg1 :: <GtkMenuItem>;
  input parameter arg2 :: <gint*>;
  c-name: "gtk_menu_item_toggle_size_request";
end;

define C-function gtk-menu-item-toggle-size-allocate
  input parameter arg1 :: <GtkMenuItem>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_menu_item_toggle_size_allocate";
end;

define C-function gtk-menu-item-set-right-justified
  input parameter arg1 :: <GtkMenuItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_menu_item_set_right_justified";
end;

define C-function gtk-menu-item-get-right-justified
  input parameter arg1 :: <GtkMenuItem>;
  result res :: <gboolean>;
  c-name: "gtk_menu_item_get_right_justified";
end;

define C-function gtk-menu-item-set-accel-path
  input parameter arg1 :: <GtkMenuItem>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_menu_item_set_accel_path";
end;

define C-function gtk-item-get-type
  result res :: <GType>;
  c-name: "gtk_item_get_type";
end;

define C-function gtk-item-select
  input parameter arg1 :: <GtkItem>;
  c-name: "gtk_item_select";
end;

define C-function gtk-item-deselect
  input parameter arg1 :: <GtkItem>;
  c-name: "gtk_item_deselect";
end;

define C-function gtk-item-toggle
  input parameter arg1 :: <GtkItem>;
  c-name: "gtk_item_toggle";
end;

define C-subtype <_GtkToolButtonPrivate> (<C-void*>) end;
define constant <GtkToolButtonPrivate> = <_GtkToolButtonPrivate>;

define C-subtype <_GtkToolButton> (<_GtkToolItem>, <_AtkImplementorIface>) end;
define constant <GtkToolButton> = <_GtkToolButton>;

define constant <anonymous-6973> = <C-function-pointer>;
define constant <anonymous-6974> = <C-function-pointer>;
define constant <anonymous-6975> = <C-function-pointer>;
define constant <anonymous-6976> = <C-function-pointer>;
define constant <anonymous-6977> = <C-function-pointer>;
define C-subtype <_GtkToolButtonClass> (<C-void*>) end;
define constant <GtkToolButtonClass> = <_GtkToolButtonClass>;

define C-function gtk-tool-button-get-type
  result res :: <GType>;
  c-name: "gtk_tool_button_get_type";
end;

define C-function gtk-tool-button-new
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkToolItem>;
  c-name: "gtk_tool_button_new";
end;

define C-function gtk-tool-button-new-from-stock
  input parameter arg1 :: <gchar*>;
  result res :: <GtkToolItem>;
  c-name: "gtk_tool_button_new_from_stock";
end;

define C-function gtk-tool-button-set-label
  input parameter arg1 :: <GtkToolButton>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_tool_button_set_label";
end;

define C-function gtk-tool-button-get-label
  input parameter arg1 :: <GtkToolButton>;
  result res :: <gchar*>;
  c-name: "gtk_tool_button_get_label";
end;

define C-function gtk-tool-button-set-use-underline
  input parameter arg1 :: <GtkToolButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_tool_button_set_use_underline";
end;

define C-function gtk-tool-button-get-use-underline
  input parameter arg1 :: <GtkToolButton>;
  result res :: <gboolean>;
  c-name: "gtk_tool_button_get_use_underline";
end;

define C-function gtk-tool-button-set-stock-id
  input parameter arg1 :: <GtkToolButton>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_tool_button_set_stock_id";
end;

define C-function gtk-tool-button-get-stock-id
  input parameter arg1 :: <GtkToolButton>;
  result res :: <gchar*>;
  c-name: "gtk_tool_button_get_stock_id";
end;

define C-function gtk-tool-button-set-icon-name
  input parameter arg1 :: <GtkToolButton>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_tool_button_set_icon_name";
end;

define C-function gtk-tool-button-get-icon-name
  input parameter arg1 :: <GtkToolButton>;
  result res :: <gchar*>;
  c-name: "gtk_tool_button_get_icon_name";
end;

define C-function gtk-tool-button-set-icon-widget
  input parameter arg1 :: <GtkToolButton>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_tool_button_set_icon_widget";
end;

define C-function gtk-tool-button-get-icon-widget
  input parameter arg1 :: <GtkToolButton>;
  result res :: <GtkWidget>;
  c-name: "gtk_tool_button_get_icon_widget";
end;

define C-function gtk-tool-button-set-label-widget
  input parameter arg1 :: <GtkToolButton>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_tool_button_set_label_widget";
end;

define C-function gtk-tool-button-get-label-widget
  input parameter arg1 :: <GtkToolButton>;
  result res :: <GtkWidget>;
  c-name: "gtk_tool_button_get_label_widget";
end;

define constant <GtkToolbarChildType> = <C-int>;
define constant $GTK-TOOLBAR-CHILD-SPACE = 0;
define constant $GTK-TOOLBAR-CHILD-BUTTON = 1;
define constant $GTK-TOOLBAR-CHILD-TOGGLEBUTTON = 2;
define constant $GTK-TOOLBAR-CHILD-RADIOBUTTON = 3;
define constant $GTK-TOOLBAR-CHILD-WIDGET = 4;

define C-subtype <_GtkToolbarChild> (<C-void*>) end;
define constant <GtkToolbarChild> = <_GtkToolbarChild>;

define constant <GtkToolbarSpaceStyle> = <C-int>;
define constant $GTK-TOOLBAR-SPACE-EMPTY = 0;
define constant $GTK-TOOLBAR-SPACE-LINE = 1;

define C-subtype <_GtkToolbar> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkToolbar> = <_GtkToolbar>;

define constant <anonymous-8045> = <C-function-pointer>;
define constant <anonymous-8046> = <C-function-pointer>;
define constant <anonymous-8047> = <C-function-pointer>;
define constant <anonymous-8048> = <C-function-pointer>;
define constant <anonymous-8049> = <C-function-pointer>;
define constant <anonymous-8050> = <C-function-pointer>;
define C-subtype <_GtkToolbarClass> (<C-void*>) end;
define constant <GtkToolbarClass> = <_GtkToolbarClass>;

define C-subtype <_GtkToolbarPrivate> (<C-void*>) end;
define constant <GtkToolbarPrivate> = <_GtkToolbarPrivate>;

define C-function gtk-toolbar-get-type
  result res :: <GType>;
  c-name: "gtk_toolbar_get_type";
end;

define C-function gtk-toolbar-new
  result res :: <GtkWidget>;
  c-name: "gtk_toolbar_new";
end;

define C-function gtk-toolbar-insert
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkToolItem>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_toolbar_insert";
end;

define C-function gtk-toolbar-get-item-index
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkToolItem>;
  result res :: <gint>;
  c-name: "gtk_toolbar_get_item_index";
end;

define C-function gtk-toolbar-get-n-items
  input parameter arg1 :: <GtkToolbar>;
  result res :: <gint>;
  c-name: "gtk_toolbar_get_n_items";
end;

define C-function gtk-toolbar-get-nth-item
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <gint>;
  result res :: <GtkToolItem>;
  c-name: "gtk_toolbar_get_nth_item";
end;

define C-function gtk-toolbar-get-show-arrow
  input parameter arg1 :: <GtkToolbar>;
  result res :: <gboolean>;
  c-name: "gtk_toolbar_get_show_arrow";
end;

define C-function gtk-toolbar-set-show-arrow
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_toolbar_set_show_arrow";
end;

define C-function gtk-toolbar-get-orientation
  input parameter arg1 :: <GtkToolbar>;
  result res :: <GtkOrientation>;
  c-name: "gtk_toolbar_get_orientation";
end;

define C-function gtk-toolbar-set-orientation
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkOrientation>;
  c-name: "gtk_toolbar_set_orientation";
end;

define C-function gtk-toolbar-get-tooltips
  input parameter arg1 :: <GtkToolbar>;
  result res :: <gboolean>;
  c-name: "gtk_toolbar_get_tooltips";
end;

define C-function gtk-toolbar-set-tooltips
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_toolbar_set_tooltips";
end;

define C-function gtk-toolbar-get-style
  input parameter arg1 :: <GtkToolbar>;
  result res :: <GtkToolbarStyle>;
  c-name: "gtk_toolbar_get_style";
end;

define C-function gtk-toolbar-set-style
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkToolbarStyle>;
  c-name: "gtk_toolbar_set_style";
end;

define C-function gtk-toolbar-unset-style
  input parameter arg1 :: <GtkToolbar>;
  c-name: "gtk_toolbar_unset_style";
end;

define C-function gtk-toolbar-get-icon-size
  input parameter arg1 :: <GtkToolbar>;
  result res :: <GtkIconSize>;
  c-name: "gtk_toolbar_get_icon_size";
end;

define C-function gtk-toolbar-get-relief-style
  input parameter arg1 :: <GtkToolbar>;
  result res :: <GtkReliefStyle>;
  c-name: "gtk_toolbar_get_relief_style";
end;

define C-function gtk-toolbar-get-drop-index
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_toolbar_get_drop_index";
end;

define C-function gtk-toolbar-set-drop-highlight-item
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkToolItem>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_toolbar_set_drop_highlight_item";
end;

define C-function gtk-toolbar-set-icon-size
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkIconSize>;
  c-name: "gtk_toolbar_set_icon_size";
end;

define C-function gtk-toolbar-unset-icon-size
  input parameter arg1 :: <GtkToolbar>;
  c-name: "gtk_toolbar_unset_icon_size";
end;

define C-function gtk-toolbar-append-item
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <GtkSignalFunc>;
  input parameter arg7 :: <gpointer>;
  result res :: <GtkWidget>;
  c-name: "gtk_toolbar_append_item";
end;

define C-function gtk-toolbar-prepend-item
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <GtkSignalFunc>;
  input parameter arg7 :: <gpointer>;
  result res :: <GtkWidget>;
  c-name: "gtk_toolbar_prepend_item";
end;

define C-function gtk-toolbar-insert-item
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <GtkWidget>;
  input parameter arg6 :: <GtkSignalFunc>;
  input parameter arg7 :: <gpointer>;
  input parameter arg8 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_toolbar_insert_item";
end;

define C-function gtk-toolbar-insert-stock
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <GtkSignalFunc>;
  input parameter arg6 :: <gpointer>;
  input parameter arg7 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_toolbar_insert_stock";
end;

define C-function gtk-toolbar-append-space
  input parameter arg1 :: <GtkToolbar>;
  c-name: "gtk_toolbar_append_space";
end;

define C-function gtk-toolbar-prepend-space
  input parameter arg1 :: <GtkToolbar>;
  c-name: "gtk_toolbar_prepend_space";
end;

define C-function gtk-toolbar-insert-space
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_toolbar_insert_space";
end;

define C-function gtk-toolbar-remove-space
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_toolbar_remove_space";
end;

define C-function gtk-toolbar-append-element
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkToolbarChildType>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <char*>;
  input parameter arg6 :: <char*>;
  input parameter arg7 :: <GtkWidget>;
  input parameter arg8 :: <GtkSignalFunc>;
  input parameter arg9 :: <gpointer>;
  result res :: <GtkWidget>;
  c-name: "gtk_toolbar_append_element";
end;

define C-function gtk-toolbar-prepend-element
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkToolbarChildType>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <char*>;
  input parameter arg6 :: <char*>;
  input parameter arg7 :: <GtkWidget>;
  input parameter arg8 :: <GtkSignalFunc>;
  input parameter arg9 :: <gpointer>;
  result res :: <GtkWidget>;
  c-name: "gtk_toolbar_prepend_element";
end;

define C-function gtk-toolbar-insert-element
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkToolbarChildType>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <char*>;
  input parameter arg6 :: <char*>;
  input parameter arg7 :: <GtkWidget>;
  input parameter arg8 :: <GtkSignalFunc>;
  input parameter arg9 :: <gpointer>;
  input parameter arg10 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_toolbar_insert_element";
end;

define C-function gtk-toolbar-append-widget
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <char*>;
  c-name: "gtk_toolbar_append_widget";
end;

define C-function gtk-toolbar-prepend-widget
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <char*>;
  c-name: "gtk_toolbar_prepend_widget";
end;

define C-function gtk-toolbar-insert-widget
  input parameter arg1 :: <GtkToolbar>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <char*>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_toolbar_insert_widget";
end;

define C-pointer-type <GtkType*> => <GtkType>;
define C-function gtk-signal-newv
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkSignalRunType>;
  input parameter arg3 :: <GtkType>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <GtkSignalMarshaller>;
  input parameter arg6 :: <GtkType>;
  input parameter arg7 :: <guint>;
  input parameter arg8 :: <GtkType*>;
  result res :: <guint>;
  c-name: "gtk_signal_newv";
end;

define C-function gtk-signal-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkSignalRunType>;
  input parameter arg3 :: <GtkType>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <GtkSignalMarshaller>;
  input parameter arg6 :: <GtkType>;
  input parameter arg7 :: <guint>;
  result res :: <guint>;
  c-name: "gtk_signal_new";
end;

define C-function gtk-signal-emit-stop-by-name
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_signal_emit_stop_by_name";
end;

define C-function gtk-signal-connect-object-while-alive
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkSignalFunc>;
  input parameter arg4 :: <GtkObject>;
  c-name: "gtk_signal_connect_object_while_alive";
end;

define C-function gtk-signal-connect-while-alive
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkSignalFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GtkObject>;
  c-name: "gtk_signal_connect_while_alive";
end;

define C-function gtk-signal-connect-full
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkSignalFunc>;
  input parameter arg4 :: <GtkCallbackMarshal>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <GtkDestroyNotify>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  result res :: <gulong>;
  c-name: "gtk_signal_connect_full";
end;

define C-function gtk-signal-emitv
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GtkArg>;
  c-name: "gtk_signal_emitv";
end;

define C-function gtk-signal-emit
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_signal_emit";
end;

define C-function gtk-signal-emit-by-name
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_signal_emit_by_name";
end;

define C-function gtk-signal-emitv-by-name
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkArg>;
  c-name: "gtk_signal_emitv_by_name";
end;

define C-function gtk-signal-compat-matched
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GtkSignalFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GSignalMatchType>;
  input parameter arg5 :: <guint>;
  c-name: "gtk_signal_compat_matched";
end;

define constant gtk-signal-default-marshaller = g-cclosure-marshal-VOID--VOID;

define C-function gtk-marshal-BOOLEAN--VOID
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_BOOLEAN__VOID";
end;

define C-function gtk-marshal-BOOLEAN--POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_BOOLEAN__POINTER";
end;

define C-function gtk-marshal-BOOLEAN--POINTER-POINTER-INT-INT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT";
end;

define C-function gtk-marshal-BOOLEAN--POINTER-INT-INT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_BOOLEAN__POINTER_INT_INT";
end;

define C-function gtk-marshal-BOOLEAN--POINTER-INT-INT-UINT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT";
end;

define C-function gtk-marshal-BOOLEAN--POINTER-STRING-STRING-POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER";
end;

define C-function gtk-marshal-ENUM--ENUM
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_ENUM__ENUM";
end;

define C-function gtk-marshal-INT--POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_INT__POINTER";
end;

define C-function gtk-marshal-INT--POINTER-CHAR-CHAR
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_INT__POINTER_CHAR_CHAR";
end;

define C-function gtk-marshal-VOID--ENUM-FLOAT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__ENUM_FLOAT";
end;

define C-function gtk-marshal-VOID--ENUM-FLOAT-BOOLEAN
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN";
end;

define C-function gtk-marshal-VOID--INT-INT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__INT_INT";
end;

define C-function gtk-marshal-VOID--INT-INT-POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__INT_INT_POINTER";
end;

define C-function gtk-marshal-VOID--POINTER-INT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_INT";
end;

define C-function gtk-marshal-VOID--POINTER-POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_POINTER";
end;

define C-function gtk-marshal-VOID--POINTER-POINTER-POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_POINTER_POINTER";
end;

define C-function gtk-marshal-VOID--POINTER-STRING-STRING
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_STRING_STRING";
end;

define C-function gtk-marshal-VOID--POINTER-UINT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_UINT";
end;

define C-function gtk-marshal-VOID--POINTER-UINT-ENUM
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_UINT_ENUM";
end;

define C-function gtk-marshal-VOID--POINTER-POINTER-UINT-UINT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_POINTER_UINT_UINT";
end;

define C-function gtk-marshal-VOID--POINTER-INT-INT-POINTER-UINT-UINT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT";
end;

define C-function gtk-marshal-VOID--POINTER-UINT-UINT
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__POINTER_UINT_UINT";
end;

define C-function gtk-marshal-VOID--STRING-INT-POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__STRING_INT_POINTER";
end;

define C-function gtk-marshal-VOID--UINT-POINTER-UINT-ENUM-ENUM-POINTER
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER";
end;

define C-function gtk-marshal-VOID--UINT-POINTER-UINT-UINT-ENUM
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM";
end;

define C-function gtk-marshal-VOID--UINT-STRING
  input parameter arg1 :: <GClosure>;
  input parameter arg2 :: <GValue>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GValue>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <gpointer>;
  c-name: "gtk_marshal_VOID__UINT_STRING";
end;

define constant gtk-marshal-BOOL--NONE = gtk-marshal-BOOLEAN--VOID;

define constant gtk-marshal-BOOL--POINTER = gtk-marshal-BOOLEAN--POINTER;

define constant gtk-marshal-BOOL--POINTER-POINTER-INT-INT = gtk-marshal-BOOLEAN--POINTER-POINTER-INT-INT;

define constant gtk-marshal-BOOL--POINTER-INT-INT = gtk-marshal-BOOLEAN--POINTER-INT-INT;

define constant gtk-marshal-BOOL--POINTER-INT-INT-UINT = gtk-marshal-BOOLEAN--POINTER-INT-INT-UINT;

define constant gtk-marshal-BOOL--POINTER-STRING-STRING-POINTER = gtk-marshal-BOOLEAN--POINTER-STRING-STRING-POINTER;

define constant gtk-marshal-VOID--BOOLEAN = g-cclosure-marshal-VOID--BOOLEAN;

define constant gtk-marshal-NONE--BOOL = g-cclosure-marshal-VOID--BOOLEAN;

define constant gtk-marshal-VOID--BOXED = g-cclosure-marshal-VOID--BOXED;

define constant gtk-marshal-NONE--BOXED = g-cclosure-marshal-VOID--BOXED;

define constant gtk-marshal-VOID--ENUM = g-cclosure-marshal-VOID--ENUM;

define constant gtk-marshal-NONE--ENUM = g-cclosure-marshal-VOID--ENUM;

define constant gtk-marshal-NONE--ENUM-FLOAT = gtk-marshal-VOID--ENUM-FLOAT;

define constant gtk-marshal-NONE--ENUM-FLOAT-BOOL = gtk-marshal-VOID--ENUM-FLOAT-BOOLEAN;

define constant gtk-marshal-VOID--INT = g-cclosure-marshal-VOID--INT;

define constant gtk-marshal-NONE--INT = g-cclosure-marshal-VOID--INT;

define constant gtk-marshal-NONE--INT-INT = gtk-marshal-VOID--INT-INT;

define constant gtk-marshal-NONE--INT-INT-POINTER = gtk-marshal-VOID--INT-INT-POINTER;

define constant gtk-marshal-VOID--VOID = g-cclosure-marshal-VOID--VOID;

define constant gtk-marshal-NONE--NONE = g-cclosure-marshal-VOID--VOID;

define constant gtk-marshal-VOID--OBJECT = g-cclosure-marshal-VOID--OBJECT;

define constant gtk-marshal-NONE--OBJECT = g-cclosure-marshal-VOID--OBJECT;

define constant gtk-marshal-VOID--POINTER = g-cclosure-marshal-VOID--POINTER;

define constant gtk-marshal-NONE--POINTER = g-cclosure-marshal-VOID--POINTER;

define constant gtk-marshal-NONE--POINTER-INT = gtk-marshal-VOID--POINTER-INT;

define constant gtk-marshal-NONE--POINTER-POINTER = gtk-marshal-VOID--POINTER-POINTER;

define constant gtk-marshal-NONE--POINTER-POINTER-POINTER = gtk-marshal-VOID--POINTER-POINTER-POINTER;

define constant gtk-marshal-NONE--POINTER-STRING-STRING = gtk-marshal-VOID--POINTER-STRING-STRING;

define constant gtk-marshal-NONE--POINTER-UINT = gtk-marshal-VOID--POINTER-UINT;

define constant gtk-marshal-NONE--POINTER-UINT-ENUM = gtk-marshal-VOID--POINTER-UINT-ENUM;

define constant gtk-marshal-NONE--POINTER-POINTER-UINT-UINT = gtk-marshal-VOID--POINTER-POINTER-UINT-UINT;

define constant gtk-marshal-NONE--POINTER-INT-INT-POINTER-UINT-UINT = gtk-marshal-VOID--POINTER-INT-INT-POINTER-UINT-UINT;

define constant gtk-marshal-NONE--POINTER-UINT-UINT = gtk-marshal-VOID--POINTER-UINT-UINT;

define constant gtk-marshal-VOID--STRING = g-cclosure-marshal-VOID--STRING;

define constant gtk-marshal-NONE--STRING = g-cclosure-marshal-VOID--STRING;

define constant gtk-marshal-NONE--STRING-INT-POINTER = gtk-marshal-VOID--STRING-INT-POINTER;

define constant gtk-marshal-VOID--UINT = g-cclosure-marshal-VOID--UINT;

define constant gtk-marshal-NONE--UINT = g-cclosure-marshal-VOID--UINT;

define constant gtk-marshal-NONE--UINT-POINTER-UINT-ENUM-ENUM-POINTER = gtk-marshal-VOID--UINT-POINTER-UINT-ENUM-ENUM-POINTER;

define constant gtk-marshal-NONE--UINT-POINTER-UINT-UINT-ENUM = gtk-marshal-VOID--UINT-POINTER-UINT-UINT-ENUM;

define constant gtk-marshal-NONE--UINT-STRING = gtk-marshal-VOID--UINT-STRING;

define C-subtype <_GtkMisc> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkMisc> = <_GtkMisc>;

define C-subtype <_GtkPixmap> (<_GtkMisc>, <_AtkImplementorIface>) end;
define constant <GtkPixmap> = <_GtkPixmap>;

define C-subtype <_GtkMiscClass> (<C-void*>) end;
define constant <GtkMiscClass> = <_GtkMiscClass>;

define C-subtype <_GtkPixmapClass> (<C-void*>) end;
define constant <GtkPixmapClass> = <_GtkPixmapClass>;

define C-function gtk-pixmap-get-type
  result res :: <GtkType>;
  c-name: "gtk_pixmap_get_type";
end;

define C-function gtk-pixmap-new
  input parameter arg1 :: <GdkPixmap>;
  input parameter arg2 :: <GdkBitmap>;
  result res :: <GtkWidget>;
  c-name: "gtk_pixmap_new";
end;

define C-function gtk-pixmap-set
  input parameter arg1 :: <GtkPixmap>;
  input parameter arg2 :: <GdkPixmap>;
  input parameter arg3 :: <GdkBitmap>;
  c-name: "gtk_pixmap_set";
end;

define C-function gtk-pixmap-get
  input parameter arg1 :: <GtkPixmap>;
  input parameter arg2 :: <GdkPixmap*>;
  input parameter arg3 :: <GdkBitmap*>;
  c-name: "gtk_pixmap_get";
end;

define C-function gtk-pixmap-set-build-insensitive
  input parameter arg1 :: <GtkPixmap>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_pixmap_set_build_insensitive";
end;

define C-function gtk-misc-get-type
  result res :: <GType>;
  c-name: "gtk_misc_get_type";
end;

define C-function gtk-misc-set-alignment
  input parameter arg1 :: <GtkMisc>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  c-name: "gtk_misc_set_alignment";
end;

define C-pointer-type <gfloat*> => <gfloat>;
define C-function gtk-misc-get-alignment
  input parameter arg1 :: <GtkMisc>;
  input parameter arg2 :: <gfloat*>;
  input parameter arg3 :: <gfloat*>;
  c-name: "gtk_misc_get_alignment";
end;

define C-function gtk-misc-set-padding
  input parameter arg1 :: <GtkMisc>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_misc_set_padding";
end;

define C-function gtk-misc-get-padding
  input parameter arg1 :: <GtkMisc>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_misc_get_padding";
end;

define C-subtype <_GtkToggleToolButtonPrivate> (<C-void*>) end;
define constant <GtkToggleToolButtonPrivate> = <_GtkToggleToolButtonPrivate>;

define C-subtype <_GtkToggleToolButton> (<_GtkToolButton>, <_AtkImplementorIface>) end;
define constant <GtkToggleToolButton> = <_GtkToggleToolButton>;

define constant <anonymous-7467> = <C-function-pointer>;
define constant <anonymous-7468> = <C-function-pointer>;
define constant <anonymous-7469> = <C-function-pointer>;
define constant <anonymous-7470> = <C-function-pointer>;
define constant <anonymous-7471> = <C-function-pointer>;
define C-subtype <_GtkToggleToolButtonClass> (<C-void*>) end;
define constant <GtkToggleToolButtonClass> = <_GtkToggleToolButtonClass>;

define C-function gtk-toggle-tool-button-get-type
  result res :: <GType>;
  c-name: "gtk_toggle_tool_button_get_type";
end;

define C-function gtk-toggle-tool-button-new
  result res :: <GtkToolItem>;
  c-name: "gtk_toggle_tool_button_new";
end;

define C-function gtk-toggle-tool-button-new-from-stock
  input parameter arg1 :: <gchar*>;
  result res :: <GtkToolItem>;
  c-name: "gtk_toggle_tool_button_new_from_stock";
end;

define C-function gtk-toggle-tool-button-set-active
  input parameter arg1 :: <GtkToggleToolButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_toggle_tool_button_set_active";
end;

define C-function gtk-toggle-tool-button-get-active
  input parameter arg1 :: <GtkToggleToolButton>;
  result res :: <gboolean>;
  c-name: "gtk_toggle_tool_button_get_active";
end;

define C-subtype <_GtkButton> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkButton> = <_GtkButton>;

define C-subtype <_GtkToggleButton> (<_GtkButton>, <_AtkImplementorIface>) end;
define constant <GtkToggleButton> = <_GtkToggleButton>;

define constant <anonymous-4883> = <C-function-pointer>;
define constant <anonymous-4884> = <C-function-pointer>;
define constant <anonymous-4885> = <C-function-pointer>;
define constant <anonymous-4886> = <C-function-pointer>;
define constant <anonymous-4887> = <C-function-pointer>;
define constant <anonymous-4888> = <C-function-pointer>;
define constant <anonymous-4889> = <C-function-pointer>;
define constant <anonymous-4890> = <C-function-pointer>;
define constant <anonymous-4891> = <C-function-pointer>;
define constant <anonymous-4892> = <C-function-pointer>;
define C-subtype <_GtkButtonClass> (<C-void*>) end;
define constant <GtkButtonClass> = <_GtkButtonClass>;

define constant <anonymous-5267> = <C-function-pointer>;
define constant <anonymous-5268> = <C-function-pointer>;
define constant <anonymous-5269> = <C-function-pointer>;
define constant <anonymous-5270> = <C-function-pointer>;
define constant <anonymous-5271> = <C-function-pointer>;
define C-subtype <_GtkToggleButtonClass> (<C-void*>) end;
define constant <GtkToggleButtonClass> = <_GtkToggleButtonClass>;

define C-function gtk-toggle-button-get-type
  result res :: <GType>;
  c-name: "gtk_toggle_button_get_type";
end;

define C-function gtk-toggle-button-new
  result res :: <GtkWidget>;
  c-name: "gtk_toggle_button_new";
end;

define C-function gtk-toggle-button-new-with-label
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_toggle_button_new_with_label";
end;

define C-function gtk-toggle-button-new-with-mnemonic
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_toggle_button_new_with_mnemonic";
end;

define C-function gtk-toggle-button-set-mode
  input parameter arg1 :: <GtkToggleButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_toggle_button_set_mode";
end;

define C-function gtk-toggle-button-get-mode
  input parameter arg1 :: <GtkToggleButton>;
  result res :: <gboolean>;
  c-name: "gtk_toggle_button_get_mode";
end;

define C-function gtk-toggle-button-set-active
  input parameter arg1 :: <GtkToggleButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_toggle_button_set_active";
end;

define C-function gtk-toggle-button-get-active
  input parameter arg1 :: <GtkToggleButton>;
  result res :: <gboolean>;
  c-name: "gtk_toggle_button_get_active";
end;

define C-function gtk-toggle-button-toggled
  input parameter arg1 :: <GtkToggleButton>;
  c-name: "gtk_toggle_button_toggled";
end;

define C-function gtk-toggle-button-set-inconsistent
  input parameter arg1 :: <GtkToggleButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_toggle_button_set_inconsistent";
end;

define C-function gtk-toggle-button-get-inconsistent
  input parameter arg1 :: <GtkToggleButton>;
  result res :: <gboolean>;
  c-name: "gtk_toggle_button_get_inconsistent";
end;

define constant gtk-toggle-button-set-state = gtk-toggle-button-set-active;

define C-function gtk-button-get-type
  result res :: <GType>;
  c-name: "gtk_button_get_type";
end;

define C-function gtk-button-new
  result res :: <GtkWidget>;
  c-name: "gtk_button_new";
end;

define C-function gtk-button-new-with-label
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_button_new_with_label";
end;

define C-function gtk-button-new-from-stock
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_button_new_from_stock";
end;

define C-function gtk-button-new-with-mnemonic
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_button_new_with_mnemonic";
end;

define C-function gtk-button-pressed
  input parameter arg1 :: <GtkButton>;
  c-name: "gtk_button_pressed";
end;

define C-function gtk-button-released
  input parameter arg1 :: <GtkButton>;
  c-name: "gtk_button_released";
end;

define C-function gtk-button-clicked
  input parameter arg1 :: <GtkButton>;
  c-name: "gtk_button_clicked";
end;

define C-function gtk-button-enter
  input parameter arg1 :: <GtkButton>;
  c-name: "gtk_button_enter";
end;

define C-function gtk-button-leave
  input parameter arg1 :: <GtkButton>;
  c-name: "gtk_button_leave";
end;

define C-function gtk-button-set-relief
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <GtkReliefStyle>;
  c-name: "gtk_button_set_relief";
end;

define C-function gtk-button-get-relief
  input parameter arg1 :: <GtkButton>;
  result res :: <GtkReliefStyle>;
  c-name: "gtk_button_get_relief";
end;

define C-function gtk-button-set-label
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_button_set_label";
end;

define C-function gtk-button-get-label
  input parameter arg1 :: <GtkButton>;
  result res :: <gchar*>;
  c-name: "gtk_button_get_label";
end;

define C-function gtk-button-set-use-underline
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_button_set_use_underline";
end;

define C-function gtk-button-get-use-underline
  input parameter arg1 :: <GtkButton>;
  result res :: <gboolean>;
  c-name: "gtk_button_get_use_underline";
end;

define C-function gtk-button-set-use-stock
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_button_set_use_stock";
end;

define C-function gtk-button-get-use-stock
  input parameter arg1 :: <GtkButton>;
  result res :: <gboolean>;
  c-name: "gtk_button_get_use_stock";
end;

define C-function gtk-button-set-focus-on-click
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_button_set_focus_on_click";
end;

define C-function gtk-button-get-focus-on-click
  input parameter arg1 :: <GtkButton>;
  result res :: <gboolean>;
  c-name: "gtk_button_get_focus_on_click";
end;

define C-function gtk-button-set-alignment
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  c-name: "gtk_button_set_alignment";
end;

define C-function gtk-button-get-alignment
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <gfloat*>;
  input parameter arg3 :: <gfloat*>;
  c-name: "gtk_button_get_alignment";
end;

define C-function gtk-button-set-image
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_button_set_image";
end;

define C-function gtk-button-get-image
  input parameter arg1 :: <GtkButton>;
  result res :: <GtkWidget>;
  c-name: "gtk_button_get_image";
end;

define C-function gtk-button-set-image-position
  input parameter arg1 :: <GtkButton>;
  input parameter arg2 :: <GtkPositionType>;
  c-name: "gtk_button_set_image_position";
end;

define C-function gtk-button-get-image-position
  input parameter arg1 :: <GtkButton>;
  result res :: <GtkPositionType>;
  c-name: "gtk_button_get_image_position";
end;

define constant <GtkImageType> = <C-int>;
define constant $GTK-IMAGE-EMPTY = 0;
define constant $GTK-IMAGE-PIXMAP = 1;
define constant $GTK-IMAGE-IMAGE = 2;
define constant $GTK-IMAGE-PIXBUF = 3;
define constant $GTK-IMAGE-STOCK = 4;
define constant $GTK-IMAGE-ICON-SET = 5;
define constant $GTK-IMAGE-ANIMATION = 6;
define constant $GTK-IMAGE-ICON-NAME = 7;

define C-subtype <_GtkImagePixmapData> (<C-void*>) end;
define constant <GtkImagePixmapData> = <_GtkImagePixmapData>;

define C-subtype <_GtkImageImageData> (<C-void*>) end;
define constant <GtkImageImageData> = <_GtkImageImageData>;

define C-subtype <_GtkImagePixbufData> (<C-void*>) end;
define constant <GtkImagePixbufData> = <_GtkImagePixbufData>;

define C-subtype <_GtkImageStockData> (<C-void*>) end;
define constant <GtkImageStockData> = <_GtkImageStockData>;

define C-subtype <_GtkImageIconSetData> (<C-void*>) end;
define constant <GtkImageIconSetData> = <_GtkImageIconSetData>;

define C-subtype <_GtkImageAnimationData> (<C-void*>) end;
define constant <GtkImageAnimationData> = <_GtkImageAnimationData>;

define C-subtype <_GtkImageIconNameData> (<C-void*>) end;
define constant <GtkImageIconNameData> = <_GtkImageIconNameData>;

define C-subtype <anonymous-4838> (<C-void*>) end;
define C-subtype <_GtkImage> (<_GtkMisc>, <_AtkImplementorIface>) end;
define constant <GtkImage> = <_GtkImage>;

define constant <anonymous-4839> = <C-function-pointer>;
define constant <anonymous-4840> = <C-function-pointer>;
define constant <anonymous-4841> = <C-function-pointer>;
define constant <anonymous-4842> = <C-function-pointer>;
define C-subtype <_GtkImageClass> (<C-void*>) end;
define constant <GtkImageClass> = <_GtkImageClass>;

define C-function gtk-image-get-type
  result res :: <GType>;
  c-name: "gtk_image_get_type";
end;

define C-function gtk-image-new
  result res :: <GtkWidget>;
  c-name: "gtk_image_new";
end;

define C-function gtk-image-new-from-pixmap
  input parameter arg1 :: <GdkPixmap>;
  input parameter arg2 :: <GdkBitmap>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_new_from_pixmap";
end;

define C-function gtk-image-new-from-image
  input parameter arg1 :: <GdkImage>;
  input parameter arg2 :: <GdkBitmap>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_new_from_image";
end;

define C-function gtk-image-new-from-file-utf8
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_new_from_file_utf8";
end;

define C-function gtk-image-new-from-pixbuf
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_new_from_pixbuf";
end;

define C-function gtk-image-new-from-stock
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkIconSize>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_new_from_stock";
end;

define C-function gtk-image-new-from-icon-set
  input parameter arg1 :: <GtkIconSet>;
  input parameter arg2 :: <GtkIconSize>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_new_from_icon_set";
end;

define C-function gtk-image-new-from-animation
  input parameter arg1 :: <GdkPixbufAnimation>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_new_from_animation";
end;

define C-function gtk-image-new-from-icon-name
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkIconSize>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_new_from_icon_name";
end;

define C-function gtk-image-clear
  input parameter arg1 :: <GtkImage>;
  c-name: "gtk_image_clear";
end;

define C-function gtk-image-set-from-pixmap
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GdkPixmap>;
  input parameter arg3 :: <GdkBitmap>;
  c-name: "gtk_image_set_from_pixmap";
end;

define C-function gtk-image-set-from-image
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GdkImage>;
  input parameter arg3 :: <GdkBitmap>;
  c-name: "gtk_image_set_from_image";
end;

define C-function gtk-image-set-from-file-utf8
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_image_set_from_file_utf8";
end;

define C-function gtk-image-set-from-pixbuf
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GdkPixbuf>;
  c-name: "gtk_image_set_from_pixbuf";
end;

define C-function gtk-image-set-from-stock
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkIconSize>;
  c-name: "gtk_image_set_from_stock";
end;

define C-function gtk-image-set-from-icon-set
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GtkIconSet>;
  input parameter arg3 :: <GtkIconSize>;
  c-name: "gtk_image_set_from_icon_set";
end;

define C-function gtk-image-set-from-animation
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GdkPixbufAnimation>;
  c-name: "gtk_image_set_from_animation";
end;

define C-function gtk-image-set-from-icon-name
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkIconSize>;
  c-name: "gtk_image_set_from_icon_name";
end;

define C-function gtk-image-set-pixel-size
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_image_set_pixel_size";
end;

define C-function gtk-image-get-storage-type
  input parameter arg1 :: <GtkImage>;
  result res :: <GtkImageType>;
  c-name: "gtk_image_get_storage_type";
end;

define C-function gtk-image-get-pixmap
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GdkPixmap*>;
  input parameter arg3 :: <GdkBitmap*>;
  c-name: "gtk_image_get_pixmap";
end;

define C-pointer-type <GdkImage*> => <GdkImage>;
define C-function gtk-image-get-image
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GdkImage*>;
  input parameter arg3 :: <GdkBitmap*>;
  c-name: "gtk_image_get_image";
end;

define C-function gtk-image-get-pixbuf
  input parameter arg1 :: <GtkImage>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_image_get_pixbuf";
end;

define C-pointer-type <GtkIconSize*> => <GtkIconSize>;
define C-function gtk-image-get-stock
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <GtkIconSize*>;
  c-name: "gtk_image_get_stock";
end;

define C-pointer-type <GtkIconSet*> => <GtkIconSet>;
define C-function gtk-image-get-icon-set
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GtkIconSet*>;
  input parameter arg3 :: <GtkIconSize*>;
  c-name: "gtk_image_get_icon_set";
end;

define C-function gtk-image-get-animation
  input parameter arg1 :: <GtkImage>;
  result res :: <GdkPixbufAnimation>;
  c-name: "gtk_image_get_animation";
end;

define C-function gtk-image-get-icon-name
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <gchar**>;
  input parameter arg3 :: <GtkIconSize*>;
  c-name: "gtk_image_get_icon_name";
end;

define C-function gtk-image-get-pixel-size
  input parameter arg1 :: <GtkImage>;
  result res :: <gint>;
  c-name: "gtk_image_get_pixel_size";
end;

define C-function gtk-image-set
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GdkImage>;
  input parameter arg3 :: <GdkBitmap>;
  c-name: "gtk_image_set";
end;

define C-function gtk-image-get
  input parameter arg1 :: <GtkImage>;
  input parameter arg2 :: <GdkImage*>;
  input parameter arg3 :: <GdkBitmap*>;
  c-name: "gtk_image_get";
end;

define constant gtk-image-new-from-file = gtk-image-new-from-file-utf8;

define constant gtk-image-set-from-file = gtk-image-set-from-file-utf8;

define C-subtype <_GtkToggleActionPrivate> (<C-void*>) end;
define constant <GtkToggleActionPrivate> = <_GtkToggleActionPrivate>;

define C-subtype <_GtkToggleAction> (<_GtkAction>) end;
define constant <GtkToggleAction> = <_GtkToggleAction>;

define constant <anonymous-7418> = <C-function-pointer>;
define constant <anonymous-7419> = <C-function-pointer>;
define constant <anonymous-7420> = <C-function-pointer>;
define constant <anonymous-7421> = <C-function-pointer>;
define constant <anonymous-7422> = <C-function-pointer>;
define C-subtype <_GtkToggleActionClass> (<C-void*>) end;
define constant <GtkToggleActionClass> = <_GtkToggleActionClass>;

define C-function gtk-toggle-action-get-type
  result res :: <GType>;
  c-name: "gtk_toggle_action_get_type";
end;

define C-function gtk-toggle-action-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  result res :: <GtkToggleAction>;
  c-name: "gtk_toggle_action_new";
end;

define C-function gtk-toggle-action-toggled
  input parameter arg1 :: <GtkToggleAction>;
  c-name: "gtk_toggle_action_toggled";
end;

define C-function gtk-toggle-action-set-active
  input parameter arg1 :: <GtkToggleAction>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_toggle_action_set_active";
end;

define C-function gtk-toggle-action-get-active
  input parameter arg1 :: <GtkToggleAction>;
  result res :: <gboolean>;
  c-name: "gtk_toggle_action_get_active";
end;

define C-function gtk-toggle-action-set-draw-as-radio
  input parameter arg1 :: <GtkToggleAction>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_toggle_action_set_draw_as_radio";
end;

define C-function gtk-toggle-action-get-draw-as-radio
  input parameter arg1 :: <GtkToggleAction>;
  result res :: <gboolean>;
  c-name: "gtk_toggle_action_get_draw_as_radio";
end;

define C-subtype <_GtkLabelSelectionInfo> (<C-void*>) end;
define constant <GtkLabelSelectionInfo> = <_GtkLabelSelectionInfo>;

define C-subtype <_GtkLabel> (<_GtkMisc>, <_AtkImplementorIface>) end;
define constant <GtkLabel> = <_GtkLabel>;

define C-subtype <_GtkTipsQuery> (<_GtkLabel>, <_AtkImplementorIface>) end;
define constant <GtkTipsQuery> = <_GtkTipsQuery>;

define constant <anonymous-4199> = <C-function-pointer>;
define constant <anonymous-4200> = <C-function-pointer>;
define constant <anonymous-4201> = <C-function-pointer>;
define constant <anonymous-4202> = <C-function-pointer>;
define constant <anonymous-4203> = <C-function-pointer>;
define constant <anonymous-4204> = <C-function-pointer>;
define constant <anonymous-4205> = <C-function-pointer>;
define C-subtype <_GtkLabelClass> (<C-void*>) end;
define constant <GtkLabelClass> = <_GtkLabelClass>;

define constant <anonymous-8027> = <C-function-pointer>;
define constant <anonymous-8028> = <C-function-pointer>;
define constant <anonymous-8029> = <C-function-pointer>;
define constant <anonymous-8030> = <C-function-pointer>;
define constant <anonymous-8031> = <C-function-pointer>;
define constant <anonymous-8032> = <C-function-pointer>;
define constant <anonymous-8033> = <C-function-pointer>;
define constant <anonymous-8034> = <C-function-pointer>;
define C-subtype <_GtkTipsQueryClass> (<C-void*>) end;
define constant <GtkTipsQueryClass> = <_GtkTipsQueryClass>;

define C-function gtk-tips-query-get-type
  result res :: <GtkType>;
  c-name: "gtk_tips_query_get_type";
end;

define C-function gtk-tips-query-new
  result res :: <GtkWidget>;
  c-name: "gtk_tips_query_new";
end;

define C-function gtk-tips-query-start-query
  input parameter arg1 :: <GtkTipsQuery>;
  c-name: "gtk_tips_query_start_query";
end;

define C-function gtk-tips-query-stop-query
  input parameter arg1 :: <GtkTipsQuery>;
  c-name: "gtk_tips_query_stop_query";
end;

define C-function gtk-tips-query-set-caller
  input parameter arg1 :: <GtkTipsQuery>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_tips_query_set_caller";
end;

define C-function gtk-tips-query-set-labels
  input parameter arg1 :: <GtkTipsQuery>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_tips_query_set_labels";
end;

define C-function gtk-label-get-type
  result res :: <GType>;
  c-name: "gtk_label_get_type";
end;

define C-function gtk-label-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_label_new";
end;

define C-function gtk-label-new-with-mnemonic
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_label_new_with_mnemonic";
end;

define C-function gtk-label-set-text
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_label_set_text";
end;

define C-function gtk-label-get-text
  input parameter arg1 :: <GtkLabel>;
  result res :: <gchar*>;
  c-name: "gtk_label_get_text";
end;

define C-function gtk-label-set-attributes
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <PangoAttrList>;
  c-name: "gtk_label_set_attributes";
end;

define C-function gtk-label-get-attributes
  input parameter arg1 :: <GtkLabel>;
  result res :: <PangoAttrList>;
  c-name: "gtk_label_get_attributes";
end;

define C-function gtk-label-set-label
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_label_set_label";
end;

define C-function gtk-label-get-label
  input parameter arg1 :: <GtkLabel>;
  result res :: <gchar*>;
  c-name: "gtk_label_get_label";
end;

define C-function gtk-label-set-markup
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_label_set_markup";
end;

define C-function gtk-label-set-use-markup
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_label_set_use_markup";
end;

define C-function gtk-label-get-use-markup
  input parameter arg1 :: <GtkLabel>;
  result res :: <gboolean>;
  c-name: "gtk_label_get_use_markup";
end;

define C-function gtk-label-set-use-underline
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_label_set_use_underline";
end;

define C-function gtk-label-get-use-underline
  input parameter arg1 :: <GtkLabel>;
  result res :: <gboolean>;
  c-name: "gtk_label_get_use_underline";
end;

define C-function gtk-label-set-markup-with-mnemonic
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_label_set_markup_with_mnemonic";
end;

define C-function gtk-label-get-mnemonic-keyval
  input parameter arg1 :: <GtkLabel>;
  result res :: <guint>;
  c-name: "gtk_label_get_mnemonic_keyval";
end;

define C-function gtk-label-set-mnemonic-widget
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_label_set_mnemonic_widget";
end;

define C-function gtk-label-get-mnemonic-widget
  input parameter arg1 :: <GtkLabel>;
  result res :: <GtkWidget>;
  c-name: "gtk_label_get_mnemonic_widget";
end;

define C-function gtk-label-set-text-with-mnemonic
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_label_set_text_with_mnemonic";
end;

define C-function gtk-label-set-justify
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <GtkJustification>;
  c-name: "gtk_label_set_justify";
end;

define C-function gtk-label-get-justify
  input parameter arg1 :: <GtkLabel>;
  result res :: <GtkJustification>;
  c-name: "gtk_label_get_justify";
end;

define C-function gtk-label-set-ellipsize
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <PangoEllipsizeMode>;
  c-name: "gtk_label_set_ellipsize";
end;

define C-function gtk-label-get-ellipsize
  input parameter arg1 :: <GtkLabel>;
  result res :: <PangoEllipsizeMode>;
  c-name: "gtk_label_get_ellipsize";
end;

define C-function gtk-label-set-width-chars
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_label_set_width_chars";
end;

define C-function gtk-label-get-width-chars
  input parameter arg1 :: <GtkLabel>;
  result res :: <gint>;
  c-name: "gtk_label_get_width_chars";
end;

define C-function gtk-label-set-max-width-chars
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_label_set_max_width_chars";
end;

define C-function gtk-label-get-max-width-chars
  input parameter arg1 :: <GtkLabel>;
  result res :: <gint>;
  c-name: "gtk_label_get_max_width_chars";
end;

define C-function gtk-label-set-pattern
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_label_set_pattern";
end;

define C-function gtk-label-set-line-wrap
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_label_set_line_wrap";
end;

define C-function gtk-label-get-line-wrap
  input parameter arg1 :: <GtkLabel>;
  result res :: <gboolean>;
  c-name: "gtk_label_get_line_wrap";
end;

define C-function gtk-label-set-line-wrap-mode
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <PangoWrapMode>;
  c-name: "gtk_label_set_line_wrap_mode";
end;

define C-function gtk-label-get-line-wrap-mode
  input parameter arg1 :: <GtkLabel>;
  result res :: <PangoWrapMode>;
  c-name: "gtk_label_get_line_wrap_mode";
end;

define C-function gtk-label-set-selectable
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_label_set_selectable";
end;

define C-function gtk-label-get-selectable
  input parameter arg1 :: <GtkLabel>;
  result res :: <gboolean>;
  c-name: "gtk_label_get_selectable";
end;

define C-function gtk-label-set-angle
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_label_set_angle";
end;

define C-function gtk-label-get-angle
  input parameter arg1 :: <GtkLabel>;
  result res :: <gdouble>;
  c-name: "gtk_label_get_angle";
end;

define C-function gtk-label-select-region
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_label_select_region";
end;

define C-function gtk-label-get-selection-bounds
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_label_get_selection_bounds";
end;

define C-function gtk-label-get-layout
  input parameter arg1 :: <GtkLabel>;
  result res :: <PangoLayout>;
  c-name: "gtk_label_get_layout";
end;

define C-function gtk-label-get-layout-offsets
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_label_get_layout_offsets";
end;

define C-function gtk-label-set-single-line-mode
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_label_set_single_line_mode";
end;

define C-function gtk-label-get-single-line-mode
  input parameter arg1 :: <GtkLabel>;
  result res :: <gboolean>;
  c-name: "gtk_label_get_single_line_mode";
end;

define C-function gtk-label-get
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gchar**>;
  c-name: "gtk_label_get";
end;

define C-function gtk-label-parse-uline
  input parameter arg1 :: <GtkLabel>;
  input parameter arg2 :: <gchar*>;
  result res :: <guint>;
  c-name: "gtk_label_parse_uline";
end;

define constant gtk-label-set = gtk-label-set-text;

define constant <GtkTextWindowType> = <C-int>;
define constant $GTK-TEXT-WINDOW-PRIVATE = 0;
define constant $GTK-TEXT-WINDOW-WIDGET = 1;
define constant $GTK-TEXT-WINDOW-TEXT = 2;
define constant $GTK-TEXT-WINDOW-LEFT = 3;
define constant $GTK-TEXT-WINDOW-RIGHT = 4;
define constant $GTK-TEXT-WINDOW-TOP = 5;
define constant $GTK-TEXT-WINDOW-BOTTOM = 6;

define C-subtype <_GtkTextLayout> (<C-void*>) end;
define C-subtype <_GtkTextWindow> (<C-void*>) end;
define constant <GtkTextWindow> = <_GtkTextWindow>;

define C-subtype <_GtkTextMark> (<_GObject>) end;
define constant <GtkTextMark> = <_GtkTextMark>;

define C-subtype <_GtkTextPendingScroll> (<C-void*>) end;
define constant <GtkTextPendingScroll> = <_GtkTextPendingScroll>;

define C-subtype <_GtkTextView> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkTextView> = <_GtkTextView>;

define constant <anonymous-7947> = <C-function-pointer>;
define constant <anonymous-7948> = <C-function-pointer>;
define constant <anonymous-7949> = <C-function-pointer>;
define constant <anonymous-7950> = <C-function-pointer>;
define constant <anonymous-7951> = <C-function-pointer>;
define constant <anonymous-7952> = <C-function-pointer>;
define constant <anonymous-7953> = <C-function-pointer>;
define constant <anonymous-7954> = <C-function-pointer>;
define constant <anonymous-7955> = <C-function-pointer>;
define constant <anonymous-7956> = <C-function-pointer>;
define constant <anonymous-7957> = <C-function-pointer>;
define constant <anonymous-7958> = <C-function-pointer>;
define constant <anonymous-7959> = <C-function-pointer>;
define constant <anonymous-7960> = <C-function-pointer>;
define constant <anonymous-7961> = <C-function-pointer>;
define constant <anonymous-7962> = <C-function-pointer>;
define constant <anonymous-7963> = <C-function-pointer>;
define constant <anonymous-7964> = <C-function-pointer>;
define constant <anonymous-7965> = <C-function-pointer>;
define constant <anonymous-7966> = <C-function-pointer>;
define C-subtype <_GtkTextViewClass> (<C-void*>) end;
define constant <GtkTextViewClass> = <_GtkTextViewClass>;

define C-function gtk-text-view-get-type
  result res :: <GType>;
  c-name: "gtk_text_view_get_type";
end;

define C-function gtk-text-view-new
  result res :: <GtkWidget>;
  c-name: "gtk_text_view_new";
end;

define C-function gtk-text-view-new-with-buffer
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <GtkWidget>;
  c-name: "gtk_text_view_new_with_buffer";
end;

define C-function gtk-text-view-set-buffer
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextBuffer>;
  c-name: "gtk_text_view_set_buffer";
end;

define C-function gtk-text-view-get-buffer
  input parameter arg1 :: <GtkTextView>;
  result res :: <GtkTextBuffer>;
  c-name: "gtk_text_view_get_buffer";
end;

define C-function gtk-text-view-scroll-to-iter
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <gdouble>;
  input parameter arg6 :: <gdouble>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_scroll_to_iter";
end;

define C-function gtk-text-view-scroll-to-mark
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextMark>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <gdouble>;
  input parameter arg6 :: <gdouble>;
  c-name: "gtk_text_view_scroll_to_mark";
end;

define C-function gtk-text-view-scroll-mark-onscreen
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextMark>;
  c-name: "gtk_text_view_scroll_mark_onscreen";
end;

define C-function gtk-text-view-move-mark-onscreen
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextMark>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_move_mark_onscreen";
end;

define C-function gtk-text-view-place-cursor-onscreen
  input parameter arg1 :: <GtkTextView>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_place_cursor_onscreen";
end;

define C-function gtk-text-view-get-visible-rect
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GdkRectangle>;
  c-name: "gtk_text_view_get_visible_rect";
end;

define C-function gtk-text-view-set-cursor-visible
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_text_view_set_cursor_visible";
end;

define C-function gtk-text-view-get-cursor-visible
  input parameter arg1 :: <GtkTextView>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_get_cursor_visible";
end;

define C-function gtk-text-view-get-iter-location
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GdkRectangle>;
  c-name: "gtk_text_view_get_iter_location";
end;

define C-function gtk-text-view-get-iter-at-location
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_text_view_get_iter_at_location";
end;

define C-function gtk-text-view-get-iter-at-position
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_text_view_get_iter_at_position";
end;

define C-function gtk-text-view-get-line-yrange
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  c-name: "gtk_text_view_get_line_yrange";
end;

define C-function gtk-text-view-get-line-at-y
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  c-name: "gtk_text_view_get_line_at_y";
end;

define C-function gtk-text-view-buffer-to-window-coords
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextWindowType>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  c-name: "gtk_text_view_buffer_to_window_coords";
end;

define C-function gtk-text-view-window-to-buffer-coords
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextWindowType>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  c-name: "gtk_text_view_window_to_buffer_coords";
end;

define C-function gtk-text-view-get-window
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextWindowType>;
  result res :: <GdkWindow>;
  c-name: "gtk_text_view_get_window";
end;

define C-function gtk-text-view-get-window-type
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GdkWindow>;
  result res :: <GtkTextWindowType>;
  c-name: "gtk_text_view_get_window_type";
end;

define C-function gtk-text-view-set-border-window-size
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextWindowType>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_text_view_set_border_window_size";
end;

define C-function gtk-text-view-get-border-window-size
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextWindowType>;
  result res :: <gint>;
  c-name: "gtk_text_view_get_border_window_size";
end;

define C-function gtk-text-view-forward-display-line
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_forward_display_line";
end;

define C-function gtk-text-view-backward-display-line
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_backward_display_line";
end;

define C-function gtk-text-view-forward-display-line-end
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_forward_display_line_end";
end;

define C-function gtk-text-view-backward-display-line-start
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_backward_display_line_start";
end;

define C-function gtk-text-view-starts-display-line
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_starts_display_line";
end;

define C-function gtk-text-view-move-visually
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_move_visually";
end;

define C-function gtk-text-view-add-child-at-anchor
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkTextChildAnchor>;
  c-name: "gtk_text_view_add_child_at_anchor";
end;

define C-function gtk-text-view-add-child-in-window
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkTextWindowType>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_text_view_add_child_in_window";
end;

define C-function gtk-text-view-move-child
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_text_view_move_child";
end;

define C-function gtk-text-view-set-wrap-mode
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkWrapMode>;
  c-name: "gtk_text_view_set_wrap_mode";
end;

define C-function gtk-text-view-get-wrap-mode
  input parameter arg1 :: <GtkTextView>;
  result res :: <GtkWrapMode>;
  c-name: "gtk_text_view_get_wrap_mode";
end;

define C-function gtk-text-view-set-editable
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_text_view_set_editable";
end;

define C-function gtk-text-view-get-editable
  input parameter arg1 :: <GtkTextView>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_get_editable";
end;

define C-function gtk-text-view-set-overwrite
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_text_view_set_overwrite";
end;

define C-function gtk-text-view-get-overwrite
  input parameter arg1 :: <GtkTextView>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_get_overwrite";
end;

define C-function gtk-text-view-set-accepts-tab
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_text_view_set_accepts_tab";
end;

define C-function gtk-text-view-get-accepts-tab
  input parameter arg1 :: <GtkTextView>;
  result res :: <gboolean>;
  c-name: "gtk_text_view_get_accepts_tab";
end;

define C-function gtk-text-view-set-pixels-above-lines
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_view_set_pixels_above_lines";
end;

define C-function gtk-text-view-get-pixels-above-lines
  input parameter arg1 :: <GtkTextView>;
  result res :: <gint>;
  c-name: "gtk_text_view_get_pixels_above_lines";
end;

define C-function gtk-text-view-set-pixels-below-lines
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_view_set_pixels_below_lines";
end;

define C-function gtk-text-view-get-pixels-below-lines
  input parameter arg1 :: <GtkTextView>;
  result res :: <gint>;
  c-name: "gtk_text_view_get_pixels_below_lines";
end;

define C-function gtk-text-view-set-pixels-inside-wrap
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_view_set_pixels_inside_wrap";
end;

define C-function gtk-text-view-get-pixels-inside-wrap
  input parameter arg1 :: <GtkTextView>;
  result res :: <gint>;
  c-name: "gtk_text_view_get_pixels_inside_wrap";
end;

define C-function gtk-text-view-set-justification
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <GtkJustification>;
  c-name: "gtk_text_view_set_justification";
end;

define C-function gtk-text-view-get-justification
  input parameter arg1 :: <GtkTextView>;
  result res :: <GtkJustification>;
  c-name: "gtk_text_view_get_justification";
end;

define C-function gtk-text-view-set-left-margin
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_view_set_left_margin";
end;

define C-function gtk-text-view-get-left-margin
  input parameter arg1 :: <GtkTextView>;
  result res :: <gint>;
  c-name: "gtk_text_view_get_left_margin";
end;

define C-function gtk-text-view-set-right-margin
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_view_set_right_margin";
end;

define C-function gtk-text-view-get-right-margin
  input parameter arg1 :: <GtkTextView>;
  result res :: <gint>;
  c-name: "gtk_text_view_get_right_margin";
end;

define C-function gtk-text-view-set-indent
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_text_view_set_indent";
end;

define C-function gtk-text-view-get-indent
  input parameter arg1 :: <GtkTextView>;
  result res :: <gint>;
  c-name: "gtk_text_view_get_indent";
end;

define C-function gtk-text-view-set-tabs
  input parameter arg1 :: <GtkTextView>;
  input parameter arg2 :: <PangoTabArray>;
  c-name: "gtk_text_view_set_tabs";
end;

define C-function gtk-text-view-get-tabs
  input parameter arg1 :: <GtkTextView>;
  result res :: <PangoTabArray>;
  c-name: "gtk_text_view_get_tabs";
end;

define C-function gtk-text-view-get-default-attributes
  input parameter arg1 :: <GtkTextView>;
  result res :: <GtkTextAttributes>;
  c-name: "gtk_text_view_get_default_attributes";
end;

define constant $GTK-TEXT-VIEW-PRIORITY-VALIDATE = 125;

define constant <GtkTextBufferTargetInfo> = <C-int>;
define constant $GTK-TEXT-BUFFER-TARGET-INFO-BUFFER-CONTENTS = -1;
define constant $GTK-TEXT-BUFFER-TARGET-INFO-RICH-TEXT = -2;
define constant $GTK-TEXT-BUFFER-TARGET-INFO-TEXT = -3;

define constant <anonymous-7841> = <C-function-pointer>;
define constant <anonymous-7842> = <C-function-pointer>;
define constant <anonymous-7843> = <C-function-pointer>;
define constant <anonymous-7844> = <C-function-pointer>;
define constant <anonymous-7845> = <C-function-pointer>;
define constant <anonymous-7846> = <C-function-pointer>;
define constant <anonymous-7847> = <C-function-pointer>;
define constant <anonymous-7848> = <C-function-pointer>;
define constant <anonymous-7849> = <C-function-pointer>;
define constant <anonymous-7850> = <C-function-pointer>;
define constant <anonymous-7851> = <C-function-pointer>;
define constant <anonymous-7852> = <C-function-pointer>;
define constant <anonymous-7853> = <C-function-pointer>;
define constant <anonymous-7854> = <C-function-pointer>;
define constant <anonymous-7855> = <C-function-pointer>;
define constant <anonymous-7856> = <C-function-pointer>;
define constant <anonymous-7857> = <C-function-pointer>;
define constant <anonymous-7858> = <C-function-pointer>;
define C-subtype <_GtkTextBufferClass> (<C-void*>) end;
define constant <GtkTextBufferClass> = <_GtkTextBufferClass>;

define C-function gtk-text-buffer-get-type
  result res :: <GType>;
  c-name: "gtk_text_buffer_get_type";
end;

define C-function gtk-text-buffer-new
  input parameter arg1 :: <GtkTextTagTable>;
  result res :: <GtkTextBuffer>;
  c-name: "gtk_text_buffer_new";
end;

define C-function gtk-text-buffer-get-line-count
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <gint>;
  c-name: "gtk_text_buffer_get_line_count";
end;

define C-function gtk-text-buffer-get-char-count
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <gint>;
  c-name: "gtk_text_buffer_get_char_count";
end;

define C-function gtk-text-buffer-get-tag-table
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <GtkTextTagTable>;
  c-name: "gtk_text_buffer_get_tag_table";
end;

define C-function gtk-text-buffer-set-text
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_text_buffer_set_text";
end;

define C-function gtk-text-buffer-insert
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_text_buffer_insert";
end;

define C-function gtk-text-buffer-insert-at-cursor
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_text_buffer_insert_at_cursor";
end;

define C-function gtk-text-buffer-insert-interactive
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_insert_interactive";
end;

define C-function gtk-text-buffer-insert-interactive-at-cursor
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_insert_interactive_at_cursor";
end;

define C-function gtk-text-buffer-insert-range
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_insert_range";
end;

define C-function gtk-text-buffer-insert-range-interactive
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <GtkTextIter>;
  input parameter arg5 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_insert_range_interactive";
end;

define C-function gtk-text-buffer-insert-with-tags
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GtkTextTag>;
  c-name: "gtk_text_buffer_insert_with_tags";
end;

define C-function gtk-text-buffer-insert-with-tags-by-name
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gchar*>;
  c-name: "gtk_text_buffer_insert_with_tags_by_name";
end;

define C-function gtk-text-buffer-delete
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_delete";
end;

define C-function gtk-text-buffer-delete-interactive
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_delete_interactive";
end;

define C-function gtk-text-buffer-backspace
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_backspace";
end;

define C-function gtk-text-buffer-get-text
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <gboolean>;
  result res :: <gchar*>;
  c-name: "gtk_text_buffer_get_text";
end;

define C-function gtk-text-buffer-get-slice
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <gboolean>;
  result res :: <gchar*>;
  c-name: "gtk_text_buffer_get_slice";
end;

define C-function gtk-text-buffer-insert-pixbuf
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GdkPixbuf>;
  c-name: "gtk_text_buffer_insert_pixbuf";
end;

define C-function gtk-text-buffer-insert-child-anchor
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextChildAnchor>;
  c-name: "gtk_text_buffer_insert_child_anchor";
end;

define C-function gtk-text-buffer-create-child-anchor
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  result res :: <GtkTextChildAnchor>;
  c-name: "gtk_text_buffer_create_child_anchor";
end;

define C-function gtk-text-buffer-create-mark
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <gboolean>;
  result res :: <GtkTextMark>;
  c-name: "gtk_text_buffer_create_mark";
end;

define C-function gtk-text-buffer-move-mark
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextMark>;
  input parameter arg3 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_move_mark";
end;

define C-function gtk-text-buffer-delete-mark
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextMark>;
  c-name: "gtk_text_buffer_delete_mark";
end;

define C-function gtk-text-buffer-get-mark
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkTextMark>;
  c-name: "gtk_text_buffer_get_mark";
end;

define C-function gtk-text-buffer-move-mark-by-name
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_move_mark_by_name";
end;

define C-function gtk-text-buffer-delete-mark-by-name
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_text_buffer_delete_mark_by_name";
end;

define C-function gtk-text-buffer-get-insert
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <GtkTextMark>;
  c-name: "gtk_text_buffer_get_insert";
end;

define C-function gtk-text-buffer-get-selection-bound
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <GtkTextMark>;
  c-name: "gtk_text_buffer_get_selection_bound";
end;

define C-function gtk-text-buffer-place-cursor
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_place_cursor";
end;

define C-function gtk-text-buffer-select-range
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_select_range";
end;

define C-function gtk-text-buffer-apply-tag
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextTag>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_apply_tag";
end;

define C-function gtk-text-buffer-remove-tag
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextTag>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_remove_tag";
end;

define C-function gtk-text-buffer-apply-tag-by-name
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_apply_tag_by_name";
end;

define C-function gtk-text-buffer-remove-tag-by-name
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_remove_tag_by_name";
end;

define C-function gtk-text-buffer-remove-all-tags
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_remove_all_tags";
end;

define C-function gtk-text-buffer-create-tag
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  result res :: <GtkTextTag>;
  c-name: "gtk_text_buffer_create_tag";
end;

define C-function gtk-text-buffer-get-iter-at-line-offset
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_text_buffer_get_iter_at_line_offset";
end;

define C-function gtk-text-buffer-get-iter-at-line-index
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_text_buffer_get_iter_at_line_index";
end;

define C-function gtk-text-buffer-get-iter-at-offset
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_text_buffer_get_iter_at_offset";
end;

define C-function gtk-text-buffer-get-iter-at-line
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_text_buffer_get_iter_at_line";
end;

define C-function gtk-text-buffer-get-start-iter
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_get_start_iter";
end;

define C-function gtk-text-buffer-get-end-iter
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_get_end_iter";
end;

define C-function gtk-text-buffer-get-bounds
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  c-name: "gtk_text_buffer_get_bounds";
end;

define C-function gtk-text-buffer-get-iter-at-mark
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextMark>;
  c-name: "gtk_text_buffer_get_iter_at_mark";
end;

define C-function gtk-text-buffer-get-iter-at-child-anchor
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextChildAnchor>;
  c-name: "gtk_text_buffer_get_iter_at_child_anchor";
end;

define C-function gtk-text-buffer-get-modified
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_get_modified";
end;

define C-function gtk-text-buffer-set-modified
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_text_buffer_set_modified";
end;

define C-function gtk-text-buffer-get-has-selection
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_get_has_selection";
end;

define C-function gtk-text-buffer-add-selection-clipboard
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkClipboard>;
  c-name: "gtk_text_buffer_add_selection_clipboard";
end;

define C-function gtk-text-buffer-remove-selection-clipboard
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkClipboard>;
  c-name: "gtk_text_buffer_remove_selection_clipboard";
end;

define C-function gtk-text-buffer-cut-clipboard
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkClipboard>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_text_buffer_cut_clipboard";
end;

define C-function gtk-text-buffer-copy-clipboard
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkClipboard>;
  c-name: "gtk_text_buffer_copy_clipboard";
end;

define C-function gtk-text-buffer-paste-clipboard
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkClipboard>;
  input parameter arg3 :: <GtkTextIter>;
  input parameter arg4 :: <gboolean>;
  c-name: "gtk_text_buffer_paste_clipboard";
end;

define C-function gtk-text-buffer-get-selection-bounds
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextIter>;
  input parameter arg3 :: <GtkTextIter>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_get_selection_bounds";
end;

define C-function gtk-text-buffer-delete-selection
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_delete_selection";
end;

define C-function gtk-text-buffer-begin-user-action
  input parameter arg1 :: <GtkTextBuffer>;
  c-name: "gtk_text_buffer_begin_user_action";
end;

define C-function gtk-text-buffer-end-user-action
  input parameter arg1 :: <GtkTextBuffer>;
  c-name: "gtk_text_buffer_end_user_action";
end;

define C-function gtk-text-buffer-get-copy-target-list
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <GtkTargetList>;
  c-name: "gtk_text_buffer_get_copy_target_list";
end;

define C-function gtk-text-buffer-get-paste-target-list
  input parameter arg1 :: <GtkTextBuffer>;
  result res :: <GtkTargetList>;
  c-name: "gtk_text_buffer_get_paste_target_list";
end;

define constant <anonymous-7827> = <C-function-pointer>;
define constant <anonymous-7828> = <C-function-pointer>;
define constant <anonymous-7829> = <C-function-pointer>;
define constant <anonymous-7830> = <C-function-pointer>;
define C-subtype <_GtkTextMarkClass> (<C-void*>) end;
define constant <GtkTextMarkClass> = <_GtkTextMarkClass>;

define C-function gtk-text-mark-get-type
  result res :: <GType>;
  c-name: "gtk_text_mark_get_type";
end;

define C-function gtk-text-mark-set-visible
  input parameter arg1 :: <GtkTextMark>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_text_mark_set_visible";
end;

define C-function gtk-text-mark-get-visible
  input parameter arg1 :: <GtkTextMark>;
  result res :: <gboolean>;
  c-name: "gtk_text_mark_get_visible";
end;

define C-function gtk-text-mark-get-name
  input parameter arg1 :: <GtkTextMark>;
  result res :: <gchar*>;
  c-name: "gtk_text_mark_get_name";
end;

define C-function gtk-text-mark-get-deleted
  input parameter arg1 :: <GtkTextMark>;
  result res :: <gboolean>;
  c-name: "gtk_text_mark_get_deleted";
end;

define C-function gtk-text-mark-get-buffer
  input parameter arg1 :: <GtkTextMark>;
  result res :: <GtkTextBuffer>;
  c-name: "gtk_text_mark_get_buffer";
end;

define C-function gtk-text-mark-get-left-gravity
  input parameter arg1 :: <GtkTextMark>;
  result res :: <gboolean>;
  c-name: "gtk_text_mark_get_left_gravity";
end;

define constant <anonymous-7810> = <C-function-pointer>;
define constant <GtkTextTagTableForeach> = <anonymous-7810>;

define constant <anonymous-7811> = <C-function-pointer>;
define constant <anonymous-7812> = <C-function-pointer>;
define constant <anonymous-7813> = <C-function-pointer>;
define constant <anonymous-7814> = <C-function-pointer>;
define constant <anonymous-7815> = <C-function-pointer>;
define constant <anonymous-7816> = <C-function-pointer>;
define constant <anonymous-7817> = <C-function-pointer>;
define C-subtype <_GtkTextTagTableClass> (<C-void*>) end;
define constant <GtkTextTagTableClass> = <_GtkTextTagTableClass>;

define C-function gtk-text-tag-table-get-type
  result res :: <GType>;
  c-name: "gtk_text_tag_table_get_type";
end;

define C-function gtk-text-tag-table-new
  result res :: <GtkTextTagTable>;
  c-name: "gtk_text_tag_table_new";
end;

define C-function gtk-text-tag-table-add
  input parameter arg1 :: <GtkTextTagTable>;
  input parameter arg2 :: <GtkTextTag>;
  c-name: "gtk_text_tag_table_add";
end;

define C-function gtk-text-tag-table-remove
  input parameter arg1 :: <GtkTextTagTable>;
  input parameter arg2 :: <GtkTextTag>;
  c-name: "gtk_text_tag_table_remove";
end;

define C-function gtk-text-tag-table-lookup
  input parameter arg1 :: <GtkTextTagTable>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkTextTag>;
  c-name: "gtk_text_tag_table_lookup";
end;

define C-function gtk-text-tag-table-foreach
  input parameter arg1 :: <GtkTextTagTable>;
  input parameter arg2 :: <GtkTextTagTableForeach>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_text_tag_table_foreach";
end;

define C-function gtk-text-tag-table-get-size
  input parameter arg1 :: <GtkTextTagTable>;
  result res :: <gint>;
  c-name: "gtk_text_tag_table_get_size";
end;

define constant <anonymous-5562> = <C-function-pointer>;
define constant <GtkClipboardReceivedFunc> = <anonymous-5562>;

define constant <anonymous-5563> = <C-function-pointer>;
define constant <GtkClipboardTextReceivedFunc> = <anonymous-5563>;

define constant <anonymous-5564> = <C-function-pointer>;
define constant <GtkClipboardRichTextReceivedFunc> = <anonymous-5564>;

define constant <anonymous-5565> = <C-function-pointer>;
define constant <GtkClipboardImageReceivedFunc> = <anonymous-5565>;

define constant <anonymous-5566> = <C-function-pointer>;
define constant <GtkClipboardTargetsReceivedFunc> = <anonymous-5566>;

define constant <anonymous-5567> = <C-function-pointer>;
define constant <GtkClipboardGetFunc> = <anonymous-5567>;

define constant <anonymous-5568> = <C-function-pointer>;
define constant <GtkClipboardClearFunc> = <anonymous-5568>;

define C-function gtk-clipboard-get-type
  result res :: <GType>;
  c-name: "gtk_clipboard_get_type";
end;

define C-function gtk-clipboard-get-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkAtom>;
  result res :: <GtkClipboard>;
  c-name: "gtk_clipboard_get_for_display";
end;

define C-function gtk-clipboard-get
  input parameter arg1 :: <GdkAtom>;
  result res :: <GtkClipboard>;
  c-name: "gtk_clipboard_get";
end;

define C-function gtk-clipboard-get-display
  input parameter arg1 :: <GtkClipboard>;
  result res :: <GdkDisplay>;
  c-name: "gtk_clipboard_get_display";
end;

define C-function gtk-clipboard-set-with-data
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkTargetEntry>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GtkClipboardGetFunc>;
  input parameter arg5 :: <GtkClipboardClearFunc>;
  input parameter arg6 :: <gpointer>;
  result res :: <gboolean>;
  c-name: "gtk_clipboard_set_with_data";
end;

define C-function gtk-clipboard-set-with-owner
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkTargetEntry>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <GtkClipboardGetFunc>;
  input parameter arg5 :: <GtkClipboardClearFunc>;
  input parameter arg6 :: <GObject>;
  result res :: <gboolean>;
  c-name: "gtk_clipboard_set_with_owner";
end;

define C-function gtk-clipboard-get-owner
  input parameter arg1 :: <GtkClipboard>;
  result res :: <GObject>;
  c-name: "gtk_clipboard_get_owner";
end;

define C-function gtk-clipboard-clear
  input parameter arg1 :: <GtkClipboard>;
  c-name: "gtk_clipboard_clear";
end;

define C-function gtk-clipboard-set-text
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clipboard_set_text";
end;

define C-function gtk-clipboard-set-image
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GdkPixbuf>;
  c-name: "gtk_clipboard_set_image";
end;

define C-function gtk-clipboard-request-contents
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <GtkClipboardReceivedFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "gtk_clipboard_request_contents";
end;

define C-function gtk-clipboard-request-text
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkClipboardTextReceivedFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_clipboard_request_text";
end;

define C-function gtk-clipboard-request-rich-text
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkTextBuffer>;
  input parameter arg3 :: <GtkClipboardRichTextReceivedFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "gtk_clipboard_request_rich_text";
end;

define C-function gtk-clipboard-request-image
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkClipboardImageReceivedFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_clipboard_request_image";
end;

define C-function gtk-clipboard-request-targets
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkClipboardTargetsReceivedFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_clipboard_request_targets";
end;

define C-function gtk-clipboard-wait-for-contents
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GdkAtom>;
  result res :: <GtkSelectionData>;
  c-name: "gtk_clipboard_wait_for_contents";
end;

define C-function gtk-clipboard-wait-for-text
  input parameter arg1 :: <GtkClipboard>;
  result res :: <gchar*>;
  c-name: "gtk_clipboard_wait_for_text";
end;

define C-function gtk-clipboard-wait-for-rich-text
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkTextBuffer>;
  input parameter arg3 :: <GdkAtom*>;
  input parameter arg4 :: <gsize*>;
  result res :: <guint8*>;
  c-name: "gtk_clipboard_wait_for_rich_text";
end;

define C-function gtk-clipboard-wait-for-image
  input parameter arg1 :: <GtkClipboard>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_clipboard_wait_for_image";
end;

define C-function gtk-clipboard-wait-for-targets
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GdkAtom**>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_clipboard_wait_for_targets";
end;

define C-function gtk-clipboard-wait-is-text-available
  input parameter arg1 :: <GtkClipboard>;
  result res :: <gboolean>;
  c-name: "gtk_clipboard_wait_is_text_available";
end;

define C-function gtk-clipboard-wait-is-rich-text-available
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkTextBuffer>;
  result res :: <gboolean>;
  c-name: "gtk_clipboard_wait_is_rich_text_available";
end;

define C-function gtk-clipboard-wait-is-image-available
  input parameter arg1 :: <GtkClipboard>;
  result res :: <gboolean>;
  c-name: "gtk_clipboard_wait_is_image_available";
end;

define C-function gtk-clipboard-wait-is-target-available
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GdkAtom>;
  result res :: <gboolean>;
  c-name: "gtk_clipboard_wait_is_target_available";
end;

define C-function gtk-clipboard-set-can-store
  input parameter arg1 :: <GtkClipboard>;
  input parameter arg2 :: <GtkTargetEntry>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clipboard_set_can_store";
end;

define C-function gtk-clipboard-store
  input parameter arg1 :: <GtkClipboard>;
  c-name: "gtk_clipboard_store";
end;

define constant <anonymous-7924> = <C-function-pointer>;
define constant <GtkTextBufferSerializeFunc> = <anonymous-7924>;

define constant <anonymous-7925> = <C-function-pointer>;
define constant <GtkTextBufferDeserializeFunc> = <anonymous-7925>;

define C-function gtk-text-buffer-register-serialize-format
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkTextBufferSerializeFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  result res :: <GdkAtom>;
  c-name: "gtk_text_buffer_register_serialize_format";
end;

define C-function gtk-text-buffer-register-serialize-tagset
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  result res :: <GdkAtom>;
  c-name: "gtk_text_buffer_register_serialize_tagset";
end;

define C-function gtk-text-buffer-register-deserialize-format
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkTextBufferDeserializeFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  result res :: <GdkAtom>;
  c-name: "gtk_text_buffer_register_deserialize_format";
end;

define C-function gtk-text-buffer-register-deserialize-tagset
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gchar*>;
  result res :: <GdkAtom>;
  c-name: "gtk_text_buffer_register_deserialize_tagset";
end;

define C-function gtk-text-buffer-unregister-serialize-format
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GdkAtom>;
  c-name: "gtk_text_buffer_unregister_serialize_format";
end;

define C-function gtk-text-buffer-unregister-deserialize-format
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GdkAtom>;
  c-name: "gtk_text_buffer_unregister_deserialize_format";
end;

define C-function gtk-text-buffer-deserialize-set-can-create-tags
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GdkAtom>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_text_buffer_deserialize_set_can_create_tags";
end;

define C-function gtk-text-buffer-deserialize-get-can-create-tags
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GdkAtom>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_deserialize_get_can_create_tags";
end;

define C-function gtk-text-buffer-get-serialize-formats
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gint*>;
  result res :: <GdkAtom*>;
  c-name: "gtk_text_buffer_get_serialize_formats";
end;

define C-function gtk-text-buffer-get-deserialize-formats
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <gint*>;
  result res :: <GdkAtom*>;
  c-name: "gtk_text_buffer_get_deserialize_formats";
end;

define C-function gtk-text-buffer-serialize
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextBuffer>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <GtkTextIter>;
  input parameter arg5 :: <GtkTextIter>;
  input parameter arg6 :: <gsize*>;
  result res :: <guint8*>;
  c-name: "gtk_text_buffer_serialize";
end;

define C-function gtk-text-buffer-deserialize
  input parameter arg1 :: <GtkTextBuffer>;
  input parameter arg2 :: <GtkTextBuffer>;
  input parameter arg3 :: <GdkAtom>;
  input parameter arg4 :: <GtkTextIter>;
  input parameter arg5 :: <guint8*>;
  input parameter arg6 :: <gsize>;
  input parameter arg7 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_text_buffer_deserialize";
end;

define C-subtype <_GtkTearoffMenuItem> (<_GtkMenuItem>, <_AtkImplementorIface>) end;
define constant <GtkTearoffMenuItem> = <_GtkTearoffMenuItem>;

define constant <anonymous-7804> = <C-function-pointer>;
define constant <anonymous-7805> = <C-function-pointer>;
define constant <anonymous-7806> = <C-function-pointer>;
define constant <anonymous-7807> = <C-function-pointer>;
define C-subtype <_GtkTearoffMenuItemClass> (<C-void*>) end;
define constant <GtkTearoffMenuItemClass> = <_GtkTearoffMenuItemClass>;

define C-function gtk-tearoff-menu-item-get-type
  result res :: <GType>;
  c-name: "gtk_tearoff_menu_item_get_type";
end;

define C-function gtk-tearoff-menu-item-new
  result res :: <GtkWidget>;
  c-name: "gtk_tearoff_menu_item_new";
end;

define C-subtype <_GtkTableRowCol> (<C-void*>) end;
define constant <GtkTableRowCol> = <_GtkTableRowCol>;

define C-subtype <_GtkTable> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkTable> = <_GtkTable>;

define C-subtype <_GtkTableClass> (<C-void*>) end;
define constant <GtkTableClass> = <_GtkTableClass>;

define C-subtype <_GtkTableChild> (<C-void*>) end;
define constant <GtkTableChild> = <_GtkTableChild>;

define C-function gtk-table-get-type
  result res :: <GType>;
  c-name: "gtk_table_get_type";
end;

define C-function gtk-table-new
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gboolean>;
  result res :: <GtkWidget>;
  c-name: "gtk_table_new";
end;

define C-function gtk-table-resize
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  c-name: "gtk_table_resize";
end;

define C-function gtk-table-attach
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <guint>;
  input parameter arg6 :: <guint>;
  input parameter arg7 :: <GtkAttachOptions>;
  input parameter arg8 :: <GtkAttachOptions>;
  input parameter arg9 :: <guint>;
  input parameter arg10 :: <guint>;
  c-name: "gtk_table_attach";
end;

define C-function gtk-table-attach-defaults
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <guint>;
  input parameter arg6 :: <guint>;
  c-name: "gtk_table_attach_defaults";
end;

define C-function gtk-table-set-row-spacing
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  c-name: "gtk_table_set_row_spacing";
end;

define C-function gtk-table-get-row-spacing
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <guint>;
  result res :: <guint>;
  c-name: "gtk_table_get_row_spacing";
end;

define C-function gtk-table-set-col-spacing
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  c-name: "gtk_table_set_col_spacing";
end;

define C-function gtk-table-get-col-spacing
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <guint>;
  result res :: <guint>;
  c-name: "gtk_table_get_col_spacing";
end;

define C-function gtk-table-set-row-spacings
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_table_set_row_spacings";
end;

define C-function gtk-table-get-default-row-spacing
  input parameter arg1 :: <GtkTable>;
  result res :: <guint>;
  c-name: "gtk_table_get_default_row_spacing";
end;

define C-function gtk-table-set-col-spacings
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_table_set_col_spacings";
end;

define C-function gtk-table-get-default-col-spacing
  input parameter arg1 :: <GtkTable>;
  result res :: <guint>;
  c-name: "gtk_table_get_default_col_spacing";
end;

define C-function gtk-table-set-homogeneous
  input parameter arg1 :: <GtkTable>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_table_set_homogeneous";
end;

define C-function gtk-table-get-homogeneous
  input parameter arg1 :: <GtkTable>;
  result res :: <gboolean>;
  c-name: "gtk_table_get_homogeneous";
end;

define C-subtype <_GtkStockItem> (<C-void*>) end;
define constant <GtkStockItem> = <_GtkStockItem>;

define C-function gtk-stock-add
  input parameter arg1 :: <GtkStockItem>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_stock_add";
end;

define C-function gtk-stock-add-static
  input parameter arg1 :: <GtkStockItem>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_stock_add_static";
end;

define C-function gtk-stock-lookup
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkStockItem>;
  result res :: <gboolean>;
  c-name: "gtk_stock_lookup";
end;

define C-function gtk-stock-list-ids
  result res :: <GSList>;
  c-name: "gtk_stock_list_ids";
end;

define C-function gtk-stock-item-copy
  input parameter arg1 :: <GtkStockItem>;
  result res :: <GtkStockItem>;
  c-name: "gtk_stock_item_copy";
end;

define C-function gtk-stock-item-free
  input parameter arg1 :: <GtkStockItem>;
  c-name: "gtk_stock_item_free";
end;

define C-function gtk-stock-set-translate-func
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkTranslateFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_stock_set_translate_func";
end;

define constant $GTK-STOCK-DIALOG-AUTHENTICATION = "gtk-dialog-authentication";

define constant $GTK-STOCK-DIALOG-INFO = "gtk-dialog-info";

define constant $GTK-STOCK-DIALOG-WARNING = "gtk-dialog-warning";

define constant $GTK-STOCK-DIALOG-ERROR = "gtk-dialog-error";

define constant $GTK-STOCK-DIALOG-QUESTION = "gtk-dialog-question";

define constant $GTK-STOCK-DND = "gtk-dnd";

define constant $GTK-STOCK-DND-MULTIPLE = "gtk-dnd-multiple";

define constant $GTK-STOCK-ABOUT = "gtk-about";

define constant $GTK-STOCK-ADD = "gtk-add";

define constant $GTK-STOCK-APPLY = "gtk-apply";

define constant $GTK-STOCK-BOLD = "gtk-bold";

define constant $GTK-STOCK-CANCEL = "gtk-cancel";

define constant $GTK-STOCK-CDROM = "gtk-cdrom";

define constant $GTK-STOCK-CLEAR = "gtk-clear";

define constant $GTK-STOCK-CLOSE = "gtk-close";

define constant $GTK-STOCK-COLOR-PICKER = "gtk-color-picker";

define constant $GTK-STOCK-CONVERT = "gtk-convert";

define constant $GTK-STOCK-CONNECT = "gtk-connect";

define constant $GTK-STOCK-COPY = "gtk-copy";

define constant $GTK-STOCK-CUT = "gtk-cut";

define constant $GTK-STOCK-DELETE = "gtk-delete";

define constant $GTK-STOCK-DIRECTORY = "gtk-directory";

define constant $GTK-STOCK-DISCONNECT = "gtk-disconnect";

define constant $GTK-STOCK-EDIT = "gtk-edit";

define constant $GTK-STOCK-EXECUTE = "gtk-execute";

define constant $GTK-STOCK-FILE = "gtk-file";

define constant $GTK-STOCK-FIND = "gtk-find";

define constant $GTK-STOCK-FIND-AND-REPLACE = "gtk-find-and-replace";

define constant $GTK-STOCK-FLOPPY = "gtk-floppy";

define constant $GTK-STOCK-FULLSCREEN = "gtk-fullscreen";

define constant $GTK-STOCK-GOTO-BOTTOM = "gtk-goto-bottom";

define constant $GTK-STOCK-GOTO-FIRST = "gtk-goto-first";

define constant $GTK-STOCK-GOTO-LAST = "gtk-goto-last";

define constant $GTK-STOCK-GOTO-TOP = "gtk-goto-top";

define constant $GTK-STOCK-GO-BACK = "gtk-go-back";

define constant $GTK-STOCK-GO-DOWN = "gtk-go-down";

define constant $GTK-STOCK-GO-FORWARD = "gtk-go-forward";

define constant $GTK-STOCK-GO-UP = "gtk-go-up";

define constant $GTK-STOCK-HARDDISK = "gtk-harddisk";

define constant $GTK-STOCK-HELP = "gtk-help";

define constant $GTK-STOCK-HOME = "gtk-home";

define constant $GTK-STOCK-INDEX = "gtk-index";

define constant $GTK-STOCK-INDENT = "gtk-indent";

define constant $GTK-STOCK-INFO = "gtk-info";

define constant $GTK-STOCK-UNINDENT = "gtk-unindent";

define constant $GTK-STOCK-ITALIC = "gtk-italic";

define constant $GTK-STOCK-JUMP-TO = "gtk-jump-to";

define constant $GTK-STOCK-JUSTIFY-CENTER = "gtk-justify-center";

define constant $GTK-STOCK-JUSTIFY-FILL = "gtk-justify-fill";

define constant $GTK-STOCK-JUSTIFY-LEFT = "gtk-justify-left";

define constant $GTK-STOCK-JUSTIFY-RIGHT = "gtk-justify-right";

define constant $GTK-STOCK-LEAVE-FULLSCREEN = "gtk-leave-fullscreen";

define constant $GTK-STOCK-MISSING-IMAGE = "gtk-missing-image";

define constant $GTK-STOCK-MEDIA-FORWARD = "gtk-media-forward";

define constant $GTK-STOCK-MEDIA-NEXT = "gtk-media-next";

define constant $GTK-STOCK-MEDIA-PAUSE = "gtk-media-pause";

define constant $GTK-STOCK-MEDIA-PLAY = "gtk-media-play";

define constant $GTK-STOCK-MEDIA-PREVIOUS = "gtk-media-previous";

define constant $GTK-STOCK-MEDIA-RECORD = "gtk-media-record";

define constant $GTK-STOCK-MEDIA-REWIND = "gtk-media-rewind";

define constant $GTK-STOCK-MEDIA-STOP = "gtk-media-stop";

define constant $GTK-STOCK-NETWORK = "gtk-network";

define constant $GTK-STOCK-NEW = "gtk-new";

define constant $GTK-STOCK-NO = "gtk-no";

define constant $GTK-STOCK-OK = "gtk-ok";

define constant $GTK-STOCK-OPEN = "gtk-open";

define constant $GTK-STOCK-ORIENTATION-PORTRAIT = "gtk-orientation-portrait";

define constant $GTK-STOCK-ORIENTATION-LANDSCAPE = "gtk-orientation-landscape";

define constant $GTK-STOCK-ORIENTATION-REVERSE-LANDSCAPE = "gtk-orientation-reverse-landscape";

define constant $GTK-STOCK-ORIENTATION-REVERSE-PORTRAIT = "gtk-orientation-reverse-portrait";

define constant $GTK-STOCK-PASTE = "gtk-paste";

define constant $GTK-STOCK-PREFERENCES = "gtk-preferences";

define constant $GTK-STOCK-PRINT = "gtk-print";

define constant $GTK-STOCK-PRINT-PREVIEW = "gtk-print-preview";

define constant $GTK-STOCK-PROPERTIES = "gtk-properties";

define constant $GTK-STOCK-QUIT = "gtk-quit";

define constant $GTK-STOCK-REDO = "gtk-redo";

define constant $GTK-STOCK-REFRESH = "gtk-refresh";

define constant $GTK-STOCK-REMOVE = "gtk-remove";

define constant $GTK-STOCK-REVERT-TO-SAVED = "gtk-revert-to-saved";

define constant $GTK-STOCK-SAVE = "gtk-save";

define constant $GTK-STOCK-SAVE-AS = "gtk-save-as";

define constant $GTK-STOCK-SELECT-ALL = "gtk-select-all";

define constant $GTK-STOCK-SELECT-COLOR = "gtk-select-color";

define constant $GTK-STOCK-SELECT-FONT = "gtk-select-font";

define constant $GTK-STOCK-SORT-ASCENDING = "gtk-sort-ascending";

define constant $GTK-STOCK-SORT-DESCENDING = "gtk-sort-descending";

define constant $GTK-STOCK-SPELL-CHECK = "gtk-spell-check";

define constant $GTK-STOCK-STOP = "gtk-stop";

define constant $GTK-STOCK-STRIKETHROUGH = "gtk-strikethrough";

define constant $GTK-STOCK-UNDELETE = "gtk-undelete";

define constant $GTK-STOCK-UNDERLINE = "gtk-underline";

define constant $GTK-STOCK-UNDO = "gtk-undo";

define constant $GTK-STOCK-YES = "gtk-yes";

define constant $GTK-STOCK-ZOOM-100 = "gtk-zoom-100";

define constant $GTK-STOCK-ZOOM-FIT = "gtk-zoom-fit";

define constant $GTK-STOCK-ZOOM-IN = "gtk-zoom-in";

define constant $GTK-STOCK-ZOOM-OUT = "gtk-zoom-out";

define C-subtype <_GtkStatusIconPrivate> (<C-void*>) end;
define constant <GtkStatusIconPrivate> = <_GtkStatusIconPrivate>;

define C-subtype <_GtkStatusIcon> (<C-void*>) end;
define constant <GtkStatusIcon> = <_GtkStatusIcon>;

define constant <anonymous-7743> = <C-function-pointer>;
define constant <anonymous-7744> = <C-function-pointer>;
define constant <anonymous-7745> = <C-function-pointer>;
define C-subtype <_GtkStatusIconClass> (<C-void*>) end;
define constant <GtkStatusIconClass> = <_GtkStatusIconClass>;

define C-function gtk-status-icon-get-type
  result res :: <GType>;
  c-name: "gtk_status_icon_get_type";
end;

define C-function gtk-status-icon-new
  result res :: <GtkStatusIcon>;
  c-name: "gtk_status_icon_new";
end;

define C-function gtk-status-icon-new-from-pixbuf
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <GtkStatusIcon>;
  c-name: "gtk_status_icon_new_from_pixbuf";
end;

define C-function gtk-status-icon-new-from-file
  input parameter arg1 :: <gchar*>;
  result res :: <GtkStatusIcon>;
  c-name: "gtk_status_icon_new_from_file";
end;

define C-function gtk-status-icon-new-from-stock
  input parameter arg1 :: <gchar*>;
  result res :: <GtkStatusIcon>;
  c-name: "gtk_status_icon_new_from_stock";
end;

define C-function gtk-status-icon-new-from-icon-name
  input parameter arg1 :: <gchar*>;
  result res :: <GtkStatusIcon>;
  c-name: "gtk_status_icon_new_from_icon_name";
end;

define C-function gtk-status-icon-set-from-pixbuf
  input parameter arg1 :: <GtkStatusIcon>;
  input parameter arg2 :: <GdkPixbuf>;
  c-name: "gtk_status_icon_set_from_pixbuf";
end;

define C-function gtk-status-icon-set-from-file
  input parameter arg1 :: <GtkStatusIcon>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_status_icon_set_from_file";
end;

define C-function gtk-status-icon-set-from-stock
  input parameter arg1 :: <GtkStatusIcon>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_status_icon_set_from_stock";
end;

define C-function gtk-status-icon-set-from-icon-name
  input parameter arg1 :: <GtkStatusIcon>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_status_icon_set_from_icon_name";
end;

define C-function gtk-status-icon-get-storage-type
  input parameter arg1 :: <GtkStatusIcon>;
  result res :: <GtkImageType>;
  c-name: "gtk_status_icon_get_storage_type";
end;

define C-function gtk-status-icon-get-pixbuf
  input parameter arg1 :: <GtkStatusIcon>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_status_icon_get_pixbuf";
end;

define C-function gtk-status-icon-get-stock
  input parameter arg1 :: <GtkStatusIcon>;
  result res :: <gchar*>;
  c-name: "gtk_status_icon_get_stock";
end;

define C-function gtk-status-icon-get-icon-name
  input parameter arg1 :: <GtkStatusIcon>;
  result res :: <gchar*>;
  c-name: "gtk_status_icon_get_icon_name";
end;

define C-function gtk-status-icon-get-size
  input parameter arg1 :: <GtkStatusIcon>;
  result res :: <gint>;
  c-name: "gtk_status_icon_get_size";
end;

define C-function gtk-status-icon-set-tooltip
  input parameter arg1 :: <GtkStatusIcon>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_status_icon_set_tooltip";
end;

define C-function gtk-status-icon-set-visible
  input parameter arg1 :: <GtkStatusIcon>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_status_icon_set_visible";
end;

define C-function gtk-status-icon-get-visible
  input parameter arg1 :: <GtkStatusIcon>;
  result res :: <gboolean>;
  c-name: "gtk_status_icon_get_visible";
end;

define C-function gtk-status-icon-set-blinking
  input parameter arg1 :: <GtkStatusIcon>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_status_icon_set_blinking";
end;

define C-function gtk-status-icon-get-blinking
  input parameter arg1 :: <GtkStatusIcon>;
  result res :: <gboolean>;
  c-name: "gtk_status_icon_get_blinking";
end;

define C-function gtk-status-icon-is-embedded
  input parameter arg1 :: <GtkStatusIcon>;
  result res :: <gboolean>;
  c-name: "gtk_status_icon_is_embedded";
end;

define C-function gtk-status-icon-position-menu
  input parameter arg1 :: <GtkMenu>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gboolean*>;
  input parameter arg5 :: <gpointer>;
  c-name: "gtk_status_icon_position_menu";
end;

define C-pointer-type <GtkOrientation*> => <GtkOrientation>;
define C-function gtk-status-icon-get-geometry
  input parameter arg1 :: <GtkStatusIcon>;
  input parameter arg2 :: <GdkScreen*>;
  input parameter arg3 :: <GdkRectangle>;
  input parameter arg4 :: <GtkOrientation*>;
  result res :: <gboolean>;
  c-name: "gtk_status_icon_get_geometry";
end;

define C-subtype <_GtkHBox> (<_GtkBox>, <_AtkImplementorIface>) end;
define constant <GtkHBox> = <_GtkHBox>;

define C-subtype <_GtkStatusbar> (<_GtkHBox>, <_AtkImplementorIface>) end;
define constant <GtkStatusbar> = <_GtkStatusbar>;

define C-subtype <_GtkHBoxClass> (<C-void*>) end;
define constant <GtkHBoxClass> = <_GtkHBoxClass>;

define constant <anonymous-7729> = <C-function-pointer>;
define constant <anonymous-7730> = <C-function-pointer>;
define constant <anonymous-7731> = <C-function-pointer>;
define constant <anonymous-7732> = <C-function-pointer>;
define constant <anonymous-7733> = <C-function-pointer>;
define constant <anonymous-7734> = <C-function-pointer>;
define C-subtype <_GtkStatusbarClass> (<C-void*>) end;
define constant <GtkStatusbarClass> = <_GtkStatusbarClass>;

define C-function gtk-statusbar-get-type
  result res :: <GType>;
  c-name: "gtk_statusbar_get_type";
end;

define C-function gtk-statusbar-new
  result res :: <GtkWidget>;
  c-name: "gtk_statusbar_new";
end;

define C-function gtk-statusbar-get-context-id
  input parameter arg1 :: <GtkStatusbar>;
  input parameter arg2 :: <gchar*>;
  result res :: <guint>;
  c-name: "gtk_statusbar_get_context_id";
end;

define C-function gtk-statusbar-push
  input parameter arg1 :: <GtkStatusbar>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <gchar*>;
  result res :: <guint>;
  c-name: "gtk_statusbar_push";
end;

define C-function gtk-statusbar-pop
  input parameter arg1 :: <GtkStatusbar>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_statusbar_pop";
end;

define C-function gtk-statusbar-remove
  input parameter arg1 :: <GtkStatusbar>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  c-name: "gtk_statusbar_remove";
end;

define C-function gtk-statusbar-set-has-resize-grip
  input parameter arg1 :: <GtkStatusbar>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_statusbar_set_has_resize_grip";
end;

define C-function gtk-statusbar-get-has-resize-grip
  input parameter arg1 :: <GtkStatusbar>;
  result res :: <gboolean>;
  c-name: "gtk_statusbar_get_has_resize_grip";
end;

define C-function gtk-hbox-get-type
  result res :: <GType>;
  c-name: "gtk_hbox_get_type";
end;

define C-function gtk-hbox-new
  input parameter arg1 :: <gboolean>;
  input parameter arg2 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_hbox_new";
end;

define constant <GtkSpinButtonUpdatePolicy> = <C-int>;
define constant $GTK-UPDATE-ALWAYS = 0;
define constant $GTK-UPDATE-IF-VALID = 1;

define constant <GtkSpinType> = <C-int>;
define constant $GTK-SPIN-STEP-FORWARD = 0;
define constant $GTK-SPIN-STEP-BACKWARD = 1;
define constant $GTK-SPIN-PAGE-FORWARD = 2;
define constant $GTK-SPIN-PAGE-BACKWARD = 3;
define constant $GTK-SPIN-HOME = 4;
define constant $GTK-SPIN-END = 5;
define constant $GTK-SPIN-USER-DEFINED = 6;

define C-subtype <_GtkSpinButton> (<_GtkEntry>, <_AtkImplementorIface>, <_GtkCellEditable>, <_GtkEditable>) end;
define constant <GtkSpinButton> = <_GtkSpinButton>;

define constant <anonymous-7695> = <C-function-pointer>;
define constant <anonymous-7696> = <C-function-pointer>;
define constant <anonymous-7697> = <C-function-pointer>;
define constant <anonymous-7698> = <C-function-pointer>;
define constant <anonymous-7699> = <C-function-pointer>;
define constant <anonymous-7700> = <C-function-pointer>;
define constant <anonymous-7701> = <C-function-pointer>;
define constant <anonymous-7702> = <C-function-pointer>;
define C-subtype <_GtkSpinButtonClass> (<C-void*>) end;
define constant <GtkSpinButtonClass> = <_GtkSpinButtonClass>;

define C-function gtk-spin-button-get-type
  result res :: <GType>;
  c-name: "gtk_spin_button_get_type";
end;

define C-function gtk-spin-button-configure
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <GtkAdjustment>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <guint>;
  c-name: "gtk_spin_button_configure";
end;

define C-function gtk-spin-button-new
  input parameter arg1 :: <GtkAdjustment>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <guint>;
  result res :: <GtkWidget>;
  c-name: "gtk_spin_button_new";
end;

define C-function gtk-spin-button-new-with-range
  input parameter arg1 :: <gdouble>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  result res :: <GtkWidget>;
  c-name: "gtk_spin_button_new_with_range";
end;

define C-function gtk-spin-button-set-adjustment
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_spin_button_set_adjustment";
end;

define C-function gtk-spin-button-get-adjustment
  input parameter arg1 :: <GtkSpinButton>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_spin_button_get_adjustment";
end;

define C-function gtk-spin-button-set-digits
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_spin_button_set_digits";
end;

define C-function gtk-spin-button-get-digits
  input parameter arg1 :: <GtkSpinButton>;
  result res :: <guint>;
  c-name: "gtk_spin_button_get_digits";
end;

define C-function gtk-spin-button-set-increments
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  c-name: "gtk_spin_button_set_increments";
end;

define C-function gtk-spin-button-get-increments
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <gdouble*>;
  input parameter arg3 :: <gdouble*>;
  c-name: "gtk_spin_button_get_increments";
end;

define C-function gtk-spin-button-set-range
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  c-name: "gtk_spin_button_set_range";
end;

define C-function gtk-spin-button-get-range
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <gdouble*>;
  input parameter arg3 :: <gdouble*>;
  c-name: "gtk_spin_button_get_range";
end;

define C-function gtk-spin-button-get-value
  input parameter arg1 :: <GtkSpinButton>;
  result res :: <gdouble>;
  c-name: "gtk_spin_button_get_value";
end;

define C-function gtk-spin-button-get-value-as-int
  input parameter arg1 :: <GtkSpinButton>;
  result res :: <gint>;
  c-name: "gtk_spin_button_get_value_as_int";
end;

define C-function gtk-spin-button-set-value
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_spin_button_set_value";
end;

define C-function gtk-spin-button-set-update-policy
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <GtkSpinButtonUpdatePolicy>;
  c-name: "gtk_spin_button_set_update_policy";
end;

define C-function gtk-spin-button-get-update-policy
  input parameter arg1 :: <GtkSpinButton>;
  result res :: <GtkSpinButtonUpdatePolicy>;
  c-name: "gtk_spin_button_get_update_policy";
end;

define C-function gtk-spin-button-set-numeric
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_spin_button_set_numeric";
end;

define C-function gtk-spin-button-get-numeric
  input parameter arg1 :: <GtkSpinButton>;
  result res :: <gboolean>;
  c-name: "gtk_spin_button_get_numeric";
end;

define C-function gtk-spin-button-spin
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <GtkSpinType>;
  input parameter arg3 :: <gdouble>;
  c-name: "gtk_spin_button_spin";
end;

define C-function gtk-spin-button-set-wrap
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_spin_button_set_wrap";
end;

define C-function gtk-spin-button-get-wrap
  input parameter arg1 :: <GtkSpinButton>;
  result res :: <gboolean>;
  c-name: "gtk_spin_button_get_wrap";
end;

define C-function gtk-spin-button-set-snap-to-ticks
  input parameter arg1 :: <GtkSpinButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_spin_button_set_snap_to_ticks";
end;

define C-function gtk-spin-button-get-snap-to-ticks
  input parameter arg1 :: <GtkSpinButton>;
  result res :: <gboolean>;
  c-name: "gtk_spin_button_get_snap_to_ticks";
end;

define C-function gtk-spin-button-update
  input parameter arg1 :: <GtkSpinButton>;
  c-name: "gtk_spin_button_update";
end;

define constant $GTK-INPUT-ERROR = -1;

define constant gtk-spin-button-get-value-as-float = gtk-spin-button-get-value;

define C-subtype <_GtkSocket> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkSocket> = <_GtkSocket>;

define constant <anonymous-7147> = <C-function-pointer>;
define constant <anonymous-7148> = <C-function-pointer>;
define constant <anonymous-7149> = <C-function-pointer>;
define constant <anonymous-7150> = <C-function-pointer>;
define constant <anonymous-7151> = <C-function-pointer>;
define constant <anonymous-7152> = <C-function-pointer>;
define C-subtype <_GtkSocketClass> (<C-void*>) end;
define constant <GtkSocketClass> = <_GtkSocketClass>;

define C-function gtk-socket-get-type
  result res :: <GType>;
  c-name: "gtk_socket_get_type";
end;

define C-function gtk-socket-new
  result res :: <GtkWidget>;
  c-name: "gtk_socket_new";
end;

define C-function gtk-socket-add-id
  input parameter arg1 :: <GtkSocket>;
  input parameter arg2 :: <GdkNativeWindow>;
  c-name: "gtk_socket_add_id";
end;

define C-function gtk-socket-get-id
  input parameter arg1 :: <GtkSocket>;
  result res :: <GdkNativeWindow>;
  c-name: "gtk_socket_get_id";
end;

define C-function gtk-socket-steal
  input parameter arg1 :: <GtkSocket>;
  input parameter arg2 :: <GdkNativeWindow>;
  c-name: "gtk_socket_steal";
end;

define C-subtype <_GtkSizeGroup> (<_GObject>) end;
define constant <GtkSizeGroup> = <_GtkSizeGroup>;

define constant <anonymous-7667> = <C-function-pointer>;
define constant <anonymous-7668> = <C-function-pointer>;
define constant <anonymous-7669> = <C-function-pointer>;
define constant <anonymous-7670> = <C-function-pointer>;
define C-subtype <_GtkSizeGroupClass> (<C-void*>) end;
define constant <GtkSizeGroupClass> = <_GtkSizeGroupClass>;

define constant <GtkSizeGroupMode> = <C-int>;
define constant $GTK-SIZE-GROUP-NONE = 0;
define constant $GTK-SIZE-GROUP-HORIZONTAL = 1;
define constant $GTK-SIZE-GROUP-VERTICAL = 2;
define constant $GTK-SIZE-GROUP-BOTH = 3;

define C-function gtk-size-group-get-type
  result res :: <GType>;
  c-name: "gtk_size_group_get_type";
end;

define C-function gtk-size-group-new
  input parameter arg1 :: <GtkSizeGroupMode>;
  result res :: <GtkSizeGroup>;
  c-name: "gtk_size_group_new";
end;

define C-function gtk-size-group-set-mode
  input parameter arg1 :: <GtkSizeGroup>;
  input parameter arg2 :: <GtkSizeGroupMode>;
  c-name: "gtk_size_group_set_mode";
end;

define C-function gtk-size-group-get-mode
  input parameter arg1 :: <GtkSizeGroup>;
  result res :: <GtkSizeGroupMode>;
  c-name: "gtk_size_group_get_mode";
end;

define C-function gtk-size-group-set-ignore-hidden
  input parameter arg1 :: <GtkSizeGroup>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_size_group_set_ignore_hidden";
end;

define C-function gtk-size-group-get-ignore-hidden
  input parameter arg1 :: <GtkSizeGroup>;
  result res :: <gboolean>;
  c-name: "gtk_size_group_get_ignore_hidden";
end;

define C-function gtk-size-group-add-widget
  input parameter arg1 :: <GtkSizeGroup>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_size_group_add_widget";
end;

define C-function gtk-size-group-remove-widget
  input parameter arg1 :: <GtkSizeGroup>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_size_group_remove_widget";
end;

define C-function gtk-size-group-get-widgets
  input parameter arg1 :: <GtkSizeGroup>;
  result res :: <GSList>;
  c-name: "gtk_size_group_get_widgets";
end;

define C-subtype <_GtkSeparatorToolItemPrivate> (<C-void*>) end;
define constant <GtkSeparatorToolItemPrivate> = <_GtkSeparatorToolItemPrivate>;

define C-subtype <_GtkSeparatorToolItem> (<_GtkToolItem>, <_AtkImplementorIface>) end;
define constant <GtkSeparatorToolItem> = <_GtkSeparatorToolItem>;

define constant <anonymous-7656> = <C-function-pointer>;
define constant <anonymous-7657> = <C-function-pointer>;
define constant <anonymous-7658> = <C-function-pointer>;
define constant <anonymous-7659> = <C-function-pointer>;
define C-subtype <_GtkSeparatorToolItemClass> (<C-void*>) end;
define constant <GtkSeparatorToolItemClass> = <_GtkSeparatorToolItemClass>;

define C-function gtk-separator-tool-item-get-type
  result res :: <GType>;
  c-name: "gtk_separator_tool_item_get_type";
end;

define C-function gtk-separator-tool-item-new
  result res :: <GtkToolItem>;
  c-name: "gtk_separator_tool_item_new";
end;

define C-function gtk-separator-tool-item-get-draw
  input parameter arg1 :: <GtkSeparatorToolItem>;
  result res :: <gboolean>;
  c-name: "gtk_separator_tool_item_get_draw";
end;

define C-function gtk-separator-tool-item-set-draw
  input parameter arg1 :: <GtkSeparatorToolItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_separator_tool_item_set_draw";
end;

define C-subtype <_GtkSeparatorMenuItem> (<_GtkMenuItem>, <_AtkImplementorIface>) end;
define constant <GtkSeparatorMenuItem> = <_GtkSeparatorMenuItem>;

define C-subtype <_GtkSeparatorMenuItemClass> (<C-void*>) end;
define constant <GtkSeparatorMenuItemClass> = <_GtkSeparatorMenuItemClass>;

define C-function gtk-separator-menu-item-get-type
  result res :: <GType>;
  c-name: "gtk_separator_menu_item_get_type";
end;

define C-function gtk-separator-menu-item-new
  result res :: <GtkWidget>;
  c-name: "gtk_separator_menu_item_new";
end;

define C-subtype <_GtkScrolledWindow> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkScrolledWindow> = <_GtkScrolledWindow>;

define constant <anonymous-7631> = <C-function-pointer>;
define constant <anonymous-7632> = <C-function-pointer>;
define constant <anonymous-7633> = <C-function-pointer>;
define constant <anonymous-7634> = <C-function-pointer>;
define constant <anonymous-7635> = <C-function-pointer>;
define constant <anonymous-7636> = <C-function-pointer>;
define C-subtype <_GtkScrolledWindowClass> (<C-void*>) end;
define constant <GtkScrolledWindowClass> = <_GtkScrolledWindowClass>;

define C-function gtk-scrolled-window-get-type
  result res :: <GType>;
  c-name: "gtk_scrolled_window_get_type";
end;

define C-function gtk-scrolled-window-new
  input parameter arg1 :: <GtkAdjustment>;
  input parameter arg2 :: <GtkAdjustment>;
  result res :: <GtkWidget>;
  c-name: "gtk_scrolled_window_new";
end;

define C-function gtk-scrolled-window-set-hadjustment
  input parameter arg1 :: <GtkScrolledWindow>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_scrolled_window_set_hadjustment";
end;

define C-function gtk-scrolled-window-set-vadjustment
  input parameter arg1 :: <GtkScrolledWindow>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_scrolled_window_set_vadjustment";
end;

define C-function gtk-scrolled-window-get-hadjustment
  input parameter arg1 :: <GtkScrolledWindow>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_scrolled_window_get_hadjustment";
end;

define C-function gtk-scrolled-window-get-vadjustment
  input parameter arg1 :: <GtkScrolledWindow>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_scrolled_window_get_vadjustment";
end;

define C-function gtk-scrolled-window-get-hscrollbar
  input parameter arg1 :: <GtkScrolledWindow>;
  result res :: <GtkWidget>;
  c-name: "gtk_scrolled_window_get_hscrollbar";
end;

define C-function gtk-scrolled-window-get-vscrollbar
  input parameter arg1 :: <GtkScrolledWindow>;
  result res :: <GtkWidget>;
  c-name: "gtk_scrolled_window_get_vscrollbar";
end;

define C-function gtk-scrolled-window-set-policy
  input parameter arg1 :: <GtkScrolledWindow>;
  input parameter arg2 :: <GtkPolicyType>;
  input parameter arg3 :: <GtkPolicyType>;
  c-name: "gtk_scrolled_window_set_policy";
end;

define C-pointer-type <GtkPolicyType*> => <GtkPolicyType>;
define C-function gtk-scrolled-window-get-policy
  input parameter arg1 :: <GtkScrolledWindow>;
  input parameter arg2 :: <GtkPolicyType*>;
  input parameter arg3 :: <GtkPolicyType*>;
  c-name: "gtk_scrolled_window_get_policy";
end;

define C-function gtk-scrolled-window-set-placement
  input parameter arg1 :: <GtkScrolledWindow>;
  input parameter arg2 :: <GtkCornerType>;
  c-name: "gtk_scrolled_window_set_placement";
end;

define C-function gtk-scrolled-window-unset-placement
  input parameter arg1 :: <GtkScrolledWindow>;
  c-name: "gtk_scrolled_window_unset_placement";
end;

define C-function gtk-scrolled-window-get-placement
  input parameter arg1 :: <GtkScrolledWindow>;
  result res :: <GtkCornerType>;
  c-name: "gtk_scrolled_window_get_placement";
end;

define C-function gtk-scrolled-window-set-shadow-type
  input parameter arg1 :: <GtkScrolledWindow>;
  input parameter arg2 :: <GtkShadowType>;
  c-name: "gtk_scrolled_window_set_shadow_type";
end;

define C-function gtk-scrolled-window-get-shadow-type
  input parameter arg1 :: <GtkScrolledWindow>;
  result res :: <GtkShadowType>;
  c-name: "gtk_scrolled_window_get_shadow_type";
end;

define C-function gtk-scrolled-window-add-with-viewport
  input parameter arg1 :: <GtkScrolledWindow>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_scrolled_window_add_with_viewport";
end;

define C-subtype <_GtkHScrollbar> (<_GtkScrollbar>, <_AtkImplementorIface>) end;
define constant <GtkHScrollbar> = <_GtkHScrollbar>;

define C-subtype <_GtkHScrollbarClass> (<C-void*>) end;
define constant <GtkHScrollbarClass> = <_GtkHScrollbarClass>;

define C-function gtk-hscrollbar-get-type
  result res :: <GType>;
  c-name: "gtk_hscrollbar_get_type";
end;

define C-function gtk-hscrollbar-new
  input parameter arg1 :: <GtkAdjustment>;
  result res :: <GtkWidget>;
  c-name: "gtk_hscrollbar_new";
end;

define C-subtype <_GtkRecentInfo> (<C-void*>) end;
define constant <GtkRecentInfo> = <_GtkRecentInfo>;

define C-subtype <_GtkRecentData> (<C-void*>) end;
define constant <GtkRecentData> = <_GtkRecentData>;

define C-subtype <_GtkRecentManagerPrivate> (<C-void*>) end;
define constant <GtkRecentManagerPrivate> = <_GtkRecentManagerPrivate>;

define C-subtype <_GtkRecentManager> (<C-void*>) end;
define constant <GtkRecentManager> = <_GtkRecentManager>;

define constant <anonymous-7488> = <C-function-pointer>;
define constant <anonymous-7489> = <C-function-pointer>;
define constant <anonymous-7490> = <C-function-pointer>;
define constant <anonymous-7491> = <C-function-pointer>;
define constant <anonymous-7492> = <C-function-pointer>;
define C-subtype <_GtkRecentManagerClass> (<C-void*>) end;
define constant <GtkRecentManagerClass> = <_GtkRecentManagerClass>;

define constant <GtkRecentManagerError> = <C-int>;
define constant $GTK-RECENT-MANAGER-ERROR-NOT-FOUND = 0;
define constant $GTK-RECENT-MANAGER-ERROR-INVALID-URI = 1;
define constant $GTK-RECENT-MANAGER-ERROR-INVALID-ENCODING = 2;
define constant $GTK-RECENT-MANAGER-ERROR-NOT-REGISTERED = 3;
define constant $GTK-RECENT-MANAGER-ERROR-READ = 4;
define constant $GTK-RECENT-MANAGER-ERROR-WRITE = 5;
define constant $GTK-RECENT-MANAGER-ERROR-UNKNOWN = 6;

define C-function gtk-recent-manager-error-quark
  result res :: <GQuark>;
  c-name: "gtk_recent_manager_error_quark";
end;

define C-function gtk-recent-manager-get-type
  result res :: <GType>;
  c-name: "gtk_recent_manager_get_type";
end;

define C-function gtk-recent-manager-new
  result res :: <GtkRecentManager>;
  c-name: "gtk_recent_manager_new";
end;

define C-function gtk-recent-manager-get-default
  result res :: <GtkRecentManager>;
  c-name: "gtk_recent_manager_get_default";
end;

define C-function gtk-recent-manager-get-for-screen
  input parameter arg1 :: <GdkScreen>;
  result res :: <GtkRecentManager>;
  c-name: "gtk_recent_manager_get_for_screen";
end;

define C-function gtk-recent-manager-set-screen
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <GdkScreen>;
  c-name: "gtk_recent_manager_set_screen";
end;

define C-function gtk-recent-manager-add-item
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_manager_add_item";
end;

define C-function gtk-recent-manager-add-full
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkRecentData>;
  result res :: <gboolean>;
  c-name: "gtk_recent_manager_add_full";
end;

define C-function gtk-recent-manager-remove-item
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_manager_remove_item";
end;

define C-function gtk-recent-manager-lookup-item
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <GtkRecentInfo>;
  c-name: "gtk_recent_manager_lookup_item";
end;

define C-function gtk-recent-manager-has-item
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_manager_has_item";
end;

define C-function gtk-recent-manager-move-item
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_manager_move_item";
end;

define C-function gtk-recent-manager-set-limit
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_recent_manager_set_limit";
end;

define C-function gtk-recent-manager-get-limit
  input parameter arg1 :: <GtkRecentManager>;
  result res :: <gint>;
  c-name: "gtk_recent_manager_get_limit";
end;

define C-function gtk-recent-manager-get-items
  input parameter arg1 :: <GtkRecentManager>;
  result res :: <GList>;
  c-name: "gtk_recent_manager_get_items";
end;

define C-function gtk-recent-manager-purge-items
  input parameter arg1 :: <GtkRecentManager>;
  input parameter arg2 :: <GError*>;
  result res :: <gint>;
  c-name: "gtk_recent_manager_purge_items";
end;

define C-function gtk-recent-info-get-type
  result res :: <GType>;
  c-name: "gtk_recent_info_get_type";
end;

define C-function gtk-recent-info-ref
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <GtkRecentInfo>;
  c-name: "gtk_recent_info_ref";
end;

define C-function gtk-recent-info-unref
  input parameter arg1 :: <GtkRecentInfo>;
  c-name: "gtk_recent_info_unref";
end;

define C-function gtk-recent-info-get-uri
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gchar*>;
  c-name: "gtk_recent_info_get_uri";
end;

define C-function gtk-recent-info-get-display-name
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gchar*>;
  c-name: "gtk_recent_info_get_display_name";
end;

define C-function gtk-recent-info-get-description
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gchar*>;
  c-name: "gtk_recent_info_get_description";
end;

define C-function gtk-recent-info-get-mime-type
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gchar*>;
  c-name: "gtk_recent_info_get_mime_type";
end;

define C-function gtk-recent-info-get-added
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <time-t>;
  c-name: "gtk_recent_info_get_added";
end;

define C-function gtk-recent-info-get-modified
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <time-t>;
  c-name: "gtk_recent_info_get_modified";
end;

define C-function gtk-recent-info-get-visited
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <time-t>;
  c-name: "gtk_recent_info_get_visited";
end;

define C-function gtk-recent-info-get-private-hint
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gboolean>;
  c-name: "gtk_recent_info_get_private_hint";
end;

define C-function gtk-recent-info-get-application-info
  input parameter arg1 :: <GtkRecentInfo>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <guint*>;
  input parameter arg5 :: <time-t*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_info_get_application_info";
end;

define C-function gtk-recent-info-get-applications
  input parameter arg1 :: <GtkRecentInfo>;
  input parameter arg2 :: <gsize*>;
  result res :: <gchar**>;
  c-name: "gtk_recent_info_get_applications";
end;

define C-function gtk-recent-info-last-application
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gchar*>;
  c-name: "gtk_recent_info_last_application";
end;

define C-function gtk-recent-info-has-application
  input parameter arg1 :: <GtkRecentInfo>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_info_has_application";
end;

define C-function gtk-recent-info-get-groups
  input parameter arg1 :: <GtkRecentInfo>;
  input parameter arg2 :: <gsize*>;
  result res :: <gchar**>;
  c-name: "gtk_recent_info_get_groups";
end;

define C-function gtk-recent-info-has-group
  input parameter arg1 :: <GtkRecentInfo>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_info_has_group";
end;

define C-function gtk-recent-info-get-icon
  input parameter arg1 :: <GtkRecentInfo>;
  input parameter arg2 :: <gint>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_recent_info_get_icon";
end;

define C-function gtk-recent-info-get-short-name
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gchar*>;
  c-name: "gtk_recent_info_get_short_name";
end;

define C-function gtk-recent-info-get-uri-display
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gchar*>;
  c-name: "gtk_recent_info_get_uri_display";
end;

define C-function gtk-recent-info-get-age
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gint>;
  c-name: "gtk_recent_info_get_age";
end;

define C-function gtk-recent-info-is-local
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gboolean>;
  c-name: "gtk_recent_info_is_local";
end;

define C-function gtk-recent-info-exists
  input parameter arg1 :: <GtkRecentInfo>;
  result res :: <gboolean>;
  c-name: "gtk_recent_info_exists";
end;

define C-function gtk-recent-info-match
  input parameter arg1 :: <GtkRecentInfo>;
  input parameter arg2 :: <GtkRecentInfo>;
  result res :: <gboolean>;
  c-name: "gtk_recent_info_match";
end;

define C-subtype <_GtkRecentFilter> (<C-void*>) end;
define constant <GtkRecentFilter> = <_GtkRecentFilter>;

define constant <GtkRecentFilterFlags> = <C-int>;
define constant $GTK-RECENT-FILTER-URI = 1;
define constant $GTK-RECENT-FILTER-DISPLAY-NAME = 2;
define constant $GTK-RECENT-FILTER-MIME-TYPE = 4;
define constant $GTK-RECENT-FILTER-APPLICATION = 8;
define constant $GTK-RECENT-FILTER-GROUP = 16;
define constant $GTK-RECENT-FILTER-AGE = 32;

define C-subtype <_GtkRecentFilterInfo> (<C-void*>) end;
define constant <GtkRecentFilterInfo> = <_GtkRecentFilterInfo>;

define constant <anonymous-7535> = <C-function-pointer>;
define constant <GtkRecentFilterFunc> = <anonymous-7535>;

define C-function gtk-recent-filter-get-type
  result res :: <GType>;
  c-name: "gtk_recent_filter_get_type";
end;

define C-function gtk-recent-filter-new
  result res :: <GtkRecentFilter>;
  c-name: "gtk_recent_filter_new";
end;

define C-function gtk-recent-filter-set-name
  input parameter arg1 :: <GtkRecentFilter>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_recent_filter_set_name";
end;

define C-function gtk-recent-filter-get-name
  input parameter arg1 :: <GtkRecentFilter>;
  result res :: <gchar*>;
  c-name: "gtk_recent_filter_get_name";
end;

define C-function gtk-recent-filter-add-mime-type
  input parameter arg1 :: <GtkRecentFilter>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_recent_filter_add_mime_type";
end;

define C-function gtk-recent-filter-add-pattern
  input parameter arg1 :: <GtkRecentFilter>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_recent_filter_add_pattern";
end;

define C-function gtk-recent-filter-add-pixbuf-formats
  input parameter arg1 :: <GtkRecentFilter>;
  c-name: "gtk_recent_filter_add_pixbuf_formats";
end;

define C-function gtk-recent-filter-add-application
  input parameter arg1 :: <GtkRecentFilter>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_recent_filter_add_application";
end;

define C-function gtk-recent-filter-add-group
  input parameter arg1 :: <GtkRecentFilter>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_recent_filter_add_group";
end;

define C-function gtk-recent-filter-add-age
  input parameter arg1 :: <GtkRecentFilter>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_recent_filter_add_age";
end;

define C-function gtk-recent-filter-add-custom
  input parameter arg1 :: <GtkRecentFilter>;
  input parameter arg2 :: <GtkRecentFilterFlags>;
  input parameter arg3 :: <GtkRecentFilterFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  c-name: "gtk_recent_filter_add_custom";
end;

define C-function gtk-recent-filter-get-needed
  input parameter arg1 :: <GtkRecentFilter>;
  result res :: <GtkRecentFilterFlags>;
  c-name: "gtk_recent_filter_get_needed";
end;

define C-function gtk-recent-filter-filter
  input parameter arg1 :: <GtkRecentFilter>;
  input parameter arg2 :: <GtkRecentFilterInfo>;
  result res :: <gboolean>;
  c-name: "gtk_recent_filter_filter";
end;

define C-subtype <_GtkRecentChooserWidgetPrivate> (<C-void*>) end;
define constant <GtkRecentChooserWidgetPrivate> = <_GtkRecentChooserWidgetPrivate>;

define C-subtype <_GtkRecentChooserWidget> (<C-void*>) end;
define constant <GtkRecentChooserWidget> = <_GtkRecentChooserWidget>;

define C-subtype <_GtkRecentChooserWidgetClass> (<C-void*>) end;
define constant <GtkRecentChooserWidgetClass> = <_GtkRecentChooserWidgetClass>;

define C-function gtk-recent-chooser-widget-get-type
  result res :: <GType>;
  c-name: "gtk_recent_chooser_widget_get_type";
end;

define C-function gtk-recent-chooser-widget-new
  result res :: <GtkWidget>;
  c-name: "gtk_recent_chooser_widget_new";
end;

define C-function gtk-recent-chooser-widget-new-for-manager
  input parameter arg1 :: <GtkRecentManager>;
  result res :: <GtkWidget>;
  c-name: "gtk_recent_chooser_widget_new_for_manager";
end;

define constant <GtkRecentSortType> = <C-int>;
define constant $GTK-RECENT-SORT-NONE = 0;
define constant $GTK-RECENT-SORT-MRU = 1;
define constant $GTK-RECENT-SORT-LRU = 2;
define constant $GTK-RECENT-SORT-CUSTOM = 3;

define constant <anonymous-7550> = <C-function-pointer>;
define constant <GtkRecentSortFunc> = <anonymous-7550>;

define C-subtype <_GtkRecentChooser> (<C-void*>) end;
define constant <GtkRecentChooser> = <_GtkRecentChooser>;

define constant <anonymous-7553> = <C-function-pointer>;
define constant <anonymous-7554> = <C-function-pointer>;
define constant <anonymous-7555> = <C-function-pointer>;
define constant <anonymous-7556> = <C-function-pointer>;
define constant <anonymous-7557> = <C-function-pointer>;
define constant <anonymous-7558> = <C-function-pointer>;
define constant <anonymous-7559> = <C-function-pointer>;
define constant <anonymous-7560> = <C-function-pointer>;
define constant <anonymous-7561> = <C-function-pointer>;
define constant <anonymous-7562> = <C-function-pointer>;
define constant <anonymous-7563> = <C-function-pointer>;
define constant <anonymous-7564> = <C-function-pointer>;
define constant <anonymous-7565> = <C-function-pointer>;
define constant <anonymous-7566> = <C-function-pointer>;
define C-subtype <_GtkRecentChooserIface> (<C-void*>) end;
define constant <GtkRecentChooserIface> = <_GtkRecentChooserIface>;

define constant <GtkRecentChooserError> = <C-int>;
define constant $GTK-RECENT-CHOOSER-ERROR-NOT-FOUND = 0;
define constant $GTK-RECENT-CHOOSER-ERROR-INVALID-URI = 1;

define C-function gtk-recent-chooser-error-quark
  result res :: <GQuark>;
  c-name: "gtk_recent_chooser_error_quark";
end;

define C-function gtk-recent-chooser-get-type
  result res :: <GType>;
  c-name: "gtk_recent_chooser_get_type";
end;

define C-function gtk-recent-chooser-set-show-private
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_recent_chooser_set_show_private";
end;

define C-function gtk-recent-chooser-get-show-private
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_get_show_private";
end;

define C-function gtk-recent-chooser-set-show-not-found
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_recent_chooser_set_show_not_found";
end;

define C-function gtk-recent-chooser-get-show-not-found
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_get_show_not_found";
end;

define C-function gtk-recent-chooser-set-select-multiple
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_recent_chooser_set_select_multiple";
end;

define C-function gtk-recent-chooser-get-select-multiple
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_get_select_multiple";
end;

define C-function gtk-recent-chooser-set-limit
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_recent_chooser_set_limit";
end;

define C-function gtk-recent-chooser-get-limit
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gint>;
  c-name: "gtk_recent_chooser_get_limit";
end;

define C-function gtk-recent-chooser-set-local-only
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_recent_chooser_set_local_only";
end;

define C-function gtk-recent-chooser-get-local-only
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_get_local_only";
end;

define C-function gtk-recent-chooser-set-show-tips
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_recent_chooser_set_show_tips";
end;

define C-function gtk-recent-chooser-get-show-tips
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_get_show_tips";
end;

define C-function gtk-recent-chooser-set-show-numbers
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_recent_chooser_set_show_numbers";
end;

define C-function gtk-recent-chooser-get-show-numbers
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_get_show_numbers";
end;

define C-function gtk-recent-chooser-set-show-icons
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_recent_chooser_set_show_icons";
end;

define C-function gtk-recent-chooser-get-show-icons
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_get_show_icons";
end;

define C-function gtk-recent-chooser-set-sort-type
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <GtkRecentSortType>;
  c-name: "gtk_recent_chooser_set_sort_type";
end;

define C-function gtk-recent-chooser-get-sort-type
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <GtkRecentSortType>;
  c-name: "gtk_recent_chooser_get_sort_type";
end;

define C-function gtk-recent-chooser-set-sort-func
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <GtkRecentSortFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "gtk_recent_chooser_set_sort_func";
end;

define C-function gtk-recent-chooser-set-current-uri
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_set_current_uri";
end;

define C-function gtk-recent-chooser-get-current-uri
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <gchar*>;
  c-name: "gtk_recent_chooser_get_current_uri";
end;

define C-function gtk-recent-chooser-get-current-item
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <GtkRecentInfo>;
  c-name: "gtk_recent_chooser_get_current_item";
end;

define C-function gtk-recent-chooser-select-uri
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_select_uri";
end;

define C-function gtk-recent-chooser-unselect-uri
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_recent_chooser_unselect_uri";
end;

define C-function gtk-recent-chooser-select-all
  input parameter arg1 :: <GtkRecentChooser>;
  c-name: "gtk_recent_chooser_select_all";
end;

define C-function gtk-recent-chooser-unselect-all
  input parameter arg1 :: <GtkRecentChooser>;
  c-name: "gtk_recent_chooser_unselect_all";
end;

define C-function gtk-recent-chooser-get-items
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <GList>;
  c-name: "gtk_recent_chooser_get_items";
end;

define C-function gtk-recent-chooser-get-uris
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <gsize*>;
  result res :: <gchar**>;
  c-name: "gtk_recent_chooser_get_uris";
end;

define C-function gtk-recent-chooser-add-filter
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <GtkRecentFilter>;
  c-name: "gtk_recent_chooser_add_filter";
end;

define C-function gtk-recent-chooser-remove-filter
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <GtkRecentFilter>;
  c-name: "gtk_recent_chooser_remove_filter";
end;

define C-function gtk-recent-chooser-list-filters
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <GSList>;
  c-name: "gtk_recent_chooser_list_filters";
end;

define C-function gtk-recent-chooser-set-filter
  input parameter arg1 :: <GtkRecentChooser>;
  input parameter arg2 :: <GtkRecentFilter>;
  c-name: "gtk_recent_chooser_set_filter";
end;

define C-function gtk-recent-chooser-get-filter
  input parameter arg1 :: <GtkRecentChooser>;
  result res :: <GtkRecentFilter>;
  c-name: "gtk_recent_chooser_get_filter";
end;

define C-subtype <_GtkRecentChooserMenuPrivate> (<C-void*>) end;
define constant <GtkRecentChooserMenuPrivate> = <_GtkRecentChooserMenuPrivate>;

define C-subtype <_GtkRecentChooserMenu> (<C-void*>) end;
define constant <GtkRecentChooserMenu> = <_GtkRecentChooserMenu>;

define constant <anonymous-7604> = <C-function-pointer>;
define constant <anonymous-7605> = <C-function-pointer>;
define constant <anonymous-7606> = <C-function-pointer>;
define constant <anonymous-7607> = <C-function-pointer>;
define C-subtype <_GtkRecentChooserMenuClass> (<C-void*>) end;
define constant <GtkRecentChooserMenuClass> = <_GtkRecentChooserMenuClass>;

define C-function gtk-recent-chooser-menu-get-type
  result res :: <GType>;
  c-name: "gtk_recent_chooser_menu_get_type";
end;

define C-function gtk-recent-chooser-menu-new
  result res :: <GtkWidget>;
  c-name: "gtk_recent_chooser_menu_new";
end;

define C-function gtk-recent-chooser-menu-new-for-manager
  input parameter arg1 :: <GtkRecentManager>;
  result res :: <GtkWidget>;
  c-name: "gtk_recent_chooser_menu_new_for_manager";
end;

define C-function gtk-recent-chooser-menu-get-show-numbers
  input parameter arg1 :: <GtkRecentChooserMenu>;
  result res :: <gboolean>;
  c-name: "gtk_recent_chooser_menu_get_show_numbers";
end;

define C-function gtk-recent-chooser-menu-set-show-numbers
  input parameter arg1 :: <GtkRecentChooserMenu>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_recent_chooser_menu_set_show_numbers";
end;

define C-subtype <_GtkDialog> (<_GtkWindow>, <_AtkImplementorIface>) end;
define constant <GtkDialog> = <_GtkDialog>;

define C-subtype <_GtkRecentChooserDialogPrivate> (<C-void*>) end;
define constant <GtkRecentChooserDialogPrivate> = <_GtkRecentChooserDialogPrivate>;

define C-subtype <_GtkRecentChooserDialog> (<C-void*>) end;
define constant <GtkRecentChooserDialog> = <_GtkRecentChooserDialog>;

define constant <anonymous-4053> = <C-function-pointer>;
define constant <anonymous-4054> = <C-function-pointer>;
define constant <anonymous-4055> = <C-function-pointer>;
define constant <anonymous-4056> = <C-function-pointer>;
define constant <anonymous-4057> = <C-function-pointer>;
define constant <anonymous-4058> = <C-function-pointer>;
define C-subtype <_GtkDialogClass> (<C-void*>) end;
define constant <GtkDialogClass> = <_GtkDialogClass>;

define C-subtype <_GtkRecentChooserDialogClass> (<C-void*>) end;
define constant <GtkRecentChooserDialogClass> = <_GtkRecentChooserDialogClass>;

define C-function gtk-recent-chooser-dialog-get-type
  result res :: <GType>;
  c-name: "gtk_recent_chooser_dialog_get_type";
end;

define C-function gtk-recent-chooser-dialog-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkWindow>;
  input parameter arg3 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_recent_chooser_dialog_new";
end;

define C-function gtk-recent-chooser-dialog-new-for-manager
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkWindow>;
  input parameter arg3 :: <GtkRecentManager>;
  input parameter arg4 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_recent_chooser_dialog_new_for_manager";
end;

define constant <GtkDialogFlags> = <C-int>;
define constant $GTK-DIALOG-MODAL = 1;
define constant $GTK-DIALOG-DESTROY-WITH-PARENT = 2;
define constant $GTK-DIALOG-NO-SEPARATOR = 4;

define constant <GtkResponseType> = <C-int>;
define constant $GTK-RESPONSE-NONE = -1;
define constant $GTK-RESPONSE-REJECT = -2;
define constant $GTK-RESPONSE-ACCEPT = -3;
define constant $GTK-RESPONSE-DELETE-EVENT = -4;
define constant $GTK-RESPONSE-OK = -5;
define constant $GTK-RESPONSE-CANCEL = -6;
define constant $GTK-RESPONSE-CLOSE = -7;
define constant $GTK-RESPONSE-YES = -8;
define constant $GTK-RESPONSE-NO = -9;
define constant $GTK-RESPONSE-APPLY = -10;
define constant $GTK-RESPONSE-HELP = -11;

define C-function gtk-dialog-get-type
  result res :: <GType>;
  c-name: "gtk_dialog_get_type";
end;

define C-function gtk-dialog-new
  result res :: <GtkWidget>;
  c-name: "gtk_dialog_new";
end;

define C-function gtk-dialog-new-with-buttons
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkWindow>;
  input parameter arg3 :: <GtkDialogFlags>;
  input parameter arg4 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_dialog_new_with_buttons";
end;

define C-function gtk-dialog-add-action-widget
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_dialog_add_action_widget";
end;

define C-function gtk-dialog-add-button
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_dialog_add_button";
end;

define C-function gtk-dialog-add-buttons
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_dialog_add_buttons";
end;

define C-function gtk-dialog-set-response-sensitive
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_dialog_set_response_sensitive";
end;

define C-function gtk-dialog-set-default-response
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_dialog_set_default_response";
end;

define C-function gtk-dialog-get-response-for-widget
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_dialog_get_response_for_widget";
end;

define C-function gtk-dialog-set-has-separator
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_dialog_set_has_separator";
end;

define C-function gtk-dialog-get-has-separator
  input parameter arg1 :: <GtkDialog>;
  result res :: <gboolean>;
  c-name: "gtk_dialog_get_has_separator";
end;

define C-function gtk-alternative-dialog-button-order
  input parameter arg1 :: <GdkScreen>;
  result res :: <gboolean>;
  c-name: "gtk_alternative_dialog_button_order";
end;

define C-function gtk-dialog-set-alternative-button-order
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_dialog_set_alternative_button_order";
end;

define C-function gtk-dialog-set-alternative-button-order-from-array
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_dialog_set_alternative_button_order_from_array";
end;

define C-function gtk-dialog-response
  input parameter arg1 :: <GtkDialog>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_dialog_response";
end;

define C-function gtk-dialog-run
  input parameter arg1 :: <GtkDialog>;
  result res :: <gint>;
  c-name: "gtk_dialog_run";
end;

define C-subtype <_GtkRadioToolButton> (<_GtkToggleToolButton>, <_AtkImplementorIface>) end;
define constant <GtkRadioToolButton> = <_GtkRadioToolButton>;

define constant <anonymous-7477> = <C-function-pointer>;
define constant <anonymous-7478> = <C-function-pointer>;
define constant <anonymous-7479> = <C-function-pointer>;
define constant <anonymous-7480> = <C-function-pointer>;
define C-subtype <_GtkRadioToolButtonClass> (<C-void*>) end;
define constant <GtkRadioToolButtonClass> = <_GtkRadioToolButtonClass>;

define C-function gtk-radio-tool-button-get-type
  result res :: <GType>;
  c-name: "gtk_radio_tool_button_get_type";
end;

define C-function gtk-radio-tool-button-new
  input parameter arg1 :: <GSList>;
  result res :: <GtkToolItem>;
  c-name: "gtk_radio_tool_button_new";
end;

define C-function gtk-radio-tool-button-new-from-stock
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkToolItem>;
  c-name: "gtk_radio_tool_button_new_from_stock";
end;

define C-function gtk-radio-tool-button-new-from-widget
  input parameter arg1 :: <GtkRadioToolButton>;
  result res :: <GtkToolItem>;
  c-name: "gtk_radio_tool_button_new_from_widget";
end;

define C-function gtk-radio-tool-button-new-with-stock-from-widget
  input parameter arg1 :: <GtkRadioToolButton>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkToolItem>;
  c-name: "gtk_radio_tool_button_new_with_stock_from_widget";
end;

define C-function gtk-radio-tool-button-get-group
  input parameter arg1 :: <GtkRadioToolButton>;
  result res :: <GSList>;
  c-name: "gtk_radio_tool_button_get_group";
end;

define C-function gtk-radio-tool-button-set-group
  input parameter arg1 :: <GtkRadioToolButton>;
  input parameter arg2 :: <GSList>;
  c-name: "gtk_radio_tool_button_set_group";
end;

define C-subtype <_GtkCheckMenuItem> (<_GtkMenuItem>, <_AtkImplementorIface>) end;
define constant <GtkCheckMenuItem> = <_GtkCheckMenuItem>;

define C-subtype <_GtkRadioMenuItem> (<_GtkCheckMenuItem>, <_AtkImplementorIface>) end;
define constant <GtkRadioMenuItem> = <_GtkRadioMenuItem>;

define constant <anonymous-5341> = <C-function-pointer>;
define constant <anonymous-5342> = <C-function-pointer>;
define constant <anonymous-5343> = <C-function-pointer>;
define constant <anonymous-5344> = <C-function-pointer>;
define constant <anonymous-5345> = <C-function-pointer>;
define constant <anonymous-5346> = <C-function-pointer>;
define C-subtype <_GtkCheckMenuItemClass> (<C-void*>) end;
define constant <GtkCheckMenuItemClass> = <_GtkCheckMenuItemClass>;

define constant <anonymous-7454> = <C-function-pointer>;
define constant <anonymous-7455> = <C-function-pointer>;
define constant <anonymous-7456> = <C-function-pointer>;
define constant <anonymous-7457> = <C-function-pointer>;
define C-subtype <_GtkRadioMenuItemClass> (<C-void*>) end;
define constant <GtkRadioMenuItemClass> = <_GtkRadioMenuItemClass>;

define C-function gtk-radio-menu-item-get-type
  result res :: <GType>;
  c-name: "gtk_radio_menu_item_get_type";
end;

define C-function gtk-radio-menu-item-new
  input parameter arg1 :: <GSList>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_menu_item_new";
end;

define C-function gtk-radio-menu-item-new-with-label
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_menu_item_new_with_label";
end;

define C-function gtk-radio-menu-item-new-with-mnemonic
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_menu_item_new_with_mnemonic";
end;

define C-function gtk-radio-menu-item-new-from-widget
  input parameter arg1 :: <GtkRadioMenuItem>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_menu_item_new_from_widget";
end;

define C-function gtk-radio-menu-item-new-with-mnemonic-from-widget
  input parameter arg1 :: <GtkRadioMenuItem>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_menu_item_new_with_mnemonic_from_widget";
end;

define C-function gtk-radio-menu-item-new-with-label-from-widget
  input parameter arg1 :: <GtkRadioMenuItem>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_menu_item_new_with_label_from_widget";
end;

define C-function gtk-radio-menu-item-get-group
  input parameter arg1 :: <GtkRadioMenuItem>;
  result res :: <GSList>;
  c-name: "gtk_radio_menu_item_get_group";
end;

define C-function gtk-radio-menu-item-set-group
  input parameter arg1 :: <GtkRadioMenuItem>;
  input parameter arg2 :: <GSList>;
  c-name: "gtk_radio_menu_item_set_group";
end;

define constant gtk-radio-menu-item-group = gtk-radio-menu-item-get-group;

define C-function gtk-check-menu-item-get-type
  result res :: <GType>;
  c-name: "gtk_check_menu_item_get_type";
end;

define C-function gtk-check-menu-item-new
  result res :: <GtkWidget>;
  c-name: "gtk_check_menu_item_new";
end;

define C-function gtk-check-menu-item-new-with-label
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_check_menu_item_new_with_label";
end;

define C-function gtk-check-menu-item-new-with-mnemonic
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_check_menu_item_new_with_mnemonic";
end;

define C-function gtk-check-menu-item-set-active
  input parameter arg1 :: <GtkCheckMenuItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_check_menu_item_set_active";
end;

define C-function gtk-check-menu-item-get-active
  input parameter arg1 :: <GtkCheckMenuItem>;
  result res :: <gboolean>;
  c-name: "gtk_check_menu_item_get_active";
end;

define C-function gtk-check-menu-item-toggled
  input parameter arg1 :: <GtkCheckMenuItem>;
  c-name: "gtk_check_menu_item_toggled";
end;

define C-function gtk-check-menu-item-set-inconsistent
  input parameter arg1 :: <GtkCheckMenuItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_check_menu_item_set_inconsistent";
end;

define C-function gtk-check-menu-item-get-inconsistent
  input parameter arg1 :: <GtkCheckMenuItem>;
  result res :: <gboolean>;
  c-name: "gtk_check_menu_item_get_inconsistent";
end;

define C-function gtk-check-menu-item-set-draw-as-radio
  input parameter arg1 :: <GtkCheckMenuItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_check_menu_item_set_draw_as_radio";
end;

define C-function gtk-check-menu-item-get-draw-as-radio
  input parameter arg1 :: <GtkCheckMenuItem>;
  result res :: <gboolean>;
  c-name: "gtk_check_menu_item_get_draw_as_radio";
end;

define C-function gtk-check-menu-item-set-show-toggle
  input parameter arg1 :: <GtkCheckMenuItem>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_check_menu_item_set_show_toggle";
end;

define constant gtk-check-menu-item-set-state = gtk-check-menu-item-set-active;

define C-subtype <_GtkCheckButton> (<_GtkToggleButton>, <_AtkImplementorIface>) end;
define constant <GtkCheckButton> = <_GtkCheckButton>;

define C-subtype <_GtkRadioButton> (<_GtkCheckButton>, <_AtkImplementorIface>) end;
define constant <GtkRadioButton> = <_GtkRadioButton>;

define constant <anonymous-5283> = <C-function-pointer>;
define constant <anonymous-5284> = <C-function-pointer>;
define constant <anonymous-5285> = <C-function-pointer>;
define constant <anonymous-5286> = <C-function-pointer>;
define constant <anonymous-5287> = <C-function-pointer>;
define C-subtype <_GtkCheckButtonClass> (<C-void*>) end;
define constant <GtkCheckButtonClass> = <_GtkCheckButtonClass>;

define constant <anonymous-7441> = <C-function-pointer>;
define constant <anonymous-7442> = <C-function-pointer>;
define constant <anonymous-7443> = <C-function-pointer>;
define constant <anonymous-7444> = <C-function-pointer>;
define C-subtype <_GtkRadioButtonClass> (<C-void*>) end;
define constant <GtkRadioButtonClass> = <_GtkRadioButtonClass>;

define C-function gtk-radio-button-get-type
  result res :: <GType>;
  c-name: "gtk_radio_button_get_type";
end;

define C-function gtk-radio-button-new
  input parameter arg1 :: <GSList>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_button_new";
end;

define C-function gtk-radio-button-new-from-widget
  input parameter arg1 :: <GtkRadioButton>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_button_new_from_widget";
end;

define C-function gtk-radio-button-new-with-label
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_button_new_with_label";
end;

define C-function gtk-radio-button-new-with-label-from-widget
  input parameter arg1 :: <GtkRadioButton>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_button_new_with_label_from_widget";
end;

define C-function gtk-radio-button-new-with-mnemonic
  input parameter arg1 :: <GSList>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_button_new_with_mnemonic";
end;

define C-function gtk-radio-button-new-with-mnemonic-from-widget
  input parameter arg1 :: <GtkRadioButton>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_radio_button_new_with_mnemonic_from_widget";
end;

define C-function gtk-radio-button-get-group
  input parameter arg1 :: <GtkRadioButton>;
  result res :: <GSList>;
  c-name: "gtk_radio_button_get_group";
end;

define C-function gtk-radio-button-set-group
  input parameter arg1 :: <GtkRadioButton>;
  input parameter arg2 :: <GSList>;
  c-name: "gtk_radio_button_set_group";
end;

define constant gtk-radio-button-group = gtk-radio-button-get-group;

define C-function gtk-check-button-get-type
  result res :: <GType>;
  c-name: "gtk_check_button_get_type";
end;

define C-function gtk-check-button-new
  result res :: <GtkWidget>;
  c-name: "gtk_check_button_new";
end;

define C-function gtk-check-button-new-with-label
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_check_button_new_with_label";
end;

define C-function gtk-check-button-new-with-mnemonic
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_check_button_new_with_mnemonic";
end;

define C-subtype <_GtkRadioActionPrivate> (<C-void*>) end;
define constant <GtkRadioActionPrivate> = <_GtkRadioActionPrivate>;

define C-subtype <_GtkRadioAction> (<_GtkToggleAction>) end;
define constant <GtkRadioAction> = <_GtkRadioAction>;

define constant <anonymous-7430> = <C-function-pointer>;
define constant <anonymous-7431> = <C-function-pointer>;
define constant <anonymous-7432> = <C-function-pointer>;
define constant <anonymous-7433> = <C-function-pointer>;
define constant <anonymous-7434> = <C-function-pointer>;
define C-subtype <_GtkRadioActionClass> (<C-void*>) end;
define constant <GtkRadioActionClass> = <_GtkRadioActionClass>;

define C-function gtk-radio-action-get-type
  result res :: <GType>;
  c-name: "gtk_radio_action_get_type";
end;

define C-function gtk-radio-action-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gint>;
  result res :: <GtkRadioAction>;
  c-name: "gtk_radio_action_new";
end;

define C-function gtk-radio-action-get-group
  input parameter arg1 :: <GtkRadioAction>;
  result res :: <GSList>;
  c-name: "gtk_radio_action_get_group";
end;

define C-function gtk-radio-action-set-group
  input parameter arg1 :: <GtkRadioAction>;
  input parameter arg2 :: <GSList>;
  c-name: "gtk_radio_action_set_group";
end;

define C-function gtk-radio-action-get-current-value
  input parameter arg1 :: <GtkRadioAction>;
  result res :: <gint>;
  c-name: "gtk_radio_action_get_current_value";
end;

define C-function gtk-radio-action-set-current-value
  input parameter arg1 :: <GtkRadioAction>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_radio_action_set_current_value";
end;

define C-subtype <_GtkProgress> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkProgress> = <_GtkProgress>;

define constant <GtkProgressBarStyle> = <C-int>;
define constant $GTK-PROGRESS-CONTINUOUS = 0;
define constant $GTK-PROGRESS-DISCRETE = 1;

define constant <GtkProgressBarOrientation> = <C-int>;
define constant $GTK-PROGRESS-LEFT-TO-RIGHT = 0;
define constant $GTK-PROGRESS-RIGHT-TO-LEFT = 1;
define constant $GTK-PROGRESS-BOTTOM-TO-TOP = 2;
define constant $GTK-PROGRESS-TOP-TO-BOTTOM = 3;

define C-subtype <_GtkProgressBar> (<_GtkProgress>, <_AtkImplementorIface>) end;
define constant <GtkProgressBar> = <_GtkProgressBar>;

define constant <anonymous-7369> = <C-function-pointer>;
define constant <anonymous-7370> = <C-function-pointer>;
define constant <anonymous-7371> = <C-function-pointer>;
define constant <anonymous-7372> = <C-function-pointer>;
define constant <anonymous-7373> = <C-function-pointer>;
define constant <anonymous-7374> = <C-function-pointer>;
define constant <anonymous-7375> = <C-function-pointer>;
define C-subtype <_GtkProgressClass> (<C-void*>) end;
define constant <GtkProgressClass> = <_GtkProgressClass>;

define constant <anonymous-7395> = <C-function-pointer>;
define constant <anonymous-7396> = <C-function-pointer>;
define constant <anonymous-7397> = <C-function-pointer>;
define constant <anonymous-7398> = <C-function-pointer>;
define C-subtype <_GtkProgressBarClass> (<C-void*>) end;
define constant <GtkProgressBarClass> = <_GtkProgressBarClass>;

define C-function gtk-progress-bar-get-type
  result res :: <GType>;
  c-name: "gtk_progress_bar_get_type";
end;

define C-function gtk-progress-bar-new
  result res :: <GtkWidget>;
  c-name: "gtk_progress_bar_new";
end;

define C-function gtk-progress-bar-pulse
  input parameter arg1 :: <GtkProgressBar>;
  c-name: "gtk_progress_bar_pulse";
end;

define C-function gtk-progress-bar-set-text
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_progress_bar_set_text";
end;

define C-function gtk-progress-bar-set-fraction
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_progress_bar_set_fraction";
end;

define C-function gtk-progress-bar-set-pulse-step
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_progress_bar_set_pulse_step";
end;

define C-function gtk-progress-bar-set-orientation
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <GtkProgressBarOrientation>;
  c-name: "gtk_progress_bar_set_orientation";
end;

define C-function gtk-progress-bar-get-text
  input parameter arg1 :: <GtkProgressBar>;
  result res :: <gchar*>;
  c-name: "gtk_progress_bar_get_text";
end;

define C-function gtk-progress-bar-get-fraction
  input parameter arg1 :: <GtkProgressBar>;
  result res :: <gdouble>;
  c-name: "gtk_progress_bar_get_fraction";
end;

define C-function gtk-progress-bar-get-pulse-step
  input parameter arg1 :: <GtkProgressBar>;
  result res :: <gdouble>;
  c-name: "gtk_progress_bar_get_pulse_step";
end;

define C-function gtk-progress-bar-get-orientation
  input parameter arg1 :: <GtkProgressBar>;
  result res :: <GtkProgressBarOrientation>;
  c-name: "gtk_progress_bar_get_orientation";
end;

define C-function gtk-progress-bar-set-ellipsize
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <PangoEllipsizeMode>;
  c-name: "gtk_progress_bar_set_ellipsize";
end;

define C-function gtk-progress-bar-get-ellipsize
  input parameter arg1 :: <GtkProgressBar>;
  result res :: <PangoEllipsizeMode>;
  c-name: "gtk_progress_bar_get_ellipsize";
end;

define C-function gtk-progress-bar-new-with-adjustment
  input parameter arg1 :: <GtkAdjustment>;
  result res :: <GtkWidget>;
  c-name: "gtk_progress_bar_new_with_adjustment";
end;

define C-function gtk-progress-bar-set-bar-style
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <GtkProgressBarStyle>;
  c-name: "gtk_progress_bar_set_bar_style";
end;

define C-function gtk-progress-bar-set-discrete-blocks
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_progress_bar_set_discrete_blocks";
end;

define C-function gtk-progress-bar-set-activity-step
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_progress_bar_set_activity_step";
end;

define C-function gtk-progress-bar-set-activity-blocks
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_progress_bar_set_activity_blocks";
end;

define C-function gtk-progress-bar-update
  input parameter arg1 :: <GtkProgressBar>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_progress_bar_update";
end;

define C-function gtk-progress-get-type
  result res :: <GType>;
  c-name: "gtk_progress_get_type";
end;

define C-function gtk-progress-set-show-text
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_progress_set_show_text";
end;

define C-function gtk-progress-set-text-alignment
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  c-name: "gtk_progress_set_text_alignment";
end;

define C-function gtk-progress-set-format-string
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_progress_set_format_string";
end;

define C-function gtk-progress-set-adjustment
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_progress_set_adjustment";
end;

define C-function gtk-progress-configure
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <gdouble>;
  c-name: "gtk_progress_configure";
end;

define C-function gtk-progress-set-percentage
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_progress_set_percentage";
end;

define C-function gtk-progress-set-value
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_progress_set_value";
end;

define C-function gtk-progress-get-value
  input parameter arg1 :: <GtkProgress>;
  result res :: <gdouble>;
  c-name: "gtk_progress_get_value";
end;

define C-function gtk-progress-set-activity-mode
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_progress_set_activity_mode";
end;

define C-function gtk-progress-get-current-text
  input parameter arg1 :: <GtkProgress>;
  result res :: <gchar*>;
  c-name: "gtk_progress_get_current_text";
end;

define C-function gtk-progress-get-text-from-value
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gdouble>;
  result res :: <gchar*>;
  c-name: "gtk_progress_get_text_from_value";
end;

define C-function gtk-progress-get-current-percentage
  input parameter arg1 :: <GtkProgress>;
  result res :: <gdouble>;
  c-name: "gtk_progress_get_current_percentage";
end;

define C-function gtk-progress-get-percentage-from-value
  input parameter arg1 :: <GtkProgress>;
  input parameter arg2 :: <gdouble>;
  result res :: <gdouble>;
  c-name: "gtk_progress_get_percentage_from_value";
end;

define C-subtype <_GtkPrintOperationPrivate> (<C-void*>) end;
define constant <GtkPrintOperationPrivate> = <_GtkPrintOperationPrivate>;

define C-subtype <_GtkPrintOperation> (<C-void*>) end;
define constant <GtkPrintOperation> = <_GtkPrintOperation>;

define constant <GtkPrintOperationResult> = <C-int>;
define constant $GTK-PRINT-OPERATION-RESULT-ERROR = 0;
define constant $GTK-PRINT-OPERATION-RESULT-APPLY = 1;
define constant $GTK-PRINT-OPERATION-RESULT-CANCEL = 2;
define constant $GTK-PRINT-OPERATION-RESULT-IN-PROGRESS = 3;

define constant <anonymous-7322> = <C-function-pointer>;
define C-subtype <_GtkPrintContext> (<C-void*>) end;
define constant <GtkPrintContext> = <_GtkPrintContext>;

define constant <anonymous-7323> = <C-function-pointer>;
define constant <anonymous-7324> = <C-function-pointer>;
define C-subtype <_GtkPageSetup> (<C-void*>) end;
define constant <GtkPageSetup> = <_GtkPageSetup>;

define constant <anonymous-7325> = <C-function-pointer>;
define constant <anonymous-7326> = <C-function-pointer>;
define constant <anonymous-7327> = <C-function-pointer>;
define constant <anonymous-7328> = <C-function-pointer>;
define constant <anonymous-7329> = <C-function-pointer>;
define constant <anonymous-7330> = <C-function-pointer>;
define C-subtype <_GtkPrintOperationPreview> (<C-void*>) end;
define constant <GtkPrintOperationPreview> = <_GtkPrintOperationPreview>;

define constant <anonymous-7331> = <C-function-pointer>;
define constant <anonymous-7332> = <C-function-pointer>;
define constant <anonymous-7333> = <C-function-pointer>;
define constant <anonymous-7334> = <C-function-pointer>;
define constant <anonymous-7335> = <C-function-pointer>;
define constant <anonymous-7336> = <C-function-pointer>;
define constant <anonymous-7337> = <C-function-pointer>;
define constant <anonymous-7338> = <C-function-pointer>;
define C-subtype <_GtkPrintOperationClass> (<C-void*>) end;
define constant <GtkPrintOperationClass> = <_GtkPrintOperationClass>;

define constant <GtkPrintStatus> = <C-int>;
define constant $GTK-PRINT-STATUS-INITIAL = 0;
define constant $GTK-PRINT-STATUS-PREPARING = 1;
define constant $GTK-PRINT-STATUS-GENERATING-DATA = 2;
define constant $GTK-PRINT-STATUS-SENDING-DATA = 3;
define constant $GTK-PRINT-STATUS-PENDING = 4;
define constant $GTK-PRINT-STATUS-PENDING-ISSUE = 5;
define constant $GTK-PRINT-STATUS-PRINTING = 6;
define constant $GTK-PRINT-STATUS-FINISHED = 7;
define constant $GTK-PRINT-STATUS-FINISHED-ABORTED = 8;

define constant <GtkPrintOperationAction> = <C-int>;
define constant $GTK-PRINT-OPERATION-ACTION-PRINT-DIALOG = 0;
define constant $GTK-PRINT-OPERATION-ACTION-PRINT = 1;
define constant $GTK-PRINT-OPERATION-ACTION-PREVIEW = 2;
define constant $GTK-PRINT-OPERATION-ACTION-EXPORT = 3;

define constant <GtkPrintError> = <C-int>;
define constant $GTK-PRINT-ERROR-GENERAL = 0;
define constant $GTK-PRINT-ERROR-INTERNAL-ERROR = 1;
define constant $GTK-PRINT-ERROR-NOMEM = 2;

define C-function gtk-print-error-quark
  result res :: <GQuark>;
  c-name: "gtk_print_error_quark";
end;

define C-function gtk-print-operation-get-type
  result res :: <GType>;
  c-name: "gtk_print_operation_get_type";
end;

define C-function gtk-print-operation-new
  result res :: <GtkPrintOperation>;
  c-name: "gtk_print_operation_new";
end;

define C-function gtk-print-operation-set-default-page-setup
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <GtkPageSetup>;
  c-name: "gtk_print_operation_set_default_page_setup";
end;

define C-function gtk-print-operation-get-default-page-setup
  input parameter arg1 :: <GtkPrintOperation>;
  result res :: <GtkPageSetup>;
  c-name: "gtk_print_operation_get_default_page_setup";
end;

define C-subtype <_GtkPrintSettings> (<C-void*>) end;
define constant <GtkPrintSettings> = <_GtkPrintSettings>;

define C-function gtk-print-operation-set-print-settings
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <GtkPrintSettings>;
  c-name: "gtk_print_operation_set_print_settings";
end;

define C-function gtk-print-operation-get-print-settings
  input parameter arg1 :: <GtkPrintOperation>;
  result res :: <GtkPrintSettings>;
  c-name: "gtk_print_operation_get_print_settings";
end;

define C-function gtk-print-operation-set-job-name
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_operation_set_job_name";
end;

define C-function gtk-print-operation-set-n-pages
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_print_operation_set_n_pages";
end;

define C-function gtk-print-operation-set-current-page
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_print_operation_set_current_page";
end;

define C-function gtk-print-operation-set-use-full-page
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_print_operation_set_use_full_page";
end;

define C-function gtk-print-operation-set-unit
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <GtkUnit>;
  c-name: "gtk_print_operation_set_unit";
end;

define C-function gtk-print-operation-set-export-filename
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_operation_set_export_filename";
end;

define C-function gtk-print-operation-set-track-print-status
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_print_operation_set_track_print_status";
end;

define C-function gtk-print-operation-set-show-progress
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_print_operation_set_show_progress";
end;

define C-function gtk-print-operation-set-allow-async
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_print_operation_set_allow_async";
end;

define C-function gtk-print-operation-set-custom-tab-label
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_operation_set_custom_tab_label";
end;

define C-function gtk-print-operation-run
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <GtkPrintOperationAction>;
  input parameter arg3 :: <GtkWindow>;
  input parameter arg4 :: <GError*>;
  result res :: <GtkPrintOperationResult>;
  c-name: "gtk_print_operation_run";
end;

define C-function gtk-print-operation-get-error
  input parameter arg1 :: <GtkPrintOperation>;
  input parameter arg2 :: <GError*>;
  c-name: "gtk_print_operation_get_error";
end;

define C-function gtk-print-operation-get-status
  input parameter arg1 :: <GtkPrintOperation>;
  result res :: <GtkPrintStatus>;
  c-name: "gtk_print_operation_get_status";
end;

define C-function gtk-print-operation-get-status-string
  input parameter arg1 :: <GtkPrintOperation>;
  result res :: <gchar*>;
  c-name: "gtk_print_operation_get_status_string";
end;

define C-function gtk-print-operation-is-finished
  input parameter arg1 :: <GtkPrintOperation>;
  result res :: <gboolean>;
  c-name: "gtk_print_operation_is_finished";
end;

define C-function gtk-print-operation-cancel
  input parameter arg1 :: <GtkPrintOperation>;
  c-name: "gtk_print_operation_cancel";
end;

define C-function gtk-print-run-page-setup-dialog
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkPageSetup>;
  input parameter arg3 :: <GtkPrintSettings>;
  result res :: <GtkPageSetup>;
  c-name: "gtk_print_run_page_setup_dialog";
end;

define constant <anonymous-7364> = <C-function-pointer>;
define constant <GtkPageSetupDoneFunc> = <anonymous-7364>;

define C-function gtk-print-run-page-setup-dialog-async
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkPageSetup>;
  input parameter arg3 :: <GtkPrintSettings>;
  input parameter arg4 :: <GtkPageSetupDoneFunc>;
  input parameter arg5 :: <gpointer>;
  c-name: "gtk_print_run_page_setup_dialog_async";
end;

define constant <anonymous-7303> = <C-function-pointer>;
define constant <anonymous-7304> = <C-function-pointer>;
define constant <anonymous-7305> = <C-function-pointer>;
define constant <anonymous-7306> = <C-function-pointer>;
define constant <anonymous-7307> = <C-function-pointer>;
define constant <anonymous-7308> = <C-function-pointer>;
define constant <anonymous-7309> = <C-function-pointer>;
define constant <anonymous-7310> = <C-function-pointer>;
define constant <anonymous-7311> = <C-function-pointer>;
define constant <anonymous-7312> = <C-function-pointer>;
define constant <anonymous-7313> = <C-function-pointer>;
define constant <anonymous-7314> = <C-function-pointer>;
define C-subtype <_GtkPrintOperationPreviewIface> (<C-void*>) end;
define constant <GtkPrintOperationPreviewIface> = <_GtkPrintOperationPreviewIface>;

define C-function gtk-print-operation-preview-get-type
  result res :: <GType>;
  c-name: "gtk_print_operation_preview_get_type";
end;

define C-function gtk-print-operation-preview-render-page
  input parameter arg1 :: <GtkPrintOperationPreview>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_print_operation_preview_render_page";
end;

define C-function gtk-print-operation-preview-end-preview
  input parameter arg1 :: <GtkPrintOperationPreview>;
  c-name: "gtk_print_operation_preview_end_preview";
end;

define C-function gtk-print-operation-preview-is-selected
  input parameter arg1 :: <GtkPrintOperationPreview>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_print_operation_preview_is_selected";
end;

define C-function gtk-print-context-get-type
  result res :: <GType>;
  c-name: "gtk_print_context_get_type";
end;

define C-function gtk-print-context-get-cairo-context
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <cairo-t>;
  c-name: "gtk_print_context_get_cairo_context";
end;

define C-function gtk-print-context-get-page-setup
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <GtkPageSetup>;
  c-name: "gtk_print_context_get_page_setup";
end;

define C-function gtk-print-context-get-width
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <gdouble>;
  c-name: "gtk_print_context_get_width";
end;

define C-function gtk-print-context-get-height
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <gdouble>;
  c-name: "gtk_print_context_get_height";
end;

define C-function gtk-print-context-get-dpi-x
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <gdouble>;
  c-name: "gtk_print_context_get_dpi_x";
end;

define C-function gtk-print-context-get-dpi-y
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <gdouble>;
  c-name: "gtk_print_context_get_dpi_y";
end;

define C-function gtk-print-context-get-pango-fontmap
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <PangoFontMap>;
  c-name: "gtk_print_context_get_pango_fontmap";
end;

define C-function gtk-print-context-create-pango-context
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <PangoContext>;
  c-name: "gtk_print_context_create_pango_context";
end;

define C-function gtk-print-context-create-pango-layout
  input parameter arg1 :: <GtkPrintContext>;
  result res :: <PangoLayout>;
  c-name: "gtk_print_context_create_pango_layout";
end;

define C-function gtk-print-context-set-cairo-context
  input parameter arg1 :: <GtkPrintContext>;
  input parameter arg2 :: <cairo-t>;
  input parameter arg3 :: <C-double>;
  input parameter arg4 :: <C-double>;
  c-name: "gtk_print_context_set_cairo_context";
end;

define C-function gtk-page-setup-get-type
  result res :: <GType>;
  c-name: "gtk_page_setup_get_type";
end;

define C-function gtk-page-setup-new
  result res :: <GtkPageSetup>;
  c-name: "gtk_page_setup_new";
end;

define C-function gtk-page-setup-copy
  input parameter arg1 :: <GtkPageSetup>;
  result res :: <GtkPageSetup>;
  c-name: "gtk_page_setup_copy";
end;

define C-function gtk-page-setup-get-orientation
  input parameter arg1 :: <GtkPageSetup>;
  result res :: <GtkPageOrientation>;
  c-name: "gtk_page_setup_get_orientation";
end;

define C-function gtk-page-setup-set-orientation
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkPageOrientation>;
  c-name: "gtk_page_setup_set_orientation";
end;

define C-subtype <_GtkPaperSize> (<C-void*>) end;
define constant <GtkPaperSize> = <_GtkPaperSize>;

define C-function gtk-page-setup-get-paper-size
  input parameter arg1 :: <GtkPageSetup>;
  result res :: <GtkPaperSize>;
  c-name: "gtk_page_setup_get_paper_size";
end;

define C-function gtk-page-setup-set-paper-size
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkPaperSize>;
  c-name: "gtk_page_setup_set_paper_size";
end;

define C-function gtk-page-setup-get-top-margin
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_page_setup_get_top_margin";
end;

define C-function gtk-page-setup-set-top-margin
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <GtkUnit>;
  c-name: "gtk_page_setup_set_top_margin";
end;

define C-function gtk-page-setup-get-bottom-margin
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_page_setup_get_bottom_margin";
end;

define C-function gtk-page-setup-set-bottom-margin
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <GtkUnit>;
  c-name: "gtk_page_setup_set_bottom_margin";
end;

define C-function gtk-page-setup-get-left-margin
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_page_setup_get_left_margin";
end;

define C-function gtk-page-setup-set-left-margin
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <GtkUnit>;
  c-name: "gtk_page_setup_set_left_margin";
end;

define C-function gtk-page-setup-get-right-margin
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_page_setup_get_right_margin";
end;

define C-function gtk-page-setup-set-right-margin
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <GtkUnit>;
  c-name: "gtk_page_setup_set_right_margin";
end;

define C-function gtk-page-setup-set-paper-size-and-default-margins
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkPaperSize>;
  c-name: "gtk_page_setup_set_paper_size_and_default_margins";
end;

define C-function gtk-page-setup-get-paper-width
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_page_setup_get_paper_width";
end;

define C-function gtk-page-setup-get-paper-height
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_page_setup_get_paper_height";
end;

define C-function gtk-page-setup-get-page-width
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_page_setup_get_page_width";
end;

define C-function gtk-page-setup-get-page-height
  input parameter arg1 :: <GtkPageSetup>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_page_setup_get_page_height";
end;

define C-function gtk-paper-size-get-type
  result res :: <GType>;
  c-name: "gtk_paper_size_get_type";
end;

define C-function gtk-paper-size-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkPaperSize>;
  c-name: "gtk_paper_size_new";
end;

define C-function gtk-paper-size-new-from-ppd
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <gdouble>;
  result res :: <GtkPaperSize>;
  c-name: "gtk_paper_size_new_from_ppd";
end;

define C-function gtk-paper-size-new-custom
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <gdouble>;
  input parameter arg5 :: <GtkUnit>;
  result res :: <GtkPaperSize>;
  c-name: "gtk_paper_size_new_custom";
end;

define C-function gtk-paper-size-copy
  input parameter arg1 :: <GtkPaperSize>;
  result res :: <GtkPaperSize>;
  c-name: "gtk_paper_size_copy";
end;

define C-function gtk-paper-size-free
  input parameter arg1 :: <GtkPaperSize>;
  c-name: "gtk_paper_size_free";
end;

define C-function gtk-paper-size-is-equal
  input parameter arg1 :: <GtkPaperSize>;
  input parameter arg2 :: <GtkPaperSize>;
  result res :: <gboolean>;
  c-name: "gtk_paper_size_is_equal";
end;

define C-function gtk-paper-size-get-name
  input parameter arg1 :: <GtkPaperSize>;
  result res :: <gchar*>;
  c-name: "gtk_paper_size_get_name";
end;

define C-function gtk-paper-size-get-display-name
  input parameter arg1 :: <GtkPaperSize>;
  result res :: <gchar*>;
  c-name: "gtk_paper_size_get_display_name";
end;

define C-function gtk-paper-size-get-ppd-name
  input parameter arg1 :: <GtkPaperSize>;
  result res :: <gchar*>;
  c-name: "gtk_paper_size_get_ppd_name";
end;

define C-function gtk-paper-size-get-width
  input parameter arg1 :: <GtkPaperSize>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_paper_size_get_width";
end;

define C-function gtk-paper-size-get-height
  input parameter arg1 :: <GtkPaperSize>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_paper_size_get_height";
end;

define C-function gtk-paper-size-is-custom
  input parameter arg1 :: <GtkPaperSize>;
  result res :: <gboolean>;
  c-name: "gtk_paper_size_is_custom";
end;

define C-function gtk-paper-size-set-size
  input parameter arg1 :: <GtkPaperSize>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <GtkUnit>;
  c-name: "gtk_paper_size_set_size";
end;

define C-function gtk-paper-size-get-default-top-margin
  input parameter arg1 :: <GtkPaperSize>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_paper_size_get_default_top_margin";
end;

define C-function gtk-paper-size-get-default-bottom-margin
  input parameter arg1 :: <GtkPaperSize>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_paper_size_get_default_bottom_margin";
end;

define C-function gtk-paper-size-get-default-left-margin
  input parameter arg1 :: <GtkPaperSize>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_paper_size_get_default_left_margin";
end;

define C-function gtk-paper-size-get-default-right-margin
  input parameter arg1 :: <GtkPaperSize>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_paper_size_get_default_right_margin";
end;

define C-function gtk-paper-size-get-default
  result res :: <gchar*>;
  c-name: "gtk_paper_size_get_default";
end;

define constant $GTK-PAPER-NAME-A3 = "iso_a3";

define constant $GTK-PAPER-NAME-A4 = "iso_a4";

define constant $GTK-PAPER-NAME-A5 = "iso_a5";

define constant $GTK-PAPER-NAME-B5 = "iso_b5";

define constant $GTK-PAPER-NAME-LETTER = "na_letter";

define constant $GTK-PAPER-NAME-EXECUTIVE = "na_executive";

define constant $GTK-PAPER-NAME-LEGAL = "na_legal";

define constant <anonymous-7229> = <C-function-pointer>;
define constant <GtkPrintSettingsFunc> = <anonymous-7229>;

define C-subtype <_GtkPageRange> (<C-void*>) end;
define constant <GtkPageRange> = <_GtkPageRange>;

define C-function gtk-print-settings-get-type
  result res :: <GType>;
  c-name: "gtk_print_settings_get_type";
end;

define C-function gtk-print-settings-new
  result res :: <GtkPrintSettings>;
  c-name: "gtk_print_settings_new";
end;

define C-function gtk-print-settings-copy
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <GtkPrintSettings>;
  c-name: "gtk_print_settings_copy";
end;

define C-function gtk-print-settings-has-key
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_print_settings_has_key";
end;

define C-function gtk-print-settings-get
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "gtk_print_settings_get";
end;

define C-function gtk-print-settings-set
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_print_settings_set";
end;

define C-function gtk-print-settings-unset
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_settings_unset";
end;

define C-function gtk-print-settings-foreach
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkPrintSettingsFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_print_settings_foreach";
end;

define C-function gtk-print-settings-get-bool
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_print_settings_get_bool";
end;

define C-function gtk-print-settings-set-bool
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_print_settings_set_bool";
end;

define C-function gtk-print-settings-get-double
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  result res :: <gdouble>;
  c-name: "gtk_print_settings_get_double";
end;

define C-function gtk-print-settings-get-double-with-default
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gdouble>;
  result res :: <gdouble>;
  c-name: "gtk_print_settings_get_double_with_default";
end;

define C-function gtk-print-settings-set-double
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gdouble>;
  c-name: "gtk_print_settings_set_double";
end;

define C-function gtk-print-settings-get-length
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_print_settings_get_length";
end;

define C-function gtk-print-settings-set-length
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gdouble>;
  input parameter arg4 :: <GtkUnit>;
  c-name: "gtk_print_settings_set_length";
end;

define C-function gtk-print-settings-get-int
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint>;
  c-name: "gtk_print_settings_get_int";
end;

define C-function gtk-print-settings-get-int-with-default
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_print_settings_get_int_with_default";
end;

define C-function gtk-print-settings-set-int
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_print_settings_set_int";
end;

define C-function gtk-print-settings-get-printer
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gchar*>;
  c-name: "gtk_print_settings_get_printer";
end;

define C-function gtk-print-settings-set-printer
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_settings_set_printer";
end;

define C-function gtk-print-settings-get-orientation
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <GtkPageOrientation>;
  c-name: "gtk_print_settings_get_orientation";
end;

define C-function gtk-print-settings-set-orientation
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkPageOrientation>;
  c-name: "gtk_print_settings_set_orientation";
end;

define C-function gtk-print-settings-get-paper-size
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <GtkPaperSize>;
  c-name: "gtk_print_settings_get_paper_size";
end;

define C-function gtk-print-settings-set-paper-size
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkPaperSize>;
  c-name: "gtk_print_settings_set_paper_size";
end;

define C-function gtk-print-settings-get-paper-width
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_print_settings_get_paper_width";
end;

define C-function gtk-print-settings-set-paper-width
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <GtkUnit>;
  c-name: "gtk_print_settings_set_paper_width";
end;

define C-function gtk-print-settings-get-paper-height
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkUnit>;
  result res :: <gdouble>;
  c-name: "gtk_print_settings_get_paper_height";
end;

define C-function gtk-print-settings-set-paper-height
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <GtkUnit>;
  c-name: "gtk_print_settings_set_paper_height";
end;

define C-function gtk-print-settings-get-use-color
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gboolean>;
  c-name: "gtk_print_settings_get_use_color";
end;

define C-function gtk-print-settings-set-use-color
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_print_settings_set_use_color";
end;

define C-function gtk-print-settings-get-collate
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gboolean>;
  c-name: "gtk_print_settings_get_collate";
end;

define C-function gtk-print-settings-set-collate
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_print_settings_set_collate";
end;

define C-function gtk-print-settings-get-reverse
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gboolean>;
  c-name: "gtk_print_settings_get_reverse";
end;

define C-function gtk-print-settings-set-reverse
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_print_settings_set_reverse";
end;

define C-function gtk-print-settings-get-duplex
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <GtkPrintDuplex>;
  c-name: "gtk_print_settings_get_duplex";
end;

define C-function gtk-print-settings-set-duplex
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkPrintDuplex>;
  c-name: "gtk_print_settings_set_duplex";
end;

define C-function gtk-print-settings-get-quality
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <GtkPrintQuality>;
  c-name: "gtk_print_settings_get_quality";
end;

define C-function gtk-print-settings-set-quality
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkPrintQuality>;
  c-name: "gtk_print_settings_set_quality";
end;

define C-function gtk-print-settings-get-n-copies
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gint>;
  c-name: "gtk_print_settings_get_n_copies";
end;

define C-function gtk-print-settings-set-n-copies
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_print_settings_set_n_copies";
end;

define C-function gtk-print-settings-get-number-up
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gint>;
  c-name: "gtk_print_settings_get_number_up";
end;

define C-function gtk-print-settings-set-number-up
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_print_settings_set_number_up";
end;

define C-function gtk-print-settings-get-resolution
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gint>;
  c-name: "gtk_print_settings_get_resolution";
end;

define C-function gtk-print-settings-set-resolution
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_print_settings_set_resolution";
end;

define C-function gtk-print-settings-get-scale
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gdouble>;
  c-name: "gtk_print_settings_get_scale";
end;

define C-function gtk-print-settings-set-scale
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gdouble>;
  c-name: "gtk_print_settings_set_scale";
end;

define C-function gtk-print-settings-get-print-pages
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <GtkPrintPages>;
  c-name: "gtk_print_settings_get_print_pages";
end;

define C-function gtk-print-settings-set-print-pages
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkPrintPages>;
  c-name: "gtk_print_settings_set_print_pages";
end;

define C-function gtk-print-settings-get-page-ranges
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gint*>;
  result res :: <GtkPageRange>;
  c-name: "gtk_print_settings_get_page_ranges";
end;

define C-function gtk-print-settings-set-page-ranges
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkPageRange>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_print_settings_set_page_ranges";
end;

define C-function gtk-print-settings-get-page-set
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <GtkPageSet>;
  c-name: "gtk_print_settings_get_page_set";
end;

define C-function gtk-print-settings-set-page-set
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <GtkPageSet>;
  c-name: "gtk_print_settings_set_page_set";
end;

define C-function gtk-print-settings-get-default-source
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gchar*>;
  c-name: "gtk_print_settings_get_default_source";
end;

define C-function gtk-print-settings-set-default-source
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_settings_set_default_source";
end;

define C-function gtk-print-settings-get-media-type
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gchar*>;
  c-name: "gtk_print_settings_get_media_type";
end;

define C-function gtk-print-settings-set-media-type
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_settings_set_media_type";
end;

define C-function gtk-print-settings-get-dither
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gchar*>;
  c-name: "gtk_print_settings_get_dither";
end;

define C-function gtk-print-settings-set-dither
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_settings_set_dither";
end;

define C-function gtk-print-settings-get-finishings
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gchar*>;
  c-name: "gtk_print_settings_get_finishings";
end;

define C-function gtk-print-settings-set-finishings
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_settings_set_finishings";
end;

define C-function gtk-print-settings-get-output-bin
  input parameter arg1 :: <GtkPrintSettings>;
  result res :: <gchar*>;
  c-name: "gtk_print_settings_get_output_bin";
end;

define C-function gtk-print-settings-set-output-bin
  input parameter arg1 :: <GtkPrintSettings>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_print_settings_set_output_bin";
end;

define constant $GTK-PRINT-SETTINGS-PRINTER = "printer";

define constant $GTK-PRINT-SETTINGS-ORIENTATION = "orientation";

define constant $GTK-PRINT-SETTINGS-PAPER-FORMAT = "paper-format";

define constant $GTK-PRINT-SETTINGS-PAPER-WIDTH = "paper-width";

define constant $GTK-PRINT-SETTINGS-PAPER-HEIGHT = "paper-height";

define constant $GTK-PRINT-SETTINGS-N-COPIES = "n-copies";

define constant $GTK-PRINT-SETTINGS-DEFAULT-SOURCE = "default-source";

define constant $GTK-PRINT-SETTINGS-QUALITY = "quality";

define constant $GTK-PRINT-SETTINGS-RESOLUTION = "resolution";

define constant $GTK-PRINT-SETTINGS-USE-COLOR = "use-color";

define constant $GTK-PRINT-SETTINGS-DUPLEX = "duplex";

define constant $GTK-PRINT-SETTINGS-COLLATE = "collate";

define constant $GTK-PRINT-SETTINGS-REVERSE = "reverse";

define constant $GTK-PRINT-SETTINGS-MEDIA-TYPE = "media-type";

define constant $GTK-PRINT-SETTINGS-DITHER = "dither";

define constant $GTK-PRINT-SETTINGS-SCALE = "scale";

define constant $GTK-PRINT-SETTINGS-PRINT-PAGES = "print-pages";

define constant $GTK-PRINT-SETTINGS-PAGE-RANGES = "page-ranges";

define constant $GTK-PRINT-SETTINGS-PAGE-SET = "page-set";

define constant $GTK-PRINT-SETTINGS-FINISHINGS = "finishings";

define constant $GTK-PRINT-SETTINGS-NUMBER-UP = "number-up";

define constant $GTK-PRINT-SETTINGS-OUTPUT-BIN = "output-bin";

define constant $GTK-PRINT-SETTINGS-OUTPUT-FILE-FORMAT = "output-file-format";

define constant $GTK-PRINT-SETTINGS-OUTPUT-URI = "output-uri";

define constant $GTK-PRINT-SETTINGS-WIN32-DRIVER-VERSION = "win32-driver-version";

define constant $GTK-PRINT-SETTINGS-WIN32-DRIVER-EXTRA = "win32-driver-extra";

define constant <anonymous-6863> = <C-function-pointer>;
define constant <GtkKeySnoopFunc> = <anonymous-6863>;

 /* Ignoring declaration for {instance of <variable-declaration>} "gtk-major-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gtk-minor-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gtk-micro-version"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gtk-binary-age"*/
 /* Ignoring declaration for {instance of <variable-declaration>} "gtk-interface-age"*/
define C-function gtk-check-version
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  result res :: <gchar*>;
  c-name: "gtk_check_version";
end;

define C-pointer-type <char***> => <c-string-vector>;
define C-function gtk-parse-args
  input parameter arg1 :: <int*>;
  input parameter arg2 :: <char***>;
  result res :: <gboolean>;
  c-name: "gtk_parse_args";
end;

define C-function %gtk-init
  input parameter arg1 :: <int*>;
  input parameter arg2 :: <char***>;
  c-name: "gtk_init";
end;

define C-function gtk-init-check
  input parameter arg1 :: <int*>;
  input parameter arg2 :: <char***>;
  result res :: <gboolean>;
  c-name: "gtk_init_check";
end;

define C-function gtk-init-with-args
  input parameter arg1 :: <int*>;
  input parameter arg2 :: <char***>;
  input parameter arg3 :: <char*>;
  input parameter arg4 :: <GOptionEntry>;
  input parameter arg5 :: <char*>;
  input parameter arg6 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_init_with_args";
end;

define C-function gtk-get-option-group
  input parameter arg1 :: <gboolean>;
  result res :: <GOptionGroup>;
  c-name: "gtk_get_option_group";
end;

define C-function gtk-init-abi-check
  input parameter arg1 :: <int*>;
  input parameter arg2 :: <char***>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <size-t>;
  input parameter arg5 :: <size-t>;
  c-name: "gtk_init_abi_check";
end;

define C-function gtk-init-check-abi-check
  input parameter arg1 :: <int*>;
  input parameter arg2 :: <char***>;
  input parameter arg3 :: <C-signed-int>;
  input parameter arg4 :: <size-t>;
  input parameter arg5 :: <size-t>;
  result res :: <gboolean>;
  c-name: "gtk_init_check_abi_check";
end;

define C-function gtk-exit
  input parameter arg1 :: <gint>;
  c-name: "gtk_exit";
end;

define C-function gtk-disable-setlocale
  c-name: "gtk_disable_setlocale";
end;

define C-function gtk-set-locale
  result res :: <gchar*>;
  c-name: "gtk_set_locale";
end;

define C-function gtk-get-default-language
  result res :: <PangoLanguage>;
  c-name: "gtk_get_default_language";
end;

define C-function gtk-events-pending
  result res :: <gboolean>;
  c-name: "gtk_events_pending";
end;

define C-function gtk-main-do-event
  input parameter arg1 :: <GdkEvent>;
  c-name: "gtk_main_do_event";
end;

define C-function gtk-main
  c-name: "gtk_main";
end;

define C-function gtk-main-level
  result res :: <guint>;
  c-name: "gtk_main_level";
end;

define C-function gtk-main-quit
  c-name: "gtk_main_quit";
end;

define C-function gtk-main-iteration
  result res :: <gboolean>;
  c-name: "gtk_main_iteration";
end;

define C-function gtk-main-iteration-do
  input parameter arg1 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_main_iteration_do";
end;

define C-function gtk-true
  result res :: <gboolean>;
  c-name: "gtk_true";
end;

define C-function gtk-false
  result res :: <gboolean>;
  c-name: "gtk_false";
end;

define C-function gtk-grab-add
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_grab_add";
end;

define C-function gtk-grab-get-current
  result res :: <GtkWidget>;
  c-name: "gtk_grab_get_current";
end;

define C-function gtk-grab-remove
  input parameter arg1 :: <GtkWidget>;
  c-name: "gtk_grab_remove";
end;

define C-function gtk-init-add
  input parameter arg1 :: <GtkFunction>;
  input parameter arg2 :: <gpointer>;
  c-name: "gtk_init_add";
end;

define C-function gtk-quit-add-destroy
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GtkObject>;
  c-name: "gtk_quit_add_destroy";
end;

define C-function gtk-quit-add
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GtkFunction>;
  input parameter arg3 :: <gpointer>;
  result res :: <guint>;
  c-name: "gtk_quit_add";
end;

define C-function gtk-quit-add-full
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <GtkFunction>;
  input parameter arg3 :: <GtkCallbackMarshal>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GtkDestroyNotify>;
  result res :: <guint>;
  c-name: "gtk_quit_add_full";
end;

define C-function gtk-quit-remove
  input parameter arg1 :: <guint>;
  c-name: "gtk_quit_remove";
end;

define C-function gtk-quit-remove-by-data
  input parameter arg1 :: <gpointer>;
  c-name: "gtk_quit_remove_by_data";
end;

define C-function gtk-timeout-add
  input parameter arg1 :: <guint32>;
  input parameter arg2 :: <GtkFunction>;
  input parameter arg3 :: <gpointer>;
  result res :: <guint>;
  c-name: "gtk_timeout_add";
end;

define C-function gtk-timeout-add-full
  input parameter arg1 :: <guint32>;
  input parameter arg2 :: <GtkFunction>;
  input parameter arg3 :: <GtkCallbackMarshal>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GtkDestroyNotify>;
  result res :: <guint>;
  c-name: "gtk_timeout_add_full";
end;

define C-function gtk-timeout-remove
  input parameter arg1 :: <guint>;
  c-name: "gtk_timeout_remove";
end;

define C-function gtk-idle-add
  input parameter arg1 :: <GtkFunction>;
  input parameter arg2 :: <gpointer>;
  result res :: <guint>;
  c-name: "gtk_idle_add";
end;

define C-function gtk-idle-add-priority
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GtkFunction>;
  input parameter arg3 :: <gpointer>;
  result res :: <guint>;
  c-name: "gtk_idle_add_priority";
end;

define C-function gtk-idle-add-full
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GtkFunction>;
  input parameter arg3 :: <GtkCallbackMarshal>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GtkDestroyNotify>;
  result res :: <guint>;
  c-name: "gtk_idle_add_full";
end;

define C-function gtk-idle-remove
  input parameter arg1 :: <guint>;
  c-name: "gtk_idle_remove";
end;

define C-function gtk-idle-remove-by-data
  input parameter arg1 :: <gpointer>;
  c-name: "gtk_idle_remove_by_data";
end;

define C-function gtk-input-add-full
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GdkInputCondition>;
  input parameter arg3 :: <GdkInputFunction>;
  input parameter arg4 :: <GtkCallbackMarshal>;
  input parameter arg5 :: <gpointer>;
  input parameter arg6 :: <GtkDestroyNotify>;
  result res :: <guint>;
  c-name: "gtk_input_add_full";
end;

define C-function gtk-input-remove
  input parameter arg1 :: <guint>;
  c-name: "gtk_input_remove";
end;

define C-function gtk-key-snooper-install
  input parameter arg1 :: <GtkKeySnoopFunc>;
  input parameter arg2 :: <gpointer>;
  result res :: <guint>;
  c-name: "gtk_key_snooper_install";
end;

define C-function gtk-key-snooper-remove
  input parameter arg1 :: <guint>;
  c-name: "gtk_key_snooper_remove";
end;

define C-function gtk-get-current-event
  result res :: <GdkEvent>;
  c-name: "gtk_get_current_event";
end;

define C-function gtk-get-current-event-time
  result res :: <guint32>;
  c-name: "gtk_get_current_event_time";
end;

define C-function gtk-get-current-event-state
  input parameter arg1 :: <GdkModifierType*>;
  result res :: <gboolean>;
  c-name: "gtk_get_current_event_state";
end;

define C-function gtk-get-event-widget
  input parameter arg1 :: <GdkEvent>;
  result res :: <GtkWidget>;
  c-name: "gtk_get_event_widget";
end;

define C-function gtk-propagate-event
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <GdkEvent>;
  c-name: "gtk_propagate_event";
end;

define constant $GTK-PRIORITY-RESIZE = 110;

define constant $GTK-PRIORITY-REDRAW = 120;

define constant $GTK-PRIORITY-HIGH = -100;

define constant $GTK-PRIORITY-INTERNAL = 120;

define constant $GTK-PRIORITY-DEFAULT = 200;

define constant $GTK-PRIORITY-LOW = 300;

define C-subtype <_GtkPreview> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkPreview> = <_GtkPreview>;

define C-subtype <_GtkPreviewInfo> (<C-void*>) end;
define constant <GtkPreviewInfo> = <_GtkPreviewInfo>;

define C-pointer-type <gushort*> => <gushort>;
define constant <gushort<@2>> = <gushort*>;
define constant <guchar<@4>> = <guchar*>;
define C-subtype <_GtkDitherInfo> (<C-void*>) end;
define constant <GtkDitherInfo> = <_GtkDitherInfo>;

define C-subtype <_GtkPreviewClass> (<C-void*>) end;
define constant <GtkPreviewClass> = <_GtkPreviewClass>;

define C-function gtk-preview-get-type
  result res :: <GtkType>;
  c-name: "gtk_preview_get_type";
end;

define C-function gtk-preview-uninit
  c-name: "gtk_preview_uninit";
end;

define C-function gtk-preview-new
  input parameter arg1 :: <GtkPreviewType>;
  result res :: <GtkWidget>;
  c-name: "gtk_preview_new";
end;

define C-function gtk-preview-size
  input parameter arg1 :: <GtkPreview>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_preview_size";
end;

define C-function gtk-preview-put
  input parameter arg1 :: <GtkPreview>;
  input parameter arg2 :: <GdkWindow>;
  input parameter arg3 :: <GdkGC>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <gint>;
  input parameter arg7 :: <gint>;
  input parameter arg8 :: <gint>;
  input parameter arg9 :: <gint>;
  c-name: "gtk_preview_put";
end;

define C-function gtk-preview-draw-row
  input parameter arg1 :: <GtkPreview>;
  input parameter arg2 :: <guchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_preview_draw_row";
end;

define C-function gtk-preview-set-expand
  input parameter arg1 :: <GtkPreview>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_preview_set_expand";
end;

define C-function gtk-preview-set-gamma
  input parameter arg1 :: <C-double>;
  c-name: "gtk_preview_set_gamma";
end;

define C-function gtk-preview-set-color-cube
  input parameter arg1 :: <guint>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  c-name: "gtk_preview_set_color_cube";
end;

define C-function gtk-preview-set-install-cmap
  input parameter arg1 :: <gint>;
  c-name: "gtk_preview_set_install_cmap";
end;

define C-function gtk-preview-set-reserved
  input parameter arg1 :: <gint>;
  c-name: "gtk_preview_set_reserved";
end;

define C-function gtk-preview-set-dither
  input parameter arg1 :: <GtkPreview>;
  input parameter arg2 :: <GdkRgbDither>;
  c-name: "gtk_preview_set_dither";
end;

define C-function gtk-preview-get-visual
  result res :: <GdkVisual>;
  c-name: "gtk_preview_get_visual";
end;

define C-function gtk-preview-get-cmap
  result res :: <GdkColormap>;
  c-name: "gtk_preview_get_cmap";
end;

define C-function gtk-preview-get-info
  result res :: <GtkPreviewInfo>;
  c-name: "gtk_preview_get_info";
end;

define C-function gtk-preview-reset
  c-name: "gtk_preview_reset";
end;

define C-subtype <_GtkPlug> (<_GtkWindow>, <_AtkImplementorIface>) end;
define constant <GtkPlug> = <_GtkPlug>;

define constant <anonymous-7159> = <C-function-pointer>;
define constant <anonymous-7160> = <C-function-pointer>;
define constant <anonymous-7161> = <C-function-pointer>;
define constant <anonymous-7162> = <C-function-pointer>;
define constant <anonymous-7163> = <C-function-pointer>;
define C-subtype <_GtkPlugClass> (<C-void*>) end;
define constant <GtkPlugClass> = <_GtkPlugClass>;

define C-function gtk-plug-get-type
  result res :: <GType>;
  c-name: "gtk_plug_get_type";
end;

define C-function gtk-plug-construct
  input parameter arg1 :: <GtkPlug>;
  input parameter arg2 :: <GdkNativeWindow>;
  c-name: "gtk_plug_construct";
end;

define C-function gtk-plug-new
  input parameter arg1 :: <GdkNativeWindow>;
  result res :: <GtkWidget>;
  c-name: "gtk_plug_new";
end;

define C-function gtk-plug-construct-for-display
  input parameter arg1 :: <GtkPlug>;
  input parameter arg2 :: <GdkDisplay>;
  input parameter arg3 :: <GdkNativeWindow>;
  c-name: "gtk_plug_construct_for_display";
end;

define C-function gtk-plug-new-for-display
  input parameter arg1 :: <GdkDisplay>;
  input parameter arg2 :: <GdkNativeWindow>;
  result res :: <GtkWidget>;
  c-name: "gtk_plug_new_for_display";
end;

define C-function gtk-plug-get-id
  input parameter arg1 :: <GtkPlug>;
  result res :: <GdkNativeWindow>;
  c-name: "gtk_plug_get_id";
end;

define C-subtype <_GtkOptionMenu> (<_GtkButton>, <_AtkImplementorIface>) end;
define constant <GtkOptionMenu> = <_GtkOptionMenu>;

define constant <anonymous-7123> = <C-function-pointer>;
define constant <anonymous-7124> = <C-function-pointer>;
define constant <anonymous-7125> = <C-function-pointer>;
define constant <anonymous-7126> = <C-function-pointer>;
define constant <anonymous-7127> = <C-function-pointer>;
define C-subtype <_GtkOptionMenuClass> (<C-void*>) end;
define constant <GtkOptionMenuClass> = <_GtkOptionMenuClass>;

define C-function gtk-option-menu-get-type
  result res :: <GType>;
  c-name: "gtk_option_menu_get_type";
end;

define C-function gtk-option-menu-new
  result res :: <GtkWidget>;
  c-name: "gtk_option_menu_new";
end;

define C-function gtk-option-menu-get-menu
  input parameter arg1 :: <GtkOptionMenu>;
  result res :: <GtkWidget>;
  c-name: "gtk_option_menu_get_menu";
end;

define C-function gtk-option-menu-set-menu
  input parameter arg1 :: <GtkOptionMenu>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_option_menu_set_menu";
end;

define C-function gtk-option-menu-remove-menu
  input parameter arg1 :: <GtkOptionMenu>;
  c-name: "gtk_option_menu_remove_menu";
end;

define C-function gtk-option-menu-get-history
  input parameter arg1 :: <GtkOptionMenu>;
  result res :: <gint>;
  c-name: "gtk_option_menu_get_history";
end;

define C-function gtk-option-menu-set-history
  input parameter arg1 :: <GtkOptionMenu>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_option_menu_set_history";
end;

define C-subtype <_GtkOldEditable> (<C-void*>) end;
define constant <GtkOldEditable> = <_GtkOldEditable>;

define constant <anonymous-7103> = <C-function-pointer>;
define constant <anonymous-7104> = <C-function-pointer>;
define constant <anonymous-7105> = <C-function-pointer>;
define constant <anonymous-7106> = <C-function-pointer>;
define constant <anonymous-7107> = <C-function-pointer>;
define constant <anonymous-7108> = <C-function-pointer>;
define constant <anonymous-7109> = <C-function-pointer>;
define constant <anonymous-7110> = <C-function-pointer>;
define constant <anonymous-7111> = <C-function-pointer>;
define constant <anonymous-7112> = <C-function-pointer>;
define constant <anonymous-7113> = <C-function-pointer>;
define constant <anonymous-7114> = <C-function-pointer>;
define constant <anonymous-7115> = <C-function-pointer>;
define constant <anonymous-7116> = <C-function-pointer>;
define constant <anonymous-7117> = <C-function-pointer>;
define constant <anonymous-7118> = <C-function-pointer>;
define constant <anonymous-7119> = <C-function-pointer>;
define C-subtype <_GtkOldEditableClass> (<C-void*>) end;
define constant <GtkOldEditableClass> = <_GtkOldEditableClass>;

define constant <anonymous-7099> = <C-function-pointer>;
define constant <GtkTextFunction> = <anonymous-7099>;

define C-function gtk-old-editable-get-type
  result res :: <GtkType>;
  c-name: "gtk_old_editable_get_type";
end;

define C-function gtk-old-editable-claim-selection
  input parameter arg1 :: <GtkOldEditable>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <guint32>;
  c-name: "gtk_old_editable_claim_selection";
end;

define C-function gtk-old-editable-changed
  input parameter arg1 :: <GtkOldEditable>;
  c-name: "gtk_old_editable_changed";
end;

define constant <GtkNotebookTab> = <C-int>;
define constant $GTK-NOTEBOOK-TAB-FIRST = 0;
define constant $GTK-NOTEBOOK-TAB-LAST = 1;

define C-subtype <_GtkNotebookPage> (<C-void*>) end;
define constant <GtkNotebookPage> = <_GtkNotebookPage>;

define C-subtype <_GtkNotebook> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkNotebook> = <_GtkNotebook>;

define constant <anonymous-7041> = <C-function-pointer>;
define constant <anonymous-7042> = <C-function-pointer>;
define constant <anonymous-7043> = <C-function-pointer>;
define constant <anonymous-7044> = <C-function-pointer>;
define constant <anonymous-7045> = <C-function-pointer>;
define constant <anonymous-7046> = <C-function-pointer>;
define constant <anonymous-7047> = <C-function-pointer>;
define constant <anonymous-7048> = <C-function-pointer>;
define constant <anonymous-7049> = <C-function-pointer>;
define C-subtype <_GtkNotebookClass> (<C-void*>) end;
define constant <GtkNotebookClass> = <_GtkNotebookClass>;

define constant <anonymous-7050> = <C-function-pointer>;
define constant <GtkNotebookWindowCreationFunc> = <anonymous-7050>;

define C-function gtk-notebook-get-type
  result res :: <GType>;
  c-name: "gtk_notebook_get_type";
end;

define C-function gtk-notebook-new
  result res :: <GtkWidget>;
  c-name: "gtk_notebook_new";
end;

define C-function gtk-notebook-append-page
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_notebook_append_page";
end;

define C-function gtk-notebook-append-page-menu
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_notebook_append_page_menu";
end;

define C-function gtk-notebook-prepend-page
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_notebook_prepend_page";
end;

define C-function gtk-notebook-prepend-page-menu
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_notebook_prepend_page_menu";
end;

define C-function gtk-notebook-insert-page
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_notebook_insert_page";
end;

define C-function gtk-notebook-insert-page-menu
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  input parameter arg4 :: <GtkWidget>;
  input parameter arg5 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_notebook_insert_page_menu";
end;

define C-function gtk-notebook-remove-page
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_notebook_remove_page";
end;

define C-function gtk-notebook-set-window-creation-hook
  input parameter arg1 :: <GtkNotebookWindowCreationFunc>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GDestroyNotify>;
  c-name: "gtk_notebook_set_window_creation_hook";
end;

define C-function gtk-notebook-set-group-id
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_notebook_set_group_id";
end;

define C-function gtk-notebook-get-group-id
  input parameter arg1 :: <GtkNotebook>;
  result res :: <gint>;
  c-name: "gtk_notebook_get_group_id";
end;

define C-function gtk-notebook-get-current-page
  input parameter arg1 :: <GtkNotebook>;
  result res :: <gint>;
  c-name: "gtk_notebook_get_current_page";
end;

define C-function gtk-notebook-get-nth-page
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_notebook_get_nth_page";
end;

define C-function gtk-notebook-get-n-pages
  input parameter arg1 :: <GtkNotebook>;
  result res :: <gint>;
  c-name: "gtk_notebook_get_n_pages";
end;

define C-function gtk-notebook-page-num
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_notebook_page_num";
end;

define C-function gtk-notebook-set-current-page
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_notebook_set_current_page";
end;

define C-function gtk-notebook-next-page
  input parameter arg1 :: <GtkNotebook>;
  c-name: "gtk_notebook_next_page";
end;

define C-function gtk-notebook-prev-page
  input parameter arg1 :: <GtkNotebook>;
  c-name: "gtk_notebook_prev_page";
end;

define C-function gtk-notebook-set-show-border
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_notebook_set_show_border";
end;

define C-function gtk-notebook-get-show-border
  input parameter arg1 :: <GtkNotebook>;
  result res :: <gboolean>;
  c-name: "gtk_notebook_get_show_border";
end;

define C-function gtk-notebook-set-show-tabs
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_notebook_set_show_tabs";
end;

define C-function gtk-notebook-get-show-tabs
  input parameter arg1 :: <GtkNotebook>;
  result res :: <gboolean>;
  c-name: "gtk_notebook_get_show_tabs";
end;

define C-function gtk-notebook-set-tab-pos
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkPositionType>;
  c-name: "gtk_notebook_set_tab_pos";
end;

define C-function gtk-notebook-get-tab-pos
  input parameter arg1 :: <GtkNotebook>;
  result res :: <GtkPositionType>;
  c-name: "gtk_notebook_get_tab_pos";
end;

define C-function gtk-notebook-set-homogeneous-tabs
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_notebook_set_homogeneous_tabs";
end;

define C-function gtk-notebook-set-tab-border
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_notebook_set_tab_border";
end;

define C-function gtk-notebook-set-tab-hborder
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_notebook_set_tab_hborder";
end;

define C-function gtk-notebook-set-tab-vborder
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_notebook_set_tab_vborder";
end;

define C-function gtk-notebook-set-scrollable
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_notebook_set_scrollable";
end;

define C-function gtk-notebook-get-scrollable
  input parameter arg1 :: <GtkNotebook>;
  result res :: <gboolean>;
  c-name: "gtk_notebook_get_scrollable";
end;

define C-function gtk-notebook-popup-enable
  input parameter arg1 :: <GtkNotebook>;
  c-name: "gtk_notebook_popup_enable";
end;

define C-function gtk-notebook-popup-disable
  input parameter arg1 :: <GtkNotebook>;
  c-name: "gtk_notebook_popup_disable";
end;

define C-function gtk-notebook-get-tab-label
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <GtkWidget>;
  c-name: "gtk_notebook_get_tab_label";
end;

define C-function gtk-notebook-set-tab-label
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  c-name: "gtk_notebook_set_tab_label";
end;

define C-function gtk-notebook-set-tab-label-text
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_notebook_set_tab_label_text";
end;

define C-function gtk-notebook-get-tab-label-text
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gchar*>;
  c-name: "gtk_notebook_get_tab_label_text";
end;

define C-function gtk-notebook-get-menu-label
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <GtkWidget>;
  c-name: "gtk_notebook_get_menu_label";
end;

define C-function gtk-notebook-set-menu-label
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkWidget>;
  c-name: "gtk_notebook_set_menu_label";
end;

define C-function gtk-notebook-set-menu-label-text
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_notebook_set_menu_label_text";
end;

define C-function gtk-notebook-get-menu-label-text
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gchar*>;
  c-name: "gtk_notebook_get_menu_label_text";
end;

define C-function gtk-notebook-query-tab-label-packing
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean*>;
  input parameter arg4 :: <gboolean*>;
  input parameter arg5 :: <GtkPackType*>;
  c-name: "gtk_notebook_query_tab_label_packing";
end;

define C-function gtk-notebook-set-tab-label-packing
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gboolean>;
  input parameter arg5 :: <GtkPackType>;
  c-name: "gtk_notebook_set_tab_label_packing";
end;

define C-function gtk-notebook-reorder-child
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_notebook_reorder_child";
end;

define C-function gtk-notebook-get-tab-reorderable
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_notebook_get_tab_reorderable";
end;

define C-function gtk-notebook-set-tab-reorderable
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_notebook_set_tab_reorderable";
end;

define C-function gtk-notebook-get-tab-detachable
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_notebook_get_tab_detachable";
end;

define C-function gtk-notebook-set-tab-detachable
  input parameter arg1 :: <GtkNotebook>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_notebook_set_tab_detachable";
end;

define constant gtk-notebook-current-page = gtk-notebook-get-current-page;

define constant gtk-notebook-set-page = gtk-notebook-set-current-page;

define constant <anonymous-7022> = <C-function-pointer>;
define constant <GtkModuleInitFunc> = <anonymous-7022>;

define constant <anonymous-7023> = <C-function-pointer>;
define constant <GtkModuleDisplayInitFunc> = <anonymous-7023>;

define constant <GtkMessageType> = <C-int>;
define constant $GTK-MESSAGE-INFO = 0;
define constant $GTK-MESSAGE-WARNING = 1;
define constant $GTK-MESSAGE-QUESTION = 2;
define constant $GTK-MESSAGE-ERROR = 3;
define constant $GTK-MESSAGE-OTHER = 4;

define constant <GtkButtonsType> = <C-int>;
define constant $GTK-BUTTONS-NONE = 0;
define constant $GTK-BUTTONS-OK = 1;
define constant $GTK-BUTTONS-CLOSE = 2;
define constant $GTK-BUTTONS-CANCEL = 3;
define constant $GTK-BUTTONS-YES-NO = 4;
define constant $GTK-BUTTONS-OK-CANCEL = 5;

define C-subtype <_GtkMessageDialog> (<_GtkDialog>, <_AtkImplementorIface>) end;
define constant <GtkMessageDialog> = <_GtkMessageDialog>;

define constant <anonymous-7007> = <C-function-pointer>;
define constant <anonymous-7008> = <C-function-pointer>;
define constant <anonymous-7009> = <C-function-pointer>;
define constant <anonymous-7010> = <C-function-pointer>;
define C-subtype <_GtkMessageDialogClass> (<C-void*>) end;
define constant <GtkMessageDialogClass> = <_GtkMessageDialogClass>;

define C-function gtk-message-dialog-get-type
  result res :: <GType>;
  c-name: "gtk_message_dialog_get_type";
end;

define C-function gtk-message-dialog-new
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkDialogFlags>;
  input parameter arg3 :: <GtkMessageType>;
  input parameter arg4 :: <GtkButtonsType>;
  input parameter arg5 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_message_dialog_new";
end;

define C-function gtk-message-dialog-new-with-markup
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <GtkDialogFlags>;
  input parameter arg3 :: <GtkMessageType>;
  input parameter arg4 :: <GtkButtonsType>;
  input parameter arg5 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_message_dialog_new_with_markup";
end;

define C-function gtk-message-dialog-set-image
  input parameter arg1 :: <GtkMessageDialog>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_message_dialog_set_image";
end;

define C-function gtk-message-dialog-set-markup
  input parameter arg1 :: <GtkMessageDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_message_dialog_set_markup";
end;

define C-function gtk-message-dialog-format-secondary-text
  input parameter arg1 :: <GtkMessageDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_message_dialog_format_secondary_text";
end;

define C-function gtk-message-dialog-format-secondary-markup
  input parameter arg1 :: <GtkMessageDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_message_dialog_format_secondary_markup";
end;

define C-subtype <_GtkMenuToolButtonPrivate> (<C-void*>) end;
define constant <GtkMenuToolButtonPrivate> = <_GtkMenuToolButtonPrivate>;

define C-subtype <_GtkMenuToolButton> (<_GtkToolButton>, <_AtkImplementorIface>) end;
define constant <GtkMenuToolButton> = <_GtkMenuToolButton>;

define constant <anonymous-6994> = <C-function-pointer>;
define constant <anonymous-6995> = <C-function-pointer>;
define constant <anonymous-6996> = <C-function-pointer>;
define constant <anonymous-6997> = <C-function-pointer>;
define constant <anonymous-6998> = <C-function-pointer>;
define C-subtype <_GtkMenuToolButtonClass> (<C-void*>) end;
define constant <GtkMenuToolButtonClass> = <_GtkMenuToolButtonClass>;

define C-function gtk-menu-tool-button-get-type
  result res :: <GType>;
  c-name: "gtk_menu_tool_button_get_type";
end;

define C-function gtk-menu-tool-button-new
  input parameter arg1 :: <GtkWidget>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkToolItem>;
  c-name: "gtk_menu_tool_button_new";
end;

define C-function gtk-menu-tool-button-new-from-stock
  input parameter arg1 :: <gchar*>;
  result res :: <GtkToolItem>;
  c-name: "gtk_menu_tool_button_new_from_stock";
end;

define C-function gtk-menu-tool-button-set-menu
  input parameter arg1 :: <GtkMenuToolButton>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_menu_tool_button_set_menu";
end;

define C-function gtk-menu-tool-button-get-menu
  input parameter arg1 :: <GtkMenuToolButton>;
  result res :: <GtkWidget>;
  c-name: "gtk_menu_tool_button_get_menu";
end;

define C-function gtk-menu-tool-button-set-arrow-tooltip
  input parameter arg1 :: <GtkMenuToolButton>;
  input parameter arg2 :: <GtkTooltips>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gchar*>;
  c-name: "gtk_menu_tool_button_set_arrow_tooltip";
end;

define C-subtype <_GtkMenuBar> (<_GtkMenuShell>, <_AtkImplementorIface>) end;
define constant <GtkMenuBar> = <_GtkMenuBar>;

define constant <anonymous-6913> = <C-function-pointer>;
define constant <anonymous-6914> = <C-function-pointer>;
define constant <anonymous-6915> = <C-function-pointer>;
define constant <anonymous-6916> = <C-function-pointer>;
define C-subtype <_GtkMenuBarClass> (<C-void*>) end;
define constant <GtkMenuBarClass> = <_GtkMenuBarClass>;

define C-function gtk-menu-bar-get-type
  result res :: <GType>;
  c-name: "gtk_menu_bar_get_type";
end;

define C-function gtk-menu-bar-new
  result res :: <GtkWidget>;
  c-name: "gtk_menu_bar_new";
end;

define C-function gtk-menu-bar-get-pack-direction
  input parameter arg1 :: <GtkMenuBar>;
  result res :: <GtkPackDirection>;
  c-name: "gtk_menu_bar_get_pack_direction";
end;

define C-function gtk-menu-bar-set-pack-direction
  input parameter arg1 :: <GtkMenuBar>;
  input parameter arg2 :: <GtkPackDirection>;
  c-name: "gtk_menu_bar_set_pack_direction";
end;

define C-function gtk-menu-bar-get-child-pack-direction
  input parameter arg1 :: <GtkMenuBar>;
  result res :: <GtkPackDirection>;
  c-name: "gtk_menu_bar_get_child_pack_direction";
end;

define C-function gtk-menu-bar-set-child-pack-direction
  input parameter arg1 :: <GtkMenuBar>;
  input parameter arg2 :: <GtkPackDirection>;
  c-name: "gtk_menu_bar_set_child_pack_direction";
end;

define C-subtype <_GtkListItem> (<_GtkItem>, <_AtkImplementorIface>) end;
define constant <GtkListItem> = <_GtkListItem>;

define constant <anonymous-6816> = <C-function-pointer>;
define constant <anonymous-6817> = <C-function-pointer>;
define constant <anonymous-6818> = <C-function-pointer>;
define constant <anonymous-6819> = <C-function-pointer>;
define constant <anonymous-6820> = <C-function-pointer>;
define constant <anonymous-6821> = <C-function-pointer>;
define constant <anonymous-6822> = <C-function-pointer>;
define constant <anonymous-6823> = <C-function-pointer>;
define constant <anonymous-6824> = <C-function-pointer>;
define constant <anonymous-6825> = <C-function-pointer>;
define C-subtype <_GtkListItemClass> (<C-void*>) end;
define constant <GtkListItemClass> = <_GtkListItemClass>;

define C-function gtk-list-item-get-type
  result res :: <GtkType>;
  c-name: "gtk_list_item_get_type";
end;

define C-function gtk-list-item-new
  result res :: <GtkWidget>;
  c-name: "gtk_list_item_new";
end;

define C-function gtk-list-item-new-with-label
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_list_item_new_with_label";
end;

define C-function gtk-list-item-select
  input parameter arg1 :: <GtkListItem>;
  c-name: "gtk_list_item_select";
end;

define C-function gtk-list-item-deselect
  input parameter arg1 :: <GtkListItem>;
  c-name: "gtk_list_item_deselect";
end;

define C-subtype <_GtkList> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkList> = <_GtkList>;

define constant <anonymous-6834> = <C-function-pointer>;
define constant <anonymous-6835> = <C-function-pointer>;
define constant <anonymous-6836> = <C-function-pointer>;
define C-subtype <_GtkListClass> (<C-void*>) end;
define constant <GtkListClass> = <_GtkListClass>;

define C-function gtk-list-get-type
  result res :: <GtkType>;
  c-name: "gtk_list_get_type";
end;

define C-function gtk-list-new
  result res :: <GtkWidget>;
  c-name: "gtk_list_new";
end;

define C-function gtk-list-insert-items
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GList>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_list_insert_items";
end;

define C-function gtk-list-append-items
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GList>;
  c-name: "gtk_list_append_items";
end;

define C-function gtk-list-prepend-items
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GList>;
  c-name: "gtk_list_prepend_items";
end;

define C-function gtk-list-remove-items
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GList>;
  c-name: "gtk_list_remove_items";
end;

define C-function gtk-list-remove-items-no-unref
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GList>;
  c-name: "gtk_list_remove_items_no_unref";
end;

define C-function gtk-list-clear-items
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_list_clear_items";
end;

define C-function gtk-list-select-item
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_list_select_item";
end;

define C-function gtk-list-unselect-item
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_list_unselect_item";
end;

define C-function gtk-list-select-child
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_list_select_child";
end;

define C-function gtk-list-unselect-child
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_list_unselect_child";
end;

define C-function gtk-list-child-position
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_list_child_position";
end;

define C-function gtk-list-set-selection-mode
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GtkSelectionMode>;
  c-name: "gtk_list_set_selection_mode";
end;

define C-function gtk-list-extend-selection
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GtkScrollType>;
  input parameter arg3 :: <gfloat>;
  input parameter arg4 :: <gboolean>;
  c-name: "gtk_list_extend_selection";
end;

define C-function gtk-list-start-selection
  input parameter arg1 :: <GtkList>;
  c-name: "gtk_list_start_selection";
end;

define C-function gtk-list-end-selection
  input parameter arg1 :: <GtkList>;
  c-name: "gtk_list_end_selection";
end;

define C-function gtk-list-select-all
  input parameter arg1 :: <GtkList>;
  c-name: "gtk_list_select_all";
end;

define C-function gtk-list-unselect-all
  input parameter arg1 :: <GtkList>;
  c-name: "gtk_list_unselect_all";
end;

define C-function gtk-list-scroll-horizontal
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GtkScrollType>;
  input parameter arg3 :: <gfloat>;
  c-name: "gtk_list_scroll_horizontal";
end;

define C-function gtk-list-scroll-vertical
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GtkScrollType>;
  input parameter arg3 :: <gfloat>;
  c-name: "gtk_list_scroll_vertical";
end;

define C-function gtk-list-toggle-add-mode
  input parameter arg1 :: <GtkList>;
  c-name: "gtk_list_toggle_add_mode";
end;

define C-function gtk-list-toggle-focus-row
  input parameter arg1 :: <GtkList>;
  c-name: "gtk_list_toggle_focus_row";
end;

define C-function gtk-list-toggle-row
  input parameter arg1 :: <GtkList>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_list_toggle_row";
end;

define C-function gtk-list-undo-selection
  input parameter arg1 :: <GtkList>;
  c-name: "gtk_list_undo_selection";
end;

define C-function gtk-list-end-drag-selection
  input parameter arg1 :: <GtkList>;
  c-name: "gtk_list_end_drag_selection";
end;

define C-subtype <_GtkLinkButtonPrivate> (<C-void*>) end;
define constant <GtkLinkButtonPrivate> = <_GtkLinkButtonPrivate>;

define C-subtype <_GtkLinkButton> (<C-void*>) end;
define constant <GtkLinkButton> = <_GtkLinkButton>;

define constant <anonymous-6806> = <C-function-pointer>;
define constant <anonymous-6807> = <C-function-pointer>;
define constant <anonymous-6808> = <C-function-pointer>;
define constant <anonymous-6809> = <C-function-pointer>;
define C-subtype <_GtkLinkButtonClass> (<C-void*>) end;
define constant <GtkLinkButtonClass> = <_GtkLinkButtonClass>;

define constant <anonymous-6805> = <C-function-pointer>;
define constant <GtkLinkButtonUriFunc> = <anonymous-6805>;

define C-function gtk-link-button-get-type
  result res :: <GType>;
  c-name: "gtk_link_button_get_type";
end;

define C-function gtk-link-button-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_link_button_new";
end;

define C-function gtk-link-button-new-with-label
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_link_button_new_with_label";
end;

define C-function gtk-link-button-get-uri
  input parameter arg1 :: <GtkLinkButton>;
  result res :: <gchar*>;
  c-name: "gtk_link_button_get_uri";
end;

define C-function gtk-link-button-set-uri
  input parameter arg1 :: <GtkLinkButton>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_link_button_set_uri";
end;

define C-function gtk-link-button-set-uri-hook
  input parameter arg1 :: <GtkLinkButtonUriFunc>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GDestroyNotify>;
  result res :: <GtkLinkButtonUriFunc>;
  c-name: "gtk_link_button_set_uri_hook";
end;

define C-subtype <_GtkLayout> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkLayout> = <_GtkLayout>;

define constant <anonymous-6788> = <C-function-pointer>;
define constant <anonymous-6789> = <C-function-pointer>;
define constant <anonymous-6790> = <C-function-pointer>;
define constant <anonymous-6791> = <C-function-pointer>;
define constant <anonymous-6792> = <C-function-pointer>;
define C-subtype <_GtkLayoutClass> (<C-void*>) end;
define constant <GtkLayoutClass> = <_GtkLayoutClass>;

define C-function gtk-layout-get-type
  result res :: <GType>;
  c-name: "gtk_layout_get_type";
end;

define C-function gtk-layout-new
  input parameter arg1 :: <GtkAdjustment>;
  input parameter arg2 :: <GtkAdjustment>;
  result res :: <GtkWidget>;
  c-name: "gtk_layout_new";
end;

define C-function gtk-layout-put
  input parameter arg1 :: <GtkLayout>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_layout_put";
end;

define C-function gtk-layout-move
  input parameter arg1 :: <GtkLayout>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_layout_move";
end;

define C-function gtk-layout-set-size
  input parameter arg1 :: <GtkLayout>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  c-name: "gtk_layout_set_size";
end;

define C-function gtk-layout-get-size
  input parameter arg1 :: <GtkLayout>;
  input parameter arg2 :: <guint*>;
  input parameter arg3 :: <guint*>;
  c-name: "gtk_layout_get_size";
end;

define C-function gtk-layout-get-hadjustment
  input parameter arg1 :: <GtkLayout>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_layout_get_hadjustment";
end;

define C-function gtk-layout-get-vadjustment
  input parameter arg1 :: <GtkLayout>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_layout_get_vadjustment";
end;

define C-function gtk-layout-set-hadjustment
  input parameter arg1 :: <GtkLayout>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_layout_set_hadjustment";
end;

define C-function gtk-layout-set-vadjustment
  input parameter arg1 :: <GtkLayout>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_layout_set_vadjustment";
end;

define C-function gtk-layout-freeze
  input parameter arg1 :: <GtkLayout>;
  c-name: "gtk_layout_freeze";
end;

define C-function gtk-layout-thaw
  input parameter arg1 :: <GtkLayout>;
  c-name: "gtk_layout_thaw";
end;

define C-subtype <_GtkInvisible> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkInvisible> = <_GtkInvisible>;

define constant <anonymous-6779> = <C-function-pointer>;
define constant <anonymous-6780> = <C-function-pointer>;
define constant <anonymous-6781> = <C-function-pointer>;
define constant <anonymous-6782> = <C-function-pointer>;
define C-subtype <_GtkInvisibleClass> (<C-void*>) end;
define constant <GtkInvisibleClass> = <_GtkInvisibleClass>;

define C-function gtk-invisible-get-type
  result res :: <GType>;
  c-name: "gtk_invisible_get_type";
end;

define C-function gtk-invisible-new
  result res :: <GtkWidget>;
  c-name: "gtk_invisible_new";
end;

define C-function gtk-invisible-new-for-screen
  input parameter arg1 :: <GdkScreen>;
  result res :: <GtkWidget>;
  c-name: "gtk_invisible_new_for_screen";
end;

define C-function gtk-invisible-set-screen
  input parameter arg1 :: <GtkInvisible>;
  input parameter arg2 :: <GdkScreen>;
  c-name: "gtk_invisible_set_screen";
end;

define C-function gtk-invisible-get-screen
  input parameter arg1 :: <GtkInvisible>;
  result res :: <GdkScreen>;
  c-name: "gtk_invisible_get_screen";
end;

define constant <GtkWidget<@7>> = <GtkWidget*>;
define C-subtype <_GtkInputDialog> (<_GtkDialog>, <_AtkImplementorIface>) end;
define constant <GtkInputDialog> = <_GtkInputDialog>;

define constant <anonymous-6771> = <C-function-pointer>;
define constant <anonymous-6772> = <C-function-pointer>;
define constant <anonymous-6773> = <C-function-pointer>;
define constant <anonymous-6774> = <C-function-pointer>;
define constant <anonymous-6775> = <C-function-pointer>;
define constant <anonymous-6776> = <C-function-pointer>;
define C-subtype <_GtkInputDialogClass> (<C-void*>) end;
define constant <GtkInputDialogClass> = <_GtkInputDialogClass>;

define C-function gtk-input-dialog-get-type
  result res :: <GType>;
  c-name: "gtk_input_dialog_get_type";
end;

define C-function gtk-input-dialog-new
  result res :: <GtkWidget>;
  c-name: "gtk_input_dialog_new";
end;

define C-subtype <_GtkIMMulticontextPrivate> (<C-void*>) end;
define constant <GtkIMMulticontextPrivate> = <_GtkIMMulticontextPrivate>;

define C-subtype <_GtkIMMulticontext> (<_GtkIMContext>) end;
define constant <GtkIMMulticontext> = <_GtkIMMulticontext>;

define constant <anonymous-6764> = <C-function-pointer>;
define constant <anonymous-6765> = <C-function-pointer>;
define constant <anonymous-6766> = <C-function-pointer>;
define constant <anonymous-6767> = <C-function-pointer>;
define C-subtype <_GtkIMMulticontextClass> (<C-void*>) end;
define constant <GtkIMMulticontextClass> = <_GtkIMMulticontextClass>;

define C-function gtk-im-multicontext-get-type
  result res :: <GType>;
  c-name: "gtk_im_multicontext_get_type";
end;

define C-function gtk-im-multicontext-new
  result res :: <GtkIMContext>;
  c-name: "gtk_im_multicontext_new";
end;

define C-function gtk-im-multicontext-append-menuitems
  input parameter arg1 :: <GtkIMMulticontext>;
  input parameter arg2 :: <GtkMenuShell>;
  c-name: "gtk_im_multicontext_append_menuitems";
end;

define constant <guint<@8>> = <guint*>;
define C-subtype <_GtkIMContextSimple> (<_GtkIMContext>) end;
define constant <GtkIMContextSimple> = <_GtkIMContextSimple>;

define C-subtype <_GtkIMContextSimpleClass> (<C-void*>) end;
define constant <GtkIMContextSimpleClass> = <_GtkIMContextSimpleClass>;

define C-function gtk-im-context-simple-get-type
  result res :: <GType>;
  c-name: "gtk_im_context_simple_get_type";
end;

define C-function gtk-im-context-simple-new
  result res :: <GtkIMContext>;
  c-name: "gtk_im_context_simple_new";
end;

define C-function gtk-im-context-simple-add-table
  input parameter arg1 :: <GtkIMContextSimple>;
  input parameter arg2 :: <guint16*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_im_context_simple_add_table";
end;

define constant $GTK-MAX-COMPOSE-LEN = 7;

define C-subtype <_GtkImageMenuItem> (<_GtkMenuItem>, <_AtkImplementorIface>) end;
define constant <GtkImageMenuItem> = <_GtkImageMenuItem>;

define C-subtype <_GtkImageMenuItemClass> (<C-void*>) end;
define constant <GtkImageMenuItemClass> = <_GtkImageMenuItemClass>;

define C-function gtk-image-menu-item-get-type
  result res :: <GType>;
  c-name: "gtk_image_menu_item_get_type";
end;

define C-function gtk-image-menu-item-new
  result res :: <GtkWidget>;
  c-name: "gtk_image_menu_item_new";
end;

define C-function gtk-image-menu-item-new-with-label
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_menu_item_new_with_label";
end;

define C-function gtk-image-menu-item-new-with-mnemonic
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_menu_item_new_with_mnemonic";
end;

define C-function gtk-image-menu-item-new-from-stock
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkAccelGroup>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_menu_item_new_from_stock";
end;

define C-function gtk-image-menu-item-set-image
  input parameter arg1 :: <GtkImageMenuItem>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_image_menu_item_set_image";
end;

define C-function gtk-image-menu-item-get-image
  input parameter arg1 :: <GtkImageMenuItem>;
  result res :: <GtkWidget>;
  c-name: "gtk_image_menu_item_get_image";
end;

define C-subtype <_GtkIconViewPrivate> (<C-void*>) end;
define constant <GtkIconViewPrivate> = <_GtkIconViewPrivate>;

define C-subtype <_GtkIconView> (<_GtkContainer>, <_AtkImplementorIface>, <_GtkCellLayout>) end;
define constant <GtkIconView> = <_GtkIconView>;

define constant <anonymous-6692> = <C-function-pointer>;
define constant <anonymous-6693> = <C-function-pointer>;
define constant <anonymous-6694> = <C-function-pointer>;
define constant <anonymous-6695> = <C-function-pointer>;
define constant <anonymous-6696> = <C-function-pointer>;
define constant <anonymous-6697> = <C-function-pointer>;
define constant <anonymous-6698> = <C-function-pointer>;
define constant <anonymous-6699> = <C-function-pointer>;
define constant <anonymous-6700> = <C-function-pointer>;
define C-subtype <_GtkIconViewClass> (<C-void*>) end;
define constant <GtkIconViewClass> = <_GtkIconViewClass>;

define constant <anonymous-6690> = <C-function-pointer>;
define constant <GtkIconViewForeachFunc> = <anonymous-6690>;

define constant <GtkIconViewDropPosition> = <C-int>;
define constant $GTK-ICON-VIEW-NO-DROP = 0;
define constant $GTK-ICON-VIEW-DROP-INTO = 1;
define constant $GTK-ICON-VIEW-DROP-LEFT = 2;
define constant $GTK-ICON-VIEW-DROP-RIGHT = 3;
define constant $GTK-ICON-VIEW-DROP-ABOVE = 4;
define constant $GTK-ICON-VIEW-DROP-BELOW = 5;

define C-function gtk-icon-view-get-type
  result res :: <GType>;
  c-name: "gtk_icon_view_get_type";
end;

define C-function gtk-icon-view-new
  result res :: <GtkWidget>;
  c-name: "gtk_icon_view_new";
end;

define C-function gtk-icon-view-new-with-model
  input parameter arg1 :: <GtkTreeModel>;
  result res :: <GtkWidget>;
  c-name: "gtk_icon_view_new_with_model";
end;

define C-function gtk-icon-view-set-model
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreeModel>;
  c-name: "gtk_icon_view_set_model";
end;

define C-function gtk-icon-view-get-model
  input parameter arg1 :: <GtkIconView>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_icon_view_get_model";
end;

define C-function gtk-icon-view-set-text-column
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_text_column";
end;

define C-function gtk-icon-view-get-text-column
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_text_column";
end;

define C-function gtk-icon-view-set-markup-column
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_markup_column";
end;

define C-function gtk-icon-view-get-markup-column
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_markup_column";
end;

define C-function gtk-icon-view-set-pixbuf-column
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_pixbuf_column";
end;

define C-function gtk-icon-view-get-pixbuf-column
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_pixbuf_column";
end;

define C-function gtk-icon-view-set-orientation
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkOrientation>;
  c-name: "gtk_icon_view_set_orientation";
end;

define C-function gtk-icon-view-get-orientation
  input parameter arg1 :: <GtkIconView>;
  result res :: <GtkOrientation>;
  c-name: "gtk_icon_view_get_orientation";
end;

define C-function gtk-icon-view-set-columns
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_columns";
end;

define C-function gtk-icon-view-get-columns
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_columns";
end;

define C-function gtk-icon-view-set-item-width
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_item_width";
end;

define C-function gtk-icon-view-get-item-width
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_item_width";
end;

define C-function gtk-icon-view-set-spacing
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_spacing";
end;

define C-function gtk-icon-view-get-spacing
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_spacing";
end;

define C-function gtk-icon-view-set-row-spacing
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_row_spacing";
end;

define C-function gtk-icon-view-get-row-spacing
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_row_spacing";
end;

define C-function gtk-icon-view-set-column-spacing
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_column_spacing";
end;

define C-function gtk-icon-view-get-column-spacing
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_column_spacing";
end;

define C-function gtk-icon-view-set-margin
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_icon_view_set_margin";
end;

define C-function gtk-icon-view-get-margin
  input parameter arg1 :: <GtkIconView>;
  result res :: <gint>;
  c-name: "gtk_icon_view_get_margin";
end;

define C-function gtk-icon-view-get-path-at-pos
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <GtkTreePath>;
  c-name: "gtk_icon_view_get_path_at_pos";
end;

define C-pointer-type <GtkCellRenderer*> => <GtkCellRenderer>;
define C-function gtk-icon-view-get-item-at-pos
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkTreePath*>;
  input parameter arg5 :: <GtkCellRenderer*>;
  result res :: <gboolean>;
  c-name: "gtk_icon_view_get_item_at_pos";
end;

define C-function gtk-icon-view-get-visible-range
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath*>;
  input parameter arg3 :: <GtkTreePath*>;
  result res :: <gboolean>;
  c-name: "gtk_icon_view_get_visible_range";
end;

define C-function gtk-icon-view-selected-foreach
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkIconViewForeachFunc>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_icon_view_selected_foreach";
end;

define C-function gtk-icon-view-set-selection-mode
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkSelectionMode>;
  c-name: "gtk_icon_view_set_selection_mode";
end;

define C-function gtk-icon-view-get-selection-mode
  input parameter arg1 :: <GtkIconView>;
  result res :: <GtkSelectionMode>;
  c-name: "gtk_icon_view_get_selection_mode";
end;

define C-function gtk-icon-view-select-path
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_icon_view_select_path";
end;

define C-function gtk-icon-view-unselect-path
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_icon_view_unselect_path";
end;

define C-function gtk-icon-view-path-is-selected
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <gboolean>;
  c-name: "gtk_icon_view_path_is_selected";
end;

define C-function gtk-icon-view-get-selected-items
  input parameter arg1 :: <GtkIconView>;
  result res :: <GList>;
  c-name: "gtk_icon_view_get_selected_items";
end;

define C-function gtk-icon-view-select-all
  input parameter arg1 :: <GtkIconView>;
  c-name: "gtk_icon_view_select_all";
end;

define C-function gtk-icon-view-unselect-all
  input parameter arg1 :: <GtkIconView>;
  c-name: "gtk_icon_view_unselect_all";
end;

define C-function gtk-icon-view-item-activated
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_icon_view_item_activated";
end;

define C-function gtk-icon-view-set-cursor
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkCellRenderer>;
  input parameter arg4 :: <gboolean>;
  c-name: "gtk_icon_view_set_cursor";
end;

define C-function gtk-icon-view-get-cursor
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath*>;
  input parameter arg3 :: <GtkCellRenderer*>;
  result res :: <gboolean>;
  c-name: "gtk_icon_view_get_cursor";
end;

define C-function gtk-icon-view-scroll-to-path
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <gboolean>;
  input parameter arg4 :: <gfloat>;
  input parameter arg5 :: <gfloat>;
  c-name: "gtk_icon_view_scroll_to_path";
end;

define C-function gtk-icon-view-enable-model-drag-source
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GdkModifierType>;
  input parameter arg3 :: <GtkTargetEntry>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <GdkDragAction>;
  c-name: "gtk_icon_view_enable_model_drag_source";
end;

define C-function gtk-icon-view-enable-model-drag-dest
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTargetEntry>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GdkDragAction>;
  c-name: "gtk_icon_view_enable_model_drag_dest";
end;

define C-function gtk-icon-view-unset-model-drag-source
  input parameter arg1 :: <GtkIconView>;
  c-name: "gtk_icon_view_unset_model_drag_source";
end;

define C-function gtk-icon-view-unset-model-drag-dest
  input parameter arg1 :: <GtkIconView>;
  c-name: "gtk_icon_view_unset_model_drag_dest";
end;

define C-function gtk-icon-view-set-reorderable
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_icon_view_set_reorderable";
end;

define C-function gtk-icon-view-get-reorderable
  input parameter arg1 :: <GtkIconView>;
  result res :: <gboolean>;
  c-name: "gtk_icon_view_get_reorderable";
end;

define C-function gtk-icon-view-set-drag-dest-item
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkIconViewDropPosition>;
  c-name: "gtk_icon_view_set_drag_dest_item";
end;

define C-pointer-type <GtkIconViewDropPosition*> => <GtkIconViewDropPosition>;
define C-function gtk-icon-view-get-drag-dest-item
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath*>;
  input parameter arg3 :: <GtkIconViewDropPosition*>;
  c-name: "gtk_icon_view_get_drag_dest_item";
end;

define C-function gtk-icon-view-get-dest-item-at-pos
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkTreePath*>;
  input parameter arg5 :: <GtkIconViewDropPosition*>;
  result res :: <gboolean>;
  c-name: "gtk_icon_view_get_dest_item_at_pos";
end;

define C-function gtk-icon-view-create-drag-icon
  input parameter arg1 :: <GtkIconView>;
  input parameter arg2 :: <GtkTreePath>;
  result res :: <GdkPixmap>;
  c-name: "gtk_icon_view_create_drag_icon";
end;

define C-subtype <_GtkIconInfo> (<C-void*>) end;
define constant <GtkIconInfo> = <_GtkIconInfo>;

define C-subtype <_GtkIconThemePrivate> (<C-void*>) end;
define constant <GtkIconThemePrivate> = <_GtkIconThemePrivate>;

define C-subtype <_GtkIconTheme> (<_GObject>) end;
define constant <GtkIconTheme> = <_GtkIconTheme>;

define constant <anonymous-6655> = <C-function-pointer>;
define C-subtype <_GtkIconThemeClass> (<C-void*>) end;
define constant <GtkIconThemeClass> = <_GtkIconThemeClass>;

define constant <GtkIconLookupFlags> = <C-int>;
define constant $GTK-ICON-LOOKUP-NO-SVG = 1;
define constant $GTK-ICON-LOOKUP-FORCE-SVG = 2;
define constant $GTK-ICON-LOOKUP-USE-BUILTIN = 4;

define constant <GtkIconThemeError> = <C-int>;
define constant $GTK-ICON-THEME-NOT-FOUND = 0;
define constant $GTK-ICON-THEME-FAILED = 1;

define C-function gtk-icon-theme-error-quark
  result res :: <GQuark>;
  c-name: "gtk_icon_theme_error_quark";
end;

define C-function gtk-icon-theme-get-type
  result res :: <GType>;
  c-name: "gtk_icon_theme_get_type";
end;

define C-function gtk-icon-theme-new
  result res :: <GtkIconTheme>;
  c-name: "gtk_icon_theme_new";
end;

define C-function gtk-icon-theme-get-default
  result res :: <GtkIconTheme>;
  c-name: "gtk_icon_theme_get_default";
end;

define C-function gtk-icon-theme-get-for-screen
  input parameter arg1 :: <GdkScreen>;
  result res :: <GtkIconTheme>;
  c-name: "gtk_icon_theme_get_for_screen";
end;

define C-function gtk-icon-theme-set-screen
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <GdkScreen>;
  c-name: "gtk_icon_theme_set_screen";
end;

define C-function gtk-icon-theme-set-search-path-utf8
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*<@>>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_icon_theme_set_search_path_utf8";
end;

define constant <gchar**<@>> = <gchar***>;
define C-function gtk-icon-theme-get-search-path-utf8
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar**<@>>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_icon_theme_get_search_path_utf8";
end;

define C-function gtk-icon-theme-append-search-path-utf8
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_icon_theme_append_search_path_utf8";
end;

define C-function gtk-icon-theme-prepend-search-path-utf8
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_icon_theme_prepend_search_path_utf8";
end;

define C-function gtk-icon-theme-set-custom-theme
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_icon_theme_set_custom_theme";
end;

define C-function gtk-icon-theme-has-icon
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_icon_theme_has_icon";
end;

define C-function gtk-icon-theme-get-icon-sizes
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*>;
  result res :: <gint*>;
  c-name: "gtk_icon_theme_get_icon_sizes";
end;

define C-function gtk-icon-theme-lookup-icon
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkIconLookupFlags>;
  result res :: <GtkIconInfo>;
  c-name: "gtk_icon_theme_lookup_icon";
end;

define C-function gtk-icon-theme-load-icon
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkIconLookupFlags>;
  input parameter arg5 :: <GError*>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_icon_theme_load_icon";
end;

define C-function gtk-icon-theme-list-icons
  input parameter arg1 :: <GtkIconTheme>;
  input parameter arg2 :: <gchar*>;
  result res :: <GList>;
  c-name: "gtk_icon_theme_list_icons";
end;

define C-function gtk-icon-theme-get-example-icon-name
  input parameter arg1 :: <GtkIconTheme>;
  result res :: <char*>;
  c-name: "gtk_icon_theme_get_example_icon_name";
end;

define C-function gtk-icon-theme-rescan-if-needed
  input parameter arg1 :: <GtkIconTheme>;
  result res :: <gboolean>;
  c-name: "gtk_icon_theme_rescan_if_needed";
end;

define C-function gtk-icon-theme-add-builtin-icon
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GdkPixbuf>;
  c-name: "gtk_icon_theme_add_builtin_icon";
end;

define C-function gtk-icon-info-get-type
  result res :: <GType>;
  c-name: "gtk_icon_info_get_type";
end;

define C-function gtk-icon-info-copy
  input parameter arg1 :: <GtkIconInfo>;
  result res :: <GtkIconInfo>;
  c-name: "gtk_icon_info_copy";
end;

define C-function gtk-icon-info-free
  input parameter arg1 :: <GtkIconInfo>;
  c-name: "gtk_icon_info_free";
end;

define C-function gtk-icon-info-get-base-size
  input parameter arg1 :: <GtkIconInfo>;
  result res :: <gint>;
  c-name: "gtk_icon_info_get_base_size";
end;

define C-function gtk-icon-info-get-filename-utf8
  input parameter arg1 :: <GtkIconInfo>;
  result res :: <gchar*>;
  c-name: "gtk_icon_info_get_filename_utf8";
end;

define C-function gtk-icon-info-get-builtin-pixbuf
  input parameter arg1 :: <GtkIconInfo>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_icon_info_get_builtin_pixbuf";
end;

define C-function gtk-icon-info-load-icon
  input parameter arg1 :: <GtkIconInfo>;
  input parameter arg2 :: <GError*>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_icon_info_load_icon";
end;

define C-function gtk-icon-info-set-raw-coordinates
  input parameter arg1 :: <GtkIconInfo>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_icon_info_set_raw_coordinates";
end;

define C-function gtk-icon-info-get-embedded-rect
  input parameter arg1 :: <GtkIconInfo>;
  input parameter arg2 :: <GdkRectangle>;
  result res :: <gboolean>;
  c-name: "gtk_icon_info_get_embedded_rect";
end;

define C-pointer-type <GdkPoint*> => <GdkPoint>;
define C-function gtk-icon-info-get-attach-points
  input parameter arg1 :: <GtkIconInfo>;
  input parameter arg2 :: <GdkPoint*>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_icon_info_get_attach_points";
end;

define C-function gtk-icon-info-get-display-name
  input parameter arg1 :: <GtkIconInfo>;
  result res :: <gchar*>;
  c-name: "gtk_icon_info_get_display_name";
end;

define constant gtk-icon-theme-set-search-path = gtk-icon-theme-set-search-path-utf8;

define constant gtk-icon-theme-get-search-path = gtk-icon-theme-get-search-path-utf8;

define constant gtk-icon-theme-append-search-path = gtk-icon-theme-append-search-path-utf8;

define constant gtk-icon-theme-prepend-search-path = gtk-icon-theme-prepend-search-path-utf8;

define constant gtk-icon-info-get-filename = gtk-icon-info-get-filename-utf8;

define constant <anonymous-6604> = <C-function-pointer>;
define constant <anonymous-6605> = <C-function-pointer>;
define constant <anonymous-6606> = <C-function-pointer>;
define constant <anonymous-6607> = <C-function-pointer>;
define C-subtype <_GtkIconFactoryClass> (<C-void*>) end;
define constant <GtkIconFactoryClass> = <_GtkIconFactoryClass>;

define C-function gtk-icon-factory-get-type
  result res :: <GType>;
  c-name: "gtk_icon_factory_get_type";
end;

define C-function gtk-icon-factory-new
  result res :: <GtkIconFactory>;
  c-name: "gtk_icon_factory_new";
end;

define C-function gtk-icon-factory-add
  input parameter arg1 :: <GtkIconFactory>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <GtkIconSet>;
  c-name: "gtk_icon_factory_add";
end;

define C-function gtk-icon-factory-lookup
  input parameter arg1 :: <GtkIconFactory>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkIconSet>;
  c-name: "gtk_icon_factory_lookup";
end;

define C-function gtk-icon-factory-add-default
  input parameter arg1 :: <GtkIconFactory>;
  c-name: "gtk_icon_factory_add_default";
end;

define C-function gtk-icon-factory-remove-default
  input parameter arg1 :: <GtkIconFactory>;
  c-name: "gtk_icon_factory_remove_default";
end;

define C-function gtk-icon-factory-lookup-default
  input parameter arg1 :: <gchar*>;
  result res :: <GtkIconSet>;
  c-name: "gtk_icon_factory_lookup_default";
end;

define C-function gtk-icon-size-lookup
  input parameter arg1 :: <GtkIconSize>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_icon_size_lookup";
end;

define C-function gtk-icon-size-lookup-for-settings
  input parameter arg1 :: <GtkSettings>;
  input parameter arg2 :: <GtkIconSize>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_icon_size_lookup_for_settings";
end;

define C-function gtk-icon-size-register
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <GtkIconSize>;
  c-name: "gtk_icon_size_register";
end;

define C-function gtk-icon-size-register-alias
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkIconSize>;
  c-name: "gtk_icon_size_register_alias";
end;

define C-function gtk-icon-size-from-name
  input parameter arg1 :: <gchar*>;
  result res :: <GtkIconSize>;
  c-name: "gtk_icon_size_from_name";
end;

define C-function gtk-icon-size-get-name
  input parameter arg1 :: <GtkIconSize>;
  result res :: <gchar*>;
  c-name: "gtk_icon_size_get_name";
end;

define C-function gtk-icon-set-get-type
  result res :: <GType>;
  c-name: "gtk_icon_set_get_type";
end;

define C-function gtk-icon-set-new
  result res :: <GtkIconSet>;
  c-name: "gtk_icon_set_new";
end;

define C-function gtk-icon-set-new-from-pixbuf
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <GtkIconSet>;
  c-name: "gtk_icon_set_new_from_pixbuf";
end;

define C-function gtk-icon-set-ref
  input parameter arg1 :: <GtkIconSet>;
  result res :: <GtkIconSet>;
  c-name: "gtk_icon_set_ref";
end;

define C-function gtk-icon-set-unref
  input parameter arg1 :: <GtkIconSet>;
  c-name: "gtk_icon_set_unref";
end;

define C-function gtk-icon-set-copy
  input parameter arg1 :: <GtkIconSet>;
  result res :: <GtkIconSet>;
  c-name: "gtk_icon_set_copy";
end;

define C-function gtk-icon-set-render-icon
  input parameter arg1 :: <GtkIconSet>;
  input parameter arg2 :: <GtkStyle>;
  input parameter arg3 :: <GtkTextDirection>;
  input parameter arg4 :: <GtkStateType>;
  input parameter arg5 :: <GtkIconSize>;
  input parameter arg6 :: <GtkWidget>;
  input parameter arg7 :: <char*>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_icon_set_render_icon";
end;

define C-function gtk-icon-set-add-source
  input parameter arg1 :: <GtkIconSet>;
  input parameter arg2 :: <GtkIconSource>;
  c-name: "gtk_icon_set_add_source";
end;

define C-pointer-type <GtkIconSize**> => <GtkIconSize*>;
define C-function gtk-icon-set-get-sizes
  input parameter arg1 :: <GtkIconSet>;
  input parameter arg2 :: <GtkIconSize**>;
  input parameter arg3 :: <gint*>;
  c-name: "gtk_icon_set_get_sizes";
end;

define C-function gtk-icon-source-get-type
  result res :: <GType>;
  c-name: "gtk_icon_source_get_type";
end;

define C-function gtk-icon-source-new
  result res :: <GtkIconSource>;
  c-name: "gtk_icon_source_new";
end;

define C-function gtk-icon-source-copy
  input parameter arg1 :: <GtkIconSource>;
  result res :: <GtkIconSource>;
  c-name: "gtk_icon_source_copy";
end;

define C-function gtk-icon-source-free
  input parameter arg1 :: <GtkIconSource>;
  c-name: "gtk_icon_source_free";
end;

define C-function gtk-icon-source-set-filename-utf8
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_icon_source_set_filename_utf8";
end;

define C-function gtk-icon-source-set-icon-name
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_icon_source_set_icon_name";
end;

define C-function gtk-icon-source-set-pixbuf
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <GdkPixbuf>;
  c-name: "gtk_icon_source_set_pixbuf";
end;

define C-function gtk-icon-source-get-filename-utf8
  input parameter arg1 :: <GtkIconSource>;
  result res :: <gchar*>;
  c-name: "gtk_icon_source_get_filename_utf8";
end;

define C-function gtk-icon-source-get-icon-name
  input parameter arg1 :: <GtkIconSource>;
  result res :: <gchar*>;
  c-name: "gtk_icon_source_get_icon_name";
end;

define C-function gtk-icon-source-get-pixbuf
  input parameter arg1 :: <GtkIconSource>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_icon_source_get_pixbuf";
end;

define C-function gtk-icon-source-set-direction-wildcarded
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_icon_source_set_direction_wildcarded";
end;

define C-function gtk-icon-source-set-state-wildcarded
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_icon_source_set_state_wildcarded";
end;

define C-function gtk-icon-source-set-size-wildcarded
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_icon_source_set_size_wildcarded";
end;

define C-function gtk-icon-source-get-size-wildcarded
  input parameter arg1 :: <GtkIconSource>;
  result res :: <gboolean>;
  c-name: "gtk_icon_source_get_size_wildcarded";
end;

define C-function gtk-icon-source-get-state-wildcarded
  input parameter arg1 :: <GtkIconSource>;
  result res :: <gboolean>;
  c-name: "gtk_icon_source_get_state_wildcarded";
end;

define C-function gtk-icon-source-get-direction-wildcarded
  input parameter arg1 :: <GtkIconSource>;
  result res :: <gboolean>;
  c-name: "gtk_icon_source_get_direction_wildcarded";
end;

define C-function gtk-icon-source-set-direction
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <GtkTextDirection>;
  c-name: "gtk_icon_source_set_direction";
end;

define C-function gtk-icon-source-set-state
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <GtkStateType>;
  c-name: "gtk_icon_source_set_state";
end;

define C-function gtk-icon-source-set-size
  input parameter arg1 :: <GtkIconSource>;
  input parameter arg2 :: <GtkIconSize>;
  c-name: "gtk_icon_source_set_size";
end;

define C-function gtk-icon-source-get-direction
  input parameter arg1 :: <GtkIconSource>;
  result res :: <GtkTextDirection>;
  c-name: "gtk_icon_source_get_direction";
end;

define C-function gtk-icon-source-get-state
  input parameter arg1 :: <GtkIconSource>;
  result res :: <GtkStateType>;
  c-name: "gtk_icon_source_get_state";
end;

define C-function gtk-icon-source-get-size
  input parameter arg1 :: <GtkIconSource>;
  result res :: <GtkIconSize>;
  c-name: "gtk_icon_source_get_size";
end;

define constant gtk-icon-source-set-filename = gtk-icon-source-set-filename-utf8;

define constant gtk-icon-source-get-filename = gtk-icon-source-get-filename-utf8;

define C-subtype <_GtkHSeparator> (<_GtkSeparator>, <_AtkImplementorIface>) end;
define constant <GtkHSeparator> = <_GtkHSeparator>;

define C-subtype <_GtkHSeparatorClass> (<C-void*>) end;
define constant <GtkHSeparatorClass> = <_GtkHSeparatorClass>;

define C-function gtk-hseparator-get-type
  result res :: <GType>;
  c-name: "gtk_hseparator_get_type";
end;

define C-function gtk-hseparator-new
  result res :: <GtkWidget>;
  c-name: "gtk_hseparator_new";
end;

define C-subtype <_GtkHScale> (<_GtkScale>, <_AtkImplementorIface>) end;
define constant <GtkHScale> = <_GtkHScale>;

define C-subtype <_GtkHScaleClass> (<C-void*>) end;
define constant <GtkHScaleClass> = <_GtkHScaleClass>;

define C-function gtk-hscale-get-type
  result res :: <GType>;
  c-name: "gtk_hscale_get_type";
end;

define C-function gtk-hscale-new
  input parameter arg1 :: <GtkAdjustment>;
  result res :: <GtkWidget>;
  c-name: "gtk_hscale_new";
end;

define C-function gtk-hscale-new-with-range
  input parameter arg1 :: <gdouble>;
  input parameter arg2 :: <gdouble>;
  input parameter arg3 :: <gdouble>;
  result res :: <GtkWidget>;
  c-name: "gtk_hscale_new_with_range";
end;

define C-subtype <_GtkHRuler> (<_GtkRuler>, <_AtkImplementorIface>) end;
define constant <GtkHRuler> = <_GtkHRuler>;

define C-subtype <_GtkHRulerClass> (<C-void*>) end;
define constant <GtkHRulerClass> = <_GtkHRulerClass>;

define C-function gtk-hruler-get-type
  result res :: <GType>;
  c-name: "gtk_hruler_get_type";
end;

define C-function gtk-hruler-new
  result res :: <GtkWidget>;
  c-name: "gtk_hruler_new";
end;

define C-subtype <_GtkHPaned> (<_GtkPaned>, <_AtkImplementorIface>) end;
define constant <GtkHPaned> = <_GtkHPaned>;

define C-subtype <_GtkHPanedClass> (<C-void*>) end;
define constant <GtkHPanedClass> = <_GtkHPanedClass>;

define C-function gtk-hpaned-get-type
  result res :: <GType>;
  c-name: "gtk_hpaned_get_type";
end;

define C-function gtk-hpaned-new
  result res :: <GtkWidget>;
  c-name: "gtk_hpaned_new";
end;

define C-subtype <_GtkHButtonBox> (<_GtkButtonBox>, <_AtkImplementorIface>) end;
define constant <GtkHButtonBox> = <_GtkHButtonBox>;

define C-subtype <_GtkHButtonBoxClass> (<C-void*>) end;
define constant <GtkHButtonBoxClass> = <_GtkHButtonBoxClass>;

define C-function gtk-hbutton-box-get-type
  result res :: <GType>;
  c-name: "gtk_hbutton_box_get_type";
end;

define C-function gtk-hbutton-box-new
  result res :: <GtkWidget>;
  c-name: "gtk_hbutton_box_new";
end;

define C-function gtk-hbutton-box-get-spacing-default
  result res :: <gint>;
  c-name: "gtk_hbutton_box_get_spacing_default";
end;

define C-function gtk-hbutton-box-get-layout-default
  result res :: <GtkButtonBoxStyle>;
  c-name: "gtk_hbutton_box_get_layout_default";
end;

define C-function gtk-hbutton-box-set-spacing-default
  input parameter arg1 :: <gint>;
  c-name: "gtk_hbutton_box_set_spacing_default";
end;

define C-function gtk-hbutton-box-set-layout-default
  input parameter arg1 :: <GtkButtonBoxStyle>;
  c-name: "gtk_hbutton_box_set_layout_default";
end;

define C-subtype <_GtkHandleBox> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkHandleBox> = <_GtkHandleBox>;

define constant <anonymous-6512> = <C-function-pointer>;
define constant <anonymous-6513> = <C-function-pointer>;
define constant <anonymous-6514> = <C-function-pointer>;
define constant <anonymous-6515> = <C-function-pointer>;
define constant <anonymous-6516> = <C-function-pointer>;
define constant <anonymous-6517> = <C-function-pointer>;
define C-subtype <_GtkHandleBoxClass> (<C-void*>) end;
define constant <GtkHandleBoxClass> = <_GtkHandleBoxClass>;

define C-function gtk-handle-box-get-type
  result res :: <GType>;
  c-name: "gtk_handle_box_get_type";
end;

define C-function gtk-handle-box-new
  result res :: <GtkWidget>;
  c-name: "gtk_handle_box_new";
end;

define C-function gtk-handle-box-set-shadow-type
  input parameter arg1 :: <GtkHandleBox>;
  input parameter arg2 :: <GtkShadowType>;
  c-name: "gtk_handle_box_set_shadow_type";
end;

define C-function gtk-handle-box-get-shadow-type
  input parameter arg1 :: <GtkHandleBox>;
  result res :: <GtkShadowType>;
  c-name: "gtk_handle_box_get_shadow_type";
end;

define C-function gtk-handle-box-set-handle-position
  input parameter arg1 :: <GtkHandleBox>;
  input parameter arg2 :: <GtkPositionType>;
  c-name: "gtk_handle_box_set_handle_position";
end;

define C-function gtk-handle-box-get-handle-position
  input parameter arg1 :: <GtkHandleBox>;
  result res :: <GtkPositionType>;
  c-name: "gtk_handle_box_get_handle_position";
end;

define C-function gtk-handle-box-set-snap-edge
  input parameter arg1 :: <GtkHandleBox>;
  input parameter arg2 :: <GtkPositionType>;
  c-name: "gtk_handle_box_set_snap_edge";
end;

define C-function gtk-handle-box-get-snap-edge
  input parameter arg1 :: <GtkHandleBox>;
  result res :: <GtkPositionType>;
  c-name: "gtk_handle_box_get_snap_edge";
end;

define C-function gtk-gc-get
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <GdkColormap>;
  input parameter arg3 :: <GdkGCValues>;
  input parameter arg4 :: <GdkGCValuesMask>;
  result res :: <GdkGC>;
  c-name: "gtk_gc_get";
end;

define C-function gtk-gc-release
  input parameter arg1 :: <GdkGC>;
  c-name: "gtk_gc_release";
end;

define constant <GtkWidget<@5>> = <GtkWidget*>;
define C-subtype <_GtkGammaCurve> (<_GtkVBox>, <_AtkImplementorIface>) end;
define constant <GtkGammaCurve> = <_GtkGammaCurve>;

define constant <anonymous-6498> = <C-function-pointer>;
define constant <anonymous-6499> = <C-function-pointer>;
define constant <anonymous-6500> = <C-function-pointer>;
define constant <anonymous-6501> = <C-function-pointer>;
define C-subtype <_GtkGammaCurveClass> (<C-void*>) end;
define constant <GtkGammaCurveClass> = <_GtkGammaCurveClass>;

define C-function gtk-gamma-curve-get-type
  result res :: <GType>;
  c-name: "gtk_gamma_curve_get_type";
end;

define C-function gtk-gamma-curve-new
  result res :: <GtkWidget>;
  c-name: "gtk_gamma_curve_new";
end;

define C-subtype <_GtkFrame> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkFrame> = <_GtkFrame>;

define constant <anonymous-4744> = <C-function-pointer>;
define C-subtype <_GtkFrameClass> (<C-void*>) end;
define constant <GtkFrameClass> = <_GtkFrameClass>;

define C-function gtk-frame-get-type
  result res :: <GType>;
  c-name: "gtk_frame_get_type";
end;

define C-function gtk-frame-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_frame_new";
end;

define C-function gtk-frame-set-label
  input parameter arg1 :: <GtkFrame>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_frame_set_label";
end;

define C-function gtk-frame-get-label
  input parameter arg1 :: <GtkFrame>;
  result res :: <gchar*>;
  c-name: "gtk_frame_get_label";
end;

define C-function gtk-frame-set-label-widget
  input parameter arg1 :: <GtkFrame>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_frame_set_label_widget";
end;

define C-function gtk-frame-get-label-widget
  input parameter arg1 :: <GtkFrame>;
  result res :: <GtkWidget>;
  c-name: "gtk_frame_get_label_widget";
end;

define C-function gtk-frame-set-label-align
  input parameter arg1 :: <GtkFrame>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  c-name: "gtk_frame_set_label_align";
end;

define C-function gtk-frame-get-label-align
  input parameter arg1 :: <GtkFrame>;
  input parameter arg2 :: <gfloat*>;
  input parameter arg3 :: <gfloat*>;
  c-name: "gtk_frame_get_label_align";
end;

define C-function gtk-frame-set-shadow-type
  input parameter arg1 :: <GtkFrame>;
  input parameter arg2 :: <GtkShadowType>;
  c-name: "gtk_frame_set_shadow_type";
end;

define C-function gtk-frame-get-shadow-type
  input parameter arg1 :: <GtkFrame>;
  result res :: <GtkShadowType>;
  c-name: "gtk_frame_get_shadow_type";
end;

define C-subtype <_GtkFontSelection> (<_GtkVBox>, <_AtkImplementorIface>) end;
define constant <GtkFontSelection> = <_GtkFontSelection>;

define constant <anonymous-6476> = <C-function-pointer>;
define constant <anonymous-6477> = <C-function-pointer>;
define constant <anonymous-6478> = <C-function-pointer>;
define constant <anonymous-6479> = <C-function-pointer>;
define C-subtype <_GtkFontSelectionClass> (<C-void*>) end;
define constant <GtkFontSelectionClass> = <_GtkFontSelectionClass>;

define C-subtype <_GtkFontSelectionDialog> (<_GtkDialog>, <_AtkImplementorIface>) end;
define constant <GtkFontSelectionDialog> = <_GtkFontSelectionDialog>;

define constant <anonymous-6480> = <C-function-pointer>;
define constant <anonymous-6481> = <C-function-pointer>;
define constant <anonymous-6482> = <C-function-pointer>;
define constant <anonymous-6483> = <C-function-pointer>;
define C-subtype <_GtkFontSelectionDialogClass> (<C-void*>) end;
define constant <GtkFontSelectionDialogClass> = <_GtkFontSelectionDialogClass>;

define C-function gtk-font-selection-get-type
  result res :: <GType>;
  c-name: "gtk_font_selection_get_type";
end;

define C-function gtk-font-selection-new
  result res :: <GtkWidget>;
  c-name: "gtk_font_selection_new";
end;

define C-function gtk-font-selection-get-font-name
  input parameter arg1 :: <GtkFontSelection>;
  result res :: <gchar*>;
  c-name: "gtk_font_selection_get_font_name";
end;

define C-function gtk-font-selection-get-font
  input parameter arg1 :: <GtkFontSelection>;
  result res :: <GdkFont>;
  c-name: "gtk_font_selection_get_font";
end;

define C-function gtk-font-selection-set-font-name
  input parameter arg1 :: <GtkFontSelection>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_font_selection_set_font_name";
end;

define C-function gtk-font-selection-get-preview-text
  input parameter arg1 :: <GtkFontSelection>;
  result res :: <gchar*>;
  c-name: "gtk_font_selection_get_preview_text";
end;

define C-function gtk-font-selection-set-preview-text
  input parameter arg1 :: <GtkFontSelection>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_font_selection_set_preview_text";
end;

define C-function gtk-font-selection-dialog-get-type
  result res :: <GType>;
  c-name: "gtk_font_selection_dialog_get_type";
end;

define C-function gtk-font-selection-dialog-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_font_selection_dialog_new";
end;

define C-function gtk-font-selection-dialog-get-font-name
  input parameter arg1 :: <GtkFontSelectionDialog>;
  result res :: <gchar*>;
  c-name: "gtk_font_selection_dialog_get_font_name";
end;

define C-function gtk-font-selection-dialog-get-font
  input parameter arg1 :: <GtkFontSelectionDialog>;
  result res :: <GdkFont>;
  c-name: "gtk_font_selection_dialog_get_font";
end;

define C-function gtk-font-selection-dialog-set-font-name
  input parameter arg1 :: <GtkFontSelectionDialog>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_font_selection_dialog_set_font_name";
end;

define C-function gtk-font-selection-dialog-get-preview-text
  input parameter arg1 :: <GtkFontSelectionDialog>;
  result res :: <gchar*>;
  c-name: "gtk_font_selection_dialog_get_preview_text";
end;

define C-function gtk-font-selection-dialog-set-preview-text
  input parameter arg1 :: <GtkFontSelectionDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_font_selection_dialog_set_preview_text";
end;

define C-subtype <_GtkFontButtonPrivate> (<C-void*>) end;
define constant <GtkFontButtonPrivate> = <_GtkFontButtonPrivate>;

define C-subtype <_GtkFontButton> (<_GtkButton>, <_AtkImplementorIface>) end;
define constant <GtkFontButton> = <_GtkFontButton>;

define constant <anonymous-6456> = <C-function-pointer>;
define constant <anonymous-6457> = <C-function-pointer>;
define constant <anonymous-6458> = <C-function-pointer>;
define constant <anonymous-6459> = <C-function-pointer>;
define constant <anonymous-6460> = <C-function-pointer>;
define C-subtype <_GtkFontButtonClass> (<C-void*>) end;
define constant <GtkFontButtonClass> = <_GtkFontButtonClass>;

define C-function gtk-font-button-get-type
  result res :: <GType>;
  c-name: "gtk_font_button_get_type";
end;

define C-function gtk-font-button-new
  result res :: <GtkWidget>;
  c-name: "gtk_font_button_new";
end;

define C-function gtk-font-button-new-with-font
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_font_button_new_with_font";
end;

define C-function gtk-font-button-get-title
  input parameter arg1 :: <GtkFontButton>;
  result res :: <gchar*>;
  c-name: "gtk_font_button_get_title";
end;

define C-function gtk-font-button-set-title
  input parameter arg1 :: <GtkFontButton>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_font_button_set_title";
end;

define C-function gtk-font-button-get-use-font
  input parameter arg1 :: <GtkFontButton>;
  result res :: <gboolean>;
  c-name: "gtk_font_button_get_use_font";
end;

define C-function gtk-font-button-set-use-font
  input parameter arg1 :: <GtkFontButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_font_button_set_use_font";
end;

define C-function gtk-font-button-get-use-size
  input parameter arg1 :: <GtkFontButton>;
  result res :: <gboolean>;
  c-name: "gtk_font_button_get_use_size";
end;

define C-function gtk-font-button-set-use-size
  input parameter arg1 :: <GtkFontButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_font_button_set_use_size";
end;

define C-function gtk-font-button-get-font-name
  input parameter arg1 :: <GtkFontButton>;
  result res :: <gchar*>;
  c-name: "gtk_font_button_get_font_name";
end;

define C-function gtk-font-button-set-font-name
  input parameter arg1 :: <GtkFontButton>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_font_button_set_font_name";
end;

define C-function gtk-font-button-get-show-style
  input parameter arg1 :: <GtkFontButton>;
  result res :: <gboolean>;
  c-name: "gtk_font_button_get_show_style";
end;

define C-function gtk-font-button-set-show-style
  input parameter arg1 :: <GtkFontButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_font_button_set_show_style";
end;

define C-function gtk-font-button-get-show-size
  input parameter arg1 :: <GtkFontButton>;
  result res :: <gboolean>;
  c-name: "gtk_font_button_get_show_size";
end;

define C-function gtk-font-button-set-show-size
  input parameter arg1 :: <GtkFontButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_font_button_set_show_size";
end;

define C-subtype <_GtkFileChooserWidgetPrivate> (<C-void*>) end;
define constant <GtkFileChooserWidgetPrivate> = <_GtkFileChooserWidgetPrivate>;

define C-subtype <_GtkFileChooserWidget> (<_GtkVBox>, <_AtkImplementorIface>, <_GtkFileChooser>) end;
define constant <GtkFileChooserWidget> = <_GtkFileChooserWidget>;

define C-subtype <_GtkFileChooserWidgetClass> (<C-void*>) end;
define constant <GtkFileChooserWidgetClass> = <_GtkFileChooserWidgetClass>;

define C-function gtk-file-chooser-widget-get-type
  result res :: <GType>;
  c-name: "gtk_file_chooser_widget_get_type";
end;

define constant <GtkFileChooserAction> = <C-int>;
define constant $GTK-FILE-CHOOSER-ACTION-OPEN = 0;
define constant $GTK-FILE-CHOOSER-ACTION-SAVE = 1;
define constant $GTK-FILE-CHOOSER-ACTION-SELECT-FOLDER = 2;
define constant $GTK-FILE-CHOOSER-ACTION-CREATE-FOLDER = 3;

define C-function gtk-file-chooser-widget-new
  input parameter arg1 :: <GtkFileChooserAction>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_widget_new";
end;

define C-function gtk-file-chooser-widget-new-with-backend
  input parameter arg1 :: <GtkFileChooserAction>;
  input parameter arg2 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_widget_new_with_backend";
end;

define C-subtype <_GtkFileChooser> (<C-void*>) end;
define constant <GtkFileChooser> = <_GtkFileChooser>;

define constant <GtkFileChooserConfirmation> = <C-int>;
define constant $GTK-FILE-CHOOSER-CONFIRMATION-CONFIRM = 0;
define constant $GTK-FILE-CHOOSER-CONFIRMATION-ACCEPT-FILENAME = 1;
define constant $GTK-FILE-CHOOSER-CONFIRMATION-SELECT-AGAIN = 2;

define C-function gtk-file-chooser-get-type
  result res :: <GType>;
  c-name: "gtk_file_chooser_get_type";
end;

define constant <GtkFileChooserError> = <C-int>;
define constant $GTK-FILE-CHOOSER-ERROR-NONEXISTENT = 0;
define constant $GTK-FILE-CHOOSER-ERROR-BAD-FILENAME = 1;
define constant $GTK-FILE-CHOOSER-ERROR-ALREADY-EXISTS = 2;

define C-function gtk-file-chooser-error-quark
  result res :: <GQuark>;
  c-name: "gtk_file_chooser_error_quark";
end;

define C-function gtk-file-chooser-set-action
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <GtkFileChooserAction>;
  c-name: "gtk_file_chooser_set_action";
end;

define C-function gtk-file-chooser-get-action
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GtkFileChooserAction>;
  c-name: "gtk_file_chooser_get_action";
end;

define C-function gtk-file-chooser-set-local-only
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_file_chooser_set_local_only";
end;

define C-function gtk-file-chooser-get-local-only
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_get_local_only";
end;

define C-function gtk-file-chooser-set-select-multiple
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_file_chooser_set_select_multiple";
end;

define C-function gtk-file-chooser-get-select-multiple
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_get_select_multiple";
end;

define C-function gtk-file-chooser-set-show-hidden
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_file_chooser_set_show_hidden";
end;

define C-function gtk-file-chooser-get-show-hidden
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_get_show_hidden";
end;

define C-function gtk-file-chooser-set-do-overwrite-confirmation
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_file_chooser_set_do_overwrite_confirmation";
end;

define C-function gtk-file-chooser-get-do-overwrite-confirmation
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_get_do_overwrite_confirmation";
end;

define C-function gtk-file-chooser-set-current-name
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_file_chooser_set_current_name";
end;

define C-function gtk-file-chooser-get-filename-utf8
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gchar*>;
  c-name: "gtk_file_chooser_get_filename_utf8";
end;

define C-function gtk-file-chooser-set-filename-utf8
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_set_filename_utf8";
end;

define C-function gtk-file-chooser-select-filename-utf8
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_select_filename_utf8";
end;

define C-function gtk-file-chooser-unselect-filename-utf8
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  c-name: "gtk_file_chooser_unselect_filename_utf8";
end;

define C-function gtk-file-chooser-select-all
  input parameter arg1 :: <GtkFileChooser>;
  c-name: "gtk_file_chooser_select_all";
end;

define C-function gtk-file-chooser-unselect-all
  input parameter arg1 :: <GtkFileChooser>;
  c-name: "gtk_file_chooser_unselect_all";
end;

define C-function gtk-file-chooser-get-filenames-utf8
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GSList>;
  c-name: "gtk_file_chooser_get_filenames_utf8";
end;

define C-function gtk-file-chooser-set-current-folder-utf8
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_set_current_folder_utf8";
end;

define C-function gtk-file-chooser-get-current-folder-utf8
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gchar*>;
  c-name: "gtk_file_chooser_get_current_folder_utf8";
end;

define C-function gtk-file-chooser-get-uri
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gchar*>;
  c-name: "gtk_file_chooser_get_uri";
end;

define C-function gtk-file-chooser-set-uri
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_set_uri";
end;

define C-function gtk-file-chooser-select-uri
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_select_uri";
end;

define C-function gtk-file-chooser-unselect-uri
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  c-name: "gtk_file_chooser_unselect_uri";
end;

define C-function gtk-file-chooser-get-uris
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GSList>;
  c-name: "gtk_file_chooser_get_uris";
end;

define C-function gtk-file-chooser-set-current-folder-uri
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_set_current_folder_uri";
end;

define C-function gtk-file-chooser-get-current-folder-uri
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gchar*>;
  c-name: "gtk_file_chooser_get_current_folder_uri";
end;

define C-function gtk-file-chooser-set-preview-widget
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_file_chooser_set_preview_widget";
end;

define C-function gtk-file-chooser-get-preview-widget
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_get_preview_widget";
end;

define C-function gtk-file-chooser-set-preview-widget-active
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_file_chooser_set_preview_widget_active";
end;

define C-function gtk-file-chooser-get-preview-widget-active
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_get_preview_widget_active";
end;

define C-function gtk-file-chooser-set-use-preview-label
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_file_chooser_set_use_preview_label";
end;

define C-function gtk-file-chooser-get-use-preview-label
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_get_use_preview_label";
end;

define C-function gtk-file-chooser-get-preview-filename-utf8
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <char*>;
  c-name: "gtk_file_chooser_get_preview_filename_utf8";
end;

define C-function gtk-file-chooser-get-preview-uri
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <char*>;
  c-name: "gtk_file_chooser_get_preview_uri";
end;

define C-function gtk-file-chooser-set-extra-widget
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_file_chooser_set_extra_widget";
end;

define C-function gtk-file-chooser-get-extra-widget
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_get_extra_widget";
end;

define C-subtype <_GtkFileFilter> (<_GtkObject>) end;
define constant <GtkFileFilter> = <_GtkFileFilter>;

define C-function gtk-file-chooser-add-filter
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <GtkFileFilter>;
  c-name: "gtk_file_chooser_add_filter";
end;

define C-function gtk-file-chooser-remove-filter
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <GtkFileFilter>;
  c-name: "gtk_file_chooser_remove_filter";
end;

define C-function gtk-file-chooser-list-filters
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GSList>;
  c-name: "gtk_file_chooser_list_filters";
end;

define C-function gtk-file-chooser-set-filter
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <GtkFileFilter>;
  c-name: "gtk_file_chooser_set_filter";
end;

define C-function gtk-file-chooser-get-filter
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GtkFileFilter>;
  c-name: "gtk_file_chooser_get_filter";
end;

define C-function gtk-file-chooser-add-shortcut-folder-utf8
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_add_shortcut_folder_utf8";
end;

define C-function gtk-file-chooser-remove-shortcut-folder-utf8
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_remove_shortcut_folder_utf8";
end;

define C-function gtk-file-chooser-list-shortcut-folders-utf8
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GSList>;
  c-name: "gtk_file_chooser_list_shortcut_folders_utf8";
end;

define C-function gtk-file-chooser-add-shortcut-folder-uri
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_add_shortcut_folder_uri";
end;

define C-function gtk-file-chooser-remove-shortcut-folder-uri
  input parameter arg1 :: <GtkFileChooser>;
  input parameter arg2 :: <char*>;
  input parameter arg3 :: <GError*>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_remove_shortcut_folder_uri";
end;

define C-function gtk-file-chooser-list-shortcut-folder-uris
  input parameter arg1 :: <GtkFileChooser>;
  result res :: <GSList>;
  c-name: "gtk_file_chooser_list_shortcut_folder_uris";
end;

define constant gtk-file-chooser-get-filename = gtk-file-chooser-get-filename-utf8;

define constant gtk-file-chooser-set-filename = gtk-file-chooser-set-filename-utf8;

define constant gtk-file-chooser-select-filename = gtk-file-chooser-select-filename-utf8;

define constant gtk-file-chooser-unselect-filename = gtk-file-chooser-unselect-filename-utf8;

define constant gtk-file-chooser-get-filenames = gtk-file-chooser-get-filenames-utf8;

define constant gtk-file-chooser-set-current-folder = gtk-file-chooser-set-current-folder-utf8;

define constant gtk-file-chooser-get-current-folder = gtk-file-chooser-get-current-folder-utf8;

define constant gtk-file-chooser-get-preview-filename = gtk-file-chooser-get-preview-filename-utf8;

define constant gtk-file-chooser-add-shortcut-folder = gtk-file-chooser-add-shortcut-folder-utf8;

define constant gtk-file-chooser-remove-shortcut-folder = gtk-file-chooser-remove-shortcut-folder-utf8;

define constant gtk-file-chooser-list-shortcut-folders = gtk-file-chooser-list-shortcut-folders-utf8;

define constant <GtkFileFilterFlags> = <C-int>;
define constant $GTK-FILE-FILTER-FILENAME = 1;
define constant $GTK-FILE-FILTER-URI = 2;
define constant $GTK-FILE-FILTER-DISPLAY-NAME = 4;
define constant $GTK-FILE-FILTER-MIME-TYPE = 8;

define C-subtype <_GtkFileFilterInfo> (<C-void*>) end;
define constant <GtkFileFilterInfo> = <_GtkFileFilterInfo>;

define constant <anonymous-6376> = <C-function-pointer>;
define constant <GtkFileFilterFunc> = <anonymous-6376>;

define C-function gtk-file-filter-get-type
  result res :: <GType>;
  c-name: "gtk_file_filter_get_type";
end;

define C-function gtk-file-filter-new
  result res :: <GtkFileFilter>;
  c-name: "gtk_file_filter_new";
end;

define C-function gtk-file-filter-set-name
  input parameter arg1 :: <GtkFileFilter>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_file_filter_set_name";
end;

define C-function gtk-file-filter-get-name
  input parameter arg1 :: <GtkFileFilter>;
  result res :: <gchar*>;
  c-name: "gtk_file_filter_get_name";
end;

define C-function gtk-file-filter-add-mime-type
  input parameter arg1 :: <GtkFileFilter>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_file_filter_add_mime_type";
end;

define C-function gtk-file-filter-add-pattern
  input parameter arg1 :: <GtkFileFilter>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_file_filter_add_pattern";
end;

define C-function gtk-file-filter-add-pixbuf-formats
  input parameter arg1 :: <GtkFileFilter>;
  c-name: "gtk_file_filter_add_pixbuf_formats";
end;

define C-function gtk-file-filter-add-custom
  input parameter arg1 :: <GtkFileFilter>;
  input parameter arg2 :: <GtkFileFilterFlags>;
  input parameter arg3 :: <GtkFileFilterFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  c-name: "gtk_file_filter_add_custom";
end;

define C-function gtk-file-filter-get-needed
  input parameter arg1 :: <GtkFileFilter>;
  result res :: <GtkFileFilterFlags>;
  c-name: "gtk_file_filter_get_needed";
end;

define C-function gtk-file-filter-filter
  input parameter arg1 :: <GtkFileFilter>;
  input parameter arg2 :: <GtkFileFilterInfo>;
  result res :: <gboolean>;
  c-name: "gtk_file_filter_filter";
end;

define C-subtype <_GtkFileChooserDialogPrivate> (<C-void*>) end;
define constant <GtkFileChooserDialogPrivate> = <_GtkFileChooserDialogPrivate>;

define C-subtype <_GtkFileChooserDialog> (<_GtkDialog>, <_AtkImplementorIface>, <_GtkFileChooser>) end;
define constant <GtkFileChooserDialog> = <_GtkFileChooserDialog>;

define C-subtype <_GtkFileChooserDialogClass> (<C-void*>) end;
define constant <GtkFileChooserDialogClass> = <_GtkFileChooserDialogClass>;

define C-function gtk-file-chooser-dialog-get-type
  result res :: <GType>;
  c-name: "gtk_file_chooser_dialog_get_type";
end;

define C-function gtk-file-chooser-dialog-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkWindow>;
  input parameter arg3 :: <GtkFileChooserAction>;
  input parameter arg4 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_dialog_new";
end;

define C-function gtk-file-chooser-dialog-new-with-backend
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkWindow>;
  input parameter arg3 :: <GtkFileChooserAction>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_dialog_new_with_backend";
end;

define C-subtype <_GtkFileChooserButtonPrivate> (<C-void*>) end;
define constant <GtkFileChooserButtonPrivate> = <_GtkFileChooserButtonPrivate>;

define C-subtype <_GtkFileChooserButton> (<_GtkHBox>, <_AtkImplementorIface>, <_GtkFileChooser>) end;
define constant <GtkFileChooserButton> = <_GtkFileChooserButton>;

define C-subtype <_GtkFileChooserButtonClass> (<C-void*>) end;
define constant <GtkFileChooserButtonClass> = <_GtkFileChooserButtonClass>;

define C-function gtk-file-chooser-button-get-type
  result res :: <GType>;
  c-name: "gtk_file_chooser_button_get_type";
end;

define C-function gtk-file-chooser-button-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkFileChooserAction>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_button_new";
end;

define C-function gtk-file-chooser-button-new-with-backend
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkFileChooserAction>;
  input parameter arg3 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_button_new_with_backend";
end;

define C-function gtk-file-chooser-button-new-with-dialog
  input parameter arg1 :: <GtkWidget>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_chooser_button_new_with_dialog";
end;

define C-function gtk-file-chooser-button-get-title
  input parameter arg1 :: <GtkFileChooserButton>;
  result res :: <gchar*>;
  c-name: "gtk_file_chooser_button_get_title";
end;

define C-function gtk-file-chooser-button-set-title
  input parameter arg1 :: <GtkFileChooserButton>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_file_chooser_button_set_title";
end;

define C-function gtk-file-chooser-button-get-width-chars
  input parameter arg1 :: <GtkFileChooserButton>;
  result res :: <gint>;
  c-name: "gtk_file_chooser_button_get_width_chars";
end;

define C-function gtk-file-chooser-button-set-width-chars
  input parameter arg1 :: <GtkFileChooserButton>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_file_chooser_button_set_width_chars";
end;

define C-function gtk-file-chooser-button-get-focus-on-click
  input parameter arg1 :: <GtkFileChooserButton>;
  result res :: <gboolean>;
  c-name: "gtk_file_chooser_button_get_focus_on_click";
end;

define C-function gtk-file-chooser-button-set-focus-on-click
  input parameter arg1 :: <GtkFileChooserButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_file_chooser_button_set_focus_on_click";
end;

define C-subtype <_GtkFixed> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkFixed> = <_GtkFixed>;

define C-subtype <_GtkFixedClass> (<C-void*>) end;
define constant <GtkFixedClass> = <_GtkFixedClass>;

define C-subtype <_GtkFixedChild> (<C-void*>) end;
define constant <GtkFixedChild> = <_GtkFixedChild>;

define C-function gtk-fixed-get-type
  result res :: <GType>;
  c-name: "gtk_fixed_get_type";
end;

define C-function gtk-fixed-new
  result res :: <GtkWidget>;
  c-name: "gtk_fixed_new";
end;

define C-function gtk-fixed-put
  input parameter arg1 :: <GtkFixed>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_fixed_put";
end;

define C-function gtk-fixed-move
  input parameter arg1 :: <GtkFixed>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_fixed_move";
end;

define C-function gtk-fixed-set-has-window
  input parameter arg1 :: <GtkFixed>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_fixed_set_has_window";
end;

define C-function gtk-fixed-get-has-window
  input parameter arg1 :: <GtkFixed>;
  result res :: <gboolean>;
  c-name: "gtk_fixed_get_has_window";
end;

define C-subtype <_GtkFileSelection> (<_GtkDialog>, <_AtkImplementorIface>) end;
define constant <GtkFileSelection> = <_GtkFileSelection>;

define constant <anonymous-6355> = <C-function-pointer>;
define constant <anonymous-6356> = <C-function-pointer>;
define constant <anonymous-6357> = <C-function-pointer>;
define constant <anonymous-6358> = <C-function-pointer>;
define C-subtype <_GtkFileSelectionClass> (<C-void*>) end;
define constant <GtkFileSelectionClass> = <_GtkFileSelectionClass>;

define C-function gtk-file-selection-get-type
  result res :: <GType>;
  c-name: "gtk_file_selection_get_type";
end;

define C-function gtk-file-selection-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_file_selection_new";
end;

define C-function gtk-file-selection-set-filename-utf8
  input parameter arg1 :: <GtkFileSelection>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_file_selection_set_filename_utf8";
end;

define C-function gtk-file-selection-get-filename-utf8
  input parameter arg1 :: <GtkFileSelection>;
  result res :: <gchar*>;
  c-name: "gtk_file_selection_get_filename_utf8";
end;

define C-function gtk-file-selection-complete
  input parameter arg1 :: <GtkFileSelection>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_file_selection_complete";
end;

define C-function gtk-file-selection-show-fileop-buttons
  input parameter arg1 :: <GtkFileSelection>;
  c-name: "gtk_file_selection_show_fileop_buttons";
end;

define C-function gtk-file-selection-hide-fileop-buttons
  input parameter arg1 :: <GtkFileSelection>;
  c-name: "gtk_file_selection_hide_fileop_buttons";
end;

define C-function gtk-file-selection-get-selections-utf8
  input parameter arg1 :: <GtkFileSelection>;
  result res :: <gchar**>;
  c-name: "gtk_file_selection_get_selections_utf8";
end;

define C-function gtk-file-selection-set-select-multiple
  input parameter arg1 :: <GtkFileSelection>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_file_selection_set_select_multiple";
end;

define C-function gtk-file-selection-get-select-multiple
  input parameter arg1 :: <GtkFileSelection>;
  result res :: <gboolean>;
  c-name: "gtk_file_selection_get_select_multiple";
end;

define constant gtk-file-selection-get-filename = gtk-file-selection-get-filename-utf8;

define constant gtk-file-selection-set-filename = gtk-file-selection-set-filename-utf8;

define constant gtk-file-selection-get-selections = gtk-file-selection-get-selections-utf8;

define C-subtype <_GtkExpanderPrivate> (<C-void*>) end;
define constant <GtkExpanderPrivate> = <_GtkExpanderPrivate>;

define C-subtype <_GtkExpander> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkExpander> = <_GtkExpander>;

define constant <anonymous-6339> = <C-function-pointer>;
define C-subtype <_GtkExpanderClass> (<C-void*>) end;
define constant <GtkExpanderClass> = <_GtkExpanderClass>;

define C-function gtk-expander-get-type
  result res :: <GType>;
  c-name: "gtk_expander_get_type";
end;

define C-function gtk-expander-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_expander_new";
end;

define C-function gtk-expander-new-with-mnemonic
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_expander_new_with_mnemonic";
end;

define C-function gtk-expander-set-expanded
  input parameter arg1 :: <GtkExpander>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_expander_set_expanded";
end;

define C-function gtk-expander-get-expanded
  input parameter arg1 :: <GtkExpander>;
  result res :: <gboolean>;
  c-name: "gtk_expander_get_expanded";
end;

define C-function gtk-expander-set-spacing
  input parameter arg1 :: <GtkExpander>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_expander_set_spacing";
end;

define C-function gtk-expander-get-spacing
  input parameter arg1 :: <GtkExpander>;
  result res :: <gint>;
  c-name: "gtk_expander_get_spacing";
end;

define C-function gtk-expander-set-label
  input parameter arg1 :: <GtkExpander>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_expander_set_label";
end;

define C-function gtk-expander-get-label
  input parameter arg1 :: <GtkExpander>;
  result res :: <gchar*>;
  c-name: "gtk_expander_get_label";
end;

define C-function gtk-expander-set-use-underline
  input parameter arg1 :: <GtkExpander>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_expander_set_use_underline";
end;

define C-function gtk-expander-get-use-underline
  input parameter arg1 :: <GtkExpander>;
  result res :: <gboolean>;
  c-name: "gtk_expander_get_use_underline";
end;

define C-function gtk-expander-set-use-markup
  input parameter arg1 :: <GtkExpander>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_expander_set_use_markup";
end;

define C-function gtk-expander-get-use-markup
  input parameter arg1 :: <GtkExpander>;
  result res :: <gboolean>;
  c-name: "gtk_expander_get_use_markup";
end;

define C-function gtk-expander-set-label-widget
  input parameter arg1 :: <GtkExpander>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_expander_set_label_widget";
end;

define C-function gtk-expander-get-label-widget
  input parameter arg1 :: <GtkExpander>;
  result res :: <GtkWidget>;
  c-name: "gtk_expander_get_label_widget";
end;

define C-subtype <_GtkEventBox> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkEventBox> = <_GtkEventBox>;

define C-subtype <_GtkEventBoxClass> (<C-void*>) end;
define constant <GtkEventBoxClass> = <_GtkEventBoxClass>;

define C-function gtk-event-box-get-type
  result res :: <GType>;
  c-name: "gtk_event_box_get_type";
end;

define C-function gtk-event-box-new
  result res :: <GtkWidget>;
  c-name: "gtk_event_box_new";
end;

define C-function gtk-event-box-get-visible-window
  input parameter arg1 :: <GtkEventBox>;
  result res :: <gboolean>;
  c-name: "gtk_event_box_get_visible_window";
end;

define C-function gtk-event-box-set-visible-window
  input parameter arg1 :: <GtkEventBox>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_event_box_set_visible_window";
end;

define C-function gtk-event-box-get-above-child
  input parameter arg1 :: <GtkEventBox>;
  result res :: <gboolean>;
  c-name: "gtk_event_box_get_above_child";
end;

define C-function gtk-event-box-set-above-child
  input parameter arg1 :: <GtkEventBox>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_event_box_set_above_child";
end;

define C-subtype <_GtkDrawingArea> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkDrawingArea> = <_GtkDrawingArea>;

define constant <anonymous-6313> = <C-function-pointer>;
define constant <anonymous-6314> = <C-function-pointer>;
define constant <anonymous-6315> = <C-function-pointer>;
define constant <anonymous-6316> = <C-function-pointer>;
define C-subtype <_GtkDrawingAreaClass> (<C-void*>) end;
define constant <GtkDrawingAreaClass> = <_GtkDrawingAreaClass>;

define C-function gtk-drawing-area-get-type
  result res :: <GType>;
  c-name: "gtk_drawing_area_get_type";
end;

define C-function gtk-drawing-area-new
  result res :: <GtkWidget>;
  c-name: "gtk_drawing_area_new";
end;

define C-function gtk-drawing-area-size
  input parameter arg1 :: <GtkDrawingArea>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_drawing_area_size";
end;

define constant <gfloat<@2>> = <gfloat*>;
define C-subtype <_GtkCurve> (<_GtkDrawingArea>, <_AtkImplementorIface>) end;
define constant <GtkCurve> = <_GtkCurve>;

define constant <anonymous-6320> = <C-function-pointer>;
define constant <anonymous-6321> = <C-function-pointer>;
define constant <anonymous-6322> = <C-function-pointer>;
define constant <anonymous-6323> = <C-function-pointer>;
define constant <anonymous-6324> = <C-function-pointer>;
define C-subtype <_GtkCurveClass> (<C-void*>) end;
define constant <GtkCurveClass> = <_GtkCurveClass>;

define C-function gtk-curve-get-type
  result res :: <GType>;
  c-name: "gtk_curve_get_type";
end;

define C-function gtk-curve-new
  result res :: <GtkWidget>;
  c-name: "gtk_curve_new";
end;

define C-function gtk-curve-reset
  input parameter arg1 :: <GtkCurve>;
  c-name: "gtk_curve_reset";
end;

define C-function gtk-curve-set-gamma
  input parameter arg1 :: <GtkCurve>;
  input parameter arg2 :: <gfloat>;
  c-name: "gtk_curve_set_gamma";
end;

define C-function gtk-curve-set-range
  input parameter arg1 :: <GtkCurve>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  input parameter arg4 :: <gfloat>;
  input parameter arg5 :: <gfloat>;
  c-name: "gtk_curve_set_range";
end;

define constant <gfloat<@>> = <gfloat*>;
define C-function gtk-curve-get-vector
  input parameter arg1 :: <GtkCurve>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <gfloat<@>>;
  c-name: "gtk_curve_get_vector";
end;

define C-function gtk-curve-set-vector
  input parameter arg1 :: <GtkCurve>;
  input parameter arg2 :: <C-signed-int>;
  input parameter arg3 :: <gfloat<@>>;
  c-name: "gtk_curve_set_vector";
end;

define C-function gtk-curve-set-curve-type
  input parameter arg1 :: <GtkCurve>;
  input parameter arg2 :: <GtkCurveType>;
  c-name: "gtk_curve_set_curve_type";
end;

define constant <GtkCTreePos> = <C-int>;
define constant $GTK-CTREE-POS-BEFORE = 0;
define constant $GTK-CTREE-POS-AS-CHILD = 1;
define constant $GTK-CTREE-POS-AFTER = 2;

define constant <GtkCTreeLineStyle> = <C-int>;
define constant $GTK-CTREE-LINES-NONE = 0;
define constant $GTK-CTREE-LINES-SOLID = 1;
define constant $GTK-CTREE-LINES-DOTTED = 2;
define constant $GTK-CTREE-LINES-TABBED = 3;

define constant <GtkCTreeExpanderStyle> = <C-int>;
define constant $GTK-CTREE-EXPANDER-NONE = 0;
define constant $GTK-CTREE-EXPANDER-SQUARE = 1;
define constant $GTK-CTREE-EXPANDER-TRIANGLE = 2;
define constant $GTK-CTREE-EXPANDER-CIRCULAR = 3;

define constant <GtkCTreeExpansionType> = <C-int>;
define constant $GTK-CTREE-EXPANSION-EXPAND = 0;
define constant $GTK-CTREE-EXPANSION-EXPAND-RECURSIVE = 1;
define constant $GTK-CTREE-EXPANSION-COLLAPSE = 2;
define constant $GTK-CTREE-EXPANSION-COLLAPSE-RECURSIVE = 3;
define constant $GTK-CTREE-EXPANSION-TOGGLE = 4;
define constant $GTK-CTREE-EXPANSION-TOGGLE-RECURSIVE = 5;

define C-subtype <_GtkCListColumn> (<C-void*>) end;
define constant <GtkCListColumn> = <_GtkCListColumn>;

define constant <guint8<@5>> = <guint8*>;
define C-subtype <_GtkCListCellInfo> (<C-void*>) end;
define constant <GtkCListCellInfo> = <_GtkCListCellInfo>;

define constant <anonymous-5644> = <C-function-pointer>;
define constant <GtkCListCompareFunc> = <anonymous-5644>;

define constant <GtkCListDragPos> = <C-int>;
define constant $GTK-CLIST-DRAG-NONE = 0;
define constant $GTK-CLIST-DRAG-BEFORE = 1;
define constant $GTK-CLIST-DRAG-INTO = 2;
define constant $GTK-CLIST-DRAG-AFTER = 3;

define C-subtype <_GtkCList> (<_GtkContainer>, <_AtkImplementorIface>) end;
define constant <GtkCList> = <_GtkCList>;

define constant <GtkCTree> = <_GtkCTree>;

define C-subtype <_GtkCTreeNode> (<C-void*>) end;
define constant <GtkCTreeNode> = <_GtkCTreeNode>;

define constant <anonymous-6233> = <C-function-pointer>;
define constant <GtkCTreeCompareDragFunc> = <anonymous-6233>;

define C-subtype <_GtkCTree> (<_GtkCList>, <_AtkImplementorIface>) end;
define constant <anonymous-5645> = <C-function-pointer>;
define constant <anonymous-5646> = <C-function-pointer>;
define constant <anonymous-5647> = <C-function-pointer>;
define constant <anonymous-5648> = <C-function-pointer>;
define constant <anonymous-5649> = <C-function-pointer>;
define constant <anonymous-5650> = <C-function-pointer>;
define constant <anonymous-5651> = <C-function-pointer>;
define constant <anonymous-5652> = <C-function-pointer>;
define constant <anonymous-5653> = <C-function-pointer>;
define constant <anonymous-5654> = <C-function-pointer>;
define constant <anonymous-5655> = <C-function-pointer>;
define constant <anonymous-5656> = <C-function-pointer>;
define constant <anonymous-5657> = <C-function-pointer>;
define constant <anonymous-5658> = <C-function-pointer>;
define constant <anonymous-5659> = <C-function-pointer>;
define constant <anonymous-5660> = <C-function-pointer>;
define constant <anonymous-5661> = <C-function-pointer>;
define constant <anonymous-5662> = <C-function-pointer>;
define constant <anonymous-5663> = <C-function-pointer>;
define constant <anonymous-5664> = <C-function-pointer>;
define constant <GtkCellType> = <C-int>;
define constant $GTK-CELL-EMPTY = 0;
define constant $GTK-CELL-TEXT = 1;
define constant $GTK-CELL-PIXMAP = 2;
define constant $GTK-CELL-PIXTEXT = 3;
define constant $GTK-CELL-WIDGET = 4;

define C-subtype <anonymous-5682> (<C-void*>) end;
define C-subtype <anonymous-5683> (<C-void*>) end;
define C-subtype <anonymous-5684> (<C-void*>) end;
define C-subtype <_GtkCell> (<C-void*>) end;
define constant <GtkCell> = <_GtkCell>;

define C-subtype <_GtkCListRow> (<C-void*>) end;
define constant <GtkCListRow> = <_GtkCListRow>;

define constant <anonymous-5665> = <C-function-pointer>;
define constant <anonymous-5666> = <C-function-pointer>;
define constant <anonymous-5667> = <C-function-pointer>;
define constant <anonymous-5668> = <C-function-pointer>;
define constant <anonymous-5669> = <C-function-pointer>;
define constant <anonymous-5670> = <C-function-pointer>;
define constant <anonymous-5671> = <C-function-pointer>;
define constant <anonymous-5672> = <C-function-pointer>;
define constant <anonymous-5673> = <C-function-pointer>;
define C-subtype <_GtkCListClass> (<C-void*>) end;
define constant <GtkCListClass> = <_GtkCListClass>;

define constant <anonymous-6237> = <C-function-pointer>;
define constant <anonymous-6238> = <C-function-pointer>;
define constant <anonymous-6239> = <C-function-pointer>;
define constant <anonymous-6240> = <C-function-pointer>;
define constant <anonymous-6241> = <C-function-pointer>;
define constant <anonymous-6242> = <C-function-pointer>;
define C-subtype <_GtkCTreeClass> (<C-void*>) end;
define constant <GtkCTreeClass> = <_GtkCTreeClass>;

define C-subtype <_GtkCTreeRow> (<C-void*>) end;
define constant <GtkCTreeRow> = <_GtkCTreeRow>;

define constant <anonymous-6231> = <C-function-pointer>;
define constant <GtkCTreeFunc> = <anonymous-6231>;

define constant <anonymous-6232> = <C-function-pointer>;
define constant <GtkCTreeGNodeFunc> = <anonymous-6232>;

define C-function gtk-ctree-get-type
  result res :: <GtkType>;
  c-name: "gtk_ctree_get_type";
end;

define C-function gtk-ctree-new-with-titles
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*<@>>;
  result res :: <GtkWidget>;
  c-name: "gtk_ctree_new_with_titles";
end;

define C-function gtk-ctree-new
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_ctree_new";
end;

define C-function gtk-ctree-insert-node
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GtkCTreeNode>;
  input parameter arg4 :: <gchar*<@>>;
  input parameter arg5 :: <guint8>;
  input parameter arg6 :: <GdkPixmap>;
  input parameter arg7 :: <GdkBitmap>;
  input parameter arg8 :: <GdkPixmap>;
  input parameter arg9 :: <GdkBitmap>;
  input parameter arg10 :: <gboolean>;
  input parameter arg11 :: <gboolean>;
  result res :: <GtkCTreeNode>;
  c-name: "gtk_ctree_insert_node";
end;

define C-function gtk-ctree-remove-node
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_remove_node";
end;

define C-function gtk-ctree-insert-gnode
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GtkCTreeNode>;
  input parameter arg4 :: <GNode>;
  input parameter arg5 :: <GtkCTreeGNodeFunc>;
  input parameter arg6 :: <gpointer>;
  result res :: <GtkCTreeNode>;
  c-name: "gtk_ctree_insert_gnode";
end;

define C-function gtk-ctree-export-to-gnode
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GNode>;
  input parameter arg3 :: <GNode>;
  input parameter arg4 :: <GtkCTreeNode>;
  input parameter arg5 :: <GtkCTreeGNodeFunc>;
  input parameter arg6 :: <gpointer>;
  result res :: <GNode>;
  c-name: "gtk_ctree_export_to_gnode";
end;

define C-function gtk-ctree-post-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GtkCTreeFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "gtk_ctree_post_recursive";
end;

define C-function gtk-ctree-post-recursive-to-depth
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkCTreeFunc>;
  input parameter arg5 :: <gpointer>;
  c-name: "gtk_ctree_post_recursive_to_depth";
end;

define C-function gtk-ctree-pre-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GtkCTreeFunc>;
  input parameter arg4 :: <gpointer>;
  c-name: "gtk_ctree_pre_recursive";
end;

define C-function gtk-ctree-pre-recursive-to-depth
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkCTreeFunc>;
  input parameter arg5 :: <gpointer>;
  c-name: "gtk_ctree_pre_recursive_to_depth";
end;

define C-function gtk-ctree-is-viewable
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_is_viewable";
end;

define C-function gtk-ctree-last
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  result res :: <GtkCTreeNode>;
  c-name: "gtk_ctree_last";
end;

define C-function gtk-ctree-find-node-ptr
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeRow>;
  result res :: <GtkCTreeNode>;
  c-name: "gtk_ctree_find_node_ptr";
end;

define C-function gtk-ctree-node-nth
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <guint>;
  result res :: <GtkCTreeNode>;
  c-name: "gtk_ctree_node_nth";
end;

define C-function gtk-ctree-find
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GtkCTreeNode>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_find";
end;

define C-function gtk-ctree-is-ancestor
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GtkCTreeNode>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_is_ancestor";
end;

define C-function gtk-ctree-find-by-row-data
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gpointer>;
  result res :: <GtkCTreeNode>;
  c-name: "gtk_ctree_find_by_row_data";
end;

define C-function gtk-ctree-find-all-by-row-data
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gpointer>;
  result res :: <GList>;
  c-name: "gtk_ctree_find_all_by_row_data";
end;

define C-function gtk-ctree-find-by-row-data-custom
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GCompareFunc>;
  result res :: <GtkCTreeNode>;
  c-name: "gtk_ctree_find_by_row_data_custom";
end;

define C-function gtk-ctree-find-all-by-row-data-custom
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GCompareFunc>;
  result res :: <GList>;
  c-name: "gtk_ctree_find_all_by_row_data_custom";
end;

define C-function gtk-ctree-is-hot-spot
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_is_hot_spot";
end;

define C-function gtk-ctree-move
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GtkCTreeNode>;
  input parameter arg4 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_move";
end;

define C-function gtk-ctree-expand
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_expand";
end;

define C-function gtk-ctree-expand-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_expand_recursive";
end;

define C-function gtk-ctree-expand-to-depth
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_ctree_expand_to_depth";
end;

define C-function gtk-ctree-collapse
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_collapse";
end;

define C-function gtk-ctree-collapse-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_collapse_recursive";
end;

define C-function gtk-ctree-collapse-to-depth
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_ctree_collapse_to_depth";
end;

define C-function gtk-ctree-toggle-expansion
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_toggle_expansion";
end;

define C-function gtk-ctree-toggle-expansion-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_toggle_expansion_recursive";
end;

define C-function gtk-ctree-select
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_select";
end;

define C-function gtk-ctree-select-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_select_recursive";
end;

define C-function gtk-ctree-unselect
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_unselect";
end;

define C-function gtk-ctree-unselect-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_unselect_recursive";
end;

define C-function gtk-ctree-real-select-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_ctree_real_select_recursive";
end;

define C-function gtk-ctree-node-set-text
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar*>;
  c-name: "gtk_ctree_node_set_text";
end;

define C-function gtk-ctree-node-set-pixmap
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GdkPixmap>;
  input parameter arg5 :: <GdkBitmap>;
  c-name: "gtk_ctree_node_set_pixmap";
end;

define C-function gtk-ctree-node-set-pixtext
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <guint8>;
  input parameter arg6 :: <GdkPixmap>;
  input parameter arg7 :: <GdkBitmap>;
  c-name: "gtk_ctree_node_set_pixtext";
end;

define C-function gtk-ctree-set-node-info
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <guint8>;
  input parameter arg5 :: <GdkPixmap>;
  input parameter arg6 :: <GdkBitmap>;
  input parameter arg7 :: <GdkPixmap>;
  input parameter arg8 :: <GdkBitmap>;
  input parameter arg9 :: <gboolean>;
  input parameter arg10 :: <gboolean>;
  c-name: "gtk_ctree_set_node_info";
end;

define C-function gtk-ctree-node-set-shift
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_ctree_node_set_shift";
end;

define C-function gtk-ctree-node-set-selectable
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_ctree_node_set_selectable";
end;

define C-function gtk-ctree-node-get-selectable
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_node_get_selectable";
end;

define C-function gtk-ctree-node-get-cell-type
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  result res :: <GtkCellType>;
  c-name: "gtk_ctree_node_get_cell_type";
end;

define C-function gtk-ctree-node-get-text
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar**>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_node_get_text";
end;

define C-function gtk-ctree-node-get-pixmap
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GdkPixmap*>;
  input parameter arg5 :: <GdkBitmap*>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_node_get_pixmap";
end;

define C-function gtk-ctree-node-get-pixtext
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar**>;
  input parameter arg5 :: <guint8*>;
  input parameter arg6 :: <GdkPixmap*>;
  input parameter arg7 :: <GdkBitmap*>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_node_get_pixtext";
end;

define C-function gtk-ctree-get-node-info
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gchar**>;
  input parameter arg4 :: <guint8*>;
  input parameter arg5 :: <GdkPixmap*>;
  input parameter arg6 :: <GdkBitmap*>;
  input parameter arg7 :: <GdkPixmap*>;
  input parameter arg8 :: <GdkBitmap*>;
  input parameter arg9 :: <gboolean*>;
  input parameter arg10 :: <gboolean*>;
  result res :: <gboolean>;
  c-name: "gtk_ctree_get_node_info";
end;

define C-function gtk-ctree-node-set-row-style
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GtkStyle>;
  c-name: "gtk_ctree_node_set_row_style";
end;

define C-function gtk-ctree-node-get-row-style
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  result res :: <GtkStyle>;
  c-name: "gtk_ctree_node_get_row_style";
end;

define C-function gtk-ctree-node-set-cell-style
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkStyle>;
  c-name: "gtk_ctree_node_set_cell_style";
end;

define C-function gtk-ctree-node-get-cell-style
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  result res :: <GtkStyle>;
  c-name: "gtk_ctree_node_get_cell_style";
end;

define C-function gtk-ctree-node-set-foreground
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gtk_ctree_node_set_foreground";
end;

define C-function gtk-ctree-node-set-background
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gtk_ctree_node_set_background";
end;

define C-function gtk-ctree-node-set-row-data
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_ctree_node_set_row_data";
end;

define C-function gtk-ctree-node-set-row-data-full
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_ctree_node_set_row_data_full";
end;

define C-function gtk-ctree-node-get-row-data
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  result res :: <gpointer>;
  c-name: "gtk_ctree_node_get_row_data";
end;

define C-function gtk-ctree-node-moveto
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gfloat>;
  input parameter arg5 :: <gfloat>;
  c-name: "gtk_ctree_node_moveto";
end;

define C-function gtk-ctree-node-is-visible
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  result res :: <GtkVisibility>;
  c-name: "gtk_ctree_node_is_visible";
end;

define C-function gtk-ctree-set-indent
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_ctree_set_indent";
end;

define C-function gtk-ctree-set-spacing
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_ctree_set_spacing";
end;

define C-function gtk-ctree-set-show-stub
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_ctree_set_show_stub";
end;

define C-function gtk-ctree-set-line-style
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeLineStyle>;
  c-name: "gtk_ctree_set_line_style";
end;

define C-function gtk-ctree-set-expander-style
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeExpanderStyle>;
  c-name: "gtk_ctree_set_expander_style";
end;

define C-function gtk-ctree-set-drag-compare-func
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeCompareDragFunc>;
  c-name: "gtk_ctree_set_drag_compare_func";
end;

define C-function gtk-ctree-sort-node
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_sort_node";
end;

define C-function gtk-ctree-sort-recursive
  input parameter arg1 :: <GtkCTree>;
  input parameter arg2 :: <GtkCTreeNode>;
  c-name: "gtk_ctree_sort_recursive";
end;

define C-function gtk-ctree-node-get-type
  result res :: <GType>;
  c-name: "gtk_ctree_node_get_type";
end;

define constant <anonymous-5640> = <C-int>;
define constant $GTK-CLIST-IN-DRAG = 1;
define constant $GTK-CLIST-ROW-HEIGHT-SET = 2;
define constant $GTK-CLIST-SHOW-TITLES = 4;
define constant $GTK-CLIST-ADD-MODE = 16;
define constant $GTK-CLIST-AUTO-SORT = 32;
define constant $GTK-CLIST-AUTO-RESIZE-BLOCKED = 64;
define constant $GTK-CLIST-REORDERABLE = 128;
define constant $GTK-CLIST-USE-DRAG-ICONS = 256;
define constant $GTK-CLIST-DRAW-DRAG-LINE = 512;
define constant $GTK-CLIST-DRAW-DRAG-RECT = 1024;

define constant <GtkButtonAction> = <C-int>;
define constant $GTK-BUTTON-IGNORED = 0;
define constant $GTK-BUTTON-SELECTS = 1;
define constant $GTK-BUTTON-DRAGS = 2;
define constant $GTK-BUTTON-EXPANDS = 4;

define C-subtype <_GtkCellText> (<C-void*>) end;
define constant <GtkCellText> = <_GtkCellText>;

define C-subtype <_GtkCellPixmap> (<C-void*>) end;
define constant <GtkCellPixmap> = <_GtkCellPixmap>;

define C-subtype <_GtkCellPixText> (<C-void*>) end;
define constant <GtkCellPixText> = <_GtkCellPixText>;

define C-subtype <_GtkCellWidget> (<C-void*>) end;
define constant <GtkCellWidget> = <_GtkCellWidget>;

define C-subtype <_GtkCListDestInfo> (<C-void*>) end;
define constant <GtkCListDestInfo> = <_GtkCListDestInfo>;

define C-function gtk-clist-get-type
  result res :: <GtkType>;
  c-name: "gtk_clist_get_type";
end;

define C-function gtk-clist-new
  input parameter arg1 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_clist_new";
end;

define C-function gtk-clist-new-with-titles
  input parameter arg1 :: <gint>;
  input parameter arg2 :: <gchar*<@>>;
  result res :: <GtkWidget>;
  c-name: "gtk_clist_new_with_titles";
end;

define C-function gtk-clist-set-hadjustment
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_clist_set_hadjustment";
end;

define C-function gtk-clist-set-vadjustment
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <GtkAdjustment>;
  c-name: "gtk_clist_set_vadjustment";
end;

define C-function gtk-clist-get-hadjustment
  input parameter arg1 :: <GtkCList>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_clist_get_hadjustment";
end;

define C-function gtk-clist-get-vadjustment
  input parameter arg1 :: <GtkCList>;
  result res :: <GtkAdjustment>;
  c-name: "gtk_clist_get_vadjustment";
end;

define C-function gtk-clist-set-shadow-type
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <GtkShadowType>;
  c-name: "gtk_clist_set_shadow_type";
end;

define C-function gtk-clist-set-selection-mode
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <GtkSelectionMode>;
  c-name: "gtk_clist_set_selection_mode";
end;

define C-function gtk-clist-set-reorderable
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_clist_set_reorderable";
end;

define C-function gtk-clist-set-use-drag-icons
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_clist_set_use_drag_icons";
end;

define C-function gtk-clist-set-button-actions
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint8>;
  c-name: "gtk_clist_set_button_actions";
end;

define C-function gtk-clist-freeze
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_freeze";
end;

define C-function gtk-clist-thaw
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_thaw";
end;

define C-function gtk-clist-column-titles-show
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_column_titles_show";
end;

define C-function gtk-clist-column-titles-hide
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_column_titles_hide";
end;

define C-function gtk-clist-column-title-active
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_clist_column_title_active";
end;

define C-function gtk-clist-column-title-passive
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_clist_column_title_passive";
end;

define C-function gtk-clist-column-titles-active
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_column_titles_active";
end;

define C-function gtk-clist-column-titles-passive
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_column_titles_passive";
end;

define C-function gtk-clist-set-column-title
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_clist_set_column_title";
end;

define C-function gtk-clist-get-column-title
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "gtk_clist_get_column_title";
end;

define C-function gtk-clist-set-column-widget
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GtkWidget>;
  c-name: "gtk_clist_set_column_widget";
end;

define C-function gtk-clist-get-column-widget
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_clist_get_column_widget";
end;

define C-function gtk-clist-set-column-justification
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GtkJustification>;
  c-name: "gtk_clist_set_column_justification";
end;

define C-function gtk-clist-set-column-visibility
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_clist_set_column_visibility";
end;

define C-function gtk-clist-set-column-resizeable
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_clist_set_column_resizeable";
end;

define C-function gtk-clist-set-column-auto-resize
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_clist_set_column_auto_resize";
end;

define C-function gtk-clist-columns-autosize
  input parameter arg1 :: <GtkCList>;
  result res :: <gint>;
  c-name: "gtk_clist_columns_autosize";
end;

define C-function gtk-clist-optimal-column-width
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_clist_optimal_column_width";
end;

define C-function gtk-clist-set-column-width
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clist_set_column_width";
end;

define C-function gtk-clist-set-column-min-width
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clist_set_column_min_width";
end;

define C-function gtk-clist-set-column-max-width
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clist_set_column_max_width";
end;

define C-function gtk-clist-set-row-height
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_clist_set_row_height";
end;

define C-function gtk-clist-moveto
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gfloat>;
  input parameter arg5 :: <gfloat>;
  c-name: "gtk_clist_moveto";
end;

define C-function gtk-clist-row-is-visible
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  result res :: <GtkVisibility>;
  c-name: "gtk_clist_row_is_visible";
end;

define C-function gtk-clist-get-cell-type
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <GtkCellType>;
  c-name: "gtk_clist_get_cell_type";
end;

define C-function gtk-clist-set-text
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar*>;
  c-name: "gtk_clist_set_text";
end;

define C-function gtk-clist-get-text
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar**>;
  result res :: <gint>;
  c-name: "gtk_clist_get_text";
end;

define C-function gtk-clist-set-pixmap
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GdkPixmap>;
  input parameter arg5 :: <GdkBitmap>;
  c-name: "gtk_clist_set_pixmap";
end;

define C-function gtk-clist-get-pixmap
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GdkPixmap*>;
  input parameter arg5 :: <GdkBitmap*>;
  result res :: <gint>;
  c-name: "gtk_clist_get_pixmap";
end;

define C-function gtk-clist-set-pixtext
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <guint8>;
  input parameter arg6 :: <GdkPixmap>;
  input parameter arg7 :: <GdkBitmap>;
  c-name: "gtk_clist_set_pixtext";
end;

define C-function gtk-clist-get-pixtext
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gchar**>;
  input parameter arg5 :: <guint8*>;
  input parameter arg6 :: <GdkPixmap*>;
  input parameter arg7 :: <GdkBitmap*>;
  result res :: <gint>;
  c-name: "gtk_clist_get_pixtext";
end;

define C-function gtk-clist-set-foreground
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gtk_clist_set_foreground";
end;

define C-function gtk-clist-set-background
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GdkColor>;
  c-name: "gtk_clist_set_background";
end;

define C-function gtk-clist-set-cell-style
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <GtkStyle>;
  c-name: "gtk_clist_set_cell_style";
end;

define C-function gtk-clist-get-cell-style
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <GtkStyle>;
  c-name: "gtk_clist_get_cell_style";
end;

define C-function gtk-clist-set-row-style
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <GtkStyle>;
  c-name: "gtk_clist_set_row_style";
end;

define C-function gtk-clist-get-row-style
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  result res :: <GtkStyle>;
  c-name: "gtk_clist_get_row_style";
end;

define C-function gtk-clist-set-shift
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  c-name: "gtk_clist_set_shift";
end;

define C-function gtk-clist-set-selectable
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_clist_set_selectable";
end;

define C-function gtk-clist-get-selectable
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "gtk_clist_get_selectable";
end;

define C-function gtk-clist-prepend
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gchar*<@>>;
  result res :: <gint>;
  c-name: "gtk_clist_prepend";
end;

define C-function gtk-clist-append
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gchar*<@>>;
  result res :: <gint>;
  c-name: "gtk_clist_append";
end;

define C-function gtk-clist-insert
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*<@>>;
  result res :: <gint>;
  c-name: "gtk_clist_insert";
end;

define C-function gtk-clist-remove
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_clist_remove";
end;

define C-function gtk-clist-set-row-data
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gpointer>;
  c-name: "gtk_clist_set_row_data";
end;

define C-function gtk-clist-set-row-data-full
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_clist_set_row_data_full";
end;

define C-function gtk-clist-get-row-data
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  result res :: <gpointer>;
  c-name: "gtk_clist_get_row_data";
end;

define C-function gtk-clist-find-row-from-data
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gpointer>;
  result res :: <gint>;
  c-name: "gtk_clist_find_row_from_data";
end;

define C-function gtk-clist-select-row
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clist_select_row";
end;

define C-function gtk-clist-unselect-row
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clist_unselect_row";
end;

define C-function gtk-clist-undo-selection
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_undo_selection";
end;

define C-function gtk-clist-clear
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_clear";
end;

define C-function gtk-clist-get-selection-info
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  result res :: <gint>;
  c-name: "gtk_clist_get_selection_info";
end;

define C-function gtk-clist-select-all
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_select_all";
end;

define C-function gtk-clist-unselect-all
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_unselect_all";
end;

define C-function gtk-clist-swap-rows
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clist_swap_rows";
end;

define C-function gtk-clist-row-move
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_clist_row_move";
end;

define C-function gtk-clist-set-compare-func
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <GtkCListCompareFunc>;
  c-name: "gtk_clist_set_compare_func";
end;

define C-function gtk-clist-set-sort-column
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_clist_set_sort_column";
end;

define C-function gtk-clist-set-sort-type
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <GtkSortType>;
  c-name: "gtk_clist_set_sort_type";
end;

define C-function gtk-clist-sort
  input parameter arg1 :: <GtkCList>;
  c-name: "gtk_clist_sort";
end;

define C-function gtk-clist-set-auto-sort
  input parameter arg1 :: <GtkCList>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_clist_set_auto_sort";
end;

define C-subtype <_GtkAlignment> (<_GtkBin>, <_AtkImplementorIface>) end;
define constant <GtkAlignment> = <_GtkAlignment>;

define C-subtype <_GtkAlignmentClass> (<C-void*>) end;
define constant <GtkAlignmentClass> = <_GtkAlignmentClass>;

define C-subtype <_GtkAlignmentPrivate> (<C-void*>) end;
define constant <GtkAlignmentPrivate> = <_GtkAlignmentPrivate>;

define C-function gtk-alignment-get-type
  result res :: <GType>;
  c-name: "gtk_alignment_get_type";
end;

define C-function gtk-alignment-new
  input parameter arg1 :: <gfloat>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  input parameter arg4 :: <gfloat>;
  result res :: <GtkWidget>;
  c-name: "gtk_alignment_new";
end;

define C-function gtk-alignment-set
  input parameter arg1 :: <GtkAlignment>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  input parameter arg4 :: <gfloat>;
  input parameter arg5 :: <gfloat>;
  c-name: "gtk_alignment_set";
end;

define C-function gtk-alignment-set-padding
  input parameter arg1 :: <GtkAlignment>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  input parameter arg4 :: <guint>;
  input parameter arg5 :: <guint>;
  c-name: "gtk_alignment_set_padding";
end;

define C-function gtk-alignment-get-padding
  input parameter arg1 :: <GtkAlignment>;
  input parameter arg2 :: <guint*>;
  input parameter arg3 :: <guint*>;
  input parameter arg4 :: <guint*>;
  input parameter arg5 :: <guint*>;
  c-name: "gtk_alignment_get_padding";
end;

define C-subtype <_GtkComboBoxPrivate> (<C-void*>) end;
define constant <GtkComboBoxPrivate> = <_GtkComboBoxPrivate>;

define C-subtype <_GtkComboBox> (<_GtkBin>, <_AtkImplementorIface>, <_GtkCellLayout>, <_GtkCellEditable>) end;
define constant <GtkComboBox> = <_GtkComboBox>;

define C-subtype <_GtkComboBoxEntryPrivate> (<C-void*>) end;
define constant <GtkComboBoxEntryPrivate> = <_GtkComboBoxEntryPrivate>;

define C-subtype <_GtkComboBoxEntry> (<_GtkComboBox>, <_AtkImplementorIface>, <_GtkCellLayout>, <_GtkCellEditable>) end;
define constant <GtkComboBoxEntry> = <_GtkComboBoxEntry>;

define constant <anonymous-6179> = <C-function-pointer>;
define constant <anonymous-6180> = <C-function-pointer>;
define constant <anonymous-6181> = <C-function-pointer>;
define constant <anonymous-6182> = <C-function-pointer>;
define constant <anonymous-6183> = <C-function-pointer>;
define C-subtype <_GtkComboBoxClass> (<C-void*>) end;
define constant <GtkComboBoxClass> = <_GtkComboBoxClass>;

define constant <anonymous-6217> = <C-function-pointer>;
define constant <anonymous-6218> = <C-function-pointer>;
define constant <anonymous-6219> = <C-function-pointer>;
define constant <anonymous-6220> = <C-function-pointer>;
define C-subtype <_GtkComboBoxEntryClass> (<C-void*>) end;
define constant <GtkComboBoxEntryClass> = <_GtkComboBoxEntryClass>;

define C-function gtk-combo-box-entry-get-type
  result res :: <GType>;
  c-name: "gtk_combo_box_entry_get_type";
end;

define C-function gtk-combo-box-entry-new
  result res :: <GtkWidget>;
  c-name: "gtk_combo_box_entry_new";
end;

define C-function gtk-combo-box-entry-new-with-model
  input parameter arg1 :: <GtkTreeModel>;
  input parameter arg2 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_combo_box_entry_new_with_model";
end;

define C-function gtk-combo-box-entry-set-text-column
  input parameter arg1 :: <GtkComboBoxEntry>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_combo_box_entry_set_text_column";
end;

define C-function gtk-combo-box-entry-get-text-column
  input parameter arg1 :: <GtkComboBoxEntry>;
  result res :: <gint>;
  c-name: "gtk_combo_box_entry_get_text_column";
end;

define C-function gtk-combo-box-entry-new-text
  result res :: <GtkWidget>;
  c-name: "gtk_combo_box_entry_new_text";
end;

define C-function gtk-combo-box-get-type
  result res :: <GType>;
  c-name: "gtk_combo_box_get_type";
end;

define C-function gtk-combo-box-new
  result res :: <GtkWidget>;
  c-name: "gtk_combo_box_new";
end;

define C-function gtk-combo-box-new-with-model
  input parameter arg1 :: <GtkTreeModel>;
  result res :: <GtkWidget>;
  c-name: "gtk_combo_box_new_with_model";
end;

define C-function gtk-combo-box-get-wrap-width
  input parameter arg1 :: <GtkComboBox>;
  result res :: <gint>;
  c-name: "gtk_combo_box_get_wrap_width";
end;

define C-function gtk-combo-box-set-wrap-width
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_combo_box_set_wrap_width";
end;

define C-function gtk-combo-box-get-row-span-column
  input parameter arg1 :: <GtkComboBox>;
  result res :: <gint>;
  c-name: "gtk_combo_box_get_row_span_column";
end;

define C-function gtk-combo-box-set-row-span-column
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_combo_box_set_row_span_column";
end;

define C-function gtk-combo-box-get-column-span-column
  input parameter arg1 :: <GtkComboBox>;
  result res :: <gint>;
  c-name: "gtk_combo_box_get_column_span_column";
end;

define C-function gtk-combo-box-set-column-span-column
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_combo_box_set_column_span_column";
end;

define C-function gtk-combo-box-get-add-tearoffs
  input parameter arg1 :: <GtkComboBox>;
  result res :: <gboolean>;
  c-name: "gtk_combo_box_get_add_tearoffs";
end;

define C-function gtk-combo-box-set-add-tearoffs
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_combo_box_set_add_tearoffs";
end;

define C-function gtk-combo-box-get-title
  input parameter arg1 :: <GtkComboBox>;
  result res :: <gchar*>;
  c-name: "gtk_combo_box_get_title";
end;

define C-function gtk-combo-box-set-title
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_combo_box_set_title";
end;

define C-function gtk-combo-box-get-focus-on-click
  input parameter arg1 :: <GtkComboBox>;
  result res :: <gboolean>;
  c-name: "gtk_combo_box_get_focus_on_click";
end;

define C-function gtk-combo-box-set-focus-on-click
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_combo_box_set_focus_on_click";
end;

define C-function gtk-combo-box-get-active
  input parameter arg1 :: <GtkComboBox>;
  result res :: <gint>;
  c-name: "gtk_combo_box_get_active";
end;

define C-function gtk-combo-box-set-active
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_combo_box_set_active";
end;

define C-function gtk-combo-box-get-active-iter
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <GtkTreeIter>;
  result res :: <gboolean>;
  c-name: "gtk_combo_box_get_active_iter";
end;

define C-function gtk-combo-box-set-active-iter
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <GtkTreeIter>;
  c-name: "gtk_combo_box_set_active_iter";
end;

define C-function gtk-combo-box-set-model
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <GtkTreeModel>;
  c-name: "gtk_combo_box_set_model";
end;

define C-function gtk-combo-box-get-model
  input parameter arg1 :: <GtkComboBox>;
  result res :: <GtkTreeModel>;
  c-name: "gtk_combo_box_get_model";
end;

define C-function gtk-combo-box-get-row-separator-func
  input parameter arg1 :: <GtkComboBox>;
  result res :: <GtkTreeViewRowSeparatorFunc>;
  c-name: "gtk_combo_box_get_row_separator_func";
end;

define C-function gtk-combo-box-set-row-separator-func
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <GtkTreeViewRowSeparatorFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GtkDestroyNotify>;
  c-name: "gtk_combo_box_set_row_separator_func";
end;

define C-function gtk-combo-box-new-text
  result res :: <GtkWidget>;
  c-name: "gtk_combo_box_new_text";
end;

define C-function gtk-combo-box-append-text
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_combo_box_append_text";
end;

define C-function gtk-combo-box-insert-text
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_combo_box_insert_text";
end;

define C-function gtk-combo-box-prepend-text
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_combo_box_prepend_text";
end;

define C-function gtk-combo-box-remove-text
  input parameter arg1 :: <GtkComboBox>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_combo_box_remove_text";
end;

define C-function gtk-combo-box-get-active-text
  input parameter arg1 :: <GtkComboBox>;
  result res :: <gchar*>;
  c-name: "gtk_combo_box_get_active_text";
end;

define C-function gtk-combo-box-popup
  input parameter arg1 :: <GtkComboBox>;
  c-name: "gtk_combo_box_popup";
end;

define C-function gtk-combo-box-popdown
  input parameter arg1 :: <GtkComboBox>;
  c-name: "gtk_combo_box_popdown";
end;

define C-function gtk-combo-box-get-popup-accessible
  input parameter arg1 :: <GtkComboBox>;
  result res :: <AtkObject>;
  c-name: "gtk_combo_box_get_popup_accessible";
end;

define C-subtype <_GtkCombo> (<_GtkHBox>, <_AtkImplementorIface>) end;
define constant <GtkCombo> = <_GtkCombo>;

define constant <anonymous-5820> = <C-function-pointer>;
define constant <anonymous-5821> = <C-function-pointer>;
define constant <anonymous-5822> = <C-function-pointer>;
define constant <anonymous-5823> = <C-function-pointer>;
define C-subtype <_GtkComboClass> (<C-void*>) end;
define constant <GtkComboClass> = <_GtkComboClass>;

define C-function gtk-combo-get-type
  result res :: <GType>;
  c-name: "gtk_combo_get_type";
end;

define C-function gtk-combo-new
  result res :: <GtkWidget>;
  c-name: "gtk_combo_new";
end;

define C-function gtk-combo-set-value-in-list
  input parameter arg1 :: <GtkCombo>;
  input parameter arg2 :: <gboolean>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_combo_set_value_in_list";
end;

define C-function gtk-combo-set-use-arrows
  input parameter arg1 :: <GtkCombo>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_combo_set_use_arrows";
end;

define C-function gtk-combo-set-use-arrows-always
  input parameter arg1 :: <GtkCombo>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_combo_set_use_arrows_always";
end;

define C-function gtk-combo-set-case-sensitive
  input parameter arg1 :: <GtkCombo>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_combo_set_case_sensitive";
end;

define C-function gtk-combo-set-item-string
  input parameter arg1 :: <GtkCombo>;
  input parameter arg2 :: <GtkItem>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_combo_set_item_string";
end;

define C-function gtk-combo-set-popdown-strings
  input parameter arg1 :: <GtkCombo>;
  input parameter arg2 :: <GList>;
  c-name: "gtk_combo_set_popdown_strings";
end;

define C-function gtk-combo-disable-activate
  input parameter arg1 :: <GtkCombo>;
  c-name: "gtk_combo_disable_activate";
end;

define C-subtype <_GtkColorSelectionDialog> (<_GtkDialog>, <_AtkImplementorIface>) end;
define constant <GtkColorSelectionDialog> = <_GtkColorSelectionDialog>;

define constant <anonymous-5807> = <C-function-pointer>;
define constant <anonymous-5808> = <C-function-pointer>;
define constant <anonymous-5809> = <C-function-pointer>;
define constant <anonymous-5810> = <C-function-pointer>;
define C-subtype <_GtkColorSelectionDialogClass> (<C-void*>) end;
define constant <GtkColorSelectionDialogClass> = <_GtkColorSelectionDialogClass>;

define C-function gtk-color-selection-dialog-get-type
  result res :: <GType>;
  c-name: "gtk_color_selection_dialog_get_type";
end;

define C-function gtk-color-selection-dialog-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_color_selection_dialog_new";
end;

define C-subtype <_GtkColorSelection> (<_GtkVBox>, <_AtkImplementorIface>) end;
define constant <GtkColorSelection> = <_GtkColorSelection>;

define constant <anonymous-5780> = <C-function-pointer>;
define constant <anonymous-5781> = <C-function-pointer>;
define constant <anonymous-5782> = <C-function-pointer>;
define constant <anonymous-5783> = <C-function-pointer>;
define constant <anonymous-5784> = <C-function-pointer>;
define C-subtype <_GtkColorSelectionClass> (<C-void*>) end;
define constant <GtkColorSelectionClass> = <_GtkColorSelectionClass>;

define constant <anonymous-5778> = <C-function-pointer>;
define constant <GtkColorSelectionChangePaletteFunc> = <anonymous-5778>;

define constant <anonymous-5779> = <C-function-pointer>;
define constant <GtkColorSelectionChangePaletteWithScreenFunc> = <anonymous-5779>;

define C-function gtk-color-selection-get-type
  result res :: <GType>;
  c-name: "gtk_color_selection_get_type";
end;

define C-function gtk-color-selection-new
  result res :: <GtkWidget>;
  c-name: "gtk_color_selection_new";
end;

define C-function gtk-color-selection-get-has-opacity-control
  input parameter arg1 :: <GtkColorSelection>;
  result res :: <gboolean>;
  c-name: "gtk_color_selection_get_has_opacity_control";
end;

define C-function gtk-color-selection-set-has-opacity-control
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_color_selection_set_has_opacity_control";
end;

define C-function gtk-color-selection-get-has-palette
  input parameter arg1 :: <GtkColorSelection>;
  result res :: <gboolean>;
  c-name: "gtk_color_selection_get_has_palette";
end;

define C-function gtk-color-selection-set-has-palette
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_color_selection_set_has_palette";
end;

define C-function gtk-color-selection-set-current-color
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gtk_color_selection_set_current_color";
end;

define C-function gtk-color-selection-set-current-alpha
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <guint16>;
  c-name: "gtk_color_selection_set_current_alpha";
end;

define C-function gtk-color-selection-get-current-color
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gtk_color_selection_get_current_color";
end;

define C-function gtk-color-selection-get-current-alpha
  input parameter arg1 :: <GtkColorSelection>;
  result res :: <guint16>;
  c-name: "gtk_color_selection_get_current_alpha";
end;

define C-function gtk-color-selection-set-previous-color
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gtk_color_selection_set_previous_color";
end;

define C-function gtk-color-selection-set-previous-alpha
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <guint16>;
  c-name: "gtk_color_selection_set_previous_alpha";
end;

define C-function gtk-color-selection-get-previous-color
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gtk_color_selection_get_previous_color";
end;

define C-function gtk-color-selection-get-previous-alpha
  input parameter arg1 :: <GtkColorSelection>;
  result res :: <guint16>;
  c-name: "gtk_color_selection_get_previous_alpha";
end;

define C-function gtk-color-selection-is-adjusting
  input parameter arg1 :: <GtkColorSelection>;
  result res :: <gboolean>;
  c-name: "gtk_color_selection_is_adjusting";
end;

define C-pointer-type <GdkColor*> => <GdkColor>;
define C-function gtk-color-selection-palette-from-string
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GdkColor*>;
  input parameter arg3 :: <gint*>;
  result res :: <gboolean>;
  c-name: "gtk_color_selection_palette_from_string";
end;

define C-function gtk-color-selection-palette-to-string
  input parameter arg1 :: <GdkColor>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "gtk_color_selection_palette_to_string";
end;

define C-function gtk-color-selection-set-change-palette-hook
  input parameter arg1 :: <GtkColorSelectionChangePaletteFunc>;
  result res :: <GtkColorSelectionChangePaletteFunc>;
  c-name: "gtk_color_selection_set_change_palette_hook";
end;

define C-function gtk-color-selection-set-change-palette-with-screen-hook
  input parameter arg1 :: <GtkColorSelectionChangePaletteWithScreenFunc>;
  result res :: <GtkColorSelectionChangePaletteWithScreenFunc>;
  c-name: "gtk_color_selection_set_change_palette_with_screen_hook";
end;

define C-function gtk-color-selection-set-color
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <gdouble*>;
  c-name: "gtk_color_selection_set_color";
end;

define C-function gtk-color-selection-get-color
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <gdouble*>;
  c-name: "gtk_color_selection_get_color";
end;

define C-function gtk-color-selection-set-update-policy
  input parameter arg1 :: <GtkColorSelection>;
  input parameter arg2 :: <GtkUpdateType>;
  c-name: "gtk_color_selection_set_update_policy";
end;

define C-subtype <_GtkColorButtonPrivate> (<C-void*>) end;
define constant <GtkColorButtonPrivate> = <_GtkColorButtonPrivate>;

define C-subtype <_GtkColorButton> (<_GtkButton>, <_AtkImplementorIface>) end;
define constant <GtkColorButton> = <_GtkColorButton>;

define constant <anonymous-5760> = <C-function-pointer>;
define constant <anonymous-5761> = <C-function-pointer>;
define constant <anonymous-5762> = <C-function-pointer>;
define constant <anonymous-5763> = <C-function-pointer>;
define constant <anonymous-5764> = <C-function-pointer>;
define C-subtype <_GtkColorButtonClass> (<C-void*>) end;
define constant <GtkColorButtonClass> = <_GtkColorButtonClass>;

define C-function gtk-color-button-get-type
  result res :: <GType>;
  c-name: "gtk_color_button_get_type";
end;

define C-function gtk-color-button-new
  result res :: <GtkWidget>;
  c-name: "gtk_color_button_new";
end;

define C-function gtk-color-button-new-with-color
  input parameter arg1 :: <GdkColor>;
  result res :: <GtkWidget>;
  c-name: "gtk_color_button_new_with_color";
end;

define C-function gtk-color-button-set-color
  input parameter arg1 :: <GtkColorButton>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gtk_color_button_set_color";
end;

define C-function gtk-color-button-set-alpha
  input parameter arg1 :: <GtkColorButton>;
  input parameter arg2 :: <guint16>;
  c-name: "gtk_color_button_set_alpha";
end;

define C-function gtk-color-button-get-color
  input parameter arg1 :: <GtkColorButton>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gtk_color_button_get_color";
end;

define C-function gtk-color-button-get-alpha
  input parameter arg1 :: <GtkColorButton>;
  result res :: <guint16>;
  c-name: "gtk_color_button_get_alpha";
end;

define C-function gtk-color-button-set-use-alpha
  input parameter arg1 :: <GtkColorButton>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_color_button_set_use_alpha";
end;

define C-function gtk-color-button-get-use-alpha
  input parameter arg1 :: <GtkColorButton>;
  result res :: <gboolean>;
  c-name: "gtk_color_button_get_use_alpha";
end;

define C-function gtk-color-button-set-title
  input parameter arg1 :: <GtkColorButton>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_color_button_set_title";
end;

define C-function gtk-color-button-get-title
  input parameter arg1 :: <GtkColorButton>;
  result res :: <gchar*>;
  c-name: "gtk_color_button_get_title";
end;

define C-subtype <_GtkCellViewPrivate> (<C-void*>) end;
define constant <GtkCellViewPrivate> = <_GtkCellViewPrivate>;

define C-subtype <_GtkCellView> (<_GtkWidget>, <_AtkImplementorIface>, <_GtkCellLayout>) end;
define constant <GtkCellView> = <_GtkCellView>;

define C-subtype <_GtkCellViewClass> (<C-void*>) end;
define constant <GtkCellViewClass> = <_GtkCellViewClass>;

define C-function gtk-cell-view-get-type
  result res :: <GType>;
  c-name: "gtk_cell_view_get_type";
end;

define C-function gtk-cell-view-new
  result res :: <GtkWidget>;
  c-name: "gtk_cell_view_new";
end;

define C-function gtk-cell-view-new-with-text
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_cell_view_new_with_text";
end;

define C-function gtk-cell-view-new-with-markup
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_cell_view_new_with_markup";
end;

define C-function gtk-cell-view-new-with-pixbuf
  input parameter arg1 :: <GdkPixbuf>;
  result res :: <GtkWidget>;
  c-name: "gtk_cell_view_new_with_pixbuf";
end;

define C-function gtk-cell-view-set-model
  input parameter arg1 :: <GtkCellView>;
  input parameter arg2 :: <GtkTreeModel>;
  c-name: "gtk_cell_view_set_model";
end;

define C-function gtk-cell-view-set-displayed-row
  input parameter arg1 :: <GtkCellView>;
  input parameter arg2 :: <GtkTreePath>;
  c-name: "gtk_cell_view_set_displayed_row";
end;

define C-function gtk-cell-view-get-displayed-row
  input parameter arg1 :: <GtkCellView>;
  result res :: <GtkTreePath>;
  c-name: "gtk_cell_view_get_displayed_row";
end;

define C-function gtk-cell-view-get-size-of-row
  input parameter arg1 :: <GtkCellView>;
  input parameter arg2 :: <GtkTreePath>;
  input parameter arg3 :: <GtkRequisition>;
  result res :: <gboolean>;
  c-name: "gtk_cell_view_get_size_of_row";
end;

define C-function gtk-cell-view-set-background-color
  input parameter arg1 :: <GtkCellView>;
  input parameter arg2 :: <GdkColor>;
  c-name: "gtk_cell_view_set_background_color";
end;

define C-function gtk-cell-view-get-cell-renderers
  input parameter arg1 :: <GtkCellView>;
  result res :: <GList>;
  c-name: "gtk_cell_view_get_cell_renderers";
end;

define C-subtype <_GtkCellRendererToggle> (<_GtkCellRenderer>) end;
define constant <GtkCellRendererToggle> = <_GtkCellRendererToggle>;

define constant <anonymous-5242> = <C-function-pointer>;
define constant <anonymous-5243> = <C-function-pointer>;
define constant <anonymous-5244> = <C-function-pointer>;
define constant <anonymous-5245> = <C-function-pointer>;
define constant <anonymous-5246> = <C-function-pointer>;
define C-subtype <_GtkCellRendererToggleClass> (<C-void*>) end;
define constant <GtkCellRendererToggleClass> = <_GtkCellRendererToggleClass>;

define C-function gtk-cell-renderer-toggle-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_toggle_get_type";
end;

define C-function gtk-cell-renderer-toggle-new
  result res :: <GtkCellRenderer>;
  c-name: "gtk_cell_renderer_toggle_new";
end;

define C-function gtk-cell-renderer-toggle-get-radio
  input parameter arg1 :: <GtkCellRendererToggle>;
  result res :: <gboolean>;
  c-name: "gtk_cell_renderer_toggle_get_radio";
end;

define C-function gtk-cell-renderer-toggle-set-radio
  input parameter arg1 :: <GtkCellRendererToggle>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_cell_renderer_toggle_set_radio";
end;

define C-function gtk-cell-renderer-toggle-get-active
  input parameter arg1 :: <GtkCellRendererToggle>;
  result res :: <gboolean>;
  c-name: "gtk_cell_renderer_toggle_get_active";
end;

define C-function gtk-cell-renderer-toggle-set-active
  input parameter arg1 :: <GtkCellRendererToggle>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_cell_renderer_toggle_set_active";
end;

define C-subtype <_GtkCellRendererText> (<_GtkCellRenderer>) end;
define constant <GtkCellRendererText> = <_GtkCellRendererText>;

define constant <anonymous-5205> = <C-function-pointer>;
define constant <anonymous-5206> = <C-function-pointer>;
define constant <anonymous-5207> = <C-function-pointer>;
define constant <anonymous-5208> = <C-function-pointer>;
define constant <anonymous-5209> = <C-function-pointer>;
define C-subtype <_GtkCellRendererTextClass> (<C-void*>) end;
define constant <GtkCellRendererTextClass> = <_GtkCellRendererTextClass>;

define C-function gtk-cell-renderer-text-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_text_get_type";
end;

define C-function gtk-cell-renderer-text-new
  result res :: <GtkCellRenderer>;
  c-name: "gtk_cell_renderer_text_new";
end;

define C-function gtk-cell-renderer-text-set-fixed-height-from-font
  input parameter arg1 :: <GtkCellRendererText>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_cell_renderer_text_set_fixed_height_from_font";
end;

define C-subtype <_GtkCellRendererSpin> (<C-void*>) end;
define constant <GtkCellRendererSpin> = <_GtkCellRendererSpin>;

define C-subtype <_GtkCellRendererSpinClass> (<C-void*>) end;
define constant <GtkCellRendererSpinClass> = <_GtkCellRendererSpinClass>;

define C-subtype <_GtkCellRendererSpinPrivate> (<C-void*>) end;
define constant <GtkCellRendererSpinPrivate> = <_GtkCellRendererSpinPrivate>;

define C-function gtk-cell-renderer-spin-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_spin_get_type";
end;

define C-function gtk-cell-renderer-spin-new
  result res :: <GtkCellRenderer>;
  c-name: "gtk_cell_renderer_spin_new";
end;

define C-subtype <_GtkCellRendererProgressPrivate> (<C-void*>) end;
define constant <GtkCellRendererProgressPrivate> = <_GtkCellRendererProgressPrivate>;

define C-subtype <_GtkCellRendererProgress> (<_GtkCellRenderer>) end;
define constant <GtkCellRendererProgress> = <_GtkCellRendererProgress>;

define constant <anonymous-5231> = <C-function-pointer>;
define constant <anonymous-5232> = <C-function-pointer>;
define constant <anonymous-5233> = <C-function-pointer>;
define constant <anonymous-5234> = <C-function-pointer>;
define C-subtype <_GtkCellRendererProgressClass> (<C-void*>) end;
define constant <GtkCellRendererProgressClass> = <_GtkCellRendererProgressClass>;

define C-function gtk-cell-renderer-progress-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_progress_get_type";
end;

define C-function gtk-cell-renderer-progress-new
  result res :: <GtkCellRenderer>;
  c-name: "gtk_cell_renderer_progress_new";
end;

define C-subtype <_GtkCellRendererPixbuf> (<_GtkCellRenderer>) end;
define constant <GtkCellRendererPixbuf> = <_GtkCellRendererPixbuf>;

define constant <anonymous-5225> = <C-function-pointer>;
define constant <anonymous-5226> = <C-function-pointer>;
define constant <anonymous-5227> = <C-function-pointer>;
define constant <anonymous-5228> = <C-function-pointer>;
define C-subtype <_GtkCellRendererPixbufClass> (<C-void*>) end;
define constant <GtkCellRendererPixbufClass> = <_GtkCellRendererPixbufClass>;

define C-function gtk-cell-renderer-pixbuf-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_pixbuf_get_type";
end;

define C-function gtk-cell-renderer-pixbuf-new
  result res :: <GtkCellRenderer>;
  c-name: "gtk_cell_renderer_pixbuf_new";
end;

define C-subtype <_GtkCellRendererCombo> (<_GtkCellRendererText>) end;
define constant <GtkCellRendererCombo> = <_GtkCellRendererCombo>;

define C-subtype <_GtkCellRendererComboClass> (<C-void*>) end;
define constant <GtkCellRendererComboClass> = <_GtkCellRendererComboClass>;

define C-function gtk-cell-renderer-combo-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_combo_get_type";
end;

define C-function gtk-cell-renderer-combo-new
  result res :: <GtkCellRenderer>;
  c-name: "gtk_cell_renderer_combo_new";
end;

define constant <GtkCellRendererAccelMode> = <C-int>;
define constant $GTK-CELL-RENDERER-ACCEL-MODE-GTK = 0;
define constant $GTK-CELL-RENDERER-ACCEL-MODE-OTHER = 1;

define C-subtype <_GtkCellRendererAccel> (<C-void*>) end;
define constant <GtkCellRendererAccel> = <_GtkCellRendererAccel>;

define constant <anonymous-5214> = <C-function-pointer>;
define constant <anonymous-5215> = <C-function-pointer>;
define constant <anonymous-5216> = <C-function-pointer>;
define constant <anonymous-5217> = <C-function-pointer>;
define constant <anonymous-5218> = <C-function-pointer>;
define constant <anonymous-5219> = <C-function-pointer>;
define constant <anonymous-5220> = <C-function-pointer>;
define C-subtype <_GtkCellRendererAccelClass> (<C-void*>) end;
define constant <GtkCellRendererAccelClass> = <_GtkCellRendererAccelClass>;

define C-function gtk-cell-renderer-accel-get-type
  result res :: <GType>;
  c-name: "gtk_cell_renderer_accel_get_type";
end;

define C-function gtk-cell-renderer-accel-new
  result res :: <GtkCellRenderer>;
  c-name: "gtk_cell_renderer_accel_new";
end;

define C-subtype <_GtkCellLayout> (<C-void*>) end;
define constant <GtkCellLayout> = <_GtkCellLayout>;

define constant <anonymous-5179> = <C-function-pointer>;
define constant <anonymous-5180> = <C-function-pointer>;
define constant <anonymous-5181> = <C-function-pointer>;
define constant <anonymous-5182> = <C-function-pointer>;
define constant <anonymous-5178> = <C-function-pointer>;
define constant <GtkCellLayoutDataFunc> = <anonymous-5178>;

define constant <anonymous-5183> = <C-function-pointer>;
define constant <anonymous-5184> = <C-function-pointer>;
define constant <anonymous-5185> = <C-function-pointer>;
define C-subtype <_GtkCellLayoutIface> (<C-void*>) end;
define constant <GtkCellLayoutIface> = <_GtkCellLayoutIface>;

define C-function gtk-cell-layout-get-type
  result res :: <GType>;
  c-name: "gtk_cell_layout_get_type";
end;

define C-function gtk-cell-layout-pack-start
  input parameter arg1 :: <GtkCellLayout>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_cell_layout_pack_start";
end;

define C-function gtk-cell-layout-pack-end
  input parameter arg1 :: <GtkCellLayout>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_cell_layout_pack_end";
end;

define C-function gtk-cell-layout-clear
  input parameter arg1 :: <GtkCellLayout>;
  c-name: "gtk_cell_layout_clear";
end;

define C-function gtk-cell-layout-set-attributes
  input parameter arg1 :: <GtkCellLayout>;
  input parameter arg2 :: <GtkCellRenderer>;
  c-name: "gtk_cell_layout_set_attributes";
end;

define C-function gtk-cell-layout-add-attribute
  input parameter arg1 :: <GtkCellLayout>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <gint>;
  c-name: "gtk_cell_layout_add_attribute";
end;

define C-function gtk-cell-layout-set-cell-data-func
  input parameter arg1 :: <GtkCellLayout>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <GtkCellLayoutDataFunc>;
  input parameter arg4 :: <gpointer>;
  input parameter arg5 :: <GDestroyNotify>;
  c-name: "gtk_cell_layout_set_cell_data_func";
end;

define C-function gtk-cell-layout-clear-attributes
  input parameter arg1 :: <GtkCellLayout>;
  input parameter arg2 :: <GtkCellRenderer>;
  c-name: "gtk_cell_layout_clear_attributes";
end;

define C-function gtk-cell-layout-reorder
  input parameter arg1 :: <GtkCellLayout>;
  input parameter arg2 :: <GtkCellRenderer>;
  input parameter arg3 :: <gint>;
  c-name: "gtk_cell_layout_reorder";
end;

define constant <gint<@7>> = <gint*>;
define constant <gint<@7><@6>> = <gint<@7>>;
define constant <gint<@31>> = <gint*>;
define constant <GtkCalendarDisplayOptions> = <C-int>;
define constant $GTK-CALENDAR-SHOW-HEADING = 1;
define constant $GTK-CALENDAR-SHOW-DAY-NAMES = 2;
define constant $GTK-CALENDAR-NO-MONTH-CHANGE = 4;
define constant $GTK-CALENDAR-SHOW-WEEK-NUMBERS = 8;
define constant $GTK-CALENDAR-WEEK-START-MONDAY = 16;

define constant <GdkColor<@31>> = <GdkColor>;
define C-subtype <_GtkCalendarPrivate> (<C-void*>) end;
define constant <GtkCalendarPrivate> = <_GtkCalendarPrivate>;

define constant <gchar<@32>> = <gchar*>;
define constant <anonymous-4959> = <C-function-pointer>;
define constant <anonymous-4960> = <C-function-pointer>;
define constant <anonymous-4961> = <C-function-pointer>;
define constant <anonymous-4962> = <C-function-pointer>;
define C-subtype <_GtkCalendar> (<_GtkWidget>, <_AtkImplementorIface>) end;
define constant <GtkCalendar> = <_GtkCalendar>;

define constant <anonymous-4963> = <C-function-pointer>;
define constant <anonymous-4964> = <C-function-pointer>;
define constant <anonymous-4965> = <C-function-pointer>;
define constant <anonymous-4966> = <C-function-pointer>;
define constant <anonymous-4967> = <C-function-pointer>;
define constant <anonymous-4968> = <C-function-pointer>;
define constant <anonymous-4969> = <C-function-pointer>;
define C-subtype <_GtkCalendarClass> (<C-void*>) end;
define constant <GtkCalendarClass> = <_GtkCalendarClass>;

define C-function gtk-calendar-get-type
  result res :: <GType>;
  c-name: "gtk_calendar_get_type";
end;

define C-function gtk-calendar-new
  result res :: <GtkWidget>;
  c-name: "gtk_calendar_new";
end;

define C-function gtk-calendar-select-month
  input parameter arg1 :: <GtkCalendar>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <guint>;
  result res :: <gboolean>;
  c-name: "gtk_calendar_select_month";
end;

define C-function gtk-calendar-select-day
  input parameter arg1 :: <GtkCalendar>;
  input parameter arg2 :: <guint>;
  c-name: "gtk_calendar_select_day";
end;

define C-function gtk-calendar-mark-day
  input parameter arg1 :: <GtkCalendar>;
  input parameter arg2 :: <guint>;
  result res :: <gboolean>;
  c-name: "gtk_calendar_mark_day";
end;

define C-function gtk-calendar-unmark-day
  input parameter arg1 :: <GtkCalendar>;
  input parameter arg2 :: <guint>;
  result res :: <gboolean>;
  c-name: "gtk_calendar_unmark_day";
end;

define C-function gtk-calendar-clear-marks
  input parameter arg1 :: <GtkCalendar>;
  c-name: "gtk_calendar_clear_marks";
end;

define C-function gtk-calendar-set-display-options
  input parameter arg1 :: <GtkCalendar>;
  input parameter arg2 :: <GtkCalendarDisplayOptions>;
  c-name: "gtk_calendar_set_display_options";
end;

define C-function gtk-calendar-get-display-options
  input parameter arg1 :: <GtkCalendar>;
  result res :: <GtkCalendarDisplayOptions>;
  c-name: "gtk_calendar_get_display_options";
end;

define C-function gtk-calendar-display-options
  input parameter arg1 :: <GtkCalendar>;
  input parameter arg2 :: <GtkCalendarDisplayOptions>;
  c-name: "gtk_calendar_display_options";
end;

define C-function gtk-calendar-get-date
  input parameter arg1 :: <GtkCalendar>;
  input parameter arg2 :: <guint*>;
  input parameter arg3 :: <guint*>;
  input parameter arg4 :: <guint*>;
  c-name: "gtk_calendar_get_date";
end;

define C-function gtk-calendar-freeze
  input parameter arg1 :: <GtkCalendar>;
  c-name: "gtk_calendar_freeze";
end;

define C-function gtk-calendar-thaw
  input parameter arg1 :: <GtkCalendar>;
  c-name: "gtk_calendar_thaw";
end;

define constant <GtkBindingSet> = <_GtkBindingSet>;

define C-subtype <anonymous-4822> (<C-void*>) end;
define C-subtype <_GtkBindingArg> (<C-void*>) end;
define constant <GtkBindingArg> = <_GtkBindingArg>;

define C-subtype <_GtkBindingSignal> (<C-void*>) end;
define constant <GtkBindingSignal> = <_GtkBindingSignal>;

define C-subtype <_GtkBindingEntry> (<C-void*>) end;
define constant <GtkBindingEntry> = <_GtkBindingEntry>;

define C-subtype <_GtkBindingSet> (<C-void*>) end;
define C-function gtk-binding-set-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkBindingSet>;
  c-name: "gtk_binding_set_new";
end;

define C-function gtk-binding-set-by-class
  input parameter arg1 :: <gpointer>;
  result res :: <GtkBindingSet>;
  c-name: "gtk_binding_set_by_class";
end;

define C-function gtk-binding-set-find
  input parameter arg1 :: <gchar*>;
  result res :: <GtkBindingSet>;
  c-name: "gtk_binding_set_find";
end;

define C-function gtk-bindings-activate
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  result res :: <gboolean>;
  c-name: "gtk_bindings_activate";
end;

define C-function gtk-bindings-activate-event
  input parameter arg1 :: <GtkObject>;
  input parameter arg2 :: <GdkEventKey>;
  result res :: <gboolean>;
  c-name: "gtk_bindings_activate_event";
end;

define C-function gtk-binding-set-activate
  input parameter arg1 :: <GtkBindingSet>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  input parameter arg4 :: <GtkObject>;
  result res :: <gboolean>;
  c-name: "gtk_binding_set_activate";
end;

define C-function gtk-binding-entry-clear
  input parameter arg1 :: <GtkBindingSet>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  c-name: "gtk_binding_entry_clear";
end;

define C-function gtk-binding-entry-add-signal
  input parameter arg1 :: <GtkBindingSet>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <guint>;
  c-name: "gtk_binding_entry_add_signal";
end;

define C-function gtk-binding-set-add-path
  input parameter arg1 :: <GtkBindingSet>;
  input parameter arg2 :: <GtkPathType>;
  input parameter arg3 :: <gchar*>;
  input parameter arg4 :: <GtkPathPriorityType>;
  c-name: "gtk_binding_set_add_path";
end;

define C-function gtk-binding-entry-remove
  input parameter arg1 :: <GtkBindingSet>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  c-name: "gtk_binding_entry_remove";
end;

define C-function gtk-binding-entry-add-signall
  input parameter arg1 :: <GtkBindingSet>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  input parameter arg4 :: <gchar*>;
  input parameter arg5 :: <GSList>;
  c-name: "gtk_binding_entry_add_signall";
end;

define C-function gtk-binding-parse-binding
  input parameter arg1 :: <GScanner>;
  result res :: <guint>;
  c-name: "gtk_binding_parse_binding";
end;

define constant gtk-binding-entry-add = gtk-binding-entry-clear;

define constant <GtkAssistantPageType> = <C-int>;
define constant $GTK-ASSISTANT-PAGE-CONTENT = 0;
define constant $GTK-ASSISTANT-PAGE-INTRO = 1;
define constant $GTK-ASSISTANT-PAGE-CONFIRM = 2;
define constant $GTK-ASSISTANT-PAGE-SUMMARY = 3;
define constant $GTK-ASSISTANT-PAGE-PROGRESS = 4;

define C-subtype <_GtkAssistantPrivate> (<C-void*>) end;
define constant <GtkAssistantPrivate> = <_GtkAssistantPrivate>;

define C-subtype <_GtkAssistant> (<C-void*>) end;
define constant <GtkAssistant> = <_GtkAssistant>;

define constant <anonymous-4759> = <C-function-pointer>;
define constant <anonymous-4760> = <C-function-pointer>;
define constant <anonymous-4761> = <C-function-pointer>;
define constant <anonymous-4762> = <C-function-pointer>;
define constant <anonymous-4763> = <C-function-pointer>;
define constant <anonymous-4764> = <C-function-pointer>;
define constant <anonymous-4765> = <C-function-pointer>;
define constant <anonymous-4766> = <C-function-pointer>;
define constant <anonymous-4767> = <C-function-pointer>;
define C-subtype <_GtkAssistantClass> (<C-void*>) end;
define constant <GtkAssistantClass> = <_GtkAssistantClass>;

define constant <anonymous-4768> = <C-function-pointer>;
define constant <GtkAssistantPageFunc> = <anonymous-4768>;

define C-function gtk-assistant-get-type
  result res :: <GType>;
  c-name: "gtk_assistant_get_type";
end;

define C-function gtk-assistant-new
  result res :: <GtkWidget>;
  c-name: "gtk_assistant_new";
end;

define C-function gtk-assistant-get-current-page
  input parameter arg1 :: <GtkAssistant>;
  result res :: <gint>;
  c-name: "gtk_assistant_get_current_page";
end;

define C-function gtk-assistant-set-current-page
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <gint>;
  c-name: "gtk_assistant_set_current_page";
end;

define C-function gtk-assistant-get-n-pages
  input parameter arg1 :: <GtkAssistant>;
  result res :: <gint>;
  c-name: "gtk_assistant_get_n_pages";
end;

define C-function gtk-assistant-get-nth-page
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <gint>;
  result res :: <GtkWidget>;
  c-name: "gtk_assistant_get_nth_page";
end;

define C-function gtk-assistant-prepend-page
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_assistant_prepend_page";
end;

define C-function gtk-assistant-append-page
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gint>;
  c-name: "gtk_assistant_append_page";
end;

define C-function gtk-assistant-insert-page
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "gtk_assistant_insert_page";
end;

define C-function gtk-assistant-set-forward-page-func
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkAssistantPageFunc>;
  input parameter arg3 :: <gpointer>;
  input parameter arg4 :: <GDestroyNotify>;
  c-name: "gtk_assistant_set_forward_page_func";
end;

define C-function gtk-assistant-set-page-type
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GtkAssistantPageType>;
  c-name: "gtk_assistant_set_page_type";
end;

define C-function gtk-assistant-get-page-type
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <GtkAssistantPageType>;
  c-name: "gtk_assistant_get_page_type";
end;

define C-function gtk-assistant-set-page-title
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gchar*>;
  c-name: "gtk_assistant_set_page_title";
end;

define C-function gtk-assistant-get-page-title
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gchar*>;
  c-name: "gtk_assistant_get_page_title";
end;

define C-function gtk-assistant-set-page-header-image
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GdkPixbuf>;
  c-name: "gtk_assistant_set_page_header_image";
end;

define C-function gtk-assistant-get-page-header-image
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_assistant_get_page_header_image";
end;

define C-function gtk-assistant-set-page-side-image
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <GdkPixbuf>;
  c-name: "gtk_assistant_set_page_side_image";
end;

define C-function gtk-assistant-get-page-side-image
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_assistant_get_page_side_image";
end;

define C-function gtk-assistant-set-page-complete
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  input parameter arg3 :: <gboolean>;
  c-name: "gtk_assistant_set_page_complete";
end;

define C-function gtk-assistant-get-page-complete
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  result res :: <gboolean>;
  c-name: "gtk_assistant_get_page_complete";
end;

define C-function gtk-assistant-add-action-widget
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_assistant_add_action_widget";
end;

define C-function gtk-assistant-remove-action-widget
  input parameter arg1 :: <GtkAssistant>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_assistant_remove_action_widget";
end;

define C-function gtk-assistant-update-buttons-state
  input parameter arg1 :: <GtkAssistant>;
  c-name: "gtk_assistant_update_buttons_state";
end;

define C-subtype <_GtkAspectFrame> (<_GtkFrame>, <_AtkImplementorIface>) end;
define constant <GtkAspectFrame> = <_GtkAspectFrame>;

define C-subtype <_GtkAspectFrameClass> (<C-void*>) end;
define constant <GtkAspectFrameClass> = <_GtkAspectFrameClass>;

define C-function gtk-aspect-frame-get-type
  result res :: <GType>;
  c-name: "gtk_aspect_frame_get_type";
end;

define C-function gtk-aspect-frame-new
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  input parameter arg4 :: <gfloat>;
  input parameter arg5 :: <gboolean>;
  result res :: <GtkWidget>;
  c-name: "gtk_aspect_frame_new";
end;

define C-function gtk-aspect-frame-set
  input parameter arg1 :: <GtkAspectFrame>;
  input parameter arg2 :: <gfloat>;
  input parameter arg3 :: <gfloat>;
  input parameter arg4 :: <gfloat>;
  input parameter arg5 :: <gboolean>;
  c-name: "gtk_aspect_frame_set";
end;

define C-subtype <_GtkArrow> (<_GtkMisc>, <_AtkImplementorIface>) end;
define constant <GtkArrow> = <_GtkArrow>;

define C-subtype <_GtkArrowClass> (<C-void*>) end;
define constant <GtkArrowClass> = <_GtkArrowClass>;

define C-function gtk-arrow-get-type
  result res :: <GType>;
  c-name: "gtk_arrow_get_type";
end;

define C-function gtk-arrow-new
  input parameter arg1 :: <GtkArrowType>;
  input parameter arg2 :: <GtkShadowType>;
  result res :: <GtkWidget>;
  c-name: "gtk_arrow_new";
end;

define C-function gtk-arrow-set
  input parameter arg1 :: <GtkArrow>;
  input parameter arg2 :: <GtkArrowType>;
  input parameter arg3 :: <GtkShadowType>;
  c-name: "gtk_arrow_set";
end;

define C-subtype <_GtkAccessible> (<_AtkObject>) end;
define constant <GtkAccessible> = <_GtkAccessible>;

define constant <anonymous-4626> = <C-function-pointer>;
define constant <anonymous-4627> = <C-function-pointer>;
define constant <anonymous-4628> = <C-function-pointer>;
define constant <anonymous-4629> = <C-function-pointer>;
define constant <anonymous-4630> = <C-function-pointer>;
define C-subtype <_GtkAccessibleClass> (<C-void*>) end;
define constant <GtkAccessibleClass> = <_GtkAccessibleClass>;

define C-function gtk-accessible-get-type
  result res :: <GType>;
  c-name: "gtk_accessible_get_type";
end;

define C-function gtk-accessible-connect-widget-destroyed
  input parameter arg1 :: <GtkAccessible>;
  c-name: "gtk_accessible_connect_widget_destroyed";
end;

define C-subtype <_AtkValue> (<C-void*>) end;
define constant <AtkValue> = <_AtkValue>;

define constant <anonymous-4615> = <C-function-pointer>;
define constant <anonymous-4616> = <C-function-pointer>;
define constant <anonymous-4617> = <C-function-pointer>;
define constant <anonymous-4618> = <C-function-pointer>;
define constant <anonymous-4619> = <C-function-pointer>;
define C-subtype <_AtkValueIface> (<C-void*>) end;
define constant <AtkValueIface> = <_AtkValueIface>;

define C-function atk-value-get-type
  result res :: <GType>;
  c-name: "atk_value_get_type";
end;

define C-function atk-value-get-current-value
  input parameter arg1 :: <AtkValue>;
  input parameter arg2 :: <GValue>;
  c-name: "atk_value_get_current_value";
end;

define C-function atk-value-get-maximum-value
  input parameter arg1 :: <AtkValue>;
  input parameter arg2 :: <GValue>;
  c-name: "atk_value_get_maximum_value";
end;

define C-function atk-value-get-minimum-value
  input parameter arg1 :: <AtkValue>;
  input parameter arg2 :: <GValue>;
  c-name: "atk_value_get_minimum_value";
end;

define C-function atk-value-set-current-value
  input parameter arg1 :: <AtkValue>;
  input parameter arg2 :: <GValue>;
  result res :: <gboolean>;
  c-name: "atk_value_set_current_value";
end;

define C-subtype <_AtkUtil> (<_GObject>) end;
define constant <AtkUtil> = <_AtkUtil>;

define constant <anonymous-4302> = <C-function-pointer>;
define constant <anonymous-4303> = <C-function-pointer>;
define C-subtype <_AtkKeyEventStruct> (<C-void*>) end;
define constant <AtkKeyEventStruct> = <_AtkKeyEventStruct>;

define constant <anonymous-4300> = <C-function-pointer>;
define constant <AtkKeySnoopFunc> = <anonymous-4300>;

define constant <anonymous-4304> = <C-function-pointer>;
define constant <anonymous-4305> = <C-function-pointer>;
define constant <anonymous-4306> = <C-function-pointer>;
define constant <anonymous-4307> = <C-function-pointer>;
define constant <anonymous-4308> = <C-function-pointer>;
define C-subtype <_AtkUtilClass> (<C-void*>) end;
define constant <AtkUtilClass> = <_AtkUtilClass>;

define constant <anonymous-4298> = <C-function-pointer>;
define constant <AtkEventListener> = <anonymous-4298>;

define constant <anonymous-4299> = <C-function-pointer>;
define constant <AtkEventListenerInit> = <anonymous-4299>;

define constant <AtkKeyEventType> = <C-int>;
define constant $ATK-KEY-EVENT-PRESS = 0;
define constant $ATK-KEY-EVENT-RELEASE = 1;
define constant $ATK-KEY-EVENT-LAST-DEFINED = 2;

define C-function atk-util-get-type
  result res :: <GType>;
  c-name: "atk_util_get_type";
end;

define constant <AtkCoordType> = <C-int>;
define constant $ATK-XY-SCREEN = 0;
define constant $ATK-XY-WINDOW = 1;

define C-function atk-add-focus-tracker
  input parameter arg1 :: <AtkEventListener>;
  result res :: <guint>;
  c-name: "atk_add_focus_tracker";
end;

define C-function atk-remove-focus-tracker
  input parameter arg1 :: <guint>;
  c-name: "atk_remove_focus_tracker";
end;

define C-function atk-focus-tracker-init
  input parameter arg1 :: <AtkEventListenerInit>;
  c-name: "atk_focus_tracker_init";
end;

define C-function atk-focus-tracker-notify
  input parameter arg1 :: <AtkObject>;
  c-name: "atk_focus_tracker_notify";
end;

define C-function atk-add-global-event-listener
  input parameter arg1 :: <GSignalEmissionHook>;
  input parameter arg2 :: <gchar*>;
  result res :: <guint>;
  c-name: "atk_add_global_event_listener";
end;

define C-function atk-remove-global-event-listener
  input parameter arg1 :: <guint>;
  c-name: "atk_remove_global_event_listener";
end;

define C-function atk-add-key-event-listener
  input parameter arg1 :: <AtkKeySnoopFunc>;
  input parameter arg2 :: <gpointer>;
  result res :: <guint>;
  c-name: "atk_add_key_event_listener";
end;

define C-function atk-remove-key-event-listener
  input parameter arg1 :: <guint>;
  c-name: "atk_remove_key_event_listener";
end;

define C-function atk-get-root
  result res :: <AtkObject>;
  c-name: "atk_get_root";
end;

define C-function atk-get-focus-object
  result res :: <AtkObject>;
  c-name: "atk_get_focus_object";
end;

define C-function atk-get-toolkit-name
  result res :: <gchar*>;
  c-name: "atk_get_toolkit_name";
end;

define C-function atk-get-toolkit-version
  result res :: <gchar*>;
  c-name: "atk_get_toolkit_version";
end;

define constant <AtkTextAttribute> = <C-int>;
define constant $ATK-TEXT-ATTR-INVALID = 0;
define constant $ATK-TEXT-ATTR-LEFT-MARGIN = 1;
define constant $ATK-TEXT-ATTR-RIGHT-MARGIN = 2;
define constant $ATK-TEXT-ATTR-INDENT = 3;
define constant $ATK-TEXT-ATTR-INVISIBLE = 4;
define constant $ATK-TEXT-ATTR-EDITABLE = 5;
define constant $ATK-TEXT-ATTR-PIXELS-ABOVE-LINES = 6;
define constant $ATK-TEXT-ATTR-PIXELS-BELOW-LINES = 7;
define constant $ATK-TEXT-ATTR-PIXELS-INSIDE-WRAP = 8;
define constant $ATK-TEXT-ATTR-BG-FULL-HEIGHT = 9;
define constant $ATK-TEXT-ATTR-RISE = 10;
define constant $ATK-TEXT-ATTR-UNDERLINE = 11;
define constant $ATK-TEXT-ATTR-STRIKETHROUGH = 12;
define constant $ATK-TEXT-ATTR-SIZE = 13;
define constant $ATK-TEXT-ATTR-SCALE = 14;
define constant $ATK-TEXT-ATTR-WEIGHT = 15;
define constant $ATK-TEXT-ATTR-LANGUAGE = 16;
define constant $ATK-TEXT-ATTR-FAMILY-NAME = 17;
define constant $ATK-TEXT-ATTR-BG-COLOR = 18;
define constant $ATK-TEXT-ATTR-FG-COLOR = 19;
define constant $ATK-TEXT-ATTR-BG-STIPPLE = 20;
define constant $ATK-TEXT-ATTR-FG-STIPPLE = 21;
define constant $ATK-TEXT-ATTR-WRAP-MODE = 22;
define constant $ATK-TEXT-ATTR-DIRECTION = 23;
define constant $ATK-TEXT-ATTR-JUSTIFICATION = 24;
define constant $ATK-TEXT-ATTR-STRETCH = 25;
define constant $ATK-TEXT-ATTR-VARIANT = 26;
define constant $ATK-TEXT-ATTR-STYLE = 27;
define constant $ATK-TEXT-ATTR-LAST-DEFINED = 28;

define C-function atk-text-attribute-register
  input parameter arg1 :: <gchar*>;
  result res :: <AtkTextAttribute>;
  c-name: "atk_text_attribute_register";
end;

define C-subtype <_AtkText> (<C-void*>) end;
define constant <AtkText> = <_AtkText>;

define constant <anonymous-4372> = <C-function-pointer>;
define constant <AtkTextBoundary> = <C-int>;
define constant $ATK-TEXT-BOUNDARY-CHAR = 0;
define constant $ATK-TEXT-BOUNDARY-WORD-START = 1;
define constant $ATK-TEXT-BOUNDARY-WORD-END = 2;
define constant $ATK-TEXT-BOUNDARY-SENTENCE-START = 3;
define constant $ATK-TEXT-BOUNDARY-SENTENCE-END = 4;
define constant $ATK-TEXT-BOUNDARY-LINE-START = 5;
define constant $ATK-TEXT-BOUNDARY-LINE-END = 6;

define constant <anonymous-4373> = <C-function-pointer>;
define constant <anonymous-4374> = <C-function-pointer>;
define constant <anonymous-4375> = <C-function-pointer>;
define constant <anonymous-4376> = <C-function-pointer>;
define constant <anonymous-4377> = <C-function-pointer>;
define constant <anonymous-4378> = <C-function-pointer>;
define constant <anonymous-4379> = <C-function-pointer>;
define constant <anonymous-4380> = <C-function-pointer>;
define constant <anonymous-4381> = <C-function-pointer>;
define constant <anonymous-4382> = <C-function-pointer>;
define constant <anonymous-4383> = <C-function-pointer>;
define constant <anonymous-4384> = <C-function-pointer>;
define constant <anonymous-4385> = <C-function-pointer>;
define constant <anonymous-4386> = <C-function-pointer>;
define constant <anonymous-4387> = <C-function-pointer>;
define constant <anonymous-4388> = <C-function-pointer>;
define constant <anonymous-4389> = <C-function-pointer>;
define constant <anonymous-4390> = <C-function-pointer>;
define constant <anonymous-4391> = <C-function-pointer>;
define constant <anonymous-4392> = <C-function-pointer>;
define C-subtype <_AtkTextRectangle> (<C-void*>) end;
define constant <AtkTextRectangle> = <_AtkTextRectangle>;

define constant <anonymous-4393> = <C-function-pointer>;
define C-subtype <_AtkTextRange> (<C-void*>) end;
define constant <AtkTextRange> = <_AtkTextRange>;

define C-pointer-type <AtkTextRange*> => <AtkTextRange>;
define constant <AtkTextClipType> = <C-int>;
define constant $ATK-TEXT-CLIP-NONE = 0;
define constant $ATK-TEXT-CLIP-MIN = 1;
define constant $ATK-TEXT-CLIP-MAX = 2;
define constant $ATK-TEXT-CLIP-BOTH = 3;

define constant <anonymous-4394> = <C-function-pointer>;
define C-subtype <_AtkTextIface> (<C-void*>) end;
define constant <AtkTextIface> = <_AtkTextIface>;

define C-function atk-text-get-type
  result res :: <GType>;
  c-name: "atk_text_get_type";
end;

define C-function atk-text-get-text
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_text_get_text";
end;

define C-function atk-text-get-character-at-offset
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  result res :: <gunichar>;
  c-name: "atk_text_get_character_at_offset";
end;

define C-function atk-text-get-text-after-offset
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <AtkTextBoundary>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  result res :: <gchar*>;
  c-name: "atk_text_get_text_after_offset";
end;

define C-function atk-text-get-text-at-offset
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <AtkTextBoundary>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  result res :: <gchar*>;
  c-name: "atk_text_get_text_at_offset";
end;

define C-function atk-text-get-text-before-offset
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <AtkTextBoundary>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  result res :: <gchar*>;
  c-name: "atk_text_get_text_before_offset";
end;

define C-function atk-text-get-caret-offset
  input parameter arg1 :: <AtkText>;
  result res :: <gint>;
  c-name: "atk_text_get_caret_offset";
end;

define C-function atk-text-get-character-extents
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <gint*>;
  input parameter arg7 :: <AtkCoordType>;
  c-name: "atk_text_get_character_extents";
end;

define C-function atk-text-get-run-attributes
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  result res :: <AtkAttributeSet>;
  c-name: "atk_text_get_run_attributes";
end;

define C-function atk-text-get-default-attributes
  input parameter arg1 :: <AtkText>;
  result res :: <AtkAttributeSet>;
  c-name: "atk_text_get_default_attributes";
end;

define C-function atk-text-get-character-count
  input parameter arg1 :: <AtkText>;
  result res :: <gint>;
  c-name: "atk_text_get_character_count";
end;

define C-function atk-text-get-offset-at-point
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <AtkCoordType>;
  result res :: <gint>;
  c-name: "atk_text_get_offset_at_point";
end;

define C-function atk-text-get-n-selections
  input parameter arg1 :: <AtkText>;
  result res :: <gint>;
  c-name: "atk_text_get_n_selections";
end;

define C-function atk-text-get-selection
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  result res :: <gchar*>;
  c-name: "atk_text_get_selection";
end;

define C-function atk-text-add-selection
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_text_add_selection";
end;

define C-function atk-text-remove-selection
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_text_remove_selection";
end;

define C-function atk-text-set-selection
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_text_set_selection";
end;

define C-function atk-text-set-caret-offset
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_text_set_caret_offset";
end;

define C-function atk-text-get-range-extents
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <AtkCoordType>;
  input parameter arg5 :: <AtkTextRectangle>;
  c-name: "atk_text_get_range_extents";
end;

define C-function atk-text-get-bounded-ranges
  input parameter arg1 :: <AtkText>;
  input parameter arg2 :: <AtkTextRectangle>;
  input parameter arg3 :: <AtkCoordType>;
  input parameter arg4 :: <AtkTextClipType>;
  input parameter arg5 :: <AtkTextClipType>;
  result res :: <AtkTextRange*>;
  c-name: "atk_text_get_bounded_ranges";
end;

define C-function atk-text-free-ranges
  input parameter arg1 :: <AtkTextRange*>;
  c-name: "atk_text_free_ranges";
end;

define C-function atk-attribute-set-free
  input parameter arg1 :: <AtkAttributeSet>;
  c-name: "atk_attribute_set_free";
end;

define C-function atk-text-attribute-get-name
  input parameter arg1 :: <AtkTextAttribute>;
  result res :: <gchar*>;
  c-name: "atk_text_attribute_get_name";
end;

define C-function atk-text-attribute-for-name
  input parameter arg1 :: <gchar*>;
  result res :: <AtkTextAttribute>;
  c-name: "atk_text_attribute_for_name";
end;

define C-function atk-text-attribute-get-value
  input parameter arg1 :: <AtkTextAttribute>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_text_attribute_get_value";
end;

define C-subtype <_AtkTable> (<C-void*>) end;
define constant <AtkTable> = <_AtkTable>;

define constant <anonymous-4549> = <C-function-pointer>;
define constant <anonymous-4550> = <C-function-pointer>;
define constant <anonymous-4551> = <C-function-pointer>;
define constant <anonymous-4552> = <C-function-pointer>;
define constant <anonymous-4553> = <C-function-pointer>;
define constant <anonymous-4554> = <C-function-pointer>;
define constant <anonymous-4555> = <C-function-pointer>;
define constant <anonymous-4556> = <C-function-pointer>;
define constant <anonymous-4557> = <C-function-pointer>;
define constant <anonymous-4558> = <C-function-pointer>;
define constant <anonymous-4559> = <C-function-pointer>;
define constant <anonymous-4560> = <C-function-pointer>;
define constant <anonymous-4561> = <C-function-pointer>;
define constant <anonymous-4562> = <C-function-pointer>;
define constant <anonymous-4563> = <C-function-pointer>;
define constant <anonymous-4564> = <C-function-pointer>;
define constant <anonymous-4565> = <C-function-pointer>;
define constant <anonymous-4566> = <C-function-pointer>;
define constant <anonymous-4567> = <C-function-pointer>;
define constant <anonymous-4568> = <C-function-pointer>;
define constant <anonymous-4569> = <C-function-pointer>;
define constant <anonymous-4570> = <C-function-pointer>;
define constant <anonymous-4571> = <C-function-pointer>;
define constant <anonymous-4572> = <C-function-pointer>;
define constant <anonymous-4573> = <C-function-pointer>;
define constant <anonymous-4574> = <C-function-pointer>;
define constant <anonymous-4575> = <C-function-pointer>;
define constant <anonymous-4576> = <C-function-pointer>;
define constant <anonymous-4577> = <C-function-pointer>;
define constant <anonymous-4578> = <C-function-pointer>;
define constant <anonymous-4579> = <C-function-pointer>;
define constant <anonymous-4580> = <C-function-pointer>;
define constant <anonymous-4581> = <C-function-pointer>;
define constant <anonymous-4582> = <C-function-pointer>;
define constant <anonymous-4583> = <C-function-pointer>;
define constant <anonymous-4584> = <C-function-pointer>;
define C-subtype <_AtkTableIface> (<C-void*>) end;
define constant <AtkTableIface> = <_AtkTableIface>;

define C-function atk-table-get-type
  result res :: <GType>;
  c-name: "atk_table_get_type";
end;

define C-function atk-table-ref-at
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <AtkObject>;
  c-name: "atk_table_ref_at";
end;

define C-function atk-table-get-index-at
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "atk_table_get_index_at";
end;

define C-function atk-table-get-column-at-index
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "atk_table_get_column_at_index";
end;

define C-function atk-table-get-row-at-index
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "atk_table_get_row_at_index";
end;

define C-function atk-table-get-n-columns
  input parameter arg1 :: <AtkTable>;
  result res :: <gint>;
  c-name: "atk_table_get_n_columns";
end;

define C-function atk-table-get-n-rows
  input parameter arg1 :: <AtkTable>;
  result res :: <gint>;
  c-name: "atk_table_get_n_rows";
end;

define C-function atk-table-get-column-extent-at
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "atk_table_get_column_extent_at";
end;

define C-function atk-table-get-row-extent-at
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gint>;
  c-name: "atk_table_get_row_extent_at";
end;

define C-function atk-table-get-caption
  input parameter arg1 :: <AtkTable>;
  result res :: <AtkObject>;
  c-name: "atk_table_get_caption";
end;

define C-function atk-table-get-column-description
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_table_get_column_description";
end;

define C-function atk-table-get-column-header
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <AtkObject>;
  c-name: "atk_table_get_column_header";
end;

define C-function atk-table-get-row-description
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_table_get_row_description";
end;

define C-function atk-table-get-row-header
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <AtkObject>;
  c-name: "atk_table_get_row_header";
end;

define C-function atk-table-get-summary
  input parameter arg1 :: <AtkTable>;
  result res :: <AtkObject>;
  c-name: "atk_table_get_summary";
end;

define C-function atk-table-set-caption
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <AtkObject>;
  c-name: "atk_table_set_caption";
end;

define C-function atk-table-set-column-description
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  c-name: "atk_table_set_column_description";
end;

define C-function atk-table-set-column-header
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <AtkObject>;
  c-name: "atk_table_set_column_header";
end;

define C-function atk-table-set-row-description
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  c-name: "atk_table_set_row_description";
end;

define C-function atk-table-set-row-header
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <AtkObject>;
  c-name: "atk_table_set_row_header";
end;

define C-function atk-table-set-summary
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <AtkObject>;
  c-name: "atk_table_set_summary";
end;

define C-function atk-table-get-selected-columns
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint**>;
  result res :: <gint>;
  c-name: "atk_table_get_selected_columns";
end;

define C-function atk-table-get-selected-rows
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint**>;
  result res :: <gint>;
  c-name: "atk_table_get_selected_rows";
end;

define C-function atk-table-is-column-selected
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_table_is_column_selected";
end;

define C-function atk-table-is-row-selected
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_table_is_row_selected";
end;

define C-function atk-table-is-selected
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_table_is_selected";
end;

define C-function atk-table-add-row-selection
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_table_add_row_selection";
end;

define C-function atk-table-remove-row-selection
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_table_remove_row_selection";
end;

define C-function atk-table-add-column-selection
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_table_add_column_selection";
end;

define C-function atk-table-remove-column-selection
  input parameter arg1 :: <AtkTable>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_table_remove_column_selection";
end;

define C-subtype <_AtkStreamableContent> (<C-void*>) end;
define constant <AtkStreamableContent> = <_AtkStreamableContent>;

define constant <anonymous-4540> = <C-function-pointer>;
define constant <anonymous-4541> = <C-function-pointer>;
define constant <anonymous-4542> = <C-function-pointer>;
define constant <anonymous-4543> = <C-function-pointer>;
define C-subtype <_AtkStreamableContentIface> (<C-void*>) end;
define constant <AtkStreamableContentIface> = <_AtkStreamableContentIface>;

define C-function atk-streamable-content-get-type
  result res :: <GType>;
  c-name: "atk_streamable_content_get_type";
end;

define C-function atk-streamable-content-get-n-mime-types
  input parameter arg1 :: <AtkStreamableContent>;
  result res :: <gint>;
  c-name: "atk_streamable_content_get_n_mime_types";
end;

define C-function atk-streamable-content-get-mime-type
  input parameter arg1 :: <AtkStreamableContent>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_streamable_content_get_mime_type";
end;

define C-function atk-streamable-content-get-stream
  input parameter arg1 :: <AtkStreamableContent>;
  input parameter arg2 :: <gchar*>;
  result res :: <GIOChannel>;
  c-name: "atk_streamable_content_get_stream";
end;

define C-subtype <_AtkStateSetClass> (<C-void*>) end;
define constant <AtkStateSetClass> = <_AtkStateSetClass>;

define C-function atk-state-set-get-type
  result res :: <GType>;
  c-name: "atk_state_set_get_type";
end;

define C-function atk-state-set-new
  result res :: <AtkStateSet>;
  c-name: "atk_state_set_new";
end;

define C-function atk-state-set-is-empty
  input parameter arg1 :: <AtkStateSet>;
  result res :: <gboolean>;
  c-name: "atk_state_set_is_empty";
end;

define C-function atk-state-set-add-state
  input parameter arg1 :: <AtkStateSet>;
  input parameter arg2 :: <AtkStateType>;
  result res :: <gboolean>;
  c-name: "atk_state_set_add_state";
end;

define C-pointer-type <AtkStateType*> => <AtkStateType>;
define C-function atk-state-set-add-states
  input parameter arg1 :: <AtkStateSet>;
  input parameter arg2 :: <AtkStateType*>;
  input parameter arg3 :: <gint>;
  c-name: "atk_state_set_add_states";
end;

define C-function atk-state-set-clear-states
  input parameter arg1 :: <AtkStateSet>;
  c-name: "atk_state_set_clear_states";
end;

define C-function atk-state-set-contains-state
  input parameter arg1 :: <AtkStateSet>;
  input parameter arg2 :: <AtkStateType>;
  result res :: <gboolean>;
  c-name: "atk_state_set_contains_state";
end;

define C-function atk-state-set-contains-states
  input parameter arg1 :: <AtkStateSet>;
  input parameter arg2 :: <AtkStateType*>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_state_set_contains_states";
end;

define C-function atk-state-set-remove-state
  input parameter arg1 :: <AtkStateSet>;
  input parameter arg2 :: <AtkStateType>;
  result res :: <gboolean>;
  c-name: "atk_state_set_remove_state";
end;

define C-function atk-state-set-and-sets
  input parameter arg1 :: <AtkStateSet>;
  input parameter arg2 :: <AtkStateSet>;
  result res :: <AtkStateSet>;
  c-name: "atk_state_set_and_sets";
end;

define C-function atk-state-set-or-sets
  input parameter arg1 :: <AtkStateSet>;
  input parameter arg2 :: <AtkStateSet>;
  result res :: <AtkStateSet>;
  c-name: "atk_state_set_or_sets";
end;

define C-function atk-state-set-xor-sets
  input parameter arg1 :: <AtkStateSet>;
  input parameter arg2 :: <AtkStateSet>;
  result res :: <AtkStateSet>;
  c-name: "atk_state_set_xor_sets";
end;

define C-subtype <_AtkSelection> (<C-void*>) end;
define constant <AtkSelection> = <_AtkSelection>;

define constant <anonymous-4512> = <C-function-pointer>;
define constant <anonymous-4513> = <C-function-pointer>;
define constant <anonymous-4514> = <C-function-pointer>;
define constant <anonymous-4515> = <C-function-pointer>;
define constant <anonymous-4516> = <C-function-pointer>;
define constant <anonymous-4517> = <C-function-pointer>;
define constant <anonymous-4518> = <C-function-pointer>;
define constant <anonymous-4519> = <C-function-pointer>;
define C-subtype <_AtkSelectionIface> (<C-void*>) end;
define constant <AtkSelectionIface> = <_AtkSelectionIface>;

define C-function atk-selection-get-type
  result res :: <GType>;
  c-name: "atk_selection_get_type";
end;

define C-function atk-selection-add-selection
  input parameter arg1 :: <AtkSelection>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_selection_add_selection";
end;

define C-function atk-selection-clear-selection
  input parameter arg1 :: <AtkSelection>;
  result res :: <gboolean>;
  c-name: "atk_selection_clear_selection";
end;

define C-function atk-selection-ref-selection
  input parameter arg1 :: <AtkSelection>;
  input parameter arg2 :: <gint>;
  result res :: <AtkObject>;
  c-name: "atk_selection_ref_selection";
end;

define C-function atk-selection-get-selection-count
  input parameter arg1 :: <AtkSelection>;
  result res :: <gint>;
  c-name: "atk_selection_get_selection_count";
end;

define C-function atk-selection-is-child-selected
  input parameter arg1 :: <AtkSelection>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_selection_is_child_selected";
end;

define C-function atk-selection-remove-selection
  input parameter arg1 :: <AtkSelection>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_selection_remove_selection";
end;

define C-function atk-selection-select-all-selection
  input parameter arg1 :: <AtkSelection>;
  result res :: <gboolean>;
  c-name: "atk_selection_select_all_selection";
end;

define C-subtype <_AtkRelationSetClass> (<C-void*>) end;
define constant <AtkRelationSetClass> = <_AtkRelationSetClass>;

define C-function atk-relation-set-get-type
  result res :: <GType>;
  c-name: "atk_relation_set_get_type";
end;

define C-function atk-relation-set-new
  result res :: <AtkRelationSet>;
  c-name: "atk_relation_set_new";
end;

define C-function atk-relation-set-contains
  input parameter arg1 :: <AtkRelationSet>;
  input parameter arg2 :: <AtkRelationType>;
  result res :: <gboolean>;
  c-name: "atk_relation_set_contains";
end;

define C-subtype <_AtkRelation> (<_GObject>) end;
define constant <AtkRelation> = <_AtkRelation>;

define C-function atk-relation-set-remove
  input parameter arg1 :: <AtkRelationSet>;
  input parameter arg2 :: <AtkRelation>;
  c-name: "atk_relation_set_remove";
end;

define C-function atk-relation-set-add
  input parameter arg1 :: <AtkRelationSet>;
  input parameter arg2 :: <AtkRelation>;
  c-name: "atk_relation_set_add";
end;

define C-function atk-relation-set-get-n-relations
  input parameter arg1 :: <AtkRelationSet>;
  result res :: <gint>;
  c-name: "atk_relation_set_get_n_relations";
end;

define C-function atk-relation-set-get-relation
  input parameter arg1 :: <AtkRelationSet>;
  input parameter arg2 :: <gint>;
  result res :: <AtkRelation>;
  c-name: "atk_relation_set_get_relation";
end;

define C-function atk-relation-set-get-relation-by-type
  input parameter arg1 :: <AtkRelationSet>;
  input parameter arg2 :: <AtkRelationType>;
  result res :: <AtkRelation>;
  c-name: "atk_relation_set_get_relation_by_type";
end;

define C-function atk-relation-set-add-relation-by-type
  input parameter arg1 :: <AtkRelationSet>;
  input parameter arg2 :: <AtkRelationType>;
  input parameter arg3 :: <AtkObject>;
  c-name: "atk_relation_set_add_relation_by_type";
end;

define C-subtype <_AtkRelationClass> (<C-void*>) end;
define constant <AtkRelationClass> = <_AtkRelationClass>;

define C-function atk-relation-get-type
  result res :: <GType>;
  c-name: "atk_relation_get_type";
end;

define C-function atk-relation-type-register
  input parameter arg1 :: <gchar*>;
  result res :: <AtkRelationType>;
  c-name: "atk_relation_type_register";
end;

define C-function atk-relation-type-get-name
  input parameter arg1 :: <AtkRelationType>;
  result res :: <gchar*>;
  c-name: "atk_relation_type_get_name";
end;

define C-function atk-relation-type-for-name
  input parameter arg1 :: <gchar*>;
  result res :: <AtkRelationType>;
  c-name: "atk_relation_type_for_name";
end;

define C-pointer-type <AtkObject*> => <AtkObject>;
define C-function atk-relation-new
  input parameter arg1 :: <AtkObject*>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <AtkRelationType>;
  result res :: <AtkRelation>;
  c-name: "atk_relation_new";
end;

define C-function atk-relation-get-relation-type
  input parameter arg1 :: <AtkRelation>;
  result res :: <AtkRelationType>;
  c-name: "atk_relation_get_relation_type";
end;

define C-function atk-relation-get-target
  input parameter arg1 :: <AtkRelation>;
  result res :: <GPtrArray>;
  c-name: "atk_relation_get_target";
end;

define C-function atk-relation-add-target
  input parameter arg1 :: <AtkRelation>;
  input parameter arg2 :: <AtkObject>;
  c-name: "atk_relation_add_target";
end;

define C-subtype <_AtkRegistry> (<_GObject>) end;
define C-subtype <_AtkRegistryClass> (<C-void*>) end;
define constant <AtkRegistry> = <_AtkRegistry>;

define constant <AtkRegistryClass> = <_AtkRegistryClass>;

define C-function atk-registry-get-type
  result res :: <GType>;
  c-name: "atk_registry_get_type";
end;

define C-function atk-registry-set-factory-type
  input parameter arg1 :: <AtkRegistry>;
  input parameter arg2 :: <GType>;
  input parameter arg3 :: <GType>;
  c-name: "atk_registry_set_factory_type";
end;

define C-function atk-registry-get-factory-type
  input parameter arg1 :: <AtkRegistry>;
  input parameter arg2 :: <GType>;
  result res :: <GType>;
  c-name: "atk_registry_get_factory_type";
end;

define C-subtype <_AtkObjectFactory> (<_GObject>) end;
define constant <AtkObjectFactory> = <_AtkObjectFactory>;

define C-function atk-registry-get-factory
  input parameter arg1 :: <AtkRegistry>;
  input parameter arg2 :: <GType>;
  result res :: <AtkObjectFactory>;
  c-name: "atk_registry_get_factory";
end;

define C-function atk-get-default-registry
  result res :: <AtkRegistry>;
  c-name: "atk_get_default_registry";
end;

define constant <anonymous-4481> = <C-function-pointer>;
define constant <anonymous-4482> = <C-function-pointer>;
define constant <anonymous-4483> = <C-function-pointer>;
define C-subtype <_AtkObjectFactoryClass> (<C-void*>) end;
define constant <AtkObjectFactoryClass> = <_AtkObjectFactoryClass>;

define C-function atk-object-factory-get-type
  result res :: <GType>;
  c-name: "atk_object_factory_get_type";
end;

define C-function atk-object-factory-create-accessible
  input parameter arg1 :: <AtkObjectFactory>;
  input parameter arg2 :: <GObject>;
  result res :: <AtkObject>;
  c-name: "atk_object_factory_create_accessible";
end;

define C-function atk-object-factory-invalidate
  input parameter arg1 :: <AtkObjectFactory>;
  c-name: "atk_object_factory_invalidate";
end;

define C-function atk-object-factory-get-accessible-type
  input parameter arg1 :: <AtkObjectFactory>;
  result res :: <GType>;
  c-name: "atk_object_factory_get_accessible_type";
end;

define C-subtype <_AtkNoOpObjectFactory> (<_AtkObjectFactory>) end;
define constant <AtkNoOpObjectFactory> = <_AtkNoOpObjectFactory>;

define C-subtype <_AtkNoOpObjectFactoryClass> (<C-void*>) end;
define constant <AtkNoOpObjectFactoryClass> = <_AtkNoOpObjectFactoryClass>;

define C-function atk-no-op-object-factory-get-type
  result res :: <GType>;
  c-name: "atk_no_op_object_factory_get_type";
end;

define C-function atk-no-op-object-factory-new
  result res :: <AtkObjectFactory>;
  c-name: "atk_no_op_object_factory_new";
end;

define C-subtype <_AtkNoOpObject> (<_AtkObject>, <_AtkComponent>, <_AtkAction>, <_AtkEditableText>, <_AtkHypertext>, <_AtkImage>, <_AtkSelection>, <_AtkTable>, <_AtkText>, <_AtkValue>) end;
define constant <AtkNoOpObject> = <_AtkNoOpObject>;

define C-subtype <_AtkNoOpObjectClass> (<C-void*>) end;
define constant <AtkNoOpObjectClass> = <_AtkNoOpObjectClass>;

define C-function atk-no-op-object-get-type
  result res :: <GType>;
  c-name: "atk_no_op_object_get_type";
end;

define C-function atk-no-op-object-new
  input parameter arg1 :: <GObject>;
  result res :: <AtkObject>;
  c-name: "atk_no_op_object_new";
end;

define C-subtype <_AtkImage> (<C-void*>) end;
define constant <AtkImage> = <_AtkImage>;

define constant <anonymous-4468> = <C-function-pointer>;
define constant <anonymous-4469> = <C-function-pointer>;
define constant <anonymous-4470> = <C-function-pointer>;
define constant <anonymous-4471> = <C-function-pointer>;
define constant <anonymous-4472> = <C-function-pointer>;
define C-subtype <_AtkImageIface> (<C-void*>) end;
define constant <AtkImageIface> = <_AtkImageIface>;

define C-function atk-image-get-type
  result res :: <GType>;
  c-name: "atk_image_get_type";
end;

define C-function atk-image-get-image-description
  input parameter arg1 :: <AtkImage>;
  result res :: <gchar*>;
  c-name: "atk_image_get_image_description";
end;

define C-function atk-image-get-image-size
  input parameter arg1 :: <AtkImage>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "atk_image_get_image_size";
end;

define C-function atk-image-set-image-description
  input parameter arg1 :: <AtkImage>;
  input parameter arg2 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "atk_image_set_image_description";
end;

define C-function atk-image-get-image-position
  input parameter arg1 :: <AtkImage>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <AtkCoordType>;
  c-name: "atk_image_get_image_position";
end;

define C-function atk-image-get-image-locale
  input parameter arg1 :: <AtkImage>;
  result res :: <gchar*>;
  c-name: "atk_image_get_image_locale";
end;

define C-subtype <_AtkHypertext> (<C-void*>) end;
define constant <AtkHypertext> = <_AtkHypertext>;

define C-subtype <_AtkHyperlink> (<_GObject>, <_AtkAction>) end;
define constant <AtkHyperlink> = <_AtkHyperlink>;

define constant <anonymous-4460> = <C-function-pointer>;
define constant <anonymous-4461> = <C-function-pointer>;
define constant <anonymous-4462> = <C-function-pointer>;
define constant <anonymous-4463> = <C-function-pointer>;
define C-subtype <_AtkHypertextIface> (<C-void*>) end;
define constant <AtkHypertextIface> = <_AtkHypertextIface>;

define C-function atk-hypertext-get-type
  result res :: <GType>;
  c-name: "atk_hypertext_get_type";
end;

define C-function atk-hypertext-get-link
  input parameter arg1 :: <AtkHypertext>;
  input parameter arg2 :: <gint>;
  result res :: <AtkHyperlink>;
  c-name: "atk_hypertext_get_link";
end;

define C-function atk-hypertext-get-n-links
  input parameter arg1 :: <AtkHypertext>;
  result res :: <gint>;
  c-name: "atk_hypertext_get_n_links";
end;

define C-function atk-hypertext-get-link-index
  input parameter arg1 :: <AtkHypertext>;
  input parameter arg2 :: <gint>;
  result res :: <gint>;
  c-name: "atk_hypertext_get_link_index";
end;

define constant <AtkHyperlinkStateFlags> = <C-int>;
define constant $ATK-HYPERLINK-IS-INLINE = 1;

define constant <anonymous-4439> = <C-function-pointer>;
define constant <anonymous-4440> = <C-function-pointer>;
define constant <anonymous-4441> = <C-function-pointer>;
define constant <anonymous-4442> = <C-function-pointer>;
define constant <anonymous-4443> = <C-function-pointer>;
define constant <anonymous-4444> = <C-function-pointer>;
define constant <anonymous-4445> = <C-function-pointer>;
define constant <anonymous-4446> = <C-function-pointer>;
define constant <anonymous-4447> = <C-function-pointer>;
define C-subtype <_AtkHyperlinkClass> (<C-void*>) end;
define constant <AtkHyperlinkClass> = <_AtkHyperlinkClass>;

define C-function atk-hyperlink-get-type
  result res :: <GType>;
  c-name: "atk_hyperlink_get_type";
end;

define C-function atk-hyperlink-get-uri
  input parameter arg1 :: <AtkHyperlink>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_hyperlink_get_uri";
end;

define C-function atk-hyperlink-get-object
  input parameter arg1 :: <AtkHyperlink>;
  input parameter arg2 :: <gint>;
  result res :: <AtkObject>;
  c-name: "atk_hyperlink_get_object";
end;

define C-function atk-hyperlink-get-end-index
  input parameter arg1 :: <AtkHyperlink>;
  result res :: <gint>;
  c-name: "atk_hyperlink_get_end_index";
end;

define C-function atk-hyperlink-get-start-index
  input parameter arg1 :: <AtkHyperlink>;
  result res :: <gint>;
  c-name: "atk_hyperlink_get_start_index";
end;

define C-function atk-hyperlink-is-valid
  input parameter arg1 :: <AtkHyperlink>;
  result res :: <gboolean>;
  c-name: "atk_hyperlink_is_valid";
end;

define C-function atk-hyperlink-is-inline
  input parameter arg1 :: <AtkHyperlink>;
  result res :: <gboolean>;
  c-name: "atk_hyperlink_is_inline";
end;

define C-function atk-hyperlink-get-n-anchors
  input parameter arg1 :: <AtkHyperlink>;
  result res :: <gint>;
  c-name: "atk_hyperlink_get_n_anchors";
end;

define C-function atk-hyperlink-is-selected-link
  input parameter arg1 :: <AtkHyperlink>;
  result res :: <gboolean>;
  c-name: "atk_hyperlink_is_selected_link";
end;

define C-subtype <_AtkAction> (<C-void*>) end;
define constant <AtkAction> = <_AtkAction>;

define constant <anonymous-4283> = <C-function-pointer>;
define constant <anonymous-4284> = <C-function-pointer>;
define constant <anonymous-4285> = <C-function-pointer>;
define constant <anonymous-4286> = <C-function-pointer>;
define constant <anonymous-4287> = <C-function-pointer>;
define constant <anonymous-4288> = <C-function-pointer>;
define constant <anonymous-4289> = <C-function-pointer>;
define C-subtype <_AtkActionIface> (<C-void*>) end;
define constant <AtkActionIface> = <_AtkActionIface>;

define C-function atk-action-get-type
  result res :: <GType>;
  c-name: "atk_action_get_type";
end;

define C-function atk-action-do-action
  input parameter arg1 :: <AtkAction>;
  input parameter arg2 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_action_do_action";
end;

define C-function atk-action-get-n-actions
  input parameter arg1 :: <AtkAction>;
  result res :: <gint>;
  c-name: "atk_action_get_n_actions";
end;

define C-function atk-action-get-description
  input parameter arg1 :: <AtkAction>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_action_get_description";
end;

define C-function atk-action-get-name
  input parameter arg1 :: <AtkAction>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_action_get_name";
end;

define C-function atk-action-get-keybinding
  input parameter arg1 :: <AtkAction>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_action_get_keybinding";
end;

define C-function atk-action-set-description
  input parameter arg1 :: <AtkAction>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "atk_action_set_description";
end;

define C-function atk-action-get-localized-name
  input parameter arg1 :: <AtkAction>;
  input parameter arg2 :: <gint>;
  result res :: <gchar*>;
  c-name: "atk_action_get_localized_name";
end;

define C-subtype <_AtkHyperlinkImpl> (<C-void*>) end;
define constant <AtkHyperlinkImpl> = <_AtkHyperlinkImpl>;

define constant <anonymous-4457> = <C-function-pointer>;
define C-subtype <_AtkHyperlinkImplIface> (<C-void*>) end;
define constant <AtkHyperlinkImplIface> = <_AtkHyperlinkImplIface>;

define C-subtype <_AtkGObjectAccessible> (<_AtkObject>) end;
define constant <AtkGObjectAccessible> = <_AtkGObjectAccessible>;

define C-subtype <_AtkGObjectAccessibleClass> (<C-void*>) end;
define constant <AtkGObjectAccessibleClass> = <_AtkGObjectAccessibleClass>;

define C-function atk-gobject-accessible-get-type
  result res :: <GType>;
  c-name: "atk_gobject_accessible_get_type";
end;

define C-function atk-gobject-accessible-for-object
  input parameter arg1 :: <GObject>;
  result res :: <AtkObject>;
  c-name: "atk_gobject_accessible_for_object";
end;

define C-function atk-gobject-accessible-get-object
  input parameter arg1 :: <AtkGObjectAccessible>;
  result res :: <GObject>;
  c-name: "atk_gobject_accessible_get_object";
end;

define C-subtype <_AtkEditableText> (<C-void*>) end;
define constant <AtkEditableText> = <_AtkEditableText>;

define constant <anonymous-4420> = <C-function-pointer>;
define constant <anonymous-4421> = <C-function-pointer>;
define constant <anonymous-4422> = <C-function-pointer>;
define constant <anonymous-4423> = <C-function-pointer>;
define constant <anonymous-4424> = <C-function-pointer>;
define constant <anonymous-4425> = <C-function-pointer>;
define constant <anonymous-4426> = <C-function-pointer>;
define C-subtype <_AtkEditableTextIface> (<C-void*>) end;
define constant <AtkEditableTextIface> = <_AtkEditableTextIface>;

define C-function atk-editable-text-get-type
  result res :: <GType>;
  c-name: "atk_editable_text_get_type";
end;

define C-function atk-editable-text-set-run-attributes
  input parameter arg1 :: <AtkEditableText>;
  input parameter arg2 :: <AtkAttributeSet>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_editable_text_set_run_attributes";
end;

define C-function atk-editable-text-set-text-contents
  input parameter arg1 :: <AtkEditableText>;
  input parameter arg2 :: <gchar*>;
  c-name: "atk_editable_text_set_text_contents";
end;

define C-function atk-editable-text-insert-text
  input parameter arg1 :: <AtkEditableText>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint*>;
  c-name: "atk_editable_text_insert_text";
end;

define C-function atk-editable-text-copy-text
  input parameter arg1 :: <AtkEditableText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "atk_editable_text_copy_text";
end;

define C-function atk-editable-text-cut-text
  input parameter arg1 :: <AtkEditableText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "atk_editable_text_cut_text";
end;

define C-function atk-editable-text-delete-text
  input parameter arg1 :: <AtkEditableText>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  c-name: "atk_editable_text_delete_text";
end;

define C-function atk-editable-text-paste-text
  input parameter arg1 :: <AtkEditableText>;
  input parameter arg2 :: <gint>;
  c-name: "atk_editable_text_paste_text";
end;

define C-subtype <_AtkDocument> (<C-void*>) end;
define constant <AtkDocument> = <_AtkDocument>;

define constant <anonymous-4355> = <C-function-pointer>;
define constant <anonymous-4356> = <C-function-pointer>;
define constant <anonymous-4357> = <C-function-pointer>;
define constant <anonymous-4358> = <C-function-pointer>;
define constant <anonymous-4359> = <C-function-pointer>;
define constant <anonymous-4360> = <C-function-pointer>;
define C-subtype <_AtkDocumentIface> (<C-void*>) end;
define constant <AtkDocumentIface> = <_AtkDocumentIface>;

define C-function atk-document-get-type
  result res :: <GType>;
  c-name: "atk_document_get_type";
end;

define C-function atk-document-get-document-type
  input parameter arg1 :: <AtkDocument>;
  result res :: <gchar*>;
  c-name: "atk_document_get_document_type";
end;

define C-function atk-document-get-document
  input parameter arg1 :: <AtkDocument>;
  result res :: <gpointer>;
  c-name: "atk_document_get_document";
end;

define C-function atk-document-get-locale
  input parameter arg1 :: <AtkDocument>;
  result res :: <gchar*>;
  c-name: "atk_document_get_locale";
end;

define C-function atk-document-get-attributes
  input parameter arg1 :: <AtkDocument>;
  result res :: <AtkAttributeSet>;
  c-name: "atk_document_get_attributes";
end;

define C-function atk-document-get-attribute-value
  input parameter arg1 :: <AtkDocument>;
  input parameter arg2 :: <gchar*>;
  result res :: <gchar*>;
  c-name: "atk_document_get_attribute_value";
end;

define C-function atk-document-set-attribute-value
  input parameter arg1 :: <AtkDocument>;
  input parameter arg2 :: <gchar*>;
  input parameter arg3 :: <gchar*>;
  result res :: <gboolean>;
  c-name: "atk_document_set_attribute_value";
end;

define C-subtype <_AtkComponent> (<C-void*>) end;
define constant <AtkComponent> = <_AtkComponent>;

define constant <anonymous-4323> = <C-function-pointer>;
define constant <AtkFocusHandler> = <anonymous-4323>;

define constant <anonymous-4325> = <C-function-pointer>;
define constant <anonymous-4326> = <C-function-pointer>;
define constant <anonymous-4327> = <C-function-pointer>;
define constant <anonymous-4328> = <C-function-pointer>;
define constant <anonymous-4329> = <C-function-pointer>;
define constant <anonymous-4330> = <C-function-pointer>;
define constant <anonymous-4331> = <C-function-pointer>;
define constant <anonymous-4332> = <C-function-pointer>;
define constant <anonymous-4333> = <C-function-pointer>;
define constant <anonymous-4334> = <C-function-pointer>;
define constant <anonymous-4335> = <C-function-pointer>;
define constant <anonymous-4336> = <C-function-pointer>;
define constant <anonymous-4337> = <C-function-pointer>;
define C-subtype <_AtkRectangle> (<C-void*>) end;
define constant <AtkRectangle> = <_AtkRectangle>;

define constant <anonymous-4338> = <C-function-pointer>;
define constant <anonymous-4339> = <C-function-pointer>;
define C-subtype <_AtkComponentIface> (<C-void*>) end;
define constant <AtkComponentIface> = <_AtkComponentIface>;

define C-function atk-rectangle-get-type
  result res :: <GType>;
  c-name: "atk_rectangle_get_type";
end;

define C-function atk-component-get-type
  result res :: <GType>;
  c-name: "atk_component_get_type";
end;

define C-function atk-component-add-focus-handler
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <AtkFocusHandler>;
  result res :: <guint>;
  c-name: "atk_component_add_focus_handler";
end;

define C-function atk-component-contains
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <AtkCoordType>;
  result res :: <gboolean>;
  c-name: "atk_component_contains";
end;

define C-function atk-component-ref-accessible-at-point
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <AtkCoordType>;
  result res :: <AtkObject>;
  c-name: "atk_component_ref_accessible_at_point";
end;

define C-function atk-component-get-extents
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <gint*>;
  input parameter arg5 :: <gint*>;
  input parameter arg6 :: <AtkCoordType>;
  c-name: "atk_component_get_extents";
end;

define C-function atk-component-get-position
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  input parameter arg4 :: <AtkCoordType>;
  c-name: "atk_component_get_position";
end;

define C-function atk-component-get-size
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <gint*>;
  input parameter arg3 :: <gint*>;
  c-name: "atk_component_get_size";
end;

define C-function atk-component-get-layer
  input parameter arg1 :: <AtkComponent>;
  result res :: <AtkLayer>;
  c-name: "atk_component_get_layer";
end;

define C-function atk-component-get-mdi-zorder
  input parameter arg1 :: <AtkComponent>;
  result res :: <gint>;
  c-name: "atk_component_get_mdi_zorder";
end;

define C-function atk-component-grab-focus
  input parameter arg1 :: <AtkComponent>;
  result res :: <gboolean>;
  c-name: "atk_component_grab_focus";
end;

define C-function atk-component-remove-focus-handler
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <guint>;
  c-name: "atk_component_remove_focus_handler";
end;

define C-function atk-component-set-extents
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <gint>;
  input parameter arg5 :: <gint>;
  input parameter arg6 :: <AtkCoordType>;
  result res :: <gboolean>;
  c-name: "atk_component_set_extents";
end;

define C-function atk-component-set-position
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  input parameter arg4 :: <AtkCoordType>;
  result res :: <gboolean>;
  c-name: "atk_component_set_position";
end;

define C-function atk-component-set-size
  input parameter arg1 :: <AtkComponent>;
  input parameter arg2 :: <gint>;
  input parameter arg3 :: <gint>;
  result res :: <gboolean>;
  c-name: "atk_component_set_size";
end;

define C-function atk-component-get-alpha
  input parameter arg1 :: <AtkComponent>;
  result res :: <gdouble>;
  c-name: "atk_component_get_alpha";
end;

define C-subtype <_GtkAccelMap> (<_GObject>) end;
define constant <GtkAccelMap> = <_GtkAccelMap>;

define C-subtype <_GtkAccelMapClass> (<C-void*>) end;
define constant <GtkAccelMapClass> = <_GtkAccelMapClass>;

define constant <anonymous-4263> = <C-function-pointer>;
define constant <GtkAccelMapForeach> = <anonymous-4263>;

define C-function gtk-accel-map-add-entry
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  c-name: "gtk_accel_map_add_entry";
end;

define C-function gtk-accel-map-lookup-entry
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <GtkAccelKey>;
  result res :: <gboolean>;
  c-name: "gtk_accel_map_lookup_entry";
end;

define C-function gtk-accel-map-change-entry
  input parameter arg1 :: <gchar*>;
  input parameter arg2 :: <guint>;
  input parameter arg3 :: <GdkModifierType>;
  input parameter arg4 :: <gboolean>;
  result res :: <gboolean>;
  c-name: "gtk_accel_map_change_entry";
end;

define C-function gtk-accel-map-load-utf8
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_accel_map_load_utf8";
end;

define C-function gtk-accel-map-save-utf8
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_accel_map_save_utf8";
end;

define C-function gtk-accel-map-foreach
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GtkAccelMapForeach>;
  c-name: "gtk_accel_map_foreach";
end;

define C-function gtk-accel-map-load-fd
  input parameter arg1 :: <gint>;
  c-name: "gtk_accel_map_load_fd";
end;

define C-function gtk-accel-map-load-scanner
  input parameter arg1 :: <GScanner>;
  c-name: "gtk_accel_map_load_scanner";
end;

define C-function gtk-accel-map-save-fd
  input parameter arg1 :: <gint>;
  c-name: "gtk_accel_map_save_fd";
end;

define C-function gtk-accel-map-lock-path
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_accel_map_lock_path";
end;

define C-function gtk-accel-map-unlock-path
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_accel_map_unlock_path";
end;

define C-function gtk-accel-map-add-filter
  input parameter arg1 :: <gchar*>;
  c-name: "gtk_accel_map_add_filter";
end;

define C-function gtk-accel-map-foreach-unfiltered
  input parameter arg1 :: <gpointer>;
  input parameter arg2 :: <GtkAccelMapForeach>;
  c-name: "gtk_accel_map_foreach_unfiltered";
end;

define C-function gtk-accel-map-get-type
  result res :: <GType>;
  c-name: "gtk_accel_map_get_type";
end;

define C-function gtk-accel-map-get
  result res :: <GtkAccelMap>;
  c-name: "gtk_accel_map_get";
end;

define constant gtk-accel-map-load = gtk-accel-map-load-utf8;

define constant gtk-accel-map-save = gtk-accel-map-save-utf8;

define C-subtype <_GtkAccelLabel> (<_GtkLabel>, <_AtkImplementorIface>) end;
define constant <GtkAccelLabel> = <_GtkAccelLabel>;

define constant <anonymous-4251> = <C-function-pointer>;
define constant <anonymous-4252> = <C-function-pointer>;
define constant <anonymous-4253> = <C-function-pointer>;
define constant <anonymous-4254> = <C-function-pointer>;
define C-subtype <_GtkAccelLabelClass> (<C-void*>) end;
define constant <GtkAccelLabelClass> = <_GtkAccelLabelClass>;

define C-function gtk-accel-label-get-type
  result res :: <GType>;
  c-name: "gtk_accel_label_get_type";
end;

define C-function gtk-accel-label-new
  input parameter arg1 :: <gchar*>;
  result res :: <GtkWidget>;
  c-name: "gtk_accel_label_new";
end;

define C-function gtk-accel-label-get-accel-widget
  input parameter arg1 :: <GtkAccelLabel>;
  result res :: <GtkWidget>;
  c-name: "gtk_accel_label_get_accel_widget";
end;

define C-function gtk-accel-label-get-accel-width
  input parameter arg1 :: <GtkAccelLabel>;
  result res :: <guint>;
  c-name: "gtk_accel_label_get_accel_width";
end;

define C-function gtk-accel-label-set-accel-widget
  input parameter arg1 :: <GtkAccelLabel>;
  input parameter arg2 :: <GtkWidget>;
  c-name: "gtk_accel_label_set_accel_widget";
end;

define C-function gtk-accel-label-set-accel-closure
  input parameter arg1 :: <GtkAccelLabel>;
  input parameter arg2 :: <GClosure>;
  c-name: "gtk_accel_label_set_accel_closure";
end;

define C-function gtk-accel-label-refetch
  input parameter arg1 :: <GtkAccelLabel>;
  result res :: <gboolean>;
  c-name: "gtk_accel_label_refetch";
end;

define constant gtk-accel-label-accelerator-width = gtk-accel-label-get-accel-width;

define C-subtype <_GtkAboutDialog> (<_GtkDialog>, <_AtkImplementorIface>) end;
define constant <GtkAboutDialog> = <_GtkAboutDialog>;

define constant <anonymous-4076> = <C-function-pointer>;
define constant <anonymous-4077> = <C-function-pointer>;
define constant <anonymous-4078> = <C-function-pointer>;
define constant <anonymous-4079> = <C-function-pointer>;
define C-subtype <_GtkAboutDialogClass> (<C-void*>) end;
define constant <GtkAboutDialogClass> = <_GtkAboutDialogClass>;

define C-function gtk-about-dialog-get-type
  result res :: <GType>;
  c-name: "gtk_about_dialog_get_type";
end;

define C-function gtk-about-dialog-new
  result res :: <GtkWidget>;
  c-name: "gtk_about_dialog_new";
end;

define C-function gtk-show-about-dialog
  input parameter arg1 :: <GtkWindow>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_show_about_dialog";
end;

define C-function gtk-about-dialog-get-name
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_name";
end;

define C-function gtk-about-dialog-set-name
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_name";
end;

define C-function gtk-about-dialog-get-version
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_version";
end;

define C-function gtk-about-dialog-set-version
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_version";
end;

define C-function gtk-about-dialog-get-copyright
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_copyright";
end;

define C-function gtk-about-dialog-set-copyright
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_copyright";
end;

define C-function gtk-about-dialog-get-comments
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_comments";
end;

define C-function gtk-about-dialog-set-comments
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_comments";
end;

define C-function gtk-about-dialog-get-license
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_license";
end;

define C-function gtk-about-dialog-set-license
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_license";
end;

define C-function gtk-about-dialog-get-wrap-license
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gboolean>;
  c-name: "gtk_about_dialog_get_wrap_license";
end;

define C-function gtk-about-dialog-set-wrap-license
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gboolean>;
  c-name: "gtk_about_dialog_set_wrap_license";
end;

define C-function gtk-about-dialog-get-website
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_website";
end;

define C-function gtk-about-dialog-set-website
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_website";
end;

define C-function gtk-about-dialog-get-website-label
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_website_label";
end;

define C-function gtk-about-dialog-set-website-label
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_website_label";
end;

define C-function gtk-about-dialog-get-authors
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar**>;
  c-name: "gtk_about_dialog_get_authors";
end;

define C-function gtk-about-dialog-set-authors
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar**>;
  c-name: "gtk_about_dialog_set_authors";
end;

define C-function gtk-about-dialog-get-documenters
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar**>;
  c-name: "gtk_about_dialog_get_documenters";
end;

define C-function gtk-about-dialog-set-documenters
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar**>;
  c-name: "gtk_about_dialog_set_documenters";
end;

define C-function gtk-about-dialog-get-artists
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar**>;
  c-name: "gtk_about_dialog_get_artists";
end;

define C-function gtk-about-dialog-set-artists
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar**>;
  c-name: "gtk_about_dialog_set_artists";
end;

define C-function gtk-about-dialog-get-translator-credits
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_translator_credits";
end;

define C-function gtk-about-dialog-set-translator-credits
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_translator_credits";
end;

define C-function gtk-about-dialog-get-logo
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <GdkPixbuf>;
  c-name: "gtk_about_dialog_get_logo";
end;

define C-function gtk-about-dialog-set-logo
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <GdkPixbuf>;
  c-name: "gtk_about_dialog_set_logo";
end;

define C-function gtk-about-dialog-get-logo-icon-name
  input parameter arg1 :: <GtkAboutDialog>;
  result res :: <gchar*>;
  c-name: "gtk_about_dialog_get_logo_icon_name";
end;

define C-function gtk-about-dialog-set-logo-icon-name
  input parameter arg1 :: <GtkAboutDialog>;
  input parameter arg2 :: <gchar*>;
  c-name: "gtk_about_dialog_set_logo_icon_name";
end;

define constant <anonymous-4111> = <C-function-pointer>;
define constant <GtkAboutDialogActivateLinkFunc> = <anonymous-4111>;

define C-function gtk-about-dialog-set-email-hook
  input parameter arg1 :: <GtkAboutDialogActivateLinkFunc>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GDestroyNotify>;
  result res :: <GtkAboutDialogActivateLinkFunc>;
  c-name: "gtk_about_dialog_set_email_hook";
end;

define C-function gtk-about-dialog-set-url-hook
  input parameter arg1 :: <GtkAboutDialogActivateLinkFunc>;
  input parameter arg2 :: <gpointer>;
  input parameter arg3 :: <GDestroyNotify>;
  result res :: <GtkAboutDialogActivateLinkFunc>;
  c-name: "gtk_about_dialog_set_url_hook";
end;

