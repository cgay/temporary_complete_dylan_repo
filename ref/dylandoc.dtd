<!--

  DylanDoc
  DocBook extensions for the Dylan programming language

  The following file overrides various parts of DocBook to make it better
  suited to the Dylan programming language. See the README file for more
  details.

  In SGML, the first declaration of a given entity silently overrides all
  subsequent declarations of that entity. DocBook contains a number of
  empty entities which are meant to be overriden. These are included at
  strategic points in the DTD, allowing local users to extend most parts of
  DocBook in a very clean fashion.

  This DTD should be referred to by the public identifier
  "UNREGISTERED::Eric Kidd//DTD DylanDoc V3.1//EN", where V3.1 matches the
  appropriate version of DocBook. More complex version numbers may be used
  in the future to allow DylanDoc to be revised more often than DocBook.

  Eric Kidd
  eric.kidd@pobox.com

-->


<!-- =============== Local Modular Entities ======================= -->

<!ENTITY % local.dylan.def.class "">
<!ENTITY % dylan.def.class
           "DylanConstantDef|DylanVariableDef|
            DylanGenericDef|DylanMethodDef|DylanFunctionDef|
            DylanClassDef|DylanMacroDef|DylanCharFnDef
            %local.dylan.def.class;" >

<!ENTITY % local.dylan.tech.char.class "">
<!ENTITY % dylan.tech.char.class
           "DLibrary|DModule|DName|DLit|DParam|EM|DClass|DKeyword
            %local.dylan.tech.char.class;" >


<!-- =============== DocBook Entity Overrides ===================== -->

<!ENTITY % local.synop.class "|%dylan.def.class;">
<!ENTITY % local.tech.char.class "|%dylan.tech.char.class;">


<!-- =============== The Real Thing =============================== -->

<!ENTITY % docbook.definition PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
%docbook.definition;


<!-- =============== Local Entities =============================== -->

<!--
  The following entities define collections of attributes which can
  be used to locate a Dylan library, module or definition. These
  represent hyperlinks of a sort, and should only be used someplace
  that a cross-reference would be meaningful.

  Note that these attributes do not refer to the namespace *within*
  a module, but rather the names exported by one.
-->
<!ENTITY % dlib "DLib CDATA #IMPLIED" >
<!ENTITY % dmod "DMod CDATA #IMPLIED" >
<!ENTITY % dloc "%dlib; %dmod;" >


<!-- =============== Inline Elements ==================================
  These are meant for use in normal text contexts. They're essentially
  just variations on LITERAL, but provide Dylan-specific information.

  DLibrary and DModule should be used to refer to library and module
  names, respectively. DName should be used for any single Dylan name
  which could appear in an export statement (classes, variables,
  functions, macros, etc). DLit can be used for any other fragments of
  Dylan code.

  Of special importance: please try to use the standard DocBook tag
  PARAMETER when refering to parameters, instead of using DLit or
  LITERAL.
-->

<!ELEMENT DLibrary - - (#PCDATA) >

<!ELEMENT DModule - - (#PCDATA) >
<!ATTLIST DModule %dlib; >

<!ELEMENT DName - - (#PCDATA) >
<!ATTLIST DName %dloc; >

<!ELEMENT DLit - - (#PCDATA) >
<!ELEMENT DClass - - (#PCDATA) >
<!ELEMENT DKeyword - - (#PCDATA) >
<!ELEMENT DParam - - (#PCDATA) >


<!-- =============== Definition Elements ==============================
  These correspond to the different types of definitions in the Dylan
  Reference Manual.
-->

<!ELEMENT DylanConstantDef - - (DefName, DefSummary, DefType?, DefValue?,
                                DefDescription, DefSection*) >

<!ELEMENT DylanVariableDef - - (DefName, DefSummary, DefType?, DefValue?,
                                DefDescription, DefSection*) >

<!ELEMENT DylanFunctionDef - - (DefName, DefAdjectives?, DefSummary,
                                DefParameters, DefReturns, DefDescription,
				DefSection*) >

<!ELEMENT DylanGenericDef - - (DefName, DefAdjectives?, DefSummary,
                               DefParameters, DefReturns, DefDescription,
			       DefSection*) >

<!ELEMENT DylanMethodDef - - (DefName, DefAdjectives?, DefSummary,
                              DefParameters, DefReturns, DefDescription,
		              DefSection*) >

<!-- For now this only processes Statement Macros (of the "with-" variety).
     If someone else wants to add definer and function macros, be my guest. -->
<!ELEMENT DylanMacroDef - - (DefName, DefAdjectives?, DefSummary, 
                             DefParameters, DefDescription,
                             DefSection*) >

<!ELEMENT DylanClassDef - - (DefName, DefAdjectives?, DefSummary, DefSupers,
                             DefInitKeywords, DefDescription, DefSection*) >

<!ATTLIST DylanConstantDef DylanDefName CDATA #FIXED "Constant">
<!ATTLIST DylanVariableDef DylanDefName CDATA #FIXED "Variable">
<!ATTLIST DylanFunctionDef DylanDefName CDATA #FIXED "Function">
<!ATTLIST DylanGenericDef  DylanDefName CDATA #FIXED "Generic">
<!ATTLIST DylanMethodDef   DylanDefName CDATA #FIXED "Method">
<!ATTLIST DylanMacroDef    DylanDefName CDATA #FIXED "Macro">
<!ATTLIST DylanClassDef    DylanDefName CDATA #FIXED "Class">

<!-- =============== Shared Definition Support ========================
  The following elements show up in most types of definitions.
-->

<!ELEMENT DefName - - (#PCDATA) >
<!ELEMENT DefAdjectives - - (#PCDATA) >
<!ELEMENT DefSummary - - (%para.char.mix;)+ >
<!ELEMENT DefDescription - - (%component.mix;)+ -(synop.class) >
<!ELEMENT DefSection - - (Title, (%component.mix;)+) -(synop.class) >


<!-- =============== Variable and Constant Definitions ================
  The following elements show up in variable and constant defintions.
-->

<!ELEMENT DefType - - (#PCDATA) >
<!ELEMENT DefValue - - (#PCDATA) >


<!-- =============== Parameter Definition Supprt ======================
  The following elements are used to define different kinds of
  parameter lists.

  Note that the ParamName for KeyParam should not include the final ":"
  character. This will be added as appropriate by the style sheets.
-->

<!ELEMENT VarParam - - (VariableName, BindsTo) >
<!ELEMENT Param - - (ParamName, (ParamType|ParamSingleton)?, ParamSummary?) >
<!ELEMENT RestParam - - (ParamName, ParamType?, ParamSummary?)? >
<!ELEMENT KeyParam - - (ParamName, ParamType?, ParamDefault?, ParamSummary?) >
<!ELEMENT AllKeys - O EMPTY >
<!ELEMENT ParamName - - (#PCDATA) >
<!ELEMENT VariableName - - (#PCDATA) >
<!ELEMENT BindsTo - - (#PCDATA) >
<!ELEMENT ParamType - - (#PCDATA) >
<!ELEMENT ParamDefault - - (#PCDATA) >
<!ELEMENT ParamSingleton - - (#PCDATA) >
<!ELEMENT ParamSummary - - ((%para.char.mix; | %para.mix;)+) >

<!-- =============== Class Definitions ================================
  The following elements are used to define different kinds of
  parameter lists.
-->

<!ELEMENT DefSupers - - (DefSuper*) >
<!ELEMENT DefSuper - - (#PCDATA) >
<!ELEMENT DefInitKeywords - - (KeyParam*) >
<!ENTITY obj-super '
 <DefSupers>
  <DefSuper>&lt;object&gt;</DefSuper>
 </DefSupers>'>
<!ENTITY object '<dclass>object</dclass>'>

<!-- =============== Function Definitions ========================
  The following elements are used to define functions, methods
  and generic functions.
-->

<!ELEMENT DefParameters - - (VarParam?, Param*, RestParam?, 
                             (KeyParam*, AllKeys?)?) >
<!ELEMENT DefReturns - - (Param*, RestParam?) -(ParamSingleton)>
<!ENTITY no-returns '<defreturns></defreturns>'>

<!-- and a little something for emphasis!  -->
<!ELEMENT EM - - (#PCDATA)>