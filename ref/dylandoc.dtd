<!--

  DylanDoc
  DocBook extensions for the Dylan programming language

  The following file overrides various parts of DocBook to make it better
  suited to the Dylan programming language. See the README file for more
  details.

  In SGML, the first declaration of a given entity silently overrides all
  subsequent declarations of that entity. DocBook contains a number of
  empty entities which are meant to be overriden. These are included at
  strategic points in the DTD, allowing local users to extend most parts of
  DocBook in a very clean fashion.

  This DTD should be referred to by the public identifier
  "UNREGISTERED::Eric Kidd//DTD DylanDoc V3.0//EN", where V3.0 matches the
  appropriate version of DocBook. More complex version numbers may be used
  in the future to allow DylanDoc to be revised more often than DocBook.

  Eric Kidd
  eric.kidd@pobox.com

-->


<!-- =============== Local Modular Entities ======================= -->

<!ENTITY % local.dylan.def.class "">
<!ENTITY % dylan.def.class
           "DylanConstantDef|DylanVariableDef|
            DylanGenericDef|DylanMethodDef|DylanFunctionDef|
            DylanClassDef|DylanMacroDef
            %local.dylan.def.class;" >


<!-- =============== DocBook Entity Overrides ===================== -->

<!ENTITY % local.synop.class "|%dylan.def.class;">


<!-- =============== The Real Thing =============================== -->

<!ENTITY % docbook.definition PUBLIC "-//Davenport//DTD DocBook V3.0//EN">
%docbook.definition;


<!-- =============== Element Definitions ========================== -->

<!ELEMENT DefName - - (#PCDATA) >
<!ELEMENT DefSummary - - (%para.char.mix;)+ >
<!ELEMENT DefBody - - (%component.mix;)+ -(synop.class) >
<!ELEMENT DefType - - (#PCDATA) >
<!ELEMENT DefValue - - (#PCDATA) >
<!ELEMENT DefAdjectives - - (#PCDATA) >
<!ELEMENT DefParameters - - (DefParam*, Rest?, 
                            (Key, AllKeys?)?) >
<!ELEMENT DefReturns - - (DefParam*, Rest?) -(ParamSingleton)>
<!ELEMENT DefParam - - (ParamName, (ParamType|ParamSingleton)?,
                        ParamSummary?) >
<!ELEMENT Rest - - (ParamName, RestType?, ParamSummary?)? >
<!ELEMENT RestType - - (#PCDATA) >
<!ELEMENT Key - - (DefParam*) >
<!ELEMENT AllKeys - O EMPTY >
<!ELEMENT ParamName - - (#PCDATA) >
<!ELEMENT ParamType - - (#PCDATA) >
<!ELEMENT ParamSingleton - - (#PCDATA) >
<!ELEMENT ParamSummary - - ((%para.char.mix; | %para.mix;)+) >
<!ELEMENT DefSupers - - (DefSuper+) >
<!ELEMENT DefSuper - - (#PCDATA) >
<!ELEMENT DefInitKeywords - - (DefParam*) >

<!ELEMENT DylanConstantDef - - (DefName, DefSummary, DefType?, DefValue?,
                                DefBody) >

<!ELEMENT DylanVariableDef - - (DefName, DefSummary, DefType?, DefValue?,
                                DefBody) >

<!ELEMENT DylanFunctionDef - - (DefName, DefAdjectives?, DefSummary,
                                DefParameters, DefReturns, DefBody) >

<!ELEMENT DylanClassDef - - (DefName, DefAdjectives?, DefSummary, DefSupers,
                             DefInitKeywords, DefBody) >

<!ATTLIST DylanConstantDef DylanDefName CDATA #FIXED "Constant">
<!ATTLIST DylanVariableDef DylanDefName CDATA #FIXED "Variable">
<!ATTLIST DylanFunctionDef DylanDefName CDATA #FIXED "Function">
<!ATTLIST DylanClassDef    DylanDefName CDATA #FIXED "Class">


<!-- Scratch ,,, 

<!ATTLIST DylanName
          library  CDATA #IMPLIED
          module   CDATA #IMPLIED >
<!ELEMENT DylanType - - (#PCDATA) >

<!ELEMENT DylanVar - - (DylanName, DylanType?) >

<!ELEMENT DylanSynopsis - - ((%dylan.def.class;), (%component.mix;)+) >

-->
