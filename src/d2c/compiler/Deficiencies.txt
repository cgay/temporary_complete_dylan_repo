
		Known Deficiencies in the D2C Compiler.

$Header: /home/housel/work/rcs/gd/src/d2c/compiler/Deficiencies.txt,v 1.1 1996/03/17 00:18:29 wlott Exp $

The special syntax for aref, element, and singleton is supposed to
look up the name in the context of the operation.  Instead, we always
look it up in the Dylan library.


In macro templates, name prefixing and suffixing (e.g. "prefix-" ##
?name ## "-suffix") is not implemented.


In macro templates, unhygienic name references (e.g. ?=name) is not
implemented.


In macro property list patterns, the key default must be either a
literal constant or a variable reference instead of any kind of
expression as the DRM claims or a basic-fragment as Moon suggests.


The ``for'' macro is supposed to evaluate the types interleaved with
the init expressions, but it does not.  In fact, in some cases, it
will evaluate the type expression each time though the loop.


Anything involving the runtime creation of generic functions or
classes is not supported.  This means that the expressions in all
generic function signatures and all class superclass lists must
obviously be compile-time constants.


Anything involving runtime calls to add-method is not supported.  This
means that all the type expressions in define method forms must
obviously be compile-time constants.


Anything involving the runtime computation of method signatures is not
supported.  This means that all the type expressions in the signatures
of any anonymous methods (i.e. uses of the ``method'' statement) must
obviously be compile-time constants.


Voilations of ``define sealed domain'' are not detected.


Define class init-arg options (e.g. keyword foo:, ...) are parsed but
ignored.

