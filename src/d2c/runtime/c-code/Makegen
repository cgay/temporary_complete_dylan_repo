
# The win32 part unfortunately leaves out any kind of rule for main.c,
# because Windows doesn't seem to like the idea of the main() function
# coming from a library.

if ($win32) {
    print <<'EOF';

AS = as
CC = cl
CPPFLAGS = -I$(SRCROOT)/runtime
CFLAGS = /nologo /O2 /Dwin32

OBJS = allocate.obj main.obj nlx.obj i386.obj

runtime.lib: $(OBJS)
	lib /out:runtime.lib $(OBJS)

allocate.obj: $(SRCDIR)\allocate.c
	$(CC) $(CFLAGS) -c $(SRCDIR)\allocate.c
main.obj: $(SRCDIR)\main.c
	$(CC) $(CFLAGS) -c $(SRCDIR)\main.c
nlx.obj: $(SRCDIR)\nlx.c
	$(CC) $(CFLAGS) -c $(SRCDIR)\nlx.c
i386.obj: $(SRCDIR)\i386.s
	$(AS) $(SRCDIR)\i386.s -o i386.obj

EOF

    push(@compile_dependencies, 'runtime.lib');
    do install('lib', 'runtime.lib');
    push(@files_to_clean, '$(OBJS)', 'runtime.lib');
} else { # not win32

   print <<'EOF';

AS = /bin/as
CC = gcc
CPPFLAGS = -I$(SRCROOT)/runtime
CFLAGS = -g

OBJS = allocate.o nlx.o hppa.o main.o

libruntime.a: $(OBJS)
	ar crvu libruntime.a $(OBJS)

EOF

    push(@compile_dependencies, 'libruntime.a');
    do install('lib', 'libruntime.a');
    push(@files_to_clean, '$(OBJS)', 'libruntime.a');
}
