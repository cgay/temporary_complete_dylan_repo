Module:    macos-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "MixedMode.h"; do not edit.

// unnamed enum:
define inline-only constant $kRoutineDescriptorVersion = 7;

// unnamed enum:
define inline-only constant $_MixedModeMagic           = #xAAFE;

// unnamed enum:
define inline-only constant $kCurrentMixedModeStateRecord = 1;

define inline constant <CallingConventionType> = <C-unsigned-short>;
define C-pointer-type <CallingConventionType*> => <CallingConventionType>;
define C-pointer-type <CallingConventionType**> => <CallingConventionType*>;
// unnamed enum:
define inline-only constant $kPascalStackBased         = 0;
define inline-only constant $kCStackBased              = 1;
define inline-only constant $kRegisterBased            = 2;
define inline-only constant $kD0DispatchedPascalStackBased = 8;
define inline-only constant $kD1DispatchedPascalStackBased = 12;
define inline-only constant $kD0DispatchedCStackBased  = 9;
define inline-only constant $kStackDispatchedPascalStackBased = 14;
define inline-only constant $kThinkCStackBased         = 5;

define inline constant <ISAType> = <SInt8>;
define C-pointer-type <ISAType*> => <ISAType>;
define C-pointer-type <ISAType**> => <ISAType*>;
// unnamed enum:
define inline-only constant $kM68kISA                  = 0;
define inline-only constant $kPowerPCISA               = 1;

define inline constant <RTAType> = <SInt8>;
define C-pointer-type <RTAType*> => <RTAType>;
define C-pointer-type <RTAType**> => <RTAType*>;
// unnamed enum:
define inline-only constant $kOld68kRTA                = ash(0,4);
define inline-only constant $kPowerPCRTA               = ash(0,4);
define inline-only constant $kCFM68kRTA                = ash(1,4);

// unnamed enum:
define inline-only constant $kRegisterD0               = 0;
define inline-only constant $kRegisterD1               = 1;
define inline-only constant $kRegisterD2               = 2;
define inline-only constant $kRegisterD3               = 3;
define inline-only constant $kRegisterD4               = 8;
define inline-only constant $kRegisterD5               = 9;
define inline-only constant $kRegisterD6               = 10;
define inline-only constant $kRegisterD7               = 11;
define inline-only constant $kRegisterA0               = 4;
define inline-only constant $kRegisterA1               = 5;
define inline-only constant $kRegisterA2               = 6;
define inline-only constant $kRegisterA3               = 7;
define inline-only constant $kRegisterA4               = 12;
define inline-only constant $kRegisterA5               = 13;
define inline-only constant $kRegisterA6               = 14;
define inline-only constant $kCCRegisterCBit           = 16;
define inline-only constant $kCCRegisterVBit           = 17;
define inline-only constant $kCCRegisterZBit           = 18;
define inline-only constant $kCCRegisterNBit           = 19;
define inline-only constant $kCCRegisterXBit           = 20;

define inline constant <registerSelectorType> = <C-unsigned-short>;
define C-pointer-type <registerSelectorType*> => <registerSelectorType>;
define C-pointer-type <registerSelectorType**> => <registerSelectorType*>;
// unnamed enum:
define inline-only constant $kNoByteCode               = 0;
define inline-only constant $kOneByteCode              = 1;
define inline-only constant $kTwoByteCode              = 2;
define inline-only constant $kFourByteCode             = 3;

define inline constant <ProcInfoType> = <C-both-unsigned-long>;
define C-pointer-type <ProcInfoType*> => <ProcInfoType>;
define C-pointer-type <ProcInfoType**> => <ProcInfoType*>;
define inline constant <RoutineFlagsType> = <C-unsigned-short>;
define C-pointer-type <RoutineFlagsType*> => <RoutineFlagsType>;
define C-pointer-type <RoutineFlagsType**> => <RoutineFlagsType*>;
// unnamed enum:
define inline-only constant $kProcDescriptorIsAbsolute = #x00;
define inline-only constant $kProcDescriptorIsRelative = #x01;

// unnamed enum:
define inline-only constant $kFragmentIsPrepared       = #x00;
define inline-only constant $kFragmentNeedsPreparing   = #x02;

// unnamed enum:
define inline-only constant $kUseCurrentISA            = #x00;
define inline-only constant $kUseNativeISA             = #x04;

// unnamed enum:
define inline-only constant $kPassSelector             = #x00;
define inline-only constant $kDontPassSelector         = #x08;

// unnamed enum:
define inline-only constant $kRoutineIsNotDispatchedDefaultRoutine = #x00;
define inline-only constant $kRoutineIsDispatchedDefaultRoutine = #x10;

// unnamed enum:
define inline-only constant $kProcDescriptorIsProcPtr  = #x00;
define inline-only constant $kProcDescriptorIsIndex    = #x20;


define C-struct <RoutineRecord>
  sealed inline-only slot procInfo-value :: <ProcInfoType>;
  sealed inline-only slot reserved1-value :: <SInt8>;
  sealed inline-only slot ISA-value      :: <ISAType>;
  sealed inline-only slot routineFlags-value :: <RoutineFlagsType>;
  sealed inline-only slot procDescriptor-value :: <ProcPtr>;
  sealed inline-only slot reserved2-value :: <UInt32>;
  sealed inline-only slot selector-value :: <UInt32>;
  pack: 2;
  c-name: "struct RoutineRecord";
end;
define C-pointer-type <RoutineRecord*> => <RoutineRecord>;
define C-pointer-type <RoutineRecord**> => <RoutineRecord*>;
define C-pointer-type <RoutineRecordPtr> => <RoutineRecord>;
define C-pointer-type <RoutineRecordHandle> => <RoutineRecordPtr>;
define inline constant <RDFlagsType> = <UInt8>;
define C-pointer-type <RDFlagsType*> => <RDFlagsType>;
define C-pointer-type <RDFlagsType**> => <RDFlagsType*>;
// unnamed enum:
define inline-only constant $kSelectorsAreNotIndexable = #x00;
define inline-only constant $kSelectorsAreIndexable    = #x01;


define C-struct <RoutineDescriptor>
  sealed inline-only slot goMixedModeTrap-value :: <UInt16>;
  sealed inline-only slot version-value  :: <SInt8>;
  sealed inline-only slot routineDescriptorFlags-value :: <RDFlagsType>;
  sealed inline-only slot reserved1-value :: <UInt32>;
  sealed inline-only slot reserved2-value :: <UInt8>;
  sealed inline-only slot selectorInfo-value :: <UInt8>;
  sealed inline-only slot routineCount-value :: <UInt16>;
  sealed inline-only array slot routineRecords-array ::
	<RoutineRecord>,
    length: 1,
    address-getter: routineRecords-value;
  pack: 2;
  c-name: "struct RoutineDescriptor";
end;
define C-pointer-type <RoutineDescriptor*> => <RoutineDescriptor>;
define C-pointer-type <RoutineDescriptor**> => <RoutineDescriptor*>;
define C-pointer-type <RoutineDescriptorPtr> => <RoutineDescriptor>;
define C-pointer-type <RoutineDescriptorHandle> => <RoutineDescriptorPtr>;

define C-struct <MixedModeStateRecord>
  sealed inline-only slot state1-value   :: <UInt32>;
  sealed inline-only slot state2-value   :: <UInt32>;
  sealed inline-only slot state3-value   :: <UInt32>;
  sealed inline-only slot state4-value   :: <UInt32>;
  pack: 2;
  c-name: "struct MixedModeStateRecord";
end;
define C-pointer-type <MixedModeStateRecord*> => <MixedModeStateRecord>;
define C-pointer-type <MixedModeStateRecord**> => <MixedModeStateRecord*>;
// unnamed enum:
define inline-only constant $kCallingConventionWidth   = 4;
define inline-only constant $kCallingConventionPhase   = 0;
define inline-only constant $kCallingConventionMask    = #x0F;
define inline-only constant $kResultSizeWidth          = 2;
define inline-only constant $kResultSizePhase          = $kCallingConventionWidth;
define inline-only constant $kResultSizeMask           = #x30;
define inline-only constant $kStackParameterWidth      = 2;
define inline-only constant $kStackParameterPhase      = $kCallingConventionWidth + $kResultSizeWidth;
define inline-only constant $kStackParameterMask       = as(<C-both-long>,as(<machine-word>, #xFFFFFFC0));
define inline-only constant $kRegisterResultLocationWidth = 5;
define inline-only constant $kRegisterResultLocationPhase = $kCallingConventionWidth + $kResultSizeWidth;
define inline-only constant $kRegisterParameterWidth   = 5;
define inline-only constant $kRegisterParameterPhase   = $kCallingConventionWidth + $kResultSizeWidth + $kRegisterResultLocationWidth;
define inline-only constant $kRegisterParameterMask    = as(<machine-word>, #x7FFFF800);
define inline-only constant $kRegisterParameterSizePhase = 0;
define inline-only constant $kRegisterParameterSizeWidth = 2;
define inline-only constant $kRegisterParameterWhichPhase = $kRegisterParameterSizeWidth;
define inline-only constant $kRegisterParameterWhichWidth = 3;
define inline-only constant $kDispatchedSelectorSizeWidth = 2;
define inline-only constant $kDispatchedSelectorSizePhase = $kCallingConventionWidth + $kResultSizeWidth;
define inline-only constant $kDispatchedParameterPhase = $kCallingConventionWidth + $kResultSizeWidth + $kDispatchedSelectorSizeWidth;
define inline-only constant $kSpecialCaseSelectorWidth = 6;
define inline-only constant $kSpecialCaseSelectorPhase = $kCallingConventionWidth;
define inline-only constant $kSpecialCaseSelectorMask  = #x03F0;

// unnamed enum:
define inline-only constant $kSpecialCase              = #x000F;

// unnamed enum:
define inline-only constant $kSpecialCaseHighHook      = 0;
define inline-only constant $kSpecialCaseCaretHook     = 0;
define inline-only constant $kSpecialCaseEOLHook       = 1;
define inline-only constant $kSpecialCaseWidthHook     = 2;
define inline-only constant $kSpecialCaseTextWidthHook = 2;
define inline-only constant $kSpecialCaseNWidthHook    = 3;
define inline-only constant $kSpecialCaseDrawHook      = 4;
define inline-only constant $kSpecialCaseHitTestHook   = 5;
define inline-only constant $kSpecialCaseTEFindWord    = 6;
define inline-only constant $kSpecialCaseProtocolHandler = 7;
define inline-only constant $kSpecialCaseSocketListener = 8;
define inline-only constant $kSpecialCaseTERecalc      = 9;
define inline-only constant $kSpecialCaseTEDoText      = 10;
define inline-only constant $kSpecialCaseGNEFilterProc = 11;
define inline-only constant $kSpecialCaseMBarHook      = 12;


define inline-only C-function NewRoutineDescriptor
  parameter theProc    :: <ProcPtr>;
  parameter theProcInfo :: <ProcInfoType>;
  parameter theISA     :: <ISAType>;
  result value :: <UniversalProcPtr>;
  c-name: "NewRoutineDescriptor";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeRoutineDescriptor
  parameter theProcPtr :: <UniversalProcPtr>;
  c-name: "DisposeRoutineDescriptor";
  c-modifiers: "pascal";
end;

define inline-only C-function NewFatRoutineDescriptor
  parameter theM68kProc :: <ProcPtr>;
  parameter thePowerPCProc :: <ProcPtr>;
  parameter theProcInfo :: <ProcInfoType>;
  result value :: <UniversalProcPtr>;
  c-name: "NewFatRoutineDescriptor";
  c-modifiers: "pascal";
end;

