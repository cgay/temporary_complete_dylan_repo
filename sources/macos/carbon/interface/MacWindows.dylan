Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "MacWindows.h"; do not edit.

define inline constant <PropertyCreator> = <OSType>;
define C-pointer-type <PropertyCreator*> => <PropertyCreator>;
define C-pointer-type <PropertyCreator**> => <PropertyCreator*>;
define inline constant <PropertyTag> = <OSType>;
define C-pointer-type <PropertyTag*> => <PropertyTag>;
define C-pointer-type <PropertyTag**> => <PropertyTag*>;
define inline constant <WindowClass> = <UInt32>;
define C-pointer-type <WindowClass*> => <WindowClass>;
define C-pointer-type <WindowClass**> => <WindowClass*>;
// unnamed enum:
define inline-only constant $kAlertWindowClass         = 1;
define inline-only constant $kMovableAlertWindowClass  = 2;
define inline-only constant $kModalWindowClass         = 3;
define inline-only constant $kMovableModalWindowClass  = 4;
define inline-only constant $kFloatingWindowClass      = 5;
define inline-only constant $kDocumentWindowClass      = 6;

define inline constant <WindowAttributes> = <UInt32>;
define C-pointer-type <WindowAttributes*> => <WindowAttributes>;
define C-pointer-type <WindowAttributes**> => <WindowAttributes*>;
// unnamed enum:
define inline-only constant $kWindowNoAttributes       = 0;
define inline-only constant $kWindowCloseBoxAttribute  = ash(1, 0);
define inline-only constant $kWindowHorizontalZoomAttribute = ash(1, 1);
define inline-only constant $kWindowVerticalZoomAttribute = ash(1, 2);
define inline-only constant $kWindowFullZoomAttribute  = logior($kWindowVerticalZoomAttribute, $kWindowHorizontalZoomAttribute);
define inline-only constant $kWindowCollapseBoxAttribute = ash(1, 3);
define inline-only constant $kWindowResizableAttribute = ash(1, 4);
define inline-only constant $kWindowSideTitlebarAttribute = ash(1, 5);
define inline-only constant $kWindowNoUpdatesAttribute = ash(1, 16);
define inline-only constant $kWindowNoActivatesAttribute = ash(1, 17);
define inline-only constant $kWindowStandardDocumentAttributes = logior($kWindowCloseBoxAttribute, $kWindowFullZoomAttribute, $kWindowCollapseBoxAttribute, $kWindowResizableAttribute);
define inline-only constant $kWindowStandardFloatingAttributes = logior($kWindowCloseBoxAttribute, $kWindowCollapseBoxAttribute);

// unnamed enum:
define inline-only constant $gestaltWindowMgrAttr      = FOUR_CHAR_CODE('w', 'i', 'n', 'd');
define inline-only constant $gestaltWindowMgrPresent   = ash(1, 0);

// unnamed enum:
define inline-only constant $errInvalidWindowPtr       = -5600;
define inline-only constant $errUnsupportedWindowAttributesForClass = -5601;
define inline-only constant $errWindowDoesNotHaveProxy = -5602;
define inline-only constant $errInvalidWindowProperty  = -5603;
define inline-only constant $errWindowPropertyNotFound = -5604;
define inline-only constant $errUnrecognizedWindowClass = -5605;
define inline-only constant $errCorruptWindowDescription = -5606;
define inline-only constant $errUserWantsToDragWindow  = -5607;
define inline-only constant $errWindowsAlreadyInitialized = -5608;
define inline-only constant $errFloatingWindowsNotInitialized = -5609;

// unnamed enum:
define inline-only constant $kWindowDefProcType        = FOUR_CHAR_CODE('W', 'D', 'E', 'F');

// unnamed enum:
define inline-only constant $kStandardWindowDefinition = 0;
define inline-only constant $kRoundWindowDefinition    = 1;
define inline-only constant $kFloatingWindowDefinition = 124;

// unnamed enum:
define inline-only constant $kDocumentWindowVariantCode = 0;
define inline-only constant $kModalDialogVariantCode   = 1;
define inline-only constant $kPlainDialogVariantCode   = 2;
define inline-only constant $kShadowDialogVariantCode  = 3;
define inline-only constant $kMovableModalDialogVariantCode = 5;
define inline-only constant $kAlertVariantCode         = 7;
define inline-only constant $kMovableAlertVariantCode  = 9;
define inline-only constant $kSideFloaterVariantCode   = 8;

// unnamed enum:
define inline-only constant $documentProc              = 0;
define inline-only constant $dBoxProc                  = 1;
define inline-only constant $plainDBox                 = 2;
define inline-only constant $altDBoxProc               = 3;
define inline-only constant $noGrowDocProc             = 4;
define inline-only constant $movableDBoxProc           = 5;
define inline-only constant $zoomDocProc               = 8;
define inline-only constant $zoomNoGrow                = 12;
define inline-only constant $rDocProc                  = 16;
define inline-only constant $floatProc                 = 1985;
define inline-only constant $floatGrowProc             = 1987;
define inline-only constant $floatZoomProc             = 1989;
define inline-only constant $floatZoomGrowProc         = 1991;
define inline-only constant $floatSideProc             = 1993;
define inline-only constant $floatSideGrowProc         = 1995;
define inline-only constant $floatSideZoomProc         = 1997;
define inline-only constant $floatSideZoomGrowProc     = 1999;

// unnamed enum:
define inline-only constant $kWindowDocumentDefProcResID = 64;
define inline-only constant $kWindowDialogDefProcResID = 65;
define inline-only constant $kWindowUtilityDefProcResID = 66;
define inline-only constant $kWindowUtilitySideTitleDefProcResID = 67;

// unnamed enum:
define inline-only constant $kWindowDocumentProc       = 1024;
define inline-only constant $kWindowGrowDocumentProc   = 1025;
define inline-only constant $kWindowVertZoomDocumentProc = 1026;
define inline-only constant $kWindowVertZoomGrowDocumentProc = 1027;
define inline-only constant $kWindowHorizZoomDocumentProc = 1028;
define inline-only constant $kWindowHorizZoomGrowDocumentProc = 1029;
define inline-only constant $kWindowFullZoomDocumentProc = 1030;
define inline-only constant $kWindowFullZoomGrowDocumentProc = 1031;

// unnamed enum:
define inline-only constant $kWindowPlainDialogProc    = 1040;
define inline-only constant $kWindowShadowDialogProc   = 1041;
define inline-only constant $kWindowModalDialogProc    = 1042;
define inline-only constant $kWindowMovableModalDialogProc = 1043;
define inline-only constant $kWindowAlertProc          = 1044;
define inline-only constant $kWindowMovableAlertProc   = 1045;

// unnamed enum:
define inline-only constant $kWindowMovableModalGrowProc = 1046;

// unnamed enum:
define inline-only constant $kWindowFloatProc          = 1057;
define inline-only constant $kWindowFloatGrowProc      = 1059;
define inline-only constant $kWindowFloatVertZoomProc  = 1061;
define inline-only constant $kWindowFloatVertZoomGrowProc = 1063;
define inline-only constant $kWindowFloatHorizZoomProc = 1065;
define inline-only constant $kWindowFloatHorizZoomGrowProc = 1067;
define inline-only constant $kWindowFloatFullZoomProc  = 1069;
define inline-only constant $kWindowFloatFullZoomGrowProc = 1071;

// unnamed enum:
define inline-only constant $kWindowFloatSideProc      = 1073;
define inline-only constant $kWindowFloatSideGrowProc  = 1075;
define inline-only constant $kWindowFloatSideVertZoomProc = 1077;
define inline-only constant $kWindowFloatSideVertZoomGrowProc = 1079;
define inline-only constant $kWindowFloatSideHorizZoomProc = 1081;
define inline-only constant $kWindowFloatSideHorizZoomGrowProc = 1083;
define inline-only constant $kWindowFloatSideFullZoomProc = 1085;
define inline-only constant $kWindowFloatSideFullZoomGrowProc = 1087;

// unnamed enum:
define inline-only constant $kWindowNoPosition         = #x0000;
define inline-only constant $kWindowDefaultPosition    = #x0000;
define inline-only constant $kWindowCenterMainScreen   = #x280A;
define inline-only constant $kWindowAlertPositionMainScreen = #x300A;
define inline-only constant $kWindowStaggerMainScreen  = #x380A;
define inline-only constant $kWindowCenterParentWindow = #xA80A;
define inline-only constant $kWindowAlertPositionParentWindow = #xB00A;
define inline-only constant $kWindowStaggerParentWindow = #xB80A;
define inline-only constant $kWindowCenterParentWindowScreen = #x680A;
define inline-only constant $kWindowAlertPositionParentWindowScreen = #x700A;
define inline-only constant $kWindowStaggerParentWindowScreen = #x780A;

define inline constant <WindowPositionMethod> = <UInt32>;
define C-pointer-type <WindowPositionMethod*> => <WindowPositionMethod>;
define C-pointer-type <WindowPositionMethod**> => <WindowPositionMethod*>;
// unnamed enum:
define inline-only constant $kWindowCenterOnMainScreen = #x00000001;
define inline-only constant $kWindowCenterOnParentWindow = #x00000002;
define inline-only constant $kWindowCenterOnParentWindowScreen = #x00000003;
define inline-only constant $kWindowCascadeOnMainScreen = #x00000004;
define inline-only constant $kWindowCascadeOnParentWindow = #x00000005;
define inline-only constant $kWIndowCascadeOnParentWindowScreen = #x00000006;
define inline-only constant $kWindowAlertPositionOnMainScreen = #x00000007;
define inline-only constant $kWindowAlertPositionOnParentWindow = #x00000008;
define inline-only constant $kWindowAlertPositionOnParentWindowScreen = #x00000009;

// unnamed enum:
define inline-only constant $kWindowTitleBarRgn        = 0;
define inline-only constant $kWindowTitleTextRgn       = 1;
define inline-only constant $kWindowCloseBoxRgn        = 2;
define inline-only constant $kWindowZoomBoxRgn         = 3;
define inline-only constant $kWindowDragRgn            = 5;
define inline-only constant $kWindowGrowRgn            = 6;
define inline-only constant $kWindowCollapseBoxRgn     = 7;
define inline-only constant $kWindowTitleProxyIconRgn  = 8;
define inline-only constant $kWindowStructureRgn       = 32;
define inline-only constant $kWindowContentRgn         = 33;

define inline constant <WindowRegionCode> = <UInt16>;
define C-pointer-type <WindowRegionCode*> => <WindowRegionCode>;
define C-pointer-type <WindowRegionCode**> => <WindowRegionCode*>;

define C-struct <GetWindowRegionRec>
  sealed inline-only slot winRgn-value   :: <RgnHandle>;
  sealed inline-only slot regionCode-value :: <WindowRegionCode>;
  pack: 2;
  c-name: "struct GetWindowRegionRec";
end;
define C-pointer-type <GetWindowRegionRec*> => <GetWindowRegionRec>;
define C-pointer-type <GetWindowRegionRec**> => <GetWindowRegionRec*>;
define C-pointer-type <GetWindowRegionPtr> => <GetWindowRegionRec>;
define C-pointer-type <GetWindowRegionRecPtr> => <GetWindowRegionRec>;

define C-struct <SetupWindowProxyDragImageRec>
  sealed inline-only slot imageGWorld-value :: <GWorldPtr>;
  sealed inline-only slot imageRgn-value :: <RgnHandle>;
  sealed inline-only slot outlineRgn-value :: <RgnHandle>;
  pack: 2;
  c-name: "struct SetupWindowProxyDragImageRec";
end;
define C-pointer-type <SetupWindowProxyDragImageRec*> => <SetupWindowProxyDragImageRec>;
define C-pointer-type <SetupWindowProxyDragImageRec**> => <SetupWindowProxyDragImageRec*>;

define C-struct <MeasureWindowTitleRec>
  sealed inline-only slot fullTitleWidth-value :: <SInt16>;
  sealed inline-only slot titleTextWidth-value :: <SInt16>;
  sealed inline-only slot isUnicodeTitle-value :: <MacBoolean>;
  sealed inline-only slot unused-value   :: <MacBoolean>;
  pack: 2;
  c-name: "struct MeasureWindowTitleRec";
end;
define C-pointer-type <MeasureWindowTitleRec*> => <MeasureWindowTitleRec>;
define C-pointer-type <MeasureWindowTitleRec**> => <MeasureWindowTitleRec*>;
define C-pointer-type <MeasureWindowTitleRecPtr> => <MeasureWindowTitleRec>;
// unnamed enum:
define inline-only constant $dialogKind                = 2;
define inline-only constant $userKind                  = 8;
define inline-only constant $kDialogWindowKind         = 2;
define inline-only constant $kApplicationWindowKind    = 8;

// unnamed enum:
define inline-only constant $inDesk                    = 0;
define inline-only constant $inNoWindow                = 0;
define inline-only constant $inMenuBar                 = 1;
define inline-only constant $inSysWindow               = 2;
define inline-only constant $inContent                 = 3;
define inline-only constant $inDrag                    = 4;
define inline-only constant $inGrow                    = 5;
define inline-only constant $inGoAway                  = 6;
define inline-only constant $inZoomIn                  = 7;
define inline-only constant $inZoomOut                 = 8;
define inline-only constant $inCollapseBox             = 11;
define inline-only constant $inProxyIcon               = 12;

// unnamed enum:
define inline-only constant $wNoHit                    = 0;
define inline-only constant $wInContent                = 1;
define inline-only constant $wInDrag                   = 2;
define inline-only constant $wInGrow                   = 3;
define inline-only constant $wInGoAway                 = 4;
define inline-only constant $wInZoomIn                 = 5;
define inline-only constant $wInZoomOut                = 6;
define inline-only constant $wInCollapseBox            = 9;
define inline-only constant $wInProxyIcon              = 10;

// unnamed enum:
define inline-only constant $kWindowMsgDraw            = 0;
define inline-only constant $kWindowMsgHitTest         = 1;
define inline-only constant $kWindowMsgCalculateShape  = 2;
define inline-only constant $kWindowMsgInitialize      = 3;
define inline-only constant $kWindowMsgCleanUp         = 4;
define inline-only constant $kWindowMsgDrawGrowOutline = 5;
define inline-only constant $kWindowMsgDrawGrowBox     = 6;

// unnamed enum:
define inline-only constant $kWindowMsgGetFeatures     = 7;
define inline-only constant $kWindowMsgGetRegion       = 8;

// unnamed enum:
define inline-only constant $kWindowMsgDragHilite      = 9;
define inline-only constant $kWindowMsgModified        = 10;
define inline-only constant $kWindowMsgDrawInCurrentPort = 11;
define inline-only constant $kWindowMsgSetupProxyDragImage = 12;
define inline-only constant $kWindowMsgStateChanged    = 13;
define inline-only constant $kWindowMsgMeasureTitle    = 14;

// unnamed enum:
define inline-only constant $wDraw                     = 0;
define inline-only constant $wHit                      = 1;
define inline-only constant $wCalcRgns                 = 2;
define inline-only constant $wNew                      = 3;
define inline-only constant $wDispose                  = 4;
define inline-only constant $wGrow                     = 5;
define inline-only constant $wDrawGIcon                = 6;

// unnamed enum:
define inline-only constant $kWindowStateTitleChanged  = ash(1, 0);
define inline-only constant $kWindowStateSizeChanged   = ash(1, 1);
define inline-only constant $kWindowStatePositionChanged = ash(1, 2);
define inline-only constant $kWindowStateZOrderChanged = ash(1, 3);
define inline-only constant $kWindowStateVisibilityChanged = ash(1, 4);
define inline-only constant $kWindowStateHiliteChanged = ash(1, 5);
define inline-only constant $kWindowStateCollapseChanged = ash(1, 6);

// unnamed enum:
define inline-only constant $kWindowCanGrow            = ash(1, 0);
define inline-only constant $kWindowCanZoom            = ash(1, 1);
define inline-only constant $kWindowCanCollapse        = ash(1, 2);
define inline-only constant $kWindowIsModal            = ash(1, 3);
define inline-only constant $kWindowCanGetWindowRegion = ash(1, 4);
define inline-only constant $kWindowIsAlert            = ash(1, 5);
define inline-only constant $kWindowHasTitleBar        = ash(1, 6);

// unnamed enum:
define inline-only constant $kWindowSupportsDragHilite = ash(1, 7);
define inline-only constant $kWindowSupportsModifiedBit = ash(1, 8);
define inline-only constant $kWindowCanDrawInCurrentPort = ash(1, 9);
define inline-only constant $kWindowCanSetupProxyDragImage = ash(1, 10);
define inline-only constant $kWindowCanMeasureTitle    = ash(1, 11);
define inline-only constant $kWindowWantsDisposeAtProcessDeath = ash(1, 12);

// unnamed enum:
define inline-only constant $deskPatID                 = 16;

// unnamed enum:
define inline-only constant $wContentColor             = 0;
define inline-only constant $wFrameColor               = 1;
define inline-only constant $wTextColor                = 2;
define inline-only constant $wHiliteColor              = 3;
define inline-only constant $wTitleBarColor            = 4;

// unnamed enum:
define inline-only constant $kMouseUpOutOfSlop         = c-type-cast(<C-both-long>,as(<machine-word>, #x80008000));


define C-struct <WinCTab>
  sealed inline-only slot wCSeed-value   :: <C-both-long>;
  sealed inline-only slot wCReserved     :: <C-short>;
  sealed inline-only slot ctSize-value   :: <C-short>;
  sealed inline-only array slot ctTable-array :: <ColorSpec>,
    length: 5,
    address-getter: ctTable-value;
  pack: 2;
  c-name: "struct WinCTab";
end;
define C-pointer-type <WinCTab*> => <WinCTab>;
define C-pointer-type <WinCTab**> => <WinCTab*>;
define C-pointer-type <WCTabPtr> => <WinCTab>;
define C-pointer-type <WCTabHandle> => <WCTabPtr>;
define C-pointer-type <WindowRecord*> => <WindowRecord>;
define C-pointer-type <WindowRecord**> => <WindowRecord*>;
define C-pointer-type <WindowPeek> => <WindowRecord>;

define C-struct <WindowRecord>
  sealed inline-only slot port-value     :: <GrafPort>;
  sealed inline-only slot windowKind-value :: <C-short>;
  sealed inline-only slot visible-value  :: <MacBoolean>;
  sealed inline-only slot hilited-value  :: <MacBoolean>;
  sealed inline-only slot goAwayFlag-value :: <MacBoolean>;
  sealed inline-only slot spareFlag      :: <MacBoolean>;
  sealed inline-only slot strucRgn-value :: <RgnHandle>;
  sealed inline-only slot contRgn-value  :: <RgnHandle>;
  sealed inline-only slot updateRgn-value :: <RgnHandle>;
  sealed inline-only slot windowDefProc-value :: <Handle>;
  sealed inline-only slot dataHandle-value :: <Handle>;
  sealed inline-only slot titleHandle-value :: <StringHandle>;
  sealed inline-only slot titleWidth-value :: <C-short>;
  sealed inline-only slot controlList-value :: <Handle>;
  sealed inline-only slot nextWindow-value :: <WindowPeek>;
  sealed inline-only slot windowPic-value :: <PicHandle>;
  sealed inline-only slot refCon-value   :: <C-both-long>;
  pack: 2;
  c-name: "struct WindowRecord";
end;
define C-pointer-type <CWindowRecord*> => <CWindowRecord>;
define C-pointer-type <CWindowRecord**> => <CWindowRecord*>;
define C-pointer-type <CWindowPeek> => <CWindowRecord>;

define C-struct <CWindowRecord>
  sealed inline-only slot port-value     :: <CGrafPort>;
  sealed inline-only slot windowKind-value :: <C-short>;
  sealed inline-only slot visible-value  :: <MacBoolean>;
  sealed inline-only slot hilited-value  :: <MacBoolean>;
  sealed inline-only slot goAwayFlag-value :: <MacBoolean>;
  sealed inline-only slot spareFlag      :: <MacBoolean>;
  sealed inline-only slot strucRgn-value :: <RgnHandle>;
  sealed inline-only slot contRgn-value  :: <RgnHandle>;
  sealed inline-only slot updateRgn-value :: <RgnHandle>;
  sealed inline-only slot windowDefProc-value :: <Handle>;
  sealed inline-only slot dataHandle-value :: <Handle>;
  sealed inline-only slot titleHandle-value :: <StringHandle>;
  sealed inline-only slot titleWidth-value :: <C-short>;
  sealed inline-only slot controlList-value :: <Handle>;
  sealed inline-only slot nextWindow-value :: <CWindowPeek>;
  sealed inline-only slot windowPic-value :: <PicHandle>;
  sealed inline-only slot refCon-value   :: <C-both-long>;
  pack: 2;
  c-name: "struct CWindowRecord";
end;
define C-pointer-type <AuxWinRec*> => <AuxWinRec>;
define C-pointer-type <AuxWinRec**> => <AuxWinRec*>;
define C-pointer-type <AuxWinPtr> => <AuxWinRec>;
define C-pointer-type <AuxWinHandle> => <AuxWinPtr>;

define C-struct <AuxWinRec>
  sealed inline-only slot awNext-value   :: <AuxWinHandle>;
  sealed inline-only slot awOwner-value  :: <WindowPtr>;
  sealed inline-only slot awCTable-value :: <CTabHandle>;
  sealed inline-only slot reserved-value :: <Handle>;
  sealed inline-only slot awFlags-value  :: <C-both-long>;
  sealed inline-only slot awReserved     :: <CTabHandle>;
  sealed inline-only slot awRefCon-value :: <C-both-long>;
  pack: 2;
  c-name: "struct AuxWinRec";
end;
// unnamed enum:
define inline-only constant $kWindowDefinitionVersionOne = 1;
define inline-only constant $kWindowDefinitionVersionTwo = 2;

// unnamed enum:
define inline-only constant $kWindowIsCollapsedState   = ash(1, 0);

define C-struct <BasicWindowDescription%versionOne%1>
  sealed inline-only slot windowDefProc-value :: <SInt16>;
  sealed inline-only slot windowHasCloseBox-value :: <MacBoolean>;
  pack: 2;
end;
define C-struct <BasicWindowDescription%versionTwo%2>
  sealed inline-only slot windowClass-value :: <WindowClass>;
  sealed inline-only slot windowAttributes-value :: <WindowAttributes>;
  pack: 2;
end;
define C-struct <BasicWindowDescription%versionOne%3>
  sealed inline-only slot windowDefProc-value :: <SInt16>;
  sealed inline-only slot windowHasCloseBox-value :: <MacBoolean>;
  pack: 2;
end;
define C-struct <BasicWindowDescription%versionTwo%4>
  sealed inline-only slot windowClass-value :: <WindowClass>;
  sealed inline-only slot windowAttributes-value :: <WindowAttributes>;
  pack: 2;
end;
define C-union <BasicWindowDescription%windowDefinition%5>
  sealed inline-only slot versionOne-value :: <BasicWindowDescription%versionOne%3>, setter: #f;
  sealed inline-only slot versionTwo-value :: <BasicWindowDescription%versionTwo%4>, setter: #f;
  pack: 2;
end;

define C-struct <BasicWindowDescription>
  sealed inline-only slot descriptionSize-value :: <UInt32>;
  sealed inline-only slot windowContentRect-value :: <Rect>;
  sealed inline-only slot windowZoomRect-value :: <Rect>;
  sealed inline-only slot windowRefCon-value :: <UInt32>;
  sealed inline-only slot windowStateFlags-value :: <UInt32>;
  sealed inline-only slot windowPositionMethod-value :: <WindowPositionMethod>;
  sealed inline-only slot windowDefinitionVersion-value :: <UInt32>;
  sealed inline-only slot windowDefinition-value :: <BasicWindowDescription%windowDefinition%5>;
  pack: 2;
  c-name: "struct BasicWindowDescription";
end;
define C-pointer-type <BasicWindowDescription*> => <BasicWindowDescription>;
define C-pointer-type <BasicWindowDescription**> => <BasicWindowDescription*>;
// unnamed enum:
define inline-only constant $kStoredWindowSystemTag    = FOUR_CHAR_CODE('a', 'p', 'p', 'l');
define inline-only constant $kStoredBasicWindowDescriptionID = FOUR_CHAR_CODE('s', 'b', 'a', 's');
define inline-only constant $kStoredWindowPascalTitleID = FOUR_CHAR_CODE('s', '2', '5', '5');

define inline-only constant $kFirstWindowOfClass           =
	c-type-cast(<WindowPtr>,-1);
define inline-only constant $kLastWindowOfClass            =
	c-type-cast(<WindowPtr>,0);

define C-struct <WStateData>
  sealed inline-only slot userState-value :: <Rect>;
  sealed inline-only slot stdState-value :: <Rect>;
  pack: 2;
  c-name: "struct WStateData";
end;
define C-pointer-type <WStateData*> => <WStateData>;
define C-pointer-type <WStateData**> => <WStateData*>;
define C-pointer-type <WStateDataPtr> => <WStateData>;
define C-pointer-type <WStateDataHandle> => <WStateDataPtr>;

define inline-only C-function GetNewCWindow
  parameter windowID   :: <C-short>;
  parameter wStorage   :: <C-void*>;
  parameter behind     :: <WindowPtr>;
  result value :: <WindowPtr>;
  c-name: "GetNewCWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function NewWindow
  parameter wStorage   :: <C-void*>;
  parameter boundsRect ::  /* const */ <Rect*>;
  parameter title      :: <ConstStr255Param>;
  parameter visible    :: <MacBoolean>;
  parameter theProc    :: <C-short>;
  parameter behind     :: <WindowPtr>;
  parameter goAwayFlag :: <MacBoolean>;
  parameter refCon     :: <C-both-long>;
  result value :: <WindowPtr>;
  c-name: "NewWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function GetNewWindow
  parameter windowID   :: <C-short>;
  parameter wStorage   :: <C-void*>;
  parameter behind     :: <WindowPtr>;
  result value :: <WindowPtr>;
  c-name: "GetNewWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function NewCWindow
  parameter wStorage   :: <C-void*>;
  parameter boundsRect ::  /* const */ <Rect*>;
  parameter title      :: <ConstStr255Param>;
  parameter visible    :: <MacBoolean>;
  parameter procID     :: <C-short>;
  parameter behind     :: <WindowPtr>;
  parameter goAwayFlag :: <MacBoolean>;
  parameter refCon     :: <C-both-long>;
  result value :: <WindowPtr>;
  c-name: "NewCWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeWindow
  parameter window     :: <WindowPtr>;
  c-name: "DisposeWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function MacCloseWindow
  parameter window     :: <WindowPtr>;
  c-name: "MacCloseWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function CreateNewWindow
  parameter windowClass :: <WindowClass>;
  parameter attributes :: <WindowAttributes>;
  parameter bounds     ::  /* const */ <Rect*>;
  parameter outWindow  :: <WindowPtr*>;
  result value :: <OSStatus>;
  c-name: "CreateNewWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function CreateWindowFromResource
  parameter resID      :: <SInt16>;
  parameter outWindow  :: <WindowPtr*>;
  result value :: <OSStatus>;
  c-name: "CreateWindowFromResource";
  c-modifiers: "pascal";
end;

define inline-only C-function StoreWindowIntoCollection
  parameter window     :: <WindowPtr>;
  parameter collection :: <MacCollection>;
  result value :: <OSStatus>;
  c-name: "StoreWindowIntoCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function CreateWindowFromCollection
  parameter collection :: <MacCollection>;
  parameter outWindow  :: <WindowPtr*>;
  result value :: <OSStatus>;
  c-name: "CreateWindowFromCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowOwnerCount
  parameter window     :: <WindowPtr>;
  parameter outCount   :: <UInt32*>;
  result value :: <OSStatus>;
  c-name: "GetWindowOwnerCount";
  c-modifiers: "pascal";
end;

define inline-only C-function CloneWindow
  parameter window     :: <WindowPtr>;
  result value :: <OSStatus>;
  c-name: "CloneWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowClass
  parameter window     :: <WindowPtr>;
  parameter outClass   :: <WindowClass*>;
  result value :: <OSStatus>;
  c-name: "GetWindowClass";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowAttributes
  parameter window     :: <WindowPtr>;
  parameter outAttributes :: <WindowAttributes*>;
  result value :: <OSStatus>;
  c-name: "GetWindowAttributes";
  c-modifiers: "pascal";
end;

define inline-only C-function ShowFloatingWindows
  result value :: <OSStatus>;
  c-name: "ShowFloatingWindows";
  c-modifiers: "pascal";
end;

define inline-only C-function HideFloatingWindows
  result value :: <OSStatus>;
  c-name: "HideFloatingWindows";
  c-modifiers: "pascal";
end;

define inline-only C-function AreFloatingWindowsVisible
  result value :: <MacBoolean>;
  c-name: "AreFloatingWindowsVisible";
  c-modifiers: "pascal";
end;

define inline-only C-function FrontNonFloatingWindow
  result value :: <WindowPtr>;
  c-name: "FrontNonFloatingWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWinColor
  parameter window     :: <WindowPtr>;
  parameter newColorTable :: <WCTabHandle>;
  c-name: "SetWinColor";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDeskCPat
  parameter deskPixPat :: <PixPatHandle>;
  c-name: "SetDeskCPat";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowContentColor
  parameter window     :: <WindowPtr>;
  parameter color      :: <RGBColor*>;
  result value :: <OSStatus>;
  c-name: "SetWindowContentColor";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowContentColor
  parameter window     :: <WindowPtr>;
  parameter color      :: <RGBColor*>;
  result value :: <OSStatus>;
  c-name: "GetWindowContentColor";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowContentPattern
  parameter window     :: <WindowPtr>;
  parameter outPixPat  :: <PixPatHandle>;
  result value :: <OSStatus>;
  c-name: "GetWindowContentPattern";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowContentPattern
  parameter window     :: <WindowPtr>;
  parameter pixPat     :: <PixPatHandle>;
  result value :: <OSStatus>;
  c-name: "SetWindowContentPattern";
  c-modifiers: "pascal";
end;

define inline-only C-function ClipAbove
  parameter window     :: <WindowPtr>;
  c-name: "ClipAbove";
  c-modifiers: "pascal";
end;

define inline-only C-function SaveOld
  parameter window     :: <WindowPtr>;
  c-name: "SaveOld";
  c-modifiers: "pascal";
end;

define inline-only C-function DrawNew
  parameter window     :: <WindowPtr>;
  parameter update     :: <MacBoolean>;
  c-name: "DrawNew";
  c-modifiers: "pascal";
end;

define inline-only C-function PaintOne
  parameter window     :: <WindowPtr>;
  parameter clobberedRgn :: <RgnHandle>;
  c-name: "PaintOne";
  c-modifiers: "pascal";
end;

define inline-only C-function PaintBehind
  parameter startWindow :: <WindowPtr>;
  parameter clobberedRgn :: <RgnHandle>;
  c-name: "PaintBehind";
  c-modifiers: "pascal";
end;

define inline-only C-function CalcVis
  parameter window     :: <WindowPtr>;
  c-name: "CalcVis";
  c-modifiers: "pascal";
end;

define inline-only C-function CalcVisBehind
  parameter startWindow :: <WindowPtr>;
  parameter clobberedRgn :: <RgnHandle>;
  c-name: "CalcVisBehind";
  c-modifiers: "pascal";
end;

define inline-only C-function CheckUpdate
  parameter theEvent   :: <EventRecord*>;
  result value :: <MacBoolean>;
  c-name: "CheckUpdate";
  c-modifiers: "pascal";
end;

define inline-only C-function MacFindWindow
  parameter thePoint   :: <Point>;
  parameter window     :: <WindowPtr*>;
  result value :: <C-short>;
  c-name: "MacFindWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function FrontWindow
  result value :: <WindowPtr>;
  c-name: "FrontWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function BringToFront
  parameter window     :: <WindowPtr>;
  c-name: "BringToFront";
  c-modifiers: "pascal";
end;

define inline-only C-function SendBehind
  parameter window     :: <WindowPtr>;
  parameter behindWindow :: <WindowPtr>;
  c-name: "SendBehind";
  c-modifiers: "pascal";
end;

define inline-only C-function SelectWindow
  parameter window     :: <WindowPtr>;
  c-name: "SelectWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function InitWindows
  c-name: "InitWindows";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWMgrPort
  parameter wPort      :: <GrafPtr*>;
  c-name: "GetWMgrPort";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCWMgrPort
  parameter wMgrCPort  :: <CGrafPtr*>;
  c-name: "GetCWMgrPort";
  c-modifiers: "pascal";
end;

define inline-only C-function IsValidWindowPtr
  parameter grafPort   :: <GrafPtr>;
  result value :: <MacBoolean>;
  c-name: "IsValidWindowPtr";
  c-modifiers: "pascal";
end;

define inline-only C-function InitFloatingWindows
  result value :: <OSStatus>;
  c-name: "InitFloatingWindows";
  c-modifiers: "pascal";
end;

define inline-only C-function HiliteWindow
  parameter window     :: <WindowPtr>;
  parameter fHilite    :: <MacBoolean>;
  c-name: "HiliteWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWRefCon
  parameter window     :: <WindowPtr>;
  parameter data       :: <C-both-long>;
  c-name: "SetWRefCon";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWRefCon
  parameter window     :: <WindowPtr>;
  result value :: <C-both-long>;
  c-name: "GetWRefCon";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowPic
  parameter window     :: <WindowPtr>;
  parameter pic        :: <PicHandle>;
  c-name: "SetWindowPic";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowPic
  parameter window     :: <WindowPtr>;
  result value :: <PicHandle>;
  c-name: "GetWindowPic";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWVariant
  parameter window     :: <WindowPtr>;
  result value :: <C-short>;
  c-name: "GetWVariant";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowFeatures
  parameter window     :: <WindowPtr>;
  parameter outFeatures :: <UInt32*>;
  result value :: <OSStatus>;
  c-name: "GetWindowFeatures";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowRegion
  parameter window     :: <WindowPtr>;
  parameter inRegionCode :: <WindowRegionCode>;
  parameter ioWinRgn   :: <RgnHandle>;
  result value :: <OSStatus>;
  c-name: "GetWindowRegion";
  c-modifiers: "pascal";
end;

define inline-only C-function InvalRect
  parameter badRect    ::  /* const */ <Rect*>;
  c-name: "InvalRect";
  c-modifiers: "pascal";
end;

define inline-only C-function InvalRgn
  parameter badRgn     :: <RgnHandle>;
  c-name: "InvalRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function ValidRect
  parameter goodRect   ::  /* const */ <Rect*>;
  c-name: "ValidRect";
  c-modifiers: "pascal";
end;

define inline-only C-function ValidRgn
  parameter goodRgn    :: <RgnHandle>;
  c-name: "ValidRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function BeginUpdate
  parameter window     :: <WindowPtr>;
  c-name: "BeginUpdate";
  c-modifiers: "pascal";
end;

define inline-only C-function EndUpdate
  parameter window     :: <WindowPtr>;
  c-name: "EndUpdate";
  c-modifiers: "pascal";
end;

define inline-only C-function InvalWindowRgn
  parameter window     :: <WindowPtr>;
  parameter region     :: <RgnHandle>;
  result value :: <OSStatus>;
  c-name: "InvalWindowRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function InvalWindowRect
  parameter window     :: <WindowPtr>;
  parameter bounds     ::  /* const */ <Rect*>;
  result value :: <OSStatus>;
  c-name: "InvalWindowRect";
  c-modifiers: "pascal";
end;

define inline-only C-function ValidWindowRgn
  parameter window     :: <WindowPtr>;
  parameter region     :: <RgnHandle>;
  result value :: <OSStatus>;
  c-name: "ValidWindowRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function ValidWindowRect
  parameter window     :: <WindowPtr>;
  parameter bounds     ::  /* const */ <Rect*>;
  result value :: <OSStatus>;
  c-name: "ValidWindowRect";
  c-modifiers: "pascal";
end;

define inline-only C-function DrawGrowIcon
  parameter window     :: <WindowPtr>;
  c-name: "DrawGrowIcon";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWTitle
  parameter window     :: <WindowPtr>;
  parameter title      :: <ConstStr255Param>;
  c-name: "SetWTitle";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWTitle
  parameter window     :: <WindowPtr>;
  parameter title      :: <Str255>;
  c-name: "GetWTitle";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowProxyFSSpec
  parameter window     :: <WindowPtr>;
  parameter inFile     ::  /* const */ <FSSpec*>;
  result value :: <OSStatus>;
  c-name: "SetWindowProxyFSSpec";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowProxyFSSpec
  parameter window     :: <WindowPtr>;
  parameter outFile    :: <FSSpec*>;
  result value :: <OSStatus>;
  c-name: "GetWindowProxyFSSpec";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowProxyAlias
  parameter window     :: <WindowPtr>;
  parameter alias      :: <AliasHandle>;
  result value :: <OSStatus>;
  c-name: "SetWindowProxyAlias";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowProxyAlias
  parameter window     :: <WindowPtr>;
  parameter alias      :: <AliasHandle*>;
  result value :: <OSStatus>;
  c-name: "GetWindowProxyAlias";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowProxyCreatorAndType
  parameter window     :: <WindowPtr>;
  parameter fileCreator :: <OSType>;
  parameter fileType   :: <OSType>;
  parameter vRefNum    :: <SInt16>;
  result value :: <OSStatus>;
  c-name: "SetWindowProxyCreatorAndType";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowProxyIcon
  parameter window     :: <WindowPtr>;
  parameter outIcon    :: <IconRef*>;
  result value :: <OSStatus>;
  c-name: "GetWindowProxyIcon";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowProxyIcon
  parameter window     :: <WindowPtr>;
  parameter icon       :: <IconRef>;
  result value :: <OSStatus>;
  c-name: "SetWindowProxyIcon";
  c-modifiers: "pascal";
end;

define inline-only C-function RemoveWindowProxy
  parameter window     :: <WindowPtr>;
  result value :: <OSStatus>;
  c-name: "RemoveWindowProxy";
  c-modifiers: "pascal";
end;

define inline-only C-function BeginWindowProxyDrag
  parameter window     :: <WindowPtr>;
  parameter outNewDrag :: <DragReference*>;
  parameter outDragOutlineRgn :: <RgnHandle>;
  result value :: <OSStatus>;
  c-name: "BeginWindowProxyDrag";
  c-modifiers: "pascal";
end;

define inline-only C-function EndWindowProxyDrag
  parameter window     :: <WindowPtr>;
  parameter theDrag    :: <DragReference>;
  result value :: <OSStatus>;
  c-name: "EndWindowProxyDrag";
  c-modifiers: "pascal";
end;

define inline-only C-function TrackWindowProxyFromExistingDrag
  parameter window     :: <WindowPtr>;
  parameter startPt    :: <Point>;
  parameter drag       :: <DragReference>;
  parameter inDragOutlineRgn :: <RgnHandle>;
  result value :: <OSStatus>;
  c-name: "TrackWindowProxyFromExistingDrag";
  c-modifiers: "pascal";
end;

define inline-only C-function TrackWindowProxyDrag
  parameter window     :: <WindowPtr>;
  parameter startPt    :: <Point>;
  result value :: <OSStatus>;
  c-name: "TrackWindowProxyDrag";
  c-modifiers: "pascal";
end;

define inline-only C-function IsWindowModified
  parameter window     :: <WindowPtr>;
  result value :: <MacBoolean>;
  c-name: "IsWindowModified";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowModified
  parameter window     :: <WindowPtr>;
  parameter modified   :: <MacBoolean>;
  result value :: <OSStatus>;
  c-name: "SetWindowModified";
  c-modifiers: "pascal";
end;

define inline-only C-function IsWindowPathSelectClick
  parameter window     :: <WindowPtr>;
  parameter event      :: <EventRecord*>;
  result value :: <MacBoolean>;
  c-name: "IsWindowPathSelectClick";
  c-modifiers: "pascal";
end;

define inline-only C-function WindowPathSelect
  parameter window     :: <WindowPtr>;
  parameter menu       :: <MenuHandle>;
  parameter outMenuResult :: <SInt32*>;
  result value :: <OSStatus>;
  c-name: "WindowPathSelect";
  c-modifiers: "pascal";
end;

define inline-only C-function HiliteWindowFrameForDrag
  parameter window     :: <WindowPtr>;
  parameter hilited    :: <MacBoolean>;
  result value :: <OSStatus>;
  c-name: "HiliteWindowFrameForDrag";
  c-modifiers: "pascal";
end;
define inline constant <WindowTransitionEffect> = <UInt32>;
define C-pointer-type <WindowTransitionEffect*> => <WindowTransitionEffect>;
define C-pointer-type <WindowTransitionEffect**> => <WindowTransitionEffect*>;
// unnamed enum:
define inline-only constant $kWindowZoomTransitionEffect = 1;

define inline constant <WindowTransitionAction> = <UInt32>;
define C-pointer-type <WindowTransitionAction*> => <WindowTransitionAction>;
define C-pointer-type <WindowTransitionAction**> => <WindowTransitionAction*>;
// unnamed enum:
define inline-only constant $kWindowShowTransitionAction = 1;
define inline-only constant $kWindowHideTransitionAction = 2;


define inline-only C-function MacMoveWindow
  parameter window     :: <WindowPtr>;
  parameter hGlobal    :: <C-short>;
  parameter vGlobal    :: <C-short>;
  parameter front      :: <MacBoolean>;
  c-name: "MacMoveWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function SizeWindow
  parameter window     :: <WindowPtr>;
  parameter w          :: <C-short>;
  parameter h          :: <C-short>;
  parameter fUpdate    :: <MacBoolean>;
  c-name: "SizeWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function GrowWindow
  parameter window     :: <WindowPtr>;
  parameter startPt    :: <Point>;
  parameter bBox       ::  /* const */ <Rect*>;
  result value :: <C-both-long>;
  c-name: "GrowWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function DragWindow
  parameter window     :: <WindowPtr>;
  parameter startPt    :: <Point>;
  parameter boundsRect ::  /* const */ <Rect*>;
  c-name: "DragWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function ZoomWindow
  parameter window     :: <WindowPtr>;
  parameter partCode   :: <C-short>;
  parameter front      :: <MacBoolean>;
  c-name: "ZoomWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function IsWindowCollapsable
  parameter window     :: <WindowPtr>;
  result value :: <MacBoolean>;
  c-name: "IsWindowCollapsable";
  c-modifiers: "pascal";
end;

define inline-only C-function IsWindowCollapsed
  parameter window     :: <WindowPtr>;
  result value :: <MacBoolean>;
  c-name: "IsWindowCollapsed";
  c-modifiers: "pascal";
end;

define inline-only C-function CollapseWindow
  parameter window     :: <WindowPtr>;
  parameter collapse   :: <MacBoolean>;
  result value :: <OSStatus>;
  c-name: "CollapseWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function CollapseAllWindows
  parameter collapse   :: <MacBoolean>;
  result value :: <OSStatus>;
  c-name: "CollapseAllWindows";
  c-modifiers: "pascal";
end;

define inline-only C-function RepositionWindow
  parameter window     :: <WindowPtr>;
  parameter parentWindow :: <WindowPtr>;
  parameter method%1   :: <WindowPositionMethod>;
  result value :: <OSStatus>;
  c-name: "RepositionWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowBounds
  parameter window     :: <WindowPtr>;
  parameter regionCode :: <WindowRegionCode>;
  parameter globalBounds ::  /* const */ <Rect*>;
  result value :: <OSStatus>;
  c-name: "SetWindowBounds";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowBounds
  parameter window     :: <WindowPtr>;
  parameter regionCode :: <WindowRegionCode>;
  parameter globalBounds :: <Rect*>;
  result value :: <OSStatus>;
  c-name: "GetWindowBounds";
  c-modifiers: "pascal";
end;

define inline-only C-function MoveWindowStructure
  parameter window     :: <WindowPtr>;
  parameter hGlobal    :: <C-short>;
  parameter vGlobal    :: <C-short>;
  result value :: <OSStatus>;
  c-name: "MoveWindowStructure";
  c-modifiers: "pascal";
end;

define inline-only C-function ResizeWindow
  parameter window     :: <WindowPtr>;
  parameter startPoint :: <Point>;
  parameter sizeConstraints ::  /* const */ <Rect*>;
  parameter newContentRect :: <Rect*>;
  result value :: <MacBoolean>;
  c-name: "ResizeWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function IsWindowInStandardState
  parameter window     :: <WindowPtr>;
  parameter idealSize  :: <Point*>;
  parameter idealStandardState :: <Rect*>;
  result value :: <MacBoolean>;
  c-name: "IsWindowInStandardState";
  c-modifiers: "pascal";
end;

define inline-only C-function ZoomWindowIdeal
  parameter window     :: <WindowPtr>;
  parameter partCode   :: <SInt16>;
  parameter ioIdealSize :: <Point*>;
  result value :: <OSStatus>;
  c-name: "ZoomWindowIdeal";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowIdealUserState
  parameter window     :: <WindowPtr>;
  parameter userState  :: <Rect*>;
  result value :: <OSStatus>;
  c-name: "GetWindowIdealUserState";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowIdealUserState
  parameter window     :: <WindowPtr>;
  parameter userState  :: <Rect*>;
  result value :: <OSStatus>;
  c-name: "SetWindowIdealUserState";
  c-modifiers: "pascal";
end;

define inline-only C-function HideWindow
  parameter window     :: <WindowPtr>;
  c-name: "HideWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function MacShowWindow
  parameter window     :: <WindowPtr>;
  c-name: "MacShowWindow";
  c-modifiers: "pascal";
end;

define inline-only C-function ShowHide
  parameter window     :: <WindowPtr>;
  parameter showFlag   :: <MacBoolean>;
  c-name: "ShowHide";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowProperty
  parameter window     :: <WindowPtr>;
  parameter propertyCreator :: <PropertyCreator>;
  parameter propertyTag :: <PropertyTag>;
  parameter bufferSize :: <UInt32>;
  parameter actualSize :: <UInt32*>;
  parameter propertyBuffer :: <C-void*>;
  result value :: <OSStatus>;
  c-name: "GetWindowProperty";
  c-modifiers: "pascal";
end;

define inline-only C-function GetWindowPropertySize
  parameter window     :: <WindowPtr>;
  parameter creator    :: <PropertyCreator>;
  parameter tag        :: <PropertyTag>;
  parameter size       :: <UInt32*>;
  result value :: <OSStatus>;
  c-name: "GetWindowPropertySize";
  c-modifiers: "pascal";
end;

define inline-only C-function SetWindowProperty
  parameter window     :: <WindowPtr>;
  parameter propertyCreator :: <PropertyCreator>;
  parameter propertyTag :: <PropertyTag>;
  parameter propertySize :: <UInt32>;
  parameter propertyBuffer :: <C-void*>;
  result value :: <OSStatus>;
  c-name: "SetWindowProperty";
  c-modifiers: "pascal";
end;

define inline-only C-function RemoveWindowProperty
  parameter window     :: <WindowPtr>;
  parameter propertyCreator :: <PropertyCreator>;
  parameter propertyTag :: <PropertyTag>;
  result value :: <OSStatus>;
  c-name: "RemoveWindowProperty";
  c-modifiers: "pascal";
end;

define inline-only C-function PinRect
  parameter theRect    ::  /* const */ <Rect*>;
  parameter thePt      :: <Point>;
  result value :: <C-both-long>;
  c-name: "PinRect";
  c-modifiers: "pascal";
end;

define inline-only C-function GetGrayRgn
  result value :: <RgnHandle>;
  c-name: "GetGrayRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function TrackBox
  parameter window     :: <WindowPtr>;
  parameter thePt      :: <Point>;
  parameter partCode   :: <C-short>;
  result value :: <MacBoolean>;
  c-name: "TrackBox";
  c-modifiers: "pascal";
end;

define inline-only C-function TrackGoAway
  parameter window     :: <WindowPtr>;
  parameter thePt      :: <Point>;
  result value :: <MacBoolean>;
  c-name: "TrackGoAway";
  c-modifiers: "pascal";
end;

define inline-only C-function DragGrayRgn
  parameter theRgn     :: <RgnHandle>;
  parameter startPt    :: <Point>;
  parameter limitRect  ::  /* const */ <Rect*>;
  parameter slopRect   ::  /* const */ <Rect*>;
  parameter axis       :: <C-short>;
  parameter actionProc :: <DragGrayRgnUPP>;
  result value :: <C-both-long>;
  c-name: "DragGrayRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function DragTheRgn
  parameter theRgn     :: <RgnHandle>;
  parameter startPt    :: <Point>;
  parameter limitRect  ::  /* const */ <Rect*>;
  parameter slopRect   ::  /* const */ <Rect*>;
  parameter axis       :: <C-short>;
  parameter actionProc :: <DragGrayRgnUPP>;
  result value :: <C-both-long>;
  c-name: "DragTheRgn";
  c-modifiers: "pascal";
end;

define inline-only C-function GetAuxWin
  parameter window     :: <WindowPtr>;
  parameter awHndl     :: <AuxWinHandle*>;
  result value :: <MacBoolean>;
  c-name: "GetAuxWin";
  c-modifiers: "pascal";
end;
define constant <WindowDefProcPtr> = <C-function-pointer>;
define constant <DeskHookProcPtr> = <C-function-pointer>;
define constant <WindowDefUPP> = <UniversalProcPtr>;
define constant <DeskHookUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppWindowDefProcInfo      = #x00003BB0;

// unnamed enum:
define inline-only constant $uppDeskHookProcInfo       = #x00130802;


