Module:    Motif
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "CutPaste.h"; do not edit.

//	RCSfile: CutPaste.h,v 
//	Revision: 1.24 
//	Date: 93/03/03 16:23:50 
define inline-only constant $XmClipboardFail            =    0;
define inline-only constant $XmClipboardSuccess         =    1;
define inline-only constant $XmClipboardTruncate        =    2;
define inline-only constant $XmClipboardLocked          =    4;
define inline-only constant $XmClipboardBadFormat       =    5;
define inline-only constant $XmClipboardNoData          =    6;
define inline-only constant $ClipboardFail              =    0;
define inline-only constant $ClipboardSuccess           =    1;
define inline-only constant $ClipboardTruncate          =    2;
define inline-only constant $ClipboardLocked            =    4;
define inline-only constant $ClipboardBadFormat         =    5;
define inline-only constant $ClipboardNoData            =    6;

define C-struct <XmClipboardPendingRec>
  sealed inline-only slot DataId-value   :: <C-both-long>;
  sealed inline-only slot PrivateId-value :: <C-both-long>;
  pointer-type-name: <XmClipboardPendingRec*>;
end C-struct <XmClipboardPendingRec>;
define inline constant <XmClipboardPendingList> = <XmClipboardPendingRec*>;

define C-subtype <XmCutPasteProc> ( <C-function-pointer> ) end;
define macro <XmCutPasteProc>-callback-wrapper
 { <XmCutPasteProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter w          :: <Widget>;
  output parameter data-id :: <C-both-long*>;
  output parameter private-id :: <C-both-long*>;
  output parameter reason :: <C-int*>;
 end C-callable-wrapper }
end macro;

define C-subtype <VoidProc> ( <C-function-pointer> ) end;
define macro <VoidProc>-callback-wrapper
 { <VoidProc>-callback-wrapper(?new:name,?old:name) } =>
 { define C-callable-wrapper ?new of ?old
  parameter w          :: <Widget>;
  output parameter data-id :: <C-int*>;
  output parameter private-id :: <C-int*>;
  output parameter reason :: <C-int*>;
 end C-callable-wrapper }
end macro;

define inline-only C-function XmClipboardBeginCopy
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter label      :: <XmString>;
  parameter widget     :: <Widget>;
  parameter callback   :: <VoidProc>;
  output parameter itemid :: <C-both-long*>;
  result value :: <C-int>;
  c-name: "XmClipboardBeginCopy";
end;

define inline-only C-function XmClipboardStartCopy
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter label      :: <XmString>;
  parameter timestamp  :: <C-Time>;
  parameter widget     :: <Widget>;
  parameter callback   :: <XmCutPasteProc>;
  output parameter itemid :: <C-both-long*>;
  result value :: <C-int>;
  c-name: "XmClipboardStartCopy";
end;

define inline-only C-function XmClipboardCopy
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter itemid     :: <C-both-long>;
  parameter format     :: <C-string>;
  parameter buffer     :: <XtPointer>;
  parameter length     :: <C-both-unsigned-long>;
  parameter private-id :: <C-both-long>;
  output parameter dataid :: <C-both-long*>;
  result value :: <C-int>;
  c-name: "XmClipboardCopy";
end;

define inline-only C-function XmClipboardEndCopy
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter itemid     :: <C-both-long>;
  result value :: <C-int>;
  c-name: "XmClipboardEndCopy";
end;

define inline-only C-function XmClipboardCancelCopy
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter itemid     :: <C-both-long>;
  result value :: <C-int>;
  c-name: "XmClipboardCancelCopy";
end;

define inline-only C-function XmClipboardWithdrawFormat
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter data       :: <C-both-long>;
  result value :: <C-int>;
  c-name: "XmClipboardWithdrawFormat";
end;

define inline-only C-function XmClipboardCopyByName
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter data       :: <C-both-long>;
  parameter buffer     :: <XtPointer>;
  parameter length     :: <C-both-unsigned-long>;
  parameter private-id :: <C-both-long>;
  result value :: <C-int>;
  c-name: "XmClipboardCopyByName";
end;

define inline-only C-function XmClipboardUndoCopy
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  result value :: <C-int>;
  c-name: "XmClipboardUndoCopy";
end;

define inline-only C-function XmClipboardLock
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  result value :: <C-int>;
  c-name: "XmClipboardLock";
end;

define inline-only C-function XmClipboardUnlock
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter all-levels :: <X-Boolean>;
  result value :: <C-int>;
  c-name: "XmClipboardUnlock";
end;

define inline-only C-function XmClipboardStartRetrieve
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter timestamp  :: <C-Time>;
  result value :: <C-int>;
  c-name: "XmClipboardStartRetrieve";
end;

define inline-only C-function XmClipboardEndRetrieve
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  result value :: <C-int>;
  c-name: "XmClipboardEndRetrieve";
end;

define inline-only C-function XmClipboardRetrieve
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter format     :: <C-string>;
  parameter buffer     :: <XtPointer>;
  parameter length     :: <C-both-unsigned-long>;
  output parameter outlength :: <C-both-unsigned-long*>;
  output parameter private-id :: <C-both-long*>;
  result value :: <C-int>;
  c-name: "XmClipboardRetrieve";
end;

define inline-only C-function XmClipboardInquireCount
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  output parameter count :: <C-int*>;
  output parameter maxlength :: <C-both-unsigned-long*>;
  result value :: <C-int>;
  c-name: "XmClipboardInquireCount";
end;

define inline-only C-function XmClipboardInquireFormat
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter n          :: <C-int>;
  parameter buffer     :: <XtPointer>;
  parameter bufferlength :: <C-both-unsigned-long>;
  output parameter outlength :: <C-both-unsigned-long*>;
  result value :: <C-int>;
  c-name: "XmClipboardInquireFormat";
end;

define inline-only C-function XmClipboardInquireLength
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter format     :: <C-string>;
  output parameter length :: <C-both-unsigned-long*>;
  result value :: <C-int>;
  c-name: "XmClipboardInquireLength";
end;

define inline-only C-function XmClipboardInquirePendingItems
  parameter display    :: <Display*>;
  parameter window     :: <C-Window>;
  parameter format     :: <C-string>;
  parameter list       :: <XmClipboardPendingList*>;
  output parameter count :: <C-both-unsigned-long*>;
  result value :: <C-int>;
  c-name: "XmClipboardInquirePendingItems";
end;

define inline-only C-function XmClipboardRegisterFormat
  parameter display    :: <Display*>;
  parameter format-name :: <C-string>;
  parameter format-length :: <C-int>;
  result value :: <C-int>;
  c-name: "XmClipboardRegisterFormat";
end;

define sealed domain make (singleton(<XmClipboardPendingRec*>));
define sealed domain initialize (<XmClipboardPendingRec*>);
