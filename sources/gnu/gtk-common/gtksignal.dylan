Module:    gtk-common
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "gtksignal.h"; do not edit.

define C-pointer-type <GtkSignalMarshal*> => <GtkSignalMarshal>;
define C-pointer-type <GtkSignalMarshal**> => <GtkSignalMarshal*>;
define C-pointer-type <GtkSignalDestroy*> => <GtkSignalDestroy>;
define C-pointer-type <GtkSignalDestroy**> => <GtkSignalDestroy*>;
define C-pointer-type <GtkEmissionHook*> => <GtkEmissionHook>;
define C-pointer-type <GtkEmissionHook**> => <GtkEmissionHook*>;
define C-pointer-type <GtkSignalQuery*> => <GtkSignalQuery>;
define C-pointer-type <GtkSignalQuery**> => <GtkSignalQuery*>;

define C-struct <_GtkSignalQuery>
  sealed inline-only slot object-type-value :: <GtkType>;
  sealed inline-only slot signal-id-value :: <guint>;
  sealed inline-only slot signal-name-value ::  /* const */ <gchar*>;
  sealed bitfield slot is-user-signal-value :: <guint>,
    width: 1;
  sealed inline-only slot signal-flags-value :: <GtkSignalRunType>;
  sealed inline-only slot return-val-value :: <GtkType>;
  sealed inline-only slot nparams-value  :: <guint>;
  sealed inline-only slot params-value   ::  /* const */ <GtkType*>;
  pointer-type-name: <_GtkSignalQuery*>;
  c-name: "struct _GtkSignalQuery";
end;

define inline-only C-function gtk-signal-lookup
  parameter name1      ::  /* const */ <gchar*>;
  parameter object_type2 :: <GtkType>;
  result value :: <guint>;
  c-name: "gtk_signal_lookup";
end;

define inline-only C-function gtk-signal-name
  parameter signal_id1 :: <guint>;
  result value :: <gchar*>;
  c-name: "gtk_signal_name";
end;

define inline-only C-function gtk-signal-n-emissions
  parameter object1    :: <GtkObject*>;
  parameter signal_id2 :: <guint>;
  result value :: <guint>;
  c-name: "gtk_signal_n_emissions";
end;

define inline-only C-function gtk-signal-n-emissions-by-name
  parameter object1    :: <GtkObject*>;
  parameter name2      ::  /* const */ <gchar*>;
  result value :: <guint>;
  c-name: "gtk_signal_n_emissions_by_name";
end;

define inline-only C-function gtk-signal-emit-stop
  parameter object1    :: <GtkObject*>;
  parameter signal_id2 :: <guint>;
  c-name: "gtk_signal_emit_stop";
end;

define inline-only C-function gtk-signal-emit-stop-by-name
  parameter object1    :: <GtkObject*>;
  parameter name2      ::  /* const */ <gchar*>;
  c-name: "gtk_signal_emit_stop_by_name";
end;

define inline-only C-function gtk-signal-connect
  parameter object1    :: <GtkObject*>;
  parameter name2      ::  /* const */ <gchar*>;
  parameter func3      :: <GtkSignalFunc>;
  parameter func_data4 :: <gpointer>;
  result value :: <guint>;
  c-name: "gtk_signal_connect";
end;

define inline-only C-function gtk-signal-connect-after
  parameter object1    :: <GtkObject*>;
  parameter name2      ::  /* const */ <gchar*>;
  parameter func3      :: <GtkSignalFunc>;
  parameter func_data4 :: <gpointer>;
  result value :: <guint>;
  c-name: "gtk_signal_connect_after";
end;

define inline-only C-function gtk-signal-connect-object
  parameter object1    :: <GtkObject*>;
  parameter name2      ::  /* const */ <gchar*>;
  parameter func3      :: <GtkSignalFunc>;
  parameter slot_object4 :: <GtkObject*>;
  result value :: <guint>;
  c-name: "gtk_signal_connect_object";
end;

define inline-only C-function gtk-signal-connect-object-after
  parameter object1    :: <GtkObject*>;
  parameter name2      ::  /* const */ <gchar*>;
  parameter func3      :: <GtkSignalFunc>;
  parameter slot_object4 :: <GtkObject*>;
  result value :: <guint>;
  c-name: "gtk_signal_connect_object_after";
end;

define inline-only C-function gtk-signal-connect-full
  parameter object1    :: <GtkObject*>;
  parameter name2      ::  /* const */ <gchar*>;
  parameter func3      :: <GtkSignalFunc>;
  parameter marshal4   :: <GtkCallbackMarshal>;
  parameter data5      :: <gpointer>;
  parameter destroy_func6 :: <GtkDestroyNotify>;
  parameter object_signal7 :: <gint>;
  parameter after8     :: <gint>;
  result value :: <guint>;
  c-name: "gtk_signal_connect_full";
end;

define inline-only C-function gtk-signal-connect-object-while-alive
  parameter object1    :: <GtkObject*>;
  parameter signal2    ::  /* const */ <gchar*>;
  parameter func3      :: <GtkSignalFunc>;
  parameter alive_object4 :: <GtkObject*>;
  c-name: "gtk_signal_connect_object_while_alive";
end;

define inline-only C-function gtk-signal-connect-while-alive
  parameter object1    :: <GtkObject*>;
  parameter signal2    ::  /* const */ <gchar*>;
  parameter func3      :: <GtkSignalFunc>;
  parameter func_data4 :: <gpointer>;
  parameter alive_object5 :: <GtkObject*>;
  c-name: "gtk_signal_connect_while_alive";
end;

define inline-only C-function gtk-signal-disconnect
  parameter object1    :: <GtkObject*>;
  parameter handler_id2 :: <guint>;
  c-name: "gtk_signal_disconnect";
end;

define inline-only C-function gtk-signal-disconnect-by-func
  parameter object1    :: <GtkObject*>;
  parameter func2      :: <GtkSignalFunc>;
  parameter data3      :: <gpointer>;
  c-name: "gtk_signal_disconnect_by_func";
end;

define inline-only C-function gtk-signal-disconnect-by-data
  parameter object1    :: <GtkObject*>;
  parameter data2      :: <gpointer>;
  c-name: "gtk_signal_disconnect_by_data";
end;

define inline-only C-function gtk-signal-handler-block
  parameter object1    :: <GtkObject*>;
  parameter handler_id2 :: <guint>;
  c-name: "gtk_signal_handler_block";
end;

define inline-only C-function gtk-signal-handler-block-by-func
  parameter object1    :: <GtkObject*>;
  parameter func2      :: <GtkSignalFunc>;
  parameter data3      :: <gpointer>;
  c-name: "gtk_signal_handler_block_by_func";
end;

define inline-only C-function gtk-signal-handler-block-by-data
  parameter object1    :: <GtkObject*>;
  parameter data2      :: <gpointer>;
  c-name: "gtk_signal_handler_block_by_data";
end;

define inline-only C-function gtk-signal-handler-unblock
  parameter object1    :: <GtkObject*>;
  parameter handler_id2 :: <guint>;
  c-name: "gtk_signal_handler_unblock";
end;

define inline-only C-function gtk-signal-handler-unblock-by-func
  parameter object1    :: <GtkObject*>;
  parameter func2      :: <GtkSignalFunc>;
  parameter data3      :: <gpointer>;
  c-name: "gtk_signal_handler_unblock_by_func";
end;

define inline-only C-function gtk-signal-handler-unblock-by-data
  parameter object1    :: <GtkObject*>;
  parameter data2      :: <gpointer>;
  c-name: "gtk_signal_handler_unblock_by_data";
end;

define inline-only C-function gtk-signal-handler-pending
  parameter object1    :: <GtkObject*>;
  parameter signal_id2 :: <guint>;
  parameter may_be_blocked3 :: <gboolean>;
  result value :: <guint>;
  c-name: "gtk_signal_handler_pending";
end;

define inline-only C-function gtk-signal-handler-pending-by-func
  parameter object1    :: <GtkObject*>;
  parameter signal_id2 :: <guint>;
  parameter may_be_blocked3 :: <gboolean>;
  parameter func4      :: <GtkSignalFunc>;
  parameter data5      :: <gpointer>;
  result value :: <guint>;
  c-name: "gtk_signal_handler_pending_by_func";
end;

define inline-only C-function gtk-signal-handler-pending-by-id
  parameter object1    :: <GtkObject*>;
  parameter handler_id2 :: <guint>;
  parameter may_be_blocked3 :: <gboolean>;
  result value :: <gint>;
  c-name: "gtk_signal_handler_pending_by_id";
end;

define inline-only C-function gtk-signal-add-emission-hook
  parameter signal_id1 :: <guint>;
  parameter hook_func2 :: <GtkEmissionHook>;
  parameter data3      :: <gpointer>;
  result value :: <guint>;
  c-name: "gtk_signal_add_emission_hook";
end;

define inline-only C-function gtk-signal-add-emission-hook-full
  parameter signal_id1 :: <guint>;
  parameter hook_func2 :: <GtkEmissionHook>;
  parameter data3      :: <gpointer>;
  parameter destroy4   :: <GDestroyNotify>;
  result value :: <guint>;
  c-name: "gtk_signal_add_emission_hook_full";
end;

define inline-only C-function gtk-signal-remove-emission-hook
  parameter signal_id1 :: <guint>;
  parameter hook_id2   :: <guint>;
  c-name: "gtk_signal_remove_emission_hook";
end;

define inline-only C-function gtk-signal-query
  parameter signal_id1 :: <guint>;
  result value :: <GtkSignalQuery*>;
  c-name: "gtk_signal_query";
end;

define inline-only C-function gtk-signal-init
  c-name: "gtk_signal_init";
end;

define inline-only C-function gtk-signal-newv
  parameter name1      ::  /* const */ <gchar*>;
  parameter signal_flags2 :: <GtkSignalRunType>;
  parameter object_type3 :: <GtkType>;
  parameter function_offset4 :: <guint>;
  parameter marshaller5 :: <GtkSignalMarshaller>;
  parameter return_val6 :: <GtkType>;
  parameter nparams7   :: <guint>;
  parameter params8    :: <GtkType*>;
  result value :: <guint>;
  c-name: "gtk_signal_newv";
end;

define inline-only C-function gtk-signal-emitv
  parameter object1    :: <GtkObject*>;
  parameter signal_id2 :: <guint>;
  parameter params3    :: <GtkArg*>;
  c-name: "gtk_signal_emitv";
end;

define inline-only C-function gtk-signal-emitv-by-name
  parameter object1    :: <GtkObject*>;
  parameter name2      ::  /* const */ <gchar*>;
  parameter params3    :: <GtkArg*>;
  c-name: "gtk_signal_emitv_by_name";
end;

define inline-only C-function gtk-signal-handlers-destroy
  parameter object1    :: <GtkObject*>;
  c-name: "gtk_signal_handlers_destroy";
end;

define inline-only C-function gtk-signal-set-funcs
  parameter marshal_func1 :: <GtkSignalMarshal>;
  parameter destroy_func2 :: <GtkSignalDestroy>;
  c-name: "gtk_signal_set_funcs";
end;

define inline constant <GtkSignalMarshal> = <C-function-pointer>;
define inline constant <GtkSignalDestroy> = <C-function-pointer>;
define inline constant <GtkEmissionHook> = <C-function-pointer>;
define inline constant <GtkSignalQuery> = <_GtkSignalQuery>;
define sealed domain make (singleton(<_GtkSignalQuery*>));
define sealed domain initialize (<_GtkSignalQuery*>);
