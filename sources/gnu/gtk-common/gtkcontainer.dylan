Module:    gtk-common
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "gtkcontainer.h"; do not edit.

define C-pointer-type <GtkContainer*> => <GtkContainer>;
define C-pointer-type <GtkContainer**> => <GtkContainer*>;
define C-pointer-type <GtkContainerClass*> => <GtkContainerClass>;
define C-pointer-type <GtkContainerClass**> => <GtkContainerClass*>;

define C-struct <_GtkContainer>
  sealed inline-only slot widget-value   :: <GtkWidget>;
  sealed inline-only slot focus-child-value :: <GtkWidget*>;
  sealed bitfield slot border-width-value :: <guint>,
    width: 16;
  sealed bitfield slot need-resize-value :: <guint>,
    width: 1;
  sealed bitfield slot resize-mode-value :: <guint>,
    width: 2;
  sealed inline-only slot resize-widgets-value :: <GSList*>;
  pointer-type-name: <_GtkContainer*>;
  c-name: "struct _GtkContainer";
end;

define C-struct <_GtkContainerClass>
  sealed inline-only slot parent-class-value :: <GtkWidgetClass>;
  sealed inline-only slot n-child-args-value :: <guint>;
  sealed inline-only slot add-value      :: <C-function-pointer>;
  sealed inline-only slot remove-value   :: <C-function-pointer>;
  sealed inline-only slot check-resize-value :: <C-function-pointer>;
  sealed inline-only slot forall-value   :: <C-function-pointer>;
  sealed inline-only slot focus-value    :: <C-function-pointer>;
  sealed inline-only slot set-focus-child-value :: <C-function-pointer>;
  sealed inline-only slot child-type-value :: <C-function-pointer>;
  sealed inline-only slot set-child-arg-value :: <C-function-pointer>;
  sealed inline-only slot get-child-arg-value :: <C-function-pointer>;
  sealed inline-only slot composite-name-value :: <C-function-pointer>;
  sealed inline-only slot pad1-value     :: <GtkFunction>;
  sealed inline-only slot pad2-value     :: <GtkFunction>;
  pointer-type-name: <_GtkContainerClass*>;
  c-name: "struct _GtkContainerClass";
end;

define inline-only C-function gtk-container-get-type
  result value :: <GtkType>;
  c-name: "gtk_container_get_type";
end;

define inline-only C-function gtk-container-set-border-width
  parameter container1 :: <GtkContainer*>;
  parameter border_width2 :: <guint>;
  c-name: "gtk_container_set_border_width";
end;

define inline-only C-function gtk-container-add
  parameter container1 :: <GtkContainer*>;
  parameter widget2    :: <GtkWidget*>;
  c-name: "gtk_container_add";
end;

define inline-only C-function gtk-container-remove
  parameter container1 :: <GtkContainer*>;
  parameter widget2    :: <GtkWidget*>;
  c-name: "gtk_container_remove";
end;

define inline-only C-function gtk-container-set-resize-mode
  parameter container1 :: <GtkContainer*>;
  parameter resize_mode2 :: <GtkResizeMode>;
  c-name: "gtk_container_set_resize_mode";
end;

define inline-only C-function gtk-container-check-resize
  parameter container1 :: <GtkContainer*>;
  c-name: "gtk_container_check_resize";
end;

define inline-only C-function gtk-container-foreach
  parameter container1 :: <GtkContainer*>;
  parameter callback2  :: <GtkCallback>;
  parameter callback_data3 :: <gpointer>;
  c-name: "gtk_container_foreach";
end;

define inline-only C-function gtk-container-foreach-full
  parameter container1 :: <GtkContainer*>;
  parameter callback2  :: <GtkCallback>;
  parameter marshal3   :: <GtkCallbackMarshal>;
  parameter callback_data4 :: <gpointer>;
  parameter notify5    :: <GtkDestroyNotify>;
  c-name: "gtk_container_foreach_full";
end;

define inline-only C-function gtk-container-children
  parameter container1 :: <GtkContainer*>;
  result value :: <GList*>;
  c-name: "gtk_container_children";
end;

define inline-only C-function gtk-container-focus
  parameter container1 :: <GtkContainer*>;
  parameter direction2 :: <GtkDirectionType>;
  result value :: <gint>;
  c-name: "gtk_container_focus";
end;

define inline-only C-function gtk-container-set-focus-child
  parameter container1 :: <GtkContainer*>;
  parameter child2     :: <GtkWidget*>;
  c-name: "gtk_container_set_focus_child";
end;

define inline-only C-function gtk-container-set-focus-vadjustment
  parameter container1 :: <GtkContainer*>;
  parameter adjustment2 :: <GtkAdjustment*>;
  c-name: "gtk_container_set_focus_vadjustment";
end;

define inline-only C-function gtk-container-set-focus-hadjustment
  parameter container1 :: <GtkContainer*>;
  parameter adjustment2 :: <GtkAdjustment*>;
  c-name: "gtk_container_set_focus_hadjustment";
end;

define inline-only C-function gtk-container-register-toplevel
  parameter container1 :: <GtkContainer*>;
  c-name: "gtk_container_register_toplevel";
end;

define inline-only C-function gtk-container-unregister-toplevel
  parameter container1 :: <GtkContainer*>;
  c-name: "gtk_container_unregister_toplevel";
end;

define inline-only C-function gtk-container-get-toplevels
  result value :: <GList*>;
  c-name: "gtk_container_get_toplevels";
end;

define inline-only C-function gtk-container-resize-children
  parameter container1 :: <GtkContainer*>;
  c-name: "gtk_container_resize_children";
end;

define inline-only C-function gtk-container-child-type
  parameter container1 :: <GtkContainer*>;
  result value :: <GtkType>;
  c-name: "gtk_container_child_type";
end;

define inline-only C-function gtk-container-add-child-arg-type
  parameter arg_name1  ::  /* const */ <gchar*>;
  parameter arg_type2  :: <GtkType>;
  parameter arg_flags3 :: <guint>;
  parameter arg_id4    :: <guint>;
  c-name: "gtk_container_add_child_arg_type";
end;

define inline-only C-function gtk-container-query-child-args
  parameter class_type1 :: <GtkType>;
  parameter arg_flags2 :: <guint32**>;
  parameter nargs3     :: <guint*>;
  result value :: <GtkArg*>;
  c-name: "gtk_container_query_child_args";
end;

define inline-only C-function gtk-container-child-getv
  parameter container1 :: <GtkContainer*>;
  parameter child2     :: <GtkWidget*>;
  parameter n_args3    :: <guint>;
  parameter args4      :: <GtkArg*>;
  c-name: "gtk_container_child_getv";
end;

define inline-only C-function gtk-container-child-setv
  parameter container1 :: <GtkContainer*>;
  parameter child2     :: <GtkWidget*>;
  parameter n_args3    :: <guint>;
  parameter args4      :: <GtkArg*>;
  c-name: "gtk_container_child_setv";
end;

define inline-only C-function gtk-container-addv
  parameter container1 :: <GtkContainer*>;
  parameter widget2    :: <GtkWidget*>;
  parameter n_args3    :: <guint>;
  parameter args4      :: <GtkArg*>;
  c-name: "gtk_container_addv";
end;

define inline-only C-function gtk-container-queue-resize
  parameter container1 :: <GtkContainer*>;
  c-name: "gtk_container_queue_resize";
end;

define inline-only C-function gtk-container-clear-resize-widgets
  parameter container1 :: <GtkContainer*>;
  c-name: "gtk_container_clear_resize_widgets";
end;

define inline-only C-function gtk-container-arg-set
  parameter container1 :: <GtkContainer*>;
  parameter child2     :: <GtkWidget*>;
  parameter arg3       :: <GtkArg*>;
  parameter info4      :: <GtkArgInfo*>;
  c-name: "gtk_container_arg_set";
end;

define inline-only C-function gtk-container-arg-get
  parameter container1 :: <GtkContainer*>;
  parameter child2     :: <GtkWidget*>;
  parameter arg3       :: <GtkArg*>;
  parameter info4      :: <GtkArgInfo*>;
  c-name: "gtk_container_arg_get";
end;

define inline-only C-function gtk-container-child-arg-get-info
  parameter object_type1 :: <GtkType>;
  parameter arg_name2  ::  /* const */ <gchar*>;
  parameter info_p3    :: <GtkArgInfo**>;
  result value :: <gchar*>;
  c-name: "gtk_container_child_arg_get_info";
end;

define inline-only C-function gtk-container-forall
  parameter container1 :: <GtkContainer*>;
  parameter callback2  :: <GtkCallback>;
  parameter callback_data3 :: <gpointer>;
  c-name: "gtk_container_forall";
end;

define inline-only C-function gtk-container-child-composite-name
  parameter container1 :: <GtkContainer*>;
  parameter child2     :: <GtkWidget*>;
  result value :: <gchar*>;
  c-name: "gtk_container_child_composite_name";
end;

define inline constant <GtkContainer> = <_GtkContainer>;
define inline constant <GtkContainerClass> = <_GtkContainerClass>;
define sealed domain make (singleton(<_GtkContainer*>));
define sealed domain initialize (<_GtkContainer*>);
define sealed domain make (singleton(<_GtkContainerClass*>));
define sealed domain initialize (<_GtkContainerClass*>);
