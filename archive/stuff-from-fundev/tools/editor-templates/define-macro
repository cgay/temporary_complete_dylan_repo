define macro
define macro %e%(Xmacro-nameX)-definer
// body style definition rule
  { define
        `modifier` / `pattern-variable` / ...
      XnameX
        `pattern`
    ; end }
 => { `template` } ;
// list style definition rule
  { define
        `modifier` / `pattern-variable` / ...
      XnameX
        `pattern`
    }
 => { `template` } ;
// statement rule
  { XnameX
      `pattern`
    ; end }
 => { `template` } ;
// function rule
  { XnameX ( `pattern` ) }
 => { `template` } ;
// aux rule sets
aux-rule-set:
  { `pattern` }
 => { `template` } ;
// ---*** Maybe we should just direct people to the online DRM?!?
/*
  In this compact grammar,
    "..." means "repeat the preceding element any number of times";
    "{`element`/ `element`}" means "use one of the elements";
    "[`element`]" means "optionally include the element";
    if any of the above chracters has whitespace on both sides, it
      literally represents itself.
  `modifier`
    UNRESERVED-NAME
  `pattern-variable`
    ?NAME[:WORD]
    ...
  `pattern`
    `pattern-list` ;...
  `pattern-list`
    `simple-pattern`... [, `pattern-list`]
    `property-list-pattern`
  `simple-pattern`
    NAME // not "end"
    =>
    ( [ { `pattern` } ] )
    `pattern-variable` [:: `pattern-variable`] [= `pattern-variable`]
  `property-list-pattern`
    #rest `pattern-variable` [, #key [`pattern-keywords`]]
    #key [`pattern-keywords`]
  `pattern-keywords`
    #all-keys
    [?]?NAME[:WORD] [= `expression`]

  `template`
    `template-element`...
  `template-element`
    {NAME/ SYMBOL/ NUMBER/ CHARACTER-LITERAL/ STRING/ UNARY-OPERATOR}
    {`separator`/ #-word/ ./ ::/ =>}
    ( [ { #( #[ `template` ] ) } ] )
    `substitution`
  `separator`
    ;/ ,/ BINARY-OPERATOR
  `substitution`
    [STRING ##] {NAME/ STRING/ SYMBOL} [## STRING]
    [??NAME [`separator`]] ...
    ?=NAME
*/
end macro ;
