#!/usr/local/bin/perl
# Scriptname: proc-report
#				
# Author: Shri Amit(amit)	
#				
# Usage : proc-report [HOSTNAME]
#                                      
# Purpose: The following script performs a remote login
#	   into the specified HOSTNAME and outputs a
#	   report depending upon the specified constriants
#	   for the processes. The default HOSTNAME is
#	   the current host.
#	   A process is considered interesting if it has a cpu
#	   or mem % > 50% or if it has been running for
#	   more than a day.
#
# Preconditions: 
#          o User: At present MUST be dylan. To change the
#                  user simply change the variable $username
#                  to desired user.
#          o Platforms: At present only 5 platforms are 
#                  supported. To add more platforms simply
#                  append the new platform name to the
#                  lists bsd OR sys5 depending upon the 
#                  format of ps the platform uses.
#          o .*rc files: Make sure that the username's
#                  rc files(eg: .bashrc) does not contain
#                  any echo statements. Or at least make
#                  sure that an echo statement does not
#                  cause any junk to be returned to stdout
#                  when the script does an rsh to determine
#                  the platform.
#
# Last modified: August 07 1996 by amit. New definition of
# interesting - only username procs will be reported now.
#
# Last modified: August 07 1996 by amit. Report all dylan
# procs.
# See README under tools-admin for details.
###########################################################

$username = "dylan";
$admindir = "/u/dylan/tools/admin";
$scriptsdir = "/u/dylan/tools/scripts";

### A new platform can be added in either of these ###
### lists depending upon the ps format it uses     ###

@bsd = ("sparc-sunos4","alpha-osf3");
@sys5 = ("sparc-solaris2","mips-irix5","hp-hpux");

### Checks for argument else uses script to obtain hostname ###

if ($ARGV[0] eq "") {
    $hostname = `$admindir/get-host-name.pl`;
} else {
    $hostname = $ARGV[0];
} 
print "\nthe host is: $hostname";
print "\nThe user is: $username\n";

### Determine platform specific process list command ###

$platform = `rsh -l $username $hostname $scriptsdir/dylan-platform`;
chop($platform);
print "\nThe platform is: --$platform--";

$flag = "not found";
foreach $i (@bsd) {
    if ($platform eq $i) {
	$flag = "found";
	$command = "ps aux";
    } 
}

foreach $i (@sys5) {
    if ($platform eq $i) {
	$flag = "found";
	$command = "ps -ef";
    }
}

if ($flag eq "not found") {
    die "\nplatform unknown....going to abort";
}


### All variables set - go for the kill ###

    @procs = `rsh -l $username $hostname $command`;
    shift(@procs);
    shift(@procs);

if ($platform eq "sparc-sunos4" || $platform eq "alpha-osf3") {

### Using the BSD format: ###
### USER       PID %CPU %MEM   SZ  RSS TT STAT START  TIME COMMAND  ###

    foreach $i (@procs) {
	 $user = substr($i,0,9);
     	 $cpu = substr($i,15,4);
     	 $mem = substr($i,20,4);
	 if ($platform eq "alpha-osf3") {
	     $time = substr($i,50,8);
	 } else {
	     $time = substr($i,43,6);
	   }
#### Commented out as all dylan procs are now to be reported - amit Aug08
#	 if (($cpu > 50.0) || ($mem > 50.0) || ($time =~ /[a-zA-Z]/)) {
#		push(@stray, $i);
####
	 if ($user =~ /$username/) {
	     push (@stray, $i);
	 }
     }
} else {

### Using Sys 5 format: ###
###      UID   PID  PPID  C    STIME TTY      TIME COMD ###

    foreach $i (@procs) {
	$user = substr($i,0,7);
	$time = substr($i,24,8);
#### Commented out as all dylan procs are now to be reported - amit, Aug08
#	if ($time =~ /[a-zA-Z]/) {
#		push(@stray, $i);
####
	if ($user =~ /$username/) {
	    push (@stray, $i);
	}
    }
}

### Output the report ###

print "\nFor machine: $hostname";
print "\nFor platform: $platform";

### Commented out by amit. Only username procs required at present Aug07
#print "\n\nThe following processes seem to be interesting\n";
#foreach $i (@stray) {
#    print "\n$i";
#}
###

print "\n\nThe following interesting processes are owned by $username\n";
foreach $i (@stray) {
    print "\n$i";
}
