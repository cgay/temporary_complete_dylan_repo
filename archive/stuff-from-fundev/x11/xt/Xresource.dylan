Module:    Xt
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Xresource.h"; do not edit.

//	XConsortium: Xresource.h,v 1.36 93/03/29 18:11:19 rws Exp 

define inline-only C-function Xpermalloc
  parameter size       :: <C-unsigned-int>;
  result value :: <C-string>;
  c-name: "Xpermalloc";
end;
define inline constant <C-XrmQuark> = <C-int>;
define inline constant <XrmQuark> = <integer>;
define inline constant <XrmQuark*> = <C-int*>;
define inline constant <XrmQuarkList> = <C-int*>;
define inline-only constant $NULLQUARK                  =
	c-type-cast(<C-XrmQuark>,0);
define inline constant <XrmString> = <C-string>;
define inline-only constant $NULLSTRING                 =
	c-type-cast(<XrmString>,0);

define inline-only C-function XrmStringToQuark
  parameter string     ::  /* const */ <C-string>;
  result value :: <C-XrmQuark>;
  c-name: "XrmStringToQuark";
end;

define inline-only C-function XrmPermStringToQuark
  parameter string     ::  /* const */ <C-string>;
  result value :: <C-XrmQuark>;
  c-name: "XrmPermStringToQuark";
end;

define inline-only C-function XrmQuarkToString
  parameter quark      :: <C-XrmQuark>;
  result value :: <XrmString>;
  c-name: "XrmQuarkToString";
end;

define inline-only C-function XrmUniqueQuark
  result value :: <C-XrmQuark>;
  c-name: "XrmUniqueQuark";
end;
// enum XrmBinding:
define inline-only constant $XrmBindTightly = -1 + 1;
define inline-only constant $XrmBindLoosely = $XrmBindTightly + 1;


define inline-only C-function XrmStringToQuarkList
  parameter string     ::  /* const */ <C-string>;
  parameter quarks-return :: <XrmQuarkList>;
  c-name: "XrmStringToQuarkList";
end;

define inline-only C-function XrmStringToBindingQuarkList
  parameter string     ::  /* const */ <C-string>;
  parameter bindings-return :: <XrmBindingList>;
  parameter quarks-return :: <XrmQuarkList>;
  c-name: "XrmStringToBindingQuarkList";
end;
define inline constant <XrmName> = <C-XrmQuark>;
define inline constant <XrmNameList> = <XrmQuarkList>;

define inline-only function XrmNameToString (name);
  XrmQuarkToString(name)
end;

define inline-only function XrmStringToName (string);
  XrmStringToQuark(string)
end;

define inline-only function XrmStringToNameList (str, name);
  XrmStringToQuarkList(str, name)
end;
define inline constant <XrmClass> = <C-XrmQuark>;
define inline constant <XrmClassList> = <XrmQuarkList>;

define inline-only function XrmClassToString (c_class);
  XrmQuarkToString(c_class)
end;

define inline-only function XrmStringToClass (c_class);
  XrmStringToQuark(c_class)
end;

define inline-only function XrmStringToClassList (str,c_class);
  XrmStringToQuarkList(str, c_class)
end;
define inline constant <XrmRepresentation> = <C-XrmQuark>;

define inline-only function XrmStringToRepresentation (string);
  XrmStringToQuark(string)
end;

define inline-only function XrmRepresentationToString (type);
  XrmQuarkToString(type)
end;

define C-struct <XrmValue>
  sealed inline-only slot size-value     :: <C-unsigned-int>;
  sealed inline-only slot addr-value     :: <XPointer>;
  pointer-type-name: <XrmValue*>;
end C-struct <XrmValue>;
define inline constant <XrmValuePtr> = <XrmValue*>;
define C-subtype <XrmHashBucket> ( <C-void*> ) end;
define inline constant <XrmHashTable> = <XrmHashBucket*>;
define C-subtype <XrmDatabase> ( <C-void*> ) end;

define inline-only C-function XrmDestroyDatabase
  parameter database   :: <XrmDatabase>;
  c-name: "XrmDestroyDatabase";
end;

define inline-only C-function XrmQPutResource
  parameter database   :: <XrmDatabase*>;
  parameter bindings   :: <XrmBindingList>;
  parameter quarks     :: <XrmQuarkList>;
  parameter type       :: <XrmRepresentation>;
  parameter value      :: <XrmValue*>;
  c-name: "XrmQPutResource";
end;

define inline-only C-function XrmPutResource
  parameter database   :: <XrmDatabase*>;
  parameter specifier  ::  /* const */ <C-string>;
  parameter type       ::  /* const */ <C-string>;
  parameter value      :: <XrmValue*>;
  c-name: "XrmPutResource";
end;

define inline-only C-function XrmQPutStringResource
  parameter database   :: <XrmDatabase*>;
  parameter bindings   :: <XrmBindingList>;
  parameter quarks     :: <XrmQuarkList>;
  parameter value      ::  /* const */ <C-string>;
  c-name: "XrmQPutStringResource";
end;

define inline-only C-function XrmPutStringResource
  parameter database   :: <XrmDatabase*>;
  parameter specifier  ::  /* const */ <C-string>;
  parameter value      ::  /* const */ <C-string>;
  c-name: "XrmPutStringResource";
end;

define inline-only C-function XrmPutLineResource
  parameter database   :: <XrmDatabase*>;
  parameter line       ::  /* const */ <C-string>;
  c-name: "XrmPutLineResource";
end;

define inline-only C-function XrmQGetResource
  parameter database   :: <XrmDatabase>;
  parameter quark-name :: <XrmNameList>;
  parameter quark-class :: <XrmClassList>;
  parameter quark-type-return :: <XrmRepresentation*>;
  parameter value-return :: <XrmValue*>;
  result value :: /* unspecified, defaults to */ <C-int>;
  c-name: "XrmQGetResource";
end;

define inline-only C-function XrmGetResource
  parameter database   :: <XrmDatabase>;
  parameter str-name   ::  /* const */ <C-string>;
  parameter str-class  ::  /* const */ <C-string>;
  parameter str-type-return :: <C-string*>;
  parameter value-return :: <XrmValue*>;
  result value :: <C-Bool>;
  c-name: "XrmGetResource";
end;

define inline-only C-function XrmQGetSearchList
  parameter database   :: <XrmDatabase>;
  parameter names      :: <XrmNameList>;
  parameter classes    :: <XrmClassList>;
  parameter list-return :: <XrmSearchList>;
  parameter list-length :: <C-int>;
  result value :: <C-Bool>;
  c-name: "XrmQGetSearchList";
end;

define inline-only C-function XrmQGetSearchResource
  parameter list       :: <XrmSearchList>;
  parameter name       :: <XrmName>;
  parameter class      :: <XrmClass>;
  parameter type-return :: <XrmRepresentation*>;
  parameter value-return :: <XrmValue*>;
  result value :: <C-Bool>;
  c-name: "XrmQGetSearchResource";
end;

define inline-only C-function XrmSetDatabase
  parameter display    :: <Display*>;
  parameter database   :: <XrmDatabase>;
  c-name: "XrmSetDatabase";
end;

define inline-only C-function XrmGetDatabase
  parameter display    :: <Display*>;
  result value :: <XrmDatabase>;
  c-name: "XrmGetDatabase";
end;

define inline-only C-function XrmGetFileDatabase
  parameter filename   ::  /* const */ <C-string>;
  result value :: <XrmDatabase>;
  c-name: "XrmGetFileDatabase";
end;

define inline-only C-function XrmCombineFileDatabase
  parameter filename   ::  /* const */ <C-string>;
  output parameter target :: <XrmDatabase*>;
  parameter override   :: <C-Bool>;
  result value :: <C-Status>;
  c-name: "XrmCombineFileDatabase";
end;

define inline-only C-function XrmGetStringDatabase
  parameter data       ::  /* const */ <C-string>;
  result value :: <XrmDatabase>;
  c-name: "XrmGetStringDatabase";
end;

define inline-only C-function XrmPutFileDatabase
  parameter database   :: <XrmDatabase>;
  parameter filename   ::  /* const */ <C-string>;
  c-name: "XrmPutFileDatabase";
end;

define inline-only C-function XrmMergeDatabases
  parameter source-db  :: <XrmDatabase>;
  output parameter target-db :: <XrmDatabase*>;
  c-name: "XrmMergeDatabases";
end;

define inline-only C-function XrmCombineDatabase
  parameter source-db  :: <XrmDatabase>;
  output parameter target-db :: <XrmDatabase*>;
  parameter override   :: <C-Bool>;
  c-name: "XrmCombineDatabase";
end;
define inline-only constant $XrmEnumAllLevels           =    0;
define inline-only constant $XrmEnumOneLevel            =    1;

define inline-only C-function XrmEnumerateDatabase
  parameter db         :: <XrmDatabase>;
  parameter name-prefix :: <XrmNameList>;
  parameter class-prefix :: <XrmClassList>;
  parameter mode       :: <C-int>;
  parameter functionpointer1 :: <C-function-pointer>;
  parameter closure    :: <XPointer>;
  result value :: <C-Bool>;
  c-name: "XrmEnumerateDatabase";
end;

define inline-only C-function XrmLocaleOfDatabase
  parameter database   :: <XrmDatabase>;
  result value :: <C-string>;
  c-name: "XrmLocaleOfDatabase";
end;
// enum XrmOptionKind:
define inline-only constant $XrmoptionNoArg = -1 + 1;
define inline-only constant $XrmoptionIsArg = $XrmoptionNoArg + 1;
define inline-only constant $XrmoptionStickyArg = $XrmoptionIsArg + 1;
define inline-only constant $XrmoptionSepArg = $XrmoptionStickyArg + 1;
define inline-only constant $XrmoptionResArg = $XrmoptionSepArg + 1;
define inline-only constant $XrmoptionSkipArg = $XrmoptionResArg + 1;
define inline-only constant $XrmoptionSkipLine = $XrmoptionSkipArg + 1;
define inline-only constant $XrmoptionSkipNArgs = $XrmoptionSkipLine + 1;


define C-struct <XrmOptionDescRec>
  sealed inline-only slot option-value   :: <C-string>;
  sealed inline-only slot specifier-value :: <C-string>;
  sealed inline-only slot argKind-value  :: <C-int>;
  sealed inline-only slot value-value    :: <XPointer>;
  pointer-type-name: <XrmOptionDescRec*>;
end C-struct <XrmOptionDescRec>;
define inline constant <XrmOptionDescList> = <XrmOptionDescRec*>;

define inline-only C-function XrmParseCommand
  parameter database   :: <XrmDatabase*>;
  parameter table      :: <XrmOptionDescList>;
  parameter table-count :: <C-int>;
  parameter name       ::  /* const */ <C-string>;
  input output parameter argc-in-out :: <C-int*>;
  parameter argv-in-out :: <C-string*>;
  c-name: "XrmParseCommand";
end;

define sealed domain make (singleton(<XrmValue*>));
define sealed domain initialize (<XrmValue*>);
define sealed domain make (singleton(<XrmOptionDescRec*>));
define sealed domain initialize (<XrmOptionDescRec*>);
