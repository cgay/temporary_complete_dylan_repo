Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Collections.h"; do not edit.

// unnamed enum:
define inline-only constant $kCollectionDontWantTag    = 0;
define inline-only constant $kCollectionDontWantId     = 0;
define inline-only constant $kCollectionDontWantSize   = 0;
define inline-only constant $kCollectionDontWantAttributes = 0;
define inline-only constant $kCollectionDontWantIndex  = 0;
define inline-only constant $kCollectionDontWantData   = 0;

// unnamed enum:
define inline-only constant $kCollectionNoAttributes   = #x00000000;
define inline-only constant $kCollectionAllAttributes  = c-type-cast(<C-both-long>,$FFFFFFFF);
define inline-only constant $kCollectionUserAttributes = #x0000FFFF;
define inline-only constant $kCollectionDefaultAttributes = as(<machine-word>, #x40000000);

// unnamed enum:
define inline-only constant $kCollectionUser0Bit       = 0;
define inline-only constant $kCollectionUser1Bit       = 1;
define inline-only constant $kCollectionUser2Bit       = 2;
define inline-only constant $kCollectionUser3Bit       = 3;
define inline-only constant $kCollectionUser4Bit       = 4;
define inline-only constant $kCollectionUser5Bit       = 5;
define inline-only constant $kCollectionUser6Bit       = 6;
define inline-only constant $kCollectionUser7Bit       = 7;
define inline-only constant $kCollectionUser8Bit       = 8;
define inline-only constant $kCollectionUser9Bit       = 9;
define inline-only constant $kCollectionUser10Bit      = 10;
define inline-only constant $kCollectionUser11Bit      = 11;
define inline-only constant $kCollectionUser12Bit      = 12;
define inline-only constant $kCollectionUser13Bit      = 13;
define inline-only constant $kCollectionUser14Bit      = 14;
define inline-only constant $kCollectionUser15Bit      = 15;
define inline-only constant $kCollectionReserved0Bit   = 16;
define inline-only constant $kCollectionReserved1Bit   = 17;
define inline-only constant $kCollectionReserved2Bit   = 18;
define inline-only constant $kCollectionReserved3Bit   = 19;
define inline-only constant $kCollectionReserved4Bit   = 20;
define inline-only constant $kCollectionReserved5Bit   = 21;
define inline-only constant $kCollectionReserved6Bit   = 22;
define inline-only constant $kCollectionReserved7Bit   = 23;
define inline-only constant $kCollectionReserved8Bit   = 24;
define inline-only constant $kCollectionReserved9Bit   = 25;
define inline-only constant $kCollectionReserved10Bit  = 26;
define inline-only constant $kCollectionReserved11Bit  = 27;
define inline-only constant $kCollectionReserved12Bit  = 28;
define inline-only constant $kCollectionReserved13Bit  = 29;
define inline-only constant $kCollectionPersistenceBit = 30;
define inline-only constant $kCollectionLockBit        = 31;

// unnamed enum:
define inline-only constant $kCollectionUser0Mask      = ash(1, $kCollectionUser0Bit);
define inline-only constant $kCollectionUser1Mask      = ash(1, $kCollectionUser1Bit);
define inline-only constant $kCollectionUser2Mask      = ash(1, $kCollectionUser2Bit);
define inline-only constant $kCollectionUser3Mask      = ash(1, $kCollectionUser3Bit);
define inline-only constant $kCollectionUser4Mask      = ash(1, $kCollectionUser4Bit);
define inline-only constant $kCollectionUser5Mask      = ash(1, $kCollectionUser5Bit);
define inline-only constant $kCollectionUser6Mask      = ash(1, $kCollectionUser6Bit);
define inline-only constant $kCollectionUser7Mask      = ash(1, $kCollectionUser7Bit);
define inline-only constant $kCollectionUser8Mask      = ash(1, $kCollectionUser8Bit);
define inline-only constant $kCollectionUser9Mask      = ash(1, $kCollectionUser9Bit);
define inline-only constant $kCollectionUser10Mask     = ash(1, $kCollectionUser10Bit);
define inline-only constant $kCollectionUser11Mask     = ash(1, $kCollectionUser11Bit);
define inline-only constant $kCollectionUser12Mask     = ash(1, $kCollectionUser12Bit);
define inline-only constant $kCollectionUser13Mask     = ash(1, $kCollectionUser13Bit);
define inline-only constant $kCollectionUser14Mask     = ash(1, $kCollectionUser14Bit);
define inline-only constant $kCollectionUser15Mask     = ash(1, $kCollectionUser15Bit);
define inline-only constant $kCollectionReserved0Mask  = ash(1, $kCollectionReserved0Bit);
define inline-only constant $kCollectionReserved1Mask  = ash(1, $kCollectionReserved1Bit);
define inline-only constant $kCollectionReserved2Mask  = ash(1, $kCollectionReserved2Bit);
define inline-only constant $kCollectionReserved3Mask  = ash(1, $kCollectionReserved3Bit);
define inline-only constant $kCollectionReserved4Mask  = ash(1, $kCollectionReserved4Bit);
define inline-only constant $kCollectionReserved5Mask  = ash(1, $kCollectionReserved5Bit);
define inline-only constant $kCollectionReserved6Mask  = ash(1, $kCollectionReserved6Bit);
define inline-only constant $kCollectionReserved7Mask  = ash(1, $kCollectionReserved7Bit);
define inline-only constant $kCollectionReserved8Mask  = ash(1, $kCollectionReserved8Bit);
define inline-only constant $kCollectionReserved9Mask  = ash(1, $kCollectionReserved9Bit);
define inline-only constant $kCollectionReserved10Mask = ash(1, $kCollectionReserved10Bit);
define inline-only constant $kCollectionReserved11Mask = ash(1, $kCollectionReserved11Bit);
define inline-only constant $kCollectionReserved12Mask = ash(1, $kCollectionReserved12Bit);
define inline-only constant $kCollectionReserved13Mask = ash(1, $kCollectionReserved13Bit);
define inline-only constant $kCollectionPersistenceMask = ash(1, $kCollectionPersistenceBit);
define inline-only constant $kCollectionLockMask       = ash(1, $kCollectionLockBit);

define inline constant <MacCollection> = <OpaqueCollection*>;
define C-pointer-type <MacCollection*> => <MacCollection>;
define C-pointer-type <MacCollection**> => <MacCollection*>;
define inline constant <CollectionTag> = <FourCharCode>;
define C-pointer-type <CollectionTag*> => <CollectionTag>;
define C-pointer-type <CollectionTag**> => <CollectionTag*>;
define constant <CollectionFlattenProcPtr> = <C-function-pointer>;
define constant <CollectionExceptionProcPtr> = <C-function-pointer>;
define constant <CollectionFlattenUPP> = <UniversalProcPtr>;
define constant <CollectionExceptionUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppCollectionFlattenProcInfo = #x00000FE0;

// unnamed enum:
define inline-only constant $uppCollectionExceptionProcInfo = #x000002E0;


define inline-only C-function NewCollection
  result value :: <MacCollection>;
  c-name: "NewCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeCollection
  parameter c          :: <MacCollection>;
  c-name: "DisposeCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function CloneCollection
  parameter c          :: <MacCollection>;
  result value :: <MacCollection>;
  c-name: "CloneCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function CountCollectionOwners
  parameter c          :: <MacCollection>;
  result value :: <SInt32>;
  c-name: "CountCollectionOwners";
  c-modifiers: "pascal";
end;

define inline-only C-function CopyCollection
  parameter srcCollection :: <MacCollection>;
  parameter dstCollection :: <MacCollection>;
  result value :: <MacCollection>;
  c-name: "CopyCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCollectionDefaultAttributes
  parameter c          :: <MacCollection>;
  result value :: <SInt32>;
  c-name: "GetCollectionDefaultAttributes";
  c-modifiers: "pascal";
end;

define inline-only C-function SetCollectionDefaultAttributes
  parameter c          :: <MacCollection>;
  parameter whichAttributes :: <SInt32>;
  parameter newAttributes :: <SInt32>;
  c-name: "SetCollectionDefaultAttributes";
  c-modifiers: "pascal";
end;

define inline-only C-function CountCollectionItems
  parameter c          :: <MacCollection>;
  result value :: <SInt32>;
  c-name: "CountCollectionItems";
  c-modifiers: "pascal";
end;

define inline-only C-function AddCollectionItem
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter id         :: <SInt32>;
  parameter itemSize   :: <SInt32>;
  parameter itemData   :: <C-void*>;
  result value :: <OSErr>;
  c-name: "AddCollectionItem";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCollectionItem
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter id         :: <SInt32>;
  parameter itemSize   :: <SInt32*>;
  parameter itemData   :: <C-void*>;
  result value :: <OSErr>;
  c-name: "GetCollectionItem";
  c-modifiers: "pascal";
end;

define inline-only C-function RemoveCollectionItem
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter id         :: <SInt32>;
  result value :: <OSErr>;
  c-name: "RemoveCollectionItem";
  c-modifiers: "pascal";
end;

define inline-only C-function SetCollectionItemInfo
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter id         :: <SInt32>;
  parameter whichAttributes :: <SInt32>;
  parameter newAttributes :: <SInt32>;
  result value :: <OSErr>;
  c-name: "SetCollectionItemInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCollectionItemInfo
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter id         :: <SInt32>;
  parameter index      :: <SInt32*>;
  parameter itemSize   :: <SInt32*>;
  parameter attributes :: <SInt32*>;
  result value :: <OSErr>;
  c-name: "GetCollectionItemInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function ReplaceIndexedCollectionItem
  parameter c          :: <MacCollection>;
  parameter index      :: <SInt32>;
  parameter itemSize   :: <SInt32>;
  parameter itemData   :: <C-void*>;
  result value :: <OSErr>;
  c-name: "ReplaceIndexedCollectionItem";
  c-modifiers: "pascal";
end;

define inline-only C-function GetIndexedCollectionItem
  parameter c          :: <MacCollection>;
  parameter index      :: <SInt32>;
  parameter itemSize   :: <SInt32*>;
  parameter itemData   :: <C-void*>;
  result value :: <OSErr>;
  c-name: "GetIndexedCollectionItem";
  c-modifiers: "pascal";
end;

define inline-only C-function RemoveIndexedCollectionItem
  parameter c          :: <MacCollection>;
  parameter index      :: <SInt32>;
  result value :: <OSErr>;
  c-name: "RemoveIndexedCollectionItem";
  c-modifiers: "pascal";
end;

define inline-only C-function SetIndexedCollectionItemInfo
  parameter c          :: <MacCollection>;
  parameter index      :: <SInt32>;
  parameter whichAttributes :: <SInt32>;
  parameter newAttributes :: <SInt32>;
  result value :: <OSErr>;
  c-name: "SetIndexedCollectionItemInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function GetIndexedCollectionItemInfo
  parameter c          :: <MacCollection>;
  parameter index      :: <SInt32>;
  parameter tag        :: <CollectionTag*>;
  parameter id         :: <SInt32*>;
  parameter itemSize   :: <SInt32*>;
  parameter attributes :: <SInt32*>;
  result value :: <OSErr>;
  c-name: "GetIndexedCollectionItemInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function CollectionTagExists
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  result value :: <MacBoolean>;
  c-name: "CollectionTagExists";
  c-modifiers: "pascal";
end;

define inline-only C-function CountCollectionTags
  parameter c          :: <MacCollection>;
  result value :: <SInt32>;
  c-name: "CountCollectionTags";
  c-modifiers: "pascal";
end;

define inline-only C-function GetIndexedCollectionTag
  parameter c          :: <MacCollection>;
  parameter tagIndex   :: <SInt32>;
  parameter tag        :: <CollectionTag*>;
  result value :: <OSErr>;
  c-name: "GetIndexedCollectionTag";
  c-modifiers: "pascal";
end;

define inline-only C-function CountTaggedCollectionItems
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  result value :: <SInt32>;
  c-name: "CountTaggedCollectionItems";
  c-modifiers: "pascal";
end;

define inline-only C-function GetTaggedCollectionItem
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter whichItem  :: <SInt32>;
  parameter itemSize   :: <SInt32*>;
  parameter itemData   :: <C-void*>;
  result value :: <OSErr>;
  c-name: "GetTaggedCollectionItem";
  c-modifiers: "pascal";
end;

define inline-only C-function GetTaggedCollectionItemInfo
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter whichItem  :: <SInt32>;
  parameter id         :: <SInt32*>;
  parameter index      :: <SInt32*>;
  parameter itemSize   :: <SInt32*>;
  parameter attributes :: <SInt32*>;
  result value :: <OSErr>;
  c-name: "GetTaggedCollectionItemInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function PurgeCollection
  parameter c          :: <MacCollection>;
  parameter whichAttributes :: <SInt32>;
  parameter matchingAttributes :: <SInt32>;
  c-name: "PurgeCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function PurgeCollectionTag
  parameter c          :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  c-name: "PurgeCollectionTag";
  c-modifiers: "pascal";
end;

define inline-only C-function EmptyCollection
  parameter c          :: <MacCollection>;
  c-name: "EmptyCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function FlattenCollection
  parameter c          :: <MacCollection>;
  parameter flattenProc :: <CollectionFlattenUPP>;
  parameter refCon     :: <C-void*>;
  result value :: <OSErr>;
  c-name: "FlattenCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function FlattenPartialCollection
  parameter c          :: <MacCollection>;
  parameter flattenProc :: <CollectionFlattenUPP>;
  parameter refCon     :: <C-void*>;
  parameter whichAttributes :: <SInt32>;
  parameter matchingAttributes :: <SInt32>;
  result value :: <OSErr>;
  c-name: "FlattenPartialCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function UnflattenCollection
  parameter c          :: <MacCollection>;
  parameter flattenProc :: <CollectionFlattenUPP>;
  parameter refCon     :: <C-void*>;
  result value :: <OSErr>;
  c-name: "UnflattenCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCollectionExceptionProc
  parameter c          :: <MacCollection>;
  result value :: <CollectionExceptionUPP>;
  c-name: "GetCollectionExceptionProc";
  c-modifiers: "pascal";
end;

define inline-only C-function SetCollectionExceptionProc
  parameter c          :: <MacCollection>;
  parameter exceptionProc :: <CollectionExceptionUPP>;
  c-name: "SetCollectionExceptionProc";
  c-modifiers: "pascal";
end;

define inline-only C-function GetNewCollection
  parameter collectionID :: <SInt16>;
  result value :: <MacCollection>;
  c-name: "GetNewCollection";
  c-modifiers: "pascal";
end;

define inline-only C-function AddCollectionItemHdl
  parameter aCollection :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter id         :: <SInt32>;
  parameter itemData   :: <Handle>;
  result value :: <OSErr>;
  c-name: "AddCollectionItemHdl";
  c-modifiers: "pascal";
end;

define inline-only C-function GetCollectionItemHdl
  parameter aCollection :: <MacCollection>;
  parameter tag        :: <CollectionTag>;
  parameter id         :: <SInt32>;
  parameter itemData   :: <Handle>;
  result value :: <OSErr>;
  c-name: "GetCollectionItemHdl";
  c-modifiers: "pascal";
end;

define inline-only C-function ReplaceIndexedCollectionItemHdl
  parameter aCollection :: <MacCollection>;
  parameter index      :: <SInt32>;
  parameter itemData   :: <Handle>;
  result value :: <OSErr>;
  c-name: "ReplaceIndexedCollectionItemHdl";
  c-modifiers: "pascal";
end;

define inline-only C-function GetIndexedCollectionItemHdl
  parameter aCollection :: <MacCollection>;
  parameter index      :: <SInt32>;
  parameter itemData   :: <Handle>;
  result value :: <OSErr>;
  c-name: "GetIndexedCollectionItemHdl";
  c-modifiers: "pascal";
end;

define inline-only C-function FlattenCollectionToHdl
  parameter aCollection :: <MacCollection>;
  parameter flattened  :: <Handle>;
  result value :: <OSErr>;
  c-name: "FlattenCollectionToHdl";
  c-modifiers: "pascal";
end;

define inline-only C-function UnflattenCollectionFromHdl
  parameter aCollection :: <MacCollection>;
  parameter flattened  :: <Handle>;
  result value :: <OSErr>;
  c-name: "UnflattenCollectionFromHdl";
  c-modifiers: "pascal";
end;

