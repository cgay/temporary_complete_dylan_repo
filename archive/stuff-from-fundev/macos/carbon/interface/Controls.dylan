Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "Controls.h"; do not edit.

// unnamed enum:
define inline-only constant $_ControlDispatch          = #xAA73;

// unnamed enum:
define inline-only constant $gestaltControlMgrAttr     = FOUR_CHAR_CODE('c', 'n', 't', 'l');
define inline-only constant $gestaltControlMgrPresent  = ash(1, 0);

// unnamed enum:
define inline-only constant $kControlDefProcType       = FOUR_CHAR_CODE('C', 'D', 'E', 'F');
define inline-only constant $kControlTemplateResourceType = FOUR_CHAR_CODE('C', 'N', 'T', 'L');
define inline-only constant $kControlColorTableResourceType = FOUR_CHAR_CODE('c', 'c', 't', 'b');
define inline-only constant $kControlDefProcResourceType = FOUR_CHAR_CODE('C', 'D', 'E', 'F');
define inline-only constant $kControlTabListResType    = FOUR_CHAR_CODE('t', 'a', 'b', '#');
define inline-only constant $kControlListDescResType   = FOUR_CHAR_CODE('l', 'd', 'e', 's');


define C-struct <ControlTemplate>
  sealed inline-only slot controlRect-value :: <Rect>;
  sealed inline-only slot controlValue-value :: <SInt16>;
  sealed inline-only slot controlVisible-value :: <MacBoolean>;
  sealed inline-only slot fill-value     :: <UInt8>;
  sealed inline-only slot controlMaximum-value :: <SInt16>;
  sealed inline-only slot controlMinimum-value :: <SInt16>;
  sealed inline-only slot controlDefProcID-value :: <SInt16>;
  sealed inline-only slot controlReference-value :: <SInt32>;
  sealed inline-only slot controlTitle-value :: <Str255>;
  pack: 2;
  c-name: "struct ControlTemplate";
end;
define C-pointer-type <ControlTemplate*> => <ControlTemplate>;
define C-pointer-type <ControlTemplate**> => <ControlTemplate*>;
define C-pointer-type <ControlTemplatePtr> => <ControlTemplate>;
define C-pointer-type <ControlTemplateHandle> => <ControlTemplatePtr>;
define C-pointer-type <ControlRecord*> => <ControlRecord>;
define C-pointer-type <ControlRecord**> => <ControlRecord*>;
define C-pointer-type <ControlPtr> => <ControlRecord>;
define C-pointer-type <ControlHandle> => <ControlPtr>;
define inline constant <ControlRef> = <ControlHandle>;
define C-pointer-type <ControlRef*> => <ControlRef>;
define C-pointer-type <ControlRef**> => <ControlRef*>;
define inline constant <ControlPartCode> = <SInt16>;
define C-pointer-type <ControlPartCode*> => <ControlPartCode>;
define C-pointer-type <ControlPartCode**> => <ControlPartCode*>;
define constant <ControlActionProcPtr> = <C-function-pointer>;
define constant <ControlActionUPP> = <UniversalProcPtr>;

define C-struct <ControlRecord>
  sealed inline-only slot nextControl-value :: <ControlHandle>;
  sealed inline-only slot contrlOwner-value :: <WindowPtr>;
  sealed inline-only slot contrlRect-value :: <Rect>;
  sealed inline-only slot contrlVis-value :: <UInt8>;
  sealed inline-only slot contrlHilite-value :: <UInt8>;
  sealed inline-only slot contrlValue-value :: <SInt16>;
  sealed inline-only slot contrlMin-value :: <SInt16>;
  sealed inline-only slot contrlMax-value :: <SInt16>;
  sealed inline-only slot contrlDefProc-value :: <Handle>;
  sealed inline-only slot contrlData-value :: <Handle>;
  sealed inline-only slot contrlAction-value :: <ControlActionUPP>;
  sealed inline-only slot contrlRfCon-value :: <SInt32>;
  sealed inline-only slot contrlTitle-value :: <Str255>;
  pack: 2;
  c-name: "struct ControlRecord";
end;
// unnamed enum:
define inline-only constant $uppControlActionProcInfo  = #x000002C0;

// unnamed enum:
define inline-only constant $cFrameColor               = 0;
define inline-only constant $cBodyColor                = 1;
define inline-only constant $cTextColor                = 2;
define inline-only constant $cThumbColor               = 3;
define inline-only constant $kNumberCtlCTabEntries     = 4;


define C-struct <CtlCTab>
  sealed inline-only slot ccSeed-value   :: <SInt32>;
  sealed inline-only slot ccRider-value  :: <SInt16>;
  sealed inline-only slot ctSize-value   :: <SInt16>;
  sealed inline-only array slot ctTable-array :: <ColorSpec>,
    length: 4,
    address-getter: ctTable-value;
  pack: 2;
  c-name: "struct CtlCTab";
end;
define C-pointer-type <CtlCTab*> => <CtlCTab>;
define C-pointer-type <CtlCTab**> => <CtlCTab*>;
define C-pointer-type <CCTabPtr> => <CtlCTab>;
define C-pointer-type <CCTabHandle> => <CCTabPtr>;

define C-struct <AuxCtlRec>
  sealed inline-only slot acNext-value   :: <Handle>;
  sealed inline-only slot acOwner-value  :: <ControlHandle>;
  sealed inline-only slot acCTable-value :: <CCTabHandle>;
  sealed inline-only slot acFlags-value  :: <SInt16>;
  sealed inline-only slot acReserved     :: <SInt32>;
  sealed inline-only slot acRefCon-value :: <SInt32>;
  pack: 2;
  c-name: "struct AuxCtlRec";
end;
define C-pointer-type <AuxCtlRec*> => <AuxCtlRec>;
define C-pointer-type <AuxCtlRec**> => <AuxCtlRec*>;
define C-pointer-type <AuxCtlPtr> => <AuxCtlRec>;
define C-pointer-type <AuxCtlHandle> => <AuxCtlPtr>;

define C-struct <PopupPrivateData>
  sealed inline-only slot mHandle-value  :: <MenuHandle>;
  sealed inline-only slot mID-value      :: <SInt16>;
  pack: 2;
  c-name: "struct PopupPrivateData";
end;
define C-pointer-type <PopupPrivateData*> => <PopupPrivateData>;
define C-pointer-type <PopupPrivateData**> => <PopupPrivateData*>;
define C-pointer-type <PopupPrivateDataPtr> => <PopupPrivateData>;
define C-pointer-type <PopupPrivateDataHandle> => <PopupPrivateDataPtr>;
// unnamed enum:
define inline-only constant $errMessageNotSupported    = -30580;
define inline-only constant $errDataNotSupported       = -30581;
define inline-only constant $errControlDoesntSupportFocus = -30582;
define inline-only constant $errWindowDoesntSupportFocus = -30583;
define inline-only constant $errUnknownControl         = -30584;
define inline-only constant $errCouldntSetFocus        = -30585;
define inline-only constant $errNoRootControl          = -30586;
define inline-only constant $errRootAlreadyExists      = -30587;
define inline-only constant $errInvalidPartCode        = -30588;
define inline-only constant $errControlsAlreadyExist   = -30589;
define inline-only constant $errControlIsNotEmbedder   = -30590;
define inline-only constant $errDataSizeMismatch       = -30591;
define inline-only constant $errControlHiddenOrDisabled = -30592;
define inline-only constant $errWindowRegionCodeInvalid = -30593;
define inline-only constant $errCantEmbedIntoSelf      = -30594;
define inline-only constant $errCantEmbedRoot          = -30595;
define inline-only constant $errItemNotControl         = -30596;
define inline-only constant $controlInvalidDataVersionErr = -30597;
define inline-only constant $controlPropertyInvalid    = -5603;
define inline-only constant $controlPropertyNotFoundErr = -5604;
define inline-only constant $controlHandleInvalidErr   = -30599;

// unnamed enum:
define inline-only constant $pushButProc               = 0;
define inline-only constant $checkBoxProc              = 1;
define inline-only constant $radioButProc              = 2;
define inline-only constant $scrollBarProc             = 16;
define inline-only constant $popupMenuProc             = 1008;

// unnamed enum:
define inline-only constant $kControlSupportsNewMessages = FOUR_CHAR_CODE(' ', 'o', 'k', ' ');

// unnamed enum:
define inline-only constant $kControlFocusNoPart       = 0;
define inline-only constant $kControlFocusNextPart     = -1;
define inline-only constant $kControlFocusPrevPart     = -2;

define inline constant <ControlFocusPart> = <SInt16>;
define C-pointer-type <ControlFocusPart*> => <ControlFocusPart>;
define C-pointer-type <ControlFocusPart**> => <ControlFocusPart*>;
// unnamed enum:
define inline-only constant $kControlEntireControl     = 0;

// unnamed enum:
define inline-only constant $kControlKeyFilterBlockKey = 0;
define inline-only constant $kControlKeyFilterPassKey  = 1;

define inline constant <ControlKeyFilterResult> = <SInt16>;
define C-pointer-type <ControlKeyFilterResult*> => <ControlKeyFilterResult>;
define C-pointer-type <ControlKeyFilterResult**> => <ControlKeyFilterResult*>;
// unnamed enum:
define inline-only constant $kControlKeyScriptBehaviorAllowAnyScript = FOUR_CHAR_CODE('a', 'n', 'y', ' ');
define inline-only constant $kControlKeyScriptBehaviorPrefersRoman = FOUR_CHAR_CODE('p', 'r', 'm', 'n');
define inline-only constant $kControlKeyScriptBehaviorRequiresRoman = FOUR_CHAR_CODE('r', 'r', 'm', 'n');

define inline constant <ControlKeyScriptBehavior> = <UInt32>;
define C-pointer-type <ControlKeyScriptBehavior*> => <ControlKeyScriptBehavior>;
define C-pointer-type <ControlKeyScriptBehavior**> => <ControlKeyScriptBehavior*>;
// unnamed enum:
define inline-only constant $kControlFontBigSystemFont = -1;
define inline-only constant $kControlFontSmallSystemFont = -2;
define inline-only constant $kControlFontSmallBoldSystemFont = -3;

// unnamed enum:
define inline-only constant $kControlUseFontMask       = #x0001;
define inline-only constant $kControlUseFaceMask       = #x0002;
define inline-only constant $kControlUseSizeMask       = #x0004;
define inline-only constant $kControlUseForeColorMask  = #x0008;
define inline-only constant $kControlUseBackColorMask  = #x0010;
define inline-only constant $kControlUseModeMask       = #x0020;
define inline-only constant $kControlUseJustMask       = #x0040;
define inline-only constant $kControlUseAllMask        = #x00FF;
define inline-only constant $kControlAddFontSizeMask   = #x0100;

// unnamed enum:
define inline-only constant $kControlAddToMetaFontMask = #x0200;


define C-struct <ControlFontStyleRec>
  sealed inline-only slot flags-value    :: <SInt16>;
  sealed inline-only slot font-value     :: <SInt16>;
  sealed inline-only slot size-value     :: <SInt16>;
  sealed inline-only slot style-value    :: <SInt16>;
  sealed inline-only slot mode-value     :: <SInt16>;
  sealed inline-only slot just-value     :: <SInt16>;
  sealed inline-only slot foreColor-value :: <RGBColor>;
  sealed inline-only slot backColor-value :: <RGBColor>;
  pack: 2;
  c-name: "struct ControlFontStyleRec";
end;
define C-pointer-type <ControlFontStyleRec*> => <ControlFontStyleRec>;
define C-pointer-type <ControlFontStyleRec**> => <ControlFontStyleRec*>;
define C-pointer-type <ControlFontStylePtr> => <ControlFontStyleRec>;
// unnamed enum:
define inline-only constant $kControlFontStyleTag      = FOUR_CHAR_CODE('f', 'o', 'n', 't');
define inline-only constant $kControlKeyFilterTag      = FOUR_CHAR_CODE('f', 'l', 't', 'r');

// unnamed enum:
define inline-only constant $kControlSupportsGhosting  = ash(1,0);
define inline-only constant $kControlSupportsEmbedding = ash(1,1);
define inline-only constant $kControlSupportsFocus     = ash(1,2);
define inline-only constant $kControlWantsIdle         = ash(1,3);
define inline-only constant $kControlWantsActivate     = ash(1,4);
define inline-only constant $kControlHandlesTracking   = ash(1,5);
define inline-only constant $kControlSupportsDataAccess = ash(1,6);
define inline-only constant $kControlHasSpecialBackground = ash(1,7);
define inline-only constant $kControlGetsFocusOnClick  = ash(1,8);
define inline-only constant $kControlSupportsCalcBestRect = ash(1,9);
define inline-only constant $kControlSupportsLiveFeedback = ash(1,10);

// unnamed enum:
define inline-only constant $kControlHasRadioBehavior  = ash(1,11);

// unnamed enum:
define inline-only constant $kControlAutoToggles       = ash(1,14);
define inline-only constant $kControlSupportsGetRegion = ash(1,17);

// unnamed enum:
define inline-only constant $kControlMsgDrawGhost      = 13;
define inline-only constant $kControlMsgCalcBestRect   = 14;
define inline-only constant $kControlMsgHandleTracking = 15;
define inline-only constant $kControlMsgFocus          = 16;
define inline-only constant $kControlMsgKeyDown        = 17;
define inline-only constant $kControlMsgIdle           = 18;
define inline-only constant $kControlMsgGetFeatures    = 19;
define inline-only constant $kControlMsgSetData        = 20;
define inline-only constant $kControlMsgGetData        = 21;
define inline-only constant $kControlMsgActivate       = 22;
define inline-only constant $kControlMsgSetUpBackground = 23;
define inline-only constant $kControlMsgCalcValueFromPos = 26;
define inline-only constant $kControlMsgTestNewMsgSupport = 27;

// unnamed enum:
define inline-only constant $kControlMsgSubValueChanged = 25;
define inline-only constant $kControlMsgSubControlAdded = 28;
define inline-only constant $kControlMsgSubControlRemoved = 29;

// unnamed enum:
define inline-only constant $kControlMsgApplyTextColor = 30;
define inline-only constant $kControlMsgGetRegion      = 31;


define C-struct <ControlTrackingRec>
  sealed inline-only slot startPt-value  :: <Point>;
  sealed inline-only slot modifiers-value :: <SInt16>;
  sealed inline-only slot action-value   :: <ControlActionUPP>;
  pack: 2;
  c-name: "struct ControlTrackingRec";
end;
define C-pointer-type <ControlTrackingRec*> => <ControlTrackingRec>;
define C-pointer-type <ControlTrackingRec**> => <ControlTrackingRec*>;
define C-pointer-type <ControlTrackingPtr> => <ControlTrackingRec>;

define C-struct <ControlKeyDownRec>
  sealed inline-only slot modifiers-value :: <SInt16>;
  sealed inline-only slot keyCode-value  :: <SInt16>;
  sealed inline-only slot charCode-value :: <SInt16>;
  pack: 2;
  c-name: "struct ControlKeyDownRec";
end;
define C-pointer-type <ControlKeyDownRec*> => <ControlKeyDownRec>;
define C-pointer-type <ControlKeyDownRec**> => <ControlKeyDownRec*>;
define C-pointer-type <ControlKeyDownPtr> => <ControlKeyDownRec>;

define C-struct <ControlDataAccessRec>
  sealed inline-only slot tag-value      :: <ResType>;
  sealed inline-only slot part-value     :: <ResType>;
  sealed inline-only slot size-value     :: <Size>;
  sealed inline-only slot dataPtr-value  :: <Ptr>;
  pack: 2;
  c-name: "struct ControlDataAccessRec";
end;
define C-pointer-type <ControlDataAccessRec*> => <ControlDataAccessRec>;
define C-pointer-type <ControlDataAccessRec**> => <ControlDataAccessRec*>;
define C-pointer-type <ControlDataAccessPtr> => <ControlDataAccessRec>;

define C-struct <ControlCalcSizeRec>
  sealed inline-only slot height-value   :: <SInt16>;
  sealed inline-only slot width-value    :: <SInt16>;
  sealed inline-only slot baseLine-value :: <SInt16>;
  pack: 2;
  c-name: "struct ControlCalcSizeRec";
end;
define C-pointer-type <ControlCalcSizeRec*> => <ControlCalcSizeRec>;
define C-pointer-type <ControlCalcSizeRec**> => <ControlCalcSizeRec*>;
define C-pointer-type <ControlCalcSizePtr> => <ControlCalcSizeRec>;

define C-struct <ControlBackgroundRec>
  sealed inline-only slot depth-value    :: <SInt16>;
  sealed inline-only slot colorDevice-value :: <MacBoolean>;
  pack: 2;
  c-name: "struct ControlBackgroundRec";
end;
define C-pointer-type <ControlBackgroundRec*> => <ControlBackgroundRec>;
define C-pointer-type <ControlBackgroundRec**> => <ControlBackgroundRec*>;
define C-pointer-type <ControlBackgroundPtr> => <ControlBackgroundRec>;

define C-struct <ControlApplyTextColorRec>
  sealed inline-only slot depth-value    :: <SInt16>;
  sealed inline-only slot colorDevice-value :: <MacBoolean>;
  sealed inline-only slot active-value   :: <MacBoolean>;
  pack: 2;
  c-name: "struct ControlApplyTextColorRec";
end;
define C-pointer-type <ControlApplyTextColorRec*> => <ControlApplyTextColorRec>;
define C-pointer-type <ControlApplyTextColorRec**> => <ControlApplyTextColorRec*>;
define C-pointer-type <ControlApplyTextColorPtr> => <ControlApplyTextColorRec>;

define C-struct <ControlGetRegionRec>
  sealed inline-only slot region-value   :: <RgnHandle>;
  sealed inline-only slot part-value     :: <ControlPartCode>;
  pack: 2;
  c-name: "struct ControlGetRegionRec";
end;
define C-pointer-type <ControlGetRegionRec*> => <ControlGetRegionRec>;
define C-pointer-type <ControlGetRegionRec**> => <ControlGetRegionRec*>;
define C-pointer-type <ControlGetRegionPtr> => <ControlGetRegionRec>;
define constant <ControlKeyFilterProcPtr> = <C-function-pointer>;
define constant <ControlKeyFilterUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppControlKeyFilterProcInfo = #x00003FE0;

// unnamed enum:
define inline-only constant $kControlBevelButtonSmallBevelProc = 32;
define inline-only constant $kControlBevelButtonNormalBevelProc = 33;
define inline-only constant $kControlBevelButtonLargeBevelProc = 34;

// unnamed enum:
define inline-only constant $kControlBevelButtonAlignSysDirection = -1;
define inline-only constant $kControlBevelButtonAlignCenter = 0;
define inline-only constant $kControlBevelButtonAlignLeft = 1;
define inline-only constant $kControlBevelButtonAlignRight = 2;
define inline-only constant $kControlBevelButtonAlignTop = 3;
define inline-only constant $kControlBevelButtonAlignBottom = 4;
define inline-only constant $kControlBevelButtonAlignTopLeft = 5;
define inline-only constant $kControlBevelButtonAlignBottomLeft = 6;
define inline-only constant $kControlBevelButtonAlignTopRight = 7;
define inline-only constant $kControlBevelButtonAlignBottomRight = 8;

define inline constant <ControlButtonGraphicAlignment> = <SInt16>;
define C-pointer-type <ControlButtonGraphicAlignment*> => <ControlButtonGraphicAlignment>;
define C-pointer-type <ControlButtonGraphicAlignment**> => <ControlButtonGraphicAlignment*>;
// unnamed enum:
define inline-only constant $kControlBevelButtonAlignTextSysDirection = $teFlushDefault;
define inline-only constant $kControlBevelButtonAlignTextCenter = $teCenter;
define inline-only constant $kControlBevelButtonAlignTextFlushRight = $teFlushRight;
define inline-only constant $kControlBevelButtonAlignTextFlushLeft = $teFlushLeft;

define inline constant <ControlButtonTextAlignment> = <SInt16>;
define C-pointer-type <ControlButtonTextAlignment*> => <ControlButtonTextAlignment>;
define C-pointer-type <ControlButtonTextAlignment**> => <ControlButtonTextAlignment*>;
// unnamed enum:
define inline-only constant $kControlBevelButtonPlaceSysDirection = -1;
define inline-only constant $kControlBevelButtonPlaceNormally = 0;
define inline-only constant $kControlBevelButtonPlaceToRightOfGraphic = 1;
define inline-only constant $kControlBevelButtonPlaceToLeftOfGraphic = 2;
define inline-only constant $kControlBevelButtonPlaceBelowGraphic = 3;
define inline-only constant $kControlBevelButtonPlaceAboveGraphic = 4;

define inline constant <ControlButtonTextPlacement> = <SInt16>;
define C-pointer-type <ControlButtonTextPlacement*> => <ControlButtonTextPlacement>;
define C-pointer-type <ControlButtonTextPlacement**> => <ControlButtonTextPlacement*>;
// unnamed enum:
define inline-only constant $kControlBevelButtonSmallBevelVariant = 0;
define inline-only constant $kControlBevelButtonNormalBevelVariant = ash(1, 0);
define inline-only constant $kControlBevelButtonLargeBevelVariant = ash(1, 1);
define inline-only constant $kControlBevelButtonMenuOnRight = ash(1, 2);

// unnamed enum:
define inline-only constant $kControlBehaviorPushbutton = 0;
define inline-only constant $kControlBehaviorToggles   = #x0100;
define inline-only constant $kControlBehaviorSticky    = #x0200;
define inline-only constant $kControlBehaviorMultiValueMenu = #x4000;
define inline-only constant $kControlBehaviorOffsetContents = #x8000;

// unnamed enum:
define inline-only constant $kControlBehaviorCommandMenu = #x2000;

// unnamed enum:
define inline-only constant $kControlContentTextOnly   = 0;
define inline-only constant $kControlContentIconSuiteRes = 1;
define inline-only constant $kControlContentCIconRes   = 2;
define inline-only constant $kControlContentPictRes    = 3;
define inline-only constant $kControlContentIconSuiteHandle = 129;
define inline-only constant $kControlContentCIconHandle = 130;
define inline-only constant $kControlContentPictHandle = 131;
define inline-only constant $kControlContentIconRef    = 132;

define inline constant <ControlContentType> = <SInt16>;
define C-pointer-type <ControlContentType*> => <ControlContentType>;
define C-pointer-type <ControlContentType**> => <ControlContentType*>;
// unnamed enum:
define inline-only constant $kControlBevelButtonContentTag = FOUR_CHAR_CODE('c', 'o', 'n', 't');
define inline-only constant $kControlBevelButtonTransformTag = FOUR_CHAR_CODE('t', 'r', 'a', 'n');
define inline-only constant $kControlBevelButtonTextAlignTag = FOUR_CHAR_CODE('t', 'a', 'l', 'i');
define inline-only constant $kControlBevelButtonTextOffsetTag = FOUR_CHAR_CODE('t', 'o', 'f', 'f');
define inline-only constant $kControlBevelButtonGraphicAlignTag = FOUR_CHAR_CODE('g', 'a', 'l', 'i');
define inline-only constant $kControlBevelButtonGraphicOffsetTag = FOUR_CHAR_CODE('g', 'o', 'f', 'f');
define inline-only constant $kControlBevelButtonTextPlaceTag = FOUR_CHAR_CODE('t', 'p', 'l', 'c');
define inline-only constant $kControlBevelButtonMenuValueTag = FOUR_CHAR_CODE('m', 'v', 'a', 'l');
define inline-only constant $kControlBevelButtonMenuHandleTag = FOUR_CHAR_CODE('m', 'h', 'n', 'd');
define inline-only constant $kControlBevelButtonCenterPopupGlyphTag = FOUR_CHAR_CODE('p', 'g', 'l', 'c');

// unnamed enum:
define inline-only constant $kControlBevelButtonLastMenuTag = FOUR_CHAR_CODE('l', 'm', 'n', 'u');
define inline-only constant $kControlBevelButtonMenuDelayTag = FOUR_CHAR_CODE('m', 'd', 'l', 'y');

// unnamed enum:
define inline-only constant $kControlBevelButtonScaleIconTag = FOUR_CHAR_CODE('s', 'c', 'a', 'l');

define C-union <ControlButtonContentInfo%u%1>
  sealed inline-only slot resID-value    :: <SInt16>;
  sealed inline-only slot cIconHandle-value :: <CIconHandle>;
  sealed inline-only slot iconSuite-value :: <Handle>;
  sealed inline-only slot iconRef-value  :: <Handle>;
  sealed inline-only slot picture-value  :: <PicHandle>;
  pack: 2;
end;

define C-struct <ControlButtonContentInfo>
  sealed inline-only slot contentType-value :: <ControlContentType>;
  sealed inline-only slot u-value        :: <ControlButtonContentInfo%u%1>;
  pack: 2;
  c-name: "struct ControlButtonContentInfo";
end;
define C-pointer-type <ControlButtonContentInfo*> => <ControlButtonContentInfo>;
define C-pointer-type <ControlButtonContentInfo**> => <ControlButtonContentInfo*>;
define C-pointer-type <ControlButtonContentInfoPtr> => <ControlButtonContentInfo>;
// unnamed enum:
define inline-only constant $kControlSliderProc        = 48;
define inline-only constant $kControlSliderLiveFeedback = ash(1, 0);
define inline-only constant $kControlSliderHasTickMarks = ash(1, 1);
define inline-only constant $kControlSliderReverseDirection = ash(1, 2);
define inline-only constant $kControlSliderNonDirectional = ash(1, 3);

// unnamed enum:
define inline-only constant $kControlTriangleProc      = 64;
define inline-only constant $kControlTriangleLeftFacingProc = 65;
define inline-only constant $kControlTriangleAutoToggleProc = 66;
define inline-only constant $kControlTriangleLeftFacingAutoToggleProc = 67;

// unnamed enum:
define inline-only constant $kControlTriangleLastValueTag = FOUR_CHAR_CODE('l', 'a', 's', 't');

// unnamed enum:
define inline-only constant $kControlProgressBarProc   = 80;

// unnamed enum:
define inline-only constant $kControlProgressBarIndeterminateTag = FOUR_CHAR_CODE('i', 'n', 'd', 'e');

// unnamed enum:
define inline-only constant $kControlLittleArrowsProc  = 96;

// unnamed enum:
define inline-only constant $kControlChasingArrowsProc = 112;

// unnamed enum:
define inline-only constant $kControlTabLargeProc      = 128;
define inline-only constant $kControlTabSmallProc      = 129;
define inline-only constant $kControlTabLargeNorthProc = 128;
define inline-only constant $kControlTabSmallNorthProc = 129;
define inline-only constant $kControlTabLargeSouthProc = 130;
define inline-only constant $kControlTabSmallSouthProc = 131;
define inline-only constant $kControlTabLargeEastProc  = 132;
define inline-only constant $kControlTabSmallEastProc  = 133;
define inline-only constant $kControlTabLargeWestProc  = 134;
define inline-only constant $kControlTabSmallWestProc  = 135;

// unnamed enum:
define inline-only constant $kControlTabContentRectTag = FOUR_CHAR_CODE('r', 'e', 'c', 't');
define inline-only constant $kControlTabEnabledFlagTag = FOUR_CHAR_CODE('e', 'n', 'a', 'b');
define inline-only constant $kControlTabFontStyleTag   = $kControlFontStyleTag;

// unnamed enum:
define inline-only constant $kControlTabInfoTag        = FOUR_CHAR_CODE('t', 'a', 'b', 'i');

// unnamed enum:
define inline-only constant $kControlTabInfoVersionZero = 0;


define C-struct <ControlTabInfoRec>
  sealed inline-only slot version-value  :: <SInt16>;
  sealed inline-only slot iconSuiteID-value :: <SInt16>;
  sealed inline-only slot name-value     :: <Str255>;
  pack: 2;
  c-name: "struct ControlTabInfoRec";
end;
define C-pointer-type <ControlTabInfoRec*> => <ControlTabInfoRec>;
define C-pointer-type <ControlTabInfoRec**> => <ControlTabInfoRec*>;
// unnamed enum:
define inline-only constant $kControlSeparatorLineProc = 144;

// unnamed enum:
define inline-only constant $kControlGroupBoxTextTitleProc = 160;
define inline-only constant $kControlGroupBoxCheckBoxProc = 161;
define inline-only constant $kControlGroupBoxPopupButtonProc = 162;
define inline-only constant $kControlGroupBoxSecondaryTextTitleProc = 164;
define inline-only constant $kControlGroupBoxSecondaryCheckBoxProc = 165;
define inline-only constant $kControlGroupBoxSecondaryPopupButtonProc = 166;

// unnamed enum:
define inline-only constant $kControlGroupBoxMenuHandleTag = FOUR_CHAR_CODE('m', 'h', 'a', 'n');
define inline-only constant $kControlGroupBoxFontStyleTag = $kControlFontStyleTag;

// unnamed enum:
define inline-only constant $kControlGroupBoxTitleRectTag = FOUR_CHAR_CODE('t', 'r', 'e', 'c');

// unnamed enum:
define inline-only constant $kControlImageWellProc     = 176;

// unnamed enum:
define inline-only constant $kControlImageWellContentTag = FOUR_CHAR_CODE('c', 'o', 'n', 't');
define inline-only constant $kControlImageWellTransformTag = FOUR_CHAR_CODE('t', 'r', 'a', 'n');

// unnamed enum:
define inline-only constant $kControlPopupArrowEastProc = 192;
define inline-only constant $kControlPopupArrowWestProc = 193;
define inline-only constant $kControlPopupArrowNorthProc = 194;
define inline-only constant $kControlPopupArrowSouthProc = 195;
define inline-only constant $kControlPopupArrowSmallEastProc = 196;
define inline-only constant $kControlPopupArrowSmallWestProc = 197;
define inline-only constant $kControlPopupArrowSmallNorthProc = 198;
define inline-only constant $kControlPopupArrowSmallSouthProc = 199;

// unnamed enum:
define inline-only constant $kControlPlacardProc       = 224;

// unnamed enum:
define inline-only constant $kControlClockTimeProc     = 240;
define inline-only constant $kControlClockTimeSecondsProc = 241;
define inline-only constant $kControlClockDateProc     = 242;
define inline-only constant $kControlClockMonthYearProc = 243;

// unnamed enum:
define inline-only constant $kControlClockNoFlags      = 0;
define inline-only constant $kControlClockIsDisplayOnly = 1;
define inline-only constant $kControlClockIsLive       = 2;

// unnamed enum:
define inline-only constant $kControlClockLongDateTag  = FOUR_CHAR_CODE('d', 'a', 't', 'e');
define inline-only constant $kControlClockFontStyleTag = $kControlFontStyleTag;

// unnamed enum:
define inline-only constant $kControlUserPaneProc      = 256;

// unnamed enum:
define inline-only constant $kControlUserItemDrawProcTag = FOUR_CHAR_CODE('u', 'i', 'd', 'p');
define inline-only constant $kControlUserPaneDrawProcTag = FOUR_CHAR_CODE('d', 'r', 'a', 'w');
define inline-only constant $kControlUserPaneHitTestProcTag = FOUR_CHAR_CODE('h', 'i', 't', 't');
define inline-only constant $kControlUserPaneTrackingProcTag = FOUR_CHAR_CODE('t', 'r', 'a', 'k');
define inline-only constant $kControlUserPaneIdleProcTag = FOUR_CHAR_CODE('i', 'd', 'l', 'e');
define inline-only constant $kControlUserPaneKeyDownProcTag = FOUR_CHAR_CODE('k', 'e', 'y', 'd');
define inline-only constant $kControlUserPaneActivateProcTag = FOUR_CHAR_CODE('a', 'c', 't', 'i');
define inline-only constant $kControlUserPaneFocusProcTag = FOUR_CHAR_CODE('f', 'o', 'c', 'i');
define inline-only constant $kControlUserPaneBackgroundProcTag = FOUR_CHAR_CODE('b', 'a', 'c', 'k');

define constant <ControlUserPaneDrawProcPtr> = <C-function-pointer>;
define constant <ControlUserPaneHitTestProcPtr> = <C-function-pointer>;
define constant <ControlUserPaneTrackingProcPtr> = <C-function-pointer>;
define constant <ControlUserPaneIdleProcPtr> = <C-function-pointer>;
define constant <ControlUserPaneKeyDownProcPtr> = <C-function-pointer>;
define constant <ControlUserPaneActivateProcPtr> = <C-function-pointer>;
define constant <ControlUserPaneFocusProcPtr> = <C-function-pointer>;
define constant <ControlUserPaneBackgroundProcPtr> = <C-function-pointer>;
define constant <ControlUserPaneDrawUPP> = <UniversalProcPtr>;
define constant <ControlUserPaneHitTestUPP> = <UniversalProcPtr>;
define constant <ControlUserPaneTrackingUPP> = <UniversalProcPtr>;
define constant <ControlUserPaneIdleUPP> = <UniversalProcPtr>;
define constant <ControlUserPaneKeyDownUPP> = <UniversalProcPtr>;
define constant <ControlUserPaneActivateUPP> = <UniversalProcPtr>;
define constant <ControlUserPaneFocusUPP> = <UniversalProcPtr>;
define constant <ControlUserPaneBackgroundUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppControlUserPaneDrawProcInfo = #x000002C0;

// unnamed enum:
define inline-only constant $uppControlUserPaneHitTestProcInfo = #x000003E0;

// unnamed enum:
define inline-only constant $uppControlUserPaneTrackingProcInfo = #x00000FE0;

// unnamed enum:
define inline-only constant $uppControlUserPaneIdleProcInfo = #x000000C0;

// unnamed enum:
define inline-only constant $uppControlUserPaneKeyDownProcInfo = #x00002AE0;

// unnamed enum:
define inline-only constant $uppControlUserPaneActivateProcInfo = #x000001C0;

// unnamed enum:
define inline-only constant $uppControlUserPaneFocusProcInfo = #x000002E0;

// unnamed enum:
define inline-only constant $uppControlUserPaneBackgroundProcInfo = #x000003C0;

// unnamed enum:
define inline-only constant $kControlEditTextProc      = 272;
define inline-only constant $kControlEditTextPasswordProc = 274;

// unnamed enum:
define inline-only constant $kControlEditTextInlineInputProc = 276;

// unnamed enum:
define inline-only constant $kControlEditTextStyleTag  = $kControlFontStyleTag;
define inline-only constant $kControlEditTextTextTag   = FOUR_CHAR_CODE('t', 'e', 'x', 't');
define inline-only constant $kControlEditTextTEHandleTag = FOUR_CHAR_CODE('t', 'h', 'a', 'n');
define inline-only constant $kControlEditTextKeyFilterTag = $kControlKeyFilterTag;
define inline-only constant $kControlEditTextSelectionTag = FOUR_CHAR_CODE('s', 'e', 'l', 'e');
define inline-only constant $kControlEditTextPasswordTag = FOUR_CHAR_CODE('p', 'a', 's', 's');

// unnamed enum:
define inline-only constant $kControlEditTextKeyScriptBehaviorTag = FOUR_CHAR_CODE('k', 's', 'c', 'r');
define inline-only constant $kControlEditTextLockedTag = FOUR_CHAR_CODE('l', 'o', 'c', 'k');
define inline-only constant $kControlEditTextFixedTextTag = FOUR_CHAR_CODE('f', 't', 'x', 't');
define inline-only constant $kControlEditTextValidationProcTag = FOUR_CHAR_CODE('v', 'a', 'l', 'i');
define inline-only constant $kControlEditTextInlinePreUpdateProcTag = FOUR_CHAR_CODE('p', 'r', 'u', 'p');
define inline-only constant $kControlEditTextInlinePostUpdateProcTag = FOUR_CHAR_CODE('p', 'o', 'u', 'p');


define C-struct <ControlEditTextSelectionRec>
  sealed inline-only slot selStart-value :: <SInt16>;
  sealed inline-only slot selEnd-value   :: <SInt16>;
  pack: 2;
  c-name: "struct ControlEditTextSelectionRec";
end;
define C-pointer-type <ControlEditTextSelectionRec*> => <ControlEditTextSelectionRec>;
define C-pointer-type <ControlEditTextSelectionRec**> => <ControlEditTextSelectionRec*>;
define C-pointer-type <ControlEditTextSelectionPtr> => <ControlEditTextSelectionRec>;
define constant <ControlEditTextValidationProcPtr> = <C-function-pointer>;
define constant <ControlEditTextValidationUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppControlEditTextValidationProcInfo = #x000000C0;

// unnamed enum:
define inline-only constant $kControlStaticTextProc    = 288;

// unnamed enum:
define inline-only constant $kControlStaticTextStyleTag = $kControlFontStyleTag;
define inline-only constant $kControlStaticTextTextTag = FOUR_CHAR_CODE('t', 'e', 'x', 't');
define inline-only constant $kControlStaticTextTextHeightTag = FOUR_CHAR_CODE('t', 'h', 'e', 'i');

// unnamed enum:
define inline-only constant $kControlStaticTextTruncTag = FOUR_CHAR_CODE('t', 'r', 'u', 'n');

// unnamed enum:
define inline-only constant $kControlPictureProc       = 304;
define inline-only constant $kControlPictureNoTrackProc = 305;

// unnamed enum:
define inline-only constant $kControlIconProc          = 320;
define inline-only constant $kControlIconNoTrackProc   = 321;
define inline-only constant $kControlIconSuiteProc     = 322;
define inline-only constant $kControlIconSuiteNoTrackProc = 323;

// unnamed enum:
define inline-only constant $kControlIconRefProc       = 324;
define inline-only constant $kControlIconRefNoTrackProc = 325;

// unnamed enum:
define inline-only constant $kControlIconTransformTag  = FOUR_CHAR_CODE('t', 'r', 'f', 'm');
define inline-only constant $kControlIconAlignmentTag  = FOUR_CHAR_CODE('a', 'l', 'g', 'n');

// unnamed enum:
define inline-only constant $kControlIconResourceIDTag = FOUR_CHAR_CODE('i', 'r', 'e', 's');
define inline-only constant $kControlIconContentTag    = FOUR_CHAR_CODE('c', 'o', 'n', 't');

// unnamed enum:
define inline-only constant $kControlWindowHeaderProc  = 336;
define inline-only constant $kControlWindowListViewHeaderProc = 337;

// unnamed enum:
define inline-only constant $kControlListBoxProc       = 352;
define inline-only constant $kControlListBoxAutoSizeProc = 353;

// unnamed enum:
define inline-only constant $kControlListBoxListHandleTag = FOUR_CHAR_CODE('l', 'h', 'a', 'n');
define inline-only constant $kControlListBoxKeyFilterTag = $kControlKeyFilterTag;
define inline-only constant $kControlListBoxFontStyleTag = $kControlFontStyleTag;

// unnamed enum:
define inline-only constant $kControlListBoxDoubleClickTag = FOUR_CHAR_CODE('d', 'b', 'l', 'c');
define inline-only constant $kControlListBoxLDEFTag    = FOUR_CHAR_CODE('l', 'd', 'e', 'f');

// unnamed enum:
define inline-only constant $kControlPushButtonProc    = 368;
define inline-only constant $kControlCheckBoxProc      = 369;
define inline-only constant $kControlRadioButtonProc   = 370;
define inline-only constant $kControlPushButLeftIconProc = 374;
define inline-only constant $kControlPushButRightIconProc = 375;

// unnamed enum:
define inline-only constant $kControlCheckBoxAutoToggleProc = 371;
define inline-only constant $kControlRadioButtonAutoToggleProc = 372;

// unnamed enum:
define inline-only constant $kControlPushButtonDefaultTag = FOUR_CHAR_CODE('d', 'f', 'l', 't');

// unnamed enum:
define inline-only constant $kControlPushButtonCancelTag = FOUR_CHAR_CODE('c', 'n', 'c', 'l');

// unnamed enum:
define inline-only constant $kControlScrollBarProc     = 384;
define inline-only constant $kControlScrollBarLiveProc = 386;

// unnamed enum:
define inline-only constant $kControlPopupButtonProc   = 400;
define inline-only constant $kControlPopupFixedWidthVariant = ash(1,0);
define inline-only constant $kControlPopupVariableWidthVariant = ash(1,1);
define inline-only constant $kControlPopupUseAddResMenuVariant = ash(1,2);
define inline-only constant $kControlPopupUseWFontVariant = ash(1,3);

// unnamed enum:
define inline-only constant $kControlPopupButtonMenuHandleTag = FOUR_CHAR_CODE('m', 'h', 'a', 'n');
define inline-only constant $kControlPopupButtonMenuIDTag = FOUR_CHAR_CODE('m', 'n', 'i', 'd');

// unnamed enum:
define inline-only constant $kControlPopupButtonExtraHeightTag = FOUR_CHAR_CODE('e', 'x', 'h', 't');

// unnamed enum:
define inline-only constant $kControlRadioGroupProc    = 416;

// unnamed enum:
define inline-only constant $kControlScrollTextBoxProc = 432;
define inline-only constant $kControlScrollTextBoxAutoScrollProc = 433;

// unnamed enum:
define inline-only constant $kControlScrollTextBoxDelayBeforeAutoScrollTag = FOUR_CHAR_CODE('s', 't', 'd', 'l');
define inline-only constant $kControlScrollTextBoxDelayBetweenAutoScrollTag = FOUR_CHAR_CODE('s', 'c', 'd', 'l');
define inline-only constant $kControlScrollTextBoxAutoScrollAmountTag = FOUR_CHAR_CODE('s', 'a', 'm', 't');
define inline-only constant $kControlScrollTextBoxContentsTag = FOUR_CHAR_CODE('t', 'r', 'e', 's');

define inline constant <ControlVariant> = <SInt16>;
define C-pointer-type <ControlVariant*> => <ControlVariant>;
define C-pointer-type <ControlVariant**> => <ControlVariant*>;
// unnamed enum:
define inline-only constant $kControlNoVariant         = 0;
define inline-only constant $kControlUsesOwningWindowsFontVariant = ash(1,3);

// unnamed enum:
define inline-only constant $kControlNoPart            = 0;
define inline-only constant $kControlLabelPart         = 1;
define inline-only constant $kControlMenuPart          = 2;
define inline-only constant $kControlTrianglePart      = 4;
define inline-only constant $kControlEditTextPart      = 5;
define inline-only constant $kControlPicturePart       = 6;
define inline-only constant $kControlIconPart          = 7;
define inline-only constant $kControlClockPart         = 8;
define inline-only constant $kControlListBoxPart       = 24;
define inline-only constant $kControlListBoxDoubleClickPart = 25;
define inline-only constant $kControlImageWellPart     = 26;
define inline-only constant $kControlRadioGroupPart    = 27;
define inline-only constant $kControlButtonPart        = 10;
define inline-only constant $kControlCheckBoxPart      = 11;
define inline-only constant $kControlRadioButtonPart   = 11;
define inline-only constant $kControlUpButtonPart      = 20;
define inline-only constant $kControlDownButtonPart    = 21;
define inline-only constant $kControlPageUpPart        = 22;
define inline-only constant $kControlPageDownPart      = 23;
define inline-only constant $kControlIndicatorPart     = 129;
define inline-only constant $kControlDisabledPart      = 254;
define inline-only constant $kControlInactivePart      = 255;

// unnamed enum:
define inline-only constant $kControlClockHourDayPart  = 9;
define inline-only constant $kControlClockMinuteMonthPart = 10;
define inline-only constant $kControlClockSecondYearPart = 11;
define inline-only constant $kControlClockAMPMPart     = 12;

// unnamed enum:
define inline-only constant $kControlStructureMetaPart = -1;
define inline-only constant $kControlContentMetaPart   = -2;

// unnamed enum:
define inline-only constant $kControlCheckBoxUncheckedValue = 0;
define inline-only constant $kControlCheckBoxCheckedValue = 1;
define inline-only constant $kControlCheckBoxMixedValue = 2;

// unnamed enum:
define inline-only constant $kControlRadioButtonUncheckedValue = 0;
define inline-only constant $kControlRadioButtonCheckedValue = 1;
define inline-only constant $kControlRadioButtonMixedValue = 2;

// unnamed enum:
define inline-only constant $popupFixedWidth           = ash(1,0);
define inline-only constant $popupVariableWidth        = ash(1,1);
define inline-only constant $popupUseAddResMenu        = ash(1,2);
define inline-only constant $popupUseWFont             = ash(1,3);

// unnamed enum:
define inline-only constant $popupTitleBold            = ash(1,8);
define inline-only constant $popupTitleItalic          = ash(1,9);
define inline-only constant $popupTitleUnderline       = ash(1,10);
define inline-only constant $popupTitleOutline         = ash(1,11);
define inline-only constant $popupTitleShadow          = ash(1,12);
define inline-only constant $popupTitleCondense        = ash(1,13);
define inline-only constant $popupTitleExtend          = ash(1,14);
define inline-only constant $popupTitleNoStyle         = ash(1,15);

// unnamed enum:
define inline-only constant $popupTitleLeftJust        = #x00000000;
define inline-only constant $popupTitleCenterJust      = #x00000001;
define inline-only constant $popupTitleRightJust       = #x000000FF;

// unnamed enum:
define inline-only constant $noConstraint              = $kNoConstraint;
define inline-only constant $hAxisOnly                 = 1;
define inline-only constant $vAxisOnly                 = 2;


define inline-only C-function NewControl
  parameter owningWindow :: <WindowPtr>;
  parameter boundsRect ::  /* const */ <Rect*>;
  parameter controlTitle :: <ConstStr255Param>;
  parameter initiallyVisible :: <MacBoolean>;
  parameter initialValue :: <SInt16>;
  parameter minimumValue :: <SInt16>;
  parameter maximumValue :: <SInt16>;
  parameter procID     :: <SInt16>;
  parameter controlReference :: <SInt32>;
  result value :: <ControlHandle>;
  c-name: "NewControl";
  c-modifiers: "pascal";
end;

define inline-only C-function GetNewControl
  parameter resourceID :: <SInt16>;
  parameter owningWindow :: <WindowPtr>;
  result value :: <ControlHandle>;
  c-name: "GetNewControl";
  c-modifiers: "pascal";
end;

define inline-only C-function DisposeControl
  parameter theControl :: <ControlHandle>;
  c-name: "DisposeControl";
  c-modifiers: "pascal";
end;

define inline-only C-function KillControls
  parameter theWindow  :: <WindowPtr>;
  c-name: "KillControls";
  c-modifiers: "pascal";
end;

define inline-only C-function HiliteControl
  parameter theControl :: <ControlHandle>;
  parameter hiliteState :: <ControlPartCode>;
  c-name: "HiliteControl";
  c-modifiers: "pascal";
end;

define inline-only C-function ShowControl
  parameter theControl :: <ControlHandle>;
  c-name: "ShowControl";
  c-modifiers: "pascal";
end;

define inline-only C-function HideControl
  parameter theControl :: <ControlHandle>;
  c-name: "HideControl";
  c-modifiers: "pascal";
end;

define inline-only C-function IsControlActive
  parameter inControl  :: <ControlHandle>;
  result value :: <MacBoolean>;
  c-name: "IsControlActive";
  c-modifiers: "pascal";
end;

define inline-only C-function IsControlVisible
  parameter inControl  :: <ControlHandle>;
  result value :: <MacBoolean>;
  c-name: "IsControlVisible";
  c-modifiers: "pascal";
end;

define inline-only C-function ActivateControl
  parameter inControl  :: <ControlHandle>;
  result value :: <OSErr>;
  c-name: "ActivateControl";
  c-modifiers: "pascal";
end;

define inline-only C-function DeactivateControl
  parameter inControl  :: <ControlHandle>;
  result value :: <OSErr>;
  c-name: "DeactivateControl";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlVisibility
  parameter inControl  :: <ControlHandle>;
  parameter inIsVisible :: <MacBoolean>;
  parameter inDoDraw   :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "SetControlVisibility";
  c-modifiers: "pascal";
end;

define inline-only C-function DrawControls
  parameter theWindow  :: <WindowPtr>;
  c-name: "DrawControls";
  c-modifiers: "pascal";
end;

define inline-only C-function Draw1Control
  parameter theControl :: <ControlHandle>;
  c-name: "Draw1Control";
  c-modifiers: "pascal";
end;

define inline-only C-function UpdateControls
  parameter theWindow  :: <WindowPtr>;
  parameter updateRegion :: <RgnHandle>;
  c-name: "UpdateControls";
  c-modifiers: "pascal";
end;

define inline-only C-function GetBestControlRect
  parameter inControl  :: <ControlHandle>;
  parameter outRect    :: <Rect*>;
  parameter outBaseLineOffset :: <SInt16*>;
  result value :: <OSErr>;
  c-name: "GetBestControlRect";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlFontStyle
  parameter inControl  :: <ControlHandle>;
  parameter inStyle    ::  /* const */ <ControlFontStyleRec*>;
  result value :: <OSErr>;
  c-name: "SetControlFontStyle";
  c-modifiers: "pascal";
end;

define inline-only C-function DrawControlInCurrentPort
  parameter inControl  :: <ControlHandle>;
  c-name: "DrawControlInCurrentPort";
  c-modifiers: "pascal";
end;

define inline-only C-function SetUpControlBackground
  parameter inControl  :: <ControlHandle>;
  parameter inDepth    :: <SInt16>;
  parameter inIsColorDevice :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "SetUpControlBackground";
  c-modifiers: "pascal";
end;

define inline-only C-function SetUpControlTextColor
  parameter inControl  :: <ControlHandle>;
  parameter inDepth    :: <SInt16>;
  parameter inIsColorDevice :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "SetUpControlTextColor";
  c-modifiers: "pascal";
end;

define inline-only C-function DragControl
  parameter theControl :: <ControlHandle>;
  parameter startPoint :: <Point>;
  parameter limitRect  ::  /* const */ <Rect*>;
  parameter slopRect   ::  /* const */ <Rect*>;
  parameter axis       :: <DragConstraint>;
  c-name: "DragControl";
  c-modifiers: "pascal";
end;

define inline-only C-function TestControl
  parameter theControl :: <ControlHandle>;
  parameter testPoint  :: <Point>;
  result value :: <ControlPartCode>;
  c-name: "TestControl";
  c-modifiers: "pascal";
end;

define inline-only C-function FindControl
  parameter testPoint  :: <Point>;
  parameter theWindow  :: <WindowPtr>;
  parameter theControl :: <ControlHandle*>;
  result value :: <ControlPartCode>;
  c-name: "FindControl";
  c-modifiers: "pascal";
end;

define inline-only C-function FindControlUnderMouse
  parameter inWhere    :: <Point>;
  parameter inWindow   :: <WindowPtr>;
  parameter outPart    :: <SInt16*>;
  result value :: <ControlHandle>;
  c-name: "FindControlUnderMouse";
  c-modifiers: "pascal";
end;

define inline-only C-function HandleControlKey
  parameter inControl  :: <ControlHandle>;
  parameter inKeyCode  :: <SInt16>;
  parameter inCharCode :: <SInt16>;
  parameter inModifiers :: <SInt16>;
  result value :: <SInt16>;
  c-name: "HandleControlKey";
  c-modifiers: "pascal";
end;

define inline-only C-function IdleControls
  parameter inWindow   :: <WindowPtr>;
  c-name: "IdleControls";
  c-modifiers: "pascal";
end;

define inline-only C-function MoveControl
  parameter theControl :: <ControlHandle>;
  parameter h          :: <SInt16>;
  parameter v          :: <SInt16>;
  c-name: "MoveControl";
  c-modifiers: "pascal";
end;

define inline-only C-function SizeControl
  parameter theControl :: <ControlHandle>;
  parameter w          :: <SInt16>;
  parameter h          :: <SInt16>;
  c-name: "SizeControl";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlTitle
  parameter theControl :: <ControlHandle>;
  parameter title      :: <ConstStr255Param>;
  c-name: "SetControlTitle";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlTitle
  parameter theControl :: <ControlHandle>;
  parameter title      :: <Str255>;
  c-name: "GetControlTitle";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlValue
  parameter theControl :: <ControlHandle>;
  result value :: <SInt16>;
  c-name: "GetControlValue";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlValue
  parameter theControl :: <ControlHandle>;
  parameter newValue   :: <SInt16>;
  c-name: "SetControlValue";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlMinimum
  parameter theControl :: <ControlHandle>;
  result value :: <SInt16>;
  c-name: "GetControlMinimum";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlMinimum
  parameter theControl :: <ControlHandle>;
  parameter newMinimum :: <SInt16>;
  c-name: "SetControlMinimum";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlMaximum
  parameter theControl :: <ControlHandle>;
  result value :: <SInt16>;
  c-name: "GetControlMaximum";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlMaximum
  parameter theControl :: <ControlHandle>;
  parameter newMaximum :: <SInt16>;
  c-name: "SetControlMaximum";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlViewSize
  parameter theControl :: <ControlHandle>;
  result value :: <SInt32>;
  c-name: "GetControlViewSize";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlViewSize
  parameter theControl :: <ControlHandle>;
  parameter newViewSize :: <SInt32>;
  c-name: "SetControlViewSize";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControl32BitValue
  parameter theControl :: <ControlHandle>;
  result value :: <SInt32>;
  c-name: "GetControl32BitValue";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControl32BitValue
  parameter theControl :: <ControlHandle>;
  parameter newValue   :: <SInt32>;
  c-name: "SetControl32BitValue";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControl32BitMaximum
  parameter theControl :: <ControlHandle>;
  result value :: <SInt32>;
  c-name: "GetControl32BitMaximum";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControl32BitMaximum
  parameter theControl :: <ControlHandle>;
  parameter newMaximum :: <SInt32>;
  c-name: "SetControl32BitMaximum";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControl32BitMinimum
  parameter theControl :: <ControlHandle>;
  result value :: <SInt32>;
  c-name: "GetControl32BitMinimum";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControl32BitMinimum
  parameter theControl :: <ControlHandle>;
  parameter newMinimum :: <SInt32>;
  c-name: "SetControl32BitMinimum";
  c-modifiers: "pascal";
end;

define inline-only C-function IsValidControlHandle
  parameter theControl :: <ControlHandle>;
  result value :: <MacBoolean>;
  c-name: "IsValidControlHandle";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlProperty
  parameter control    :: <ControlHandle>;
  parameter propertyCreator :: <OSType>;
  parameter propertyTag :: <OSType>;
  parameter bufferSize :: <UInt32>;
  parameter actualSize :: <UInt32*>;
  parameter propertyBuffer :: <C-void*>;
  result value :: <OSStatus>;
  c-name: "GetControlProperty";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlPropertySize
  parameter control    :: <ControlHandle>;
  parameter propertyCreator :: <OSType>;
  parameter propertyTag :: <OSType>;
  parameter size       :: <UInt32*>;
  result value :: <OSStatus>;
  c-name: "GetControlPropertySize";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlProperty
  parameter control    :: <ControlHandle>;
  parameter propertyCreator :: <OSType>;
  parameter propertyTag :: <OSType>;
  parameter propertySize :: <UInt32>;
  parameter propertyData :: <C-void*>;
  result value :: <OSStatus>;
  c-name: "SetControlProperty";
  c-modifiers: "pascal";
end;

define inline-only C-function RemoveControlProperty
  parameter control    :: <ControlHandle>;
  parameter propertyCreator :: <OSType>;
  parameter propertyTag :: <OSType>;
  result value :: <OSStatus>;
  c-name: "RemoveControlProperty";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlRegion
  parameter inControl  :: <ControlHandle>;
  parameter inPart     :: <ControlPartCode>;
  parameter outRegion  :: <RgnHandle>;
  result value :: <OSStatus>;
  c-name: "GetControlRegion";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlVariant
  parameter theControl :: <ControlHandle>;
  result value :: <ControlVariant>;
  c-name: "GetControlVariant";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlAction
  parameter theControl :: <ControlHandle>;
  parameter actionProc :: <ControlActionUPP>;
  c-name: "SetControlAction";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlAction
  parameter theControl :: <ControlHandle>;
  result value :: <ControlActionUPP>;
  c-name: "GetControlAction";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlReference
  parameter theControl :: <ControlHandle>;
  parameter data       :: <SInt32>;
  c-name: "SetControlReference";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlReference
  parameter theControl :: <ControlHandle>;
  result value :: <SInt32>;
  c-name: "GetControlReference";
  c-modifiers: "pascal";
end;

define inline-only C-function GetAuxiliaryControlRecord
  parameter theControl :: <ControlHandle>;
  parameter acHndl     :: <AuxCtlHandle*>;
  result value :: <MacBoolean>;
  c-name: "GetAuxiliaryControlRecord";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlColor
  parameter theControl :: <ControlHandle>;
  parameter newColorTable :: <CCTabHandle>;
  c-name: "SetControlColor";
  c-modifiers: "pascal";
end;

define inline-only C-function GetBevelButtonMenuValue
  parameter inButton   :: <ControlHandle>;
  parameter outValue   :: <SInt16*>;
  result value :: <OSErr>;
  c-name: "GetBevelButtonMenuValue";
  c-modifiers: "pascal";
end;

define inline-only C-function SetBevelButtonMenuValue
  parameter inButton   :: <ControlHandle>;
  parameter inValue    :: <SInt16>;
  result value :: <OSErr>;
  c-name: "SetBevelButtonMenuValue";
  c-modifiers: "pascal";
end;

define inline-only C-function GetBevelButtonMenuHandle
  parameter inButton   :: <ControlHandle>;
  parameter outHandle  :: <MenuHandle*>;
  result value :: <OSErr>;
  c-name: "GetBevelButtonMenuHandle";
  c-modifiers: "pascal";
end;

define inline-only C-function GetBevelButtonContentInfo
  parameter inButton   :: <ControlHandle>;
  parameter outContent :: <ControlButtonContentInfoPtr>;
  result value :: <OSErr>;
  c-name: "GetBevelButtonContentInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function SetBevelButtonContentInfo
  parameter inButton   :: <ControlHandle>;
  parameter inContent  :: <ControlButtonContentInfoPtr>;
  result value :: <OSErr>;
  c-name: "SetBevelButtonContentInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function SetBevelButtonTransform
  parameter inButton   :: <ControlHandle>;
  parameter transform  :: <IconTransformType>;
  result value :: <OSErr>;
  c-name: "SetBevelButtonTransform";
  c-modifiers: "pascal";
end;

define inline-only C-function SetBevelButtonGraphicAlignment
  parameter inButton   :: <ControlHandle>;
  parameter inAlign    :: <ControlButtonGraphicAlignment>;
  parameter inHOffset  :: <SInt16>;
  parameter inVOffset  :: <SInt16>;
  result value :: <OSErr>;
  c-name: "SetBevelButtonGraphicAlignment";
  c-modifiers: "pascal";
end;

define inline-only C-function SetBevelButtonTextAlignment
  parameter inButton   :: <ControlHandle>;
  parameter inAlign    :: <ControlButtonTextAlignment>;
  parameter inHOffset  :: <SInt16>;
  result value :: <OSErr>;
  c-name: "SetBevelButtonTextAlignment";
  c-modifiers: "pascal";
end;

define inline-only C-function SetBevelButtonTextPlacement
  parameter inButton   :: <ControlHandle>;
  parameter inWhere    :: <ControlButtonTextPlacement>;
  result value :: <OSErr>;
  c-name: "SetBevelButtonTextPlacement";
  c-modifiers: "pascal";
end;

define inline-only C-function GetImageWellContentInfo
  parameter inButton   :: <ControlHandle>;
  parameter outContent :: <ControlButtonContentInfoPtr>;
  result value :: <OSErr>;
  c-name: "GetImageWellContentInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function SetImageWellContentInfo
  parameter inButton   :: <ControlHandle>;
  parameter inContent  :: <ControlButtonContentInfoPtr>;
  result value :: <OSErr>;
  c-name: "SetImageWellContentInfo";
  c-modifiers: "pascal";
end;

define inline-only C-function SetImageWellTransform
  parameter inButton   :: <ControlHandle>;
  parameter inTransform :: <IconTransformType>;
  result value :: <OSErr>;
  c-name: "SetImageWellTransform";
  c-modifiers: "pascal";
end;

define inline-only C-function GetTabContentRect
  parameter inTabControl :: <ControlHandle>;
  parameter outContentRect :: <Rect*>;
  result value :: <OSErr>;
  c-name: "GetTabContentRect";
  c-modifiers: "pascal";
end;

define inline-only C-function SetTabEnabled
  parameter inTabControl :: <ControlHandle>;
  parameter inTabToHilite :: <SInt16>;
  parameter inEnabled  :: <MacBoolean>;
  result value :: <OSErr>;
  c-name: "SetTabEnabled";
  c-modifiers: "pascal";
end;

define inline-only C-function SetDisclosureTriangleLastValue
  parameter inTabControl :: <ControlHandle>;
  parameter inValue    :: <SInt16>;
  result value :: <OSErr>;
  c-name: "SetDisclosureTriangleLastValue";
  c-modifiers: "pascal";
end;

define inline-only C-function SendControlMessage
  parameter inControl  :: <ControlHandle>;
  parameter inMessage  :: <SInt16>;
  parameter inParam    :: <SInt32>;
  result value :: <SInt32>;
  c-name: "SendControlMessage";
  c-modifiers: "pascal";
end;

define inline-only C-function DumpControlHierarchy
  parameter inWindow   :: <WindowPtr>;
  parameter inDumpFile ::  /* const */ <FSSpec*>;
  result value :: <OSErr>;
  c-name: "DumpControlHierarchy";
  c-modifiers: "pascal";
end;

define inline-only C-function CreateRootControl
  parameter inWindow   :: <WindowPtr>;
  parameter outControl :: <ControlHandle*>;
  result value :: <OSErr>;
  c-name: "CreateRootControl";
  c-modifiers: "pascal";
end;

define inline-only C-function GetRootControl
  parameter inWindow   :: <WindowPtr>;
  parameter outControl :: <ControlHandle*>;
  result value :: <OSErr>;
  c-name: "GetRootControl";
  c-modifiers: "pascal";
end;

define inline-only C-function EmbedControl
  parameter inControl  :: <ControlHandle>;
  parameter inContainer :: <ControlHandle>;
  result value :: <OSErr>;
  c-name: "EmbedControl";
  c-modifiers: "pascal";
end;

define inline-only C-function AutoEmbedControl
  parameter inControl  :: <ControlHandle>;
  parameter inWindow   :: <WindowPtr>;
  result value :: <OSErr>;
  c-name: "AutoEmbedControl";
  c-modifiers: "pascal";
end;

define inline-only C-function GetSuperControl
  parameter inControl  :: <ControlHandle>;
  parameter outParent  :: <ControlHandle*>;
  result value :: <OSErr>;
  c-name: "GetSuperControl";
  c-modifiers: "pascal";
end;

define inline-only C-function CountSubControls
  parameter inControl  :: <ControlHandle>;
  parameter outNumChildren :: <UInt16*>;
  result value :: <OSErr>;
  c-name: "CountSubControls";
  c-modifiers: "pascal";
end;

define inline-only C-function GetIndexedSubControl
  parameter inControl  :: <ControlHandle>;
  parameter inIndex    :: <UInt16>;
  parameter outSubControl :: <ControlHandle*>;
  result value :: <OSErr>;
  c-name: "GetIndexedSubControl";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlSupervisor
  parameter inControl  :: <ControlHandle>;
  parameter inBoss     :: <ControlHandle>;
  result value :: <OSErr>;
  c-name: "SetControlSupervisor";
  c-modifiers: "pascal";
end;

define inline-only C-function GetKeyboardFocus
  parameter inWindow   :: <WindowPtr>;
  parameter outControl :: <ControlHandle*>;
  result value :: <OSErr>;
  c-name: "GetKeyboardFocus";
  c-modifiers: "pascal";
end;

define inline-only C-function SetKeyboardFocus
  parameter inWindow   :: <WindowPtr>;
  parameter inControl  :: <ControlHandle>;
  parameter inPart     :: <ControlFocusPart>;
  result value :: <OSErr>;
  c-name: "SetKeyboardFocus";
  c-modifiers: "pascal";
end;

define inline-only C-function AdvanceKeyboardFocus
  parameter inWindow   :: <WindowPtr>;
  result value :: <OSErr>;
  c-name: "AdvanceKeyboardFocus";
  c-modifiers: "pascal";
end;

define inline-only C-function ReverseKeyboardFocus
  parameter inWindow   :: <WindowPtr>;
  result value :: <OSErr>;
  c-name: "ReverseKeyboardFocus";
  c-modifiers: "pascal";
end;

define inline-only C-function ClearKeyboardFocus
  parameter inWindow   :: <WindowPtr>;
  result value :: <OSErr>;
  c-name: "ClearKeyboardFocus";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlFeatures
  parameter inControl  :: <ControlHandle>;
  parameter outFeatures :: <UInt32*>;
  result value :: <OSErr>;
  c-name: "GetControlFeatures";
  c-modifiers: "pascal";
end;

define inline-only C-function SetControlData
  parameter inControl  :: <ControlHandle>;
  parameter inPart     :: <ControlPartCode>;
  parameter inTagName  :: <ResType>;
  parameter inSize     :: <Size>;
  parameter inData     :: <Ptr>;
  result value :: <OSErr>;
  c-name: "SetControlData";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlData
  parameter inControl  :: <ControlHandle>;
  parameter inPart     :: <ControlPartCode>;
  parameter inTagName  :: <ResType>;
  parameter inBufferSize :: <Size>;
  parameter inBuffer   :: <Ptr>;
  parameter outActualSize :: <Size*>;
  result value :: <OSErr>;
  c-name: "GetControlData";
  c-modifiers: "pascal";
end;

define inline-only C-function GetControlDataSize
  parameter inControl  :: <ControlHandle>;
  parameter inPart     :: <ControlPartCode>;
  parameter inTagName  :: <ResType>;
  parameter outMaxSize :: <Size*>;
  result value :: <OSErr>;
  c-name: "GetControlDataSize";
  c-modifiers: "pascal";
end;
define inline constant <ControlDefProcMessage> = <SInt16>;
define C-pointer-type <ControlDefProcMessage*> => <ControlDefProcMessage>;
define C-pointer-type <ControlDefProcMessage**> => <ControlDefProcMessage*>;
// unnamed enum:
define inline-only constant $drawCntl                  = 0;
define inline-only constant $testCntl                  = 1;
define inline-only constant $calcCRgns                 = 2;
define inline-only constant $initCntl                  = 3;
define inline-only constant $dispCntl                  = 4;
define inline-only constant $posCntl                   = 5;
define inline-only constant $thumbCntl                 = 6;
define inline-only constant $dragCntl                  = 7;
define inline-only constant $autoTrack                 = 8;
define inline-only constant $calcCntlRgn               = 10;
define inline-only constant $calcThumbRgn              = 11;
define inline-only constant $drawThumbOutline          = 12;

define constant <ControlDefProcPtr> = <C-function-pointer>;
define constant <ControlDefUPP> = <UniversalProcPtr>;
// unnamed enum:
define inline-only constant $uppControlDefProcInfo     = #x00003BB0;

// unnamed enum:
define inline-only constant $kDrawControlEntireControl = 0;
define inline-only constant $kDrawControlIndicatorOnly = 129;

// unnamed enum:
define inline-only constant $kDragControlEntireControl = 0;
define inline-only constant $kDragControlIndicator     = 1;


define C-struct <IndicatorDragConstraint>
  sealed inline-only slot limitRect-value :: <Rect>;
  sealed inline-only slot slopRect-value :: <Rect>;
  sealed inline-only slot axis-value     :: <DragConstraint>;
  pack: 2;
  c-name: "struct IndicatorDragConstraint";
end;
define C-pointer-type <IndicatorDragConstraint*> => <IndicatorDragConstraint>;
define C-pointer-type <IndicatorDragConstraint**> => <IndicatorDragConstraint*>;
define C-pointer-type <IndicatorDragConstraintPtr> => <IndicatorDragConstraint>;
define C-pointer-type <IndicatorDragConstraintHandle> => <IndicatorDragConstraintPtr>;

