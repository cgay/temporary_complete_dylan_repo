Module:    carbon-interface
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "CodeFragments.h"; do not edit.

// unnamed enum:
define inline-only constant $kCFragResourceType        = FOUR_CHAR_CODE('c', 'f', 'r', 'g');
define inline-only constant $kCFragResourceID          = 0;
define inline-only constant $kCFragLibraryFileType     = FOUR_CHAR_CODE('s', 'h', 'l', 'b');
define inline-only constant $kCFragAllFileTypes        = c-type-cast(<C-both-long>,$FFFFFFFF);

define inline constant <CFragArchitecture> = <OSType>;
define C-pointer-type <CFragArchitecture*> => <CFragArchitecture>;
define C-pointer-type <CFragArchitecture**> => <CFragArchitecture*>;
// unnamed enum:
define inline-only constant $kPowerPCCFragArch         = FOUR_CHAR_CODE('p', 'w', 'p', 'c');
define inline-only constant $kMotorola68KCFragArch     = FOUR_CHAR_CODE('m', '6', '8', 'k');
define inline-only constant $kAnyCFragArch             = as(<machine-word>, #x3F3F3F3F);

// unnamed enum:
define inline-only constant $kCompiledCFragArch        = $kPowerPCCFragArch;

define inline constant <CFragVersionNumber> = <UInt32>;
define C-pointer-type <CFragVersionNumber*> => <CFragVersionNumber>;
define C-pointer-type <CFragVersionNumber**> => <CFragVersionNumber*>;
// unnamed enum:
define inline-only constant $kNullCFragVersion         = 0;
define inline-only constant $kWildcardCFragVersion     = c-type-cast(<C-both-long>,$FFFFFFFF);

define inline constant <CFragUsage> = <UInt8>;
define C-pointer-type <CFragUsage*> => <CFragUsage>;
define C-pointer-type <CFragUsage**> => <CFragUsage*>;
// unnamed enum:
define inline-only constant $kImportLibraryCFrag       = 0;
define inline-only constant $kApplicationCFrag         = 1;
define inline-only constant $kDropInAdditionCFrag      = 2;
define inline-only constant $kStubLibraryCFrag         = 3;
define inline-only constant $kWeakStubLibraryCFrag     = 4;

// unnamed enum:
define inline-only constant $kIsCompleteCFrag          = 0;
define inline-only constant $kFirstCFragUpdate         = 1;

// unnamed enum:
define inline-only constant $kCFragGoesToEOF           = 0;

define inline constant <CFragLocatorKind> = <UInt8>;
define C-pointer-type <CFragLocatorKind*> => <CFragLocatorKind>;
define C-pointer-type <CFragLocatorKind**> => <CFragLocatorKind*>;
// unnamed enum:
define inline-only constant $kMemoryCFragLocator       = 0;
define inline-only constant $kDataForkCFragLocator     = 1;
define inline-only constant $kResourceCFragLocator     = 2;
define inline-only constant $kByteStreamCFragLocator   = 3;
define inline-only constant $kNamedFragmentCFragLocator = 4;


define C-union <CFragUsage1Union>
  sealed inline-only slot appStackSize-value :: <UInt32>;
  pack: 2;
end;
define C-pointer-type <CFragUsage1Union*> => <CFragUsage1Union>;
define C-pointer-type <CFragUsage1Union**> => <CFragUsage1Union*>;

define C-union <CFragUsage2Union>
  sealed inline-only slot appSubdirID-value :: <SInt16>;
  sealed inline-only slot libFlags-value :: <UInt16>;
  pack: 2;
end;
define C-pointer-type <CFragUsage2Union*> => <CFragUsage2Union>;
define C-pointer-type <CFragUsage2Union**> => <CFragUsage2Union*>;
// unnamed enum:
define inline-only constant $kCFragLibUsageMapPrivatelyMask = #x0001;


define C-union <CFragWhere1Union>
  sealed inline-only slot spaceID-value  :: <UInt32>;
  sealed inline-only slot forkKind-value :: <OSType>;
  pack: 2;
end;
define C-pointer-type <CFragWhere1Union*> => <CFragWhere1Union>;
define C-pointer-type <CFragWhere1Union**> => <CFragWhere1Union*>;

define C-union <CFragWhere2Union>
  sealed inline-only slot forkInstance-value :: <UInt16>;
  pack: 2;
end;
define C-pointer-type <CFragWhere2Union*> => <CFragWhere2Union>;
define C-pointer-type <CFragWhere2Union**> => <CFragWhere2Union*>;
// unnamed enum:
define inline-only constant $kDefaultCFragNameLen      = 16;


define C-struct <CFragResourceMember>
  sealed inline-only slot architecture-value :: <CFragArchitecture>;
  sealed inline-only slot reservedA-value :: <UInt16>;
  sealed inline-only slot reservedB-value :: <UInt8>;
  sealed inline-only slot updateLevel-value :: <UInt8>;
  sealed inline-only slot currentVersion-value :: <CFragVersionNumber>;
  sealed inline-only slot oldDefVersion-value :: <CFragVersionNumber>;
  sealed inline-only slot uUsage1-value  :: <CFragUsage1Union>;
  sealed inline-only slot uUsage2-value  :: <CFragUsage2Union>;
  sealed inline-only slot usage-value    :: <CFragUsage>;
  sealed inline-only slot where-value    :: <CFragLocatorKind>;
  sealed inline-only slot offset-value   :: <UInt32>;
  sealed inline-only slot length-value   :: <UInt32>;
  sealed inline-only slot uWhere1-value  :: <CFragWhere1Union>;
  sealed inline-only slot uWhere2-value  :: <CFragWhere2Union>;
  sealed inline-only slot extensionCount-value :: <UInt16>;
  sealed inline-only slot memberSize-value :: <UInt16>;
  sealed inline-only array slot name-array :: <C-unsigned-char>,
    length: 16,
    address-getter: name-value;
  pack: 2;
  c-name: "struct CFragResourceMember";
end;
define C-pointer-type <CFragResourceMember*> => <CFragResourceMember>;
define C-pointer-type <CFragResourceMember**> => <CFragResourceMember*>;
define C-pointer-type <CFragResourceMemberPtr> => <CFragResourceMember>;

define C-struct <CFragResourceExtensionHeader>
  sealed inline-only slot extensionKind-value :: <UInt16>;
  sealed inline-only slot extensionSize-value :: <UInt16>;
  pack: 2;
  c-name: "struct CFragResourceExtensionHeader";
end;
define C-pointer-type <CFragResourceExtensionHeader*> => <CFragResourceExtensionHeader>;
define C-pointer-type <CFragResourceExtensionHeader**> => <CFragResourceExtensionHeader*>;
define C-pointer-type <CFragResourceExtensionHeaderPtr> => <CFragResourceExtensionHeader>;

define C-struct <CFragResourceSearchExtension>
  sealed inline-only slot header-value   :: <CFragResourceExtensionHeader>;
  sealed inline-only slot libKind-value  :: <OSType>;
  sealed inline-only array slot qualifiers-array ::
	<C-unsigned-char>,
    length: 1,
    address-getter: qualifiers-value;
  pack: 2;
  c-name: "struct CFragResourceSearchExtension";
end;
define C-pointer-type <CFragResourceSearchExtension*> => <CFragResourceSearchExtension>;
define C-pointer-type <CFragResourceSearchExtension**> => <CFragResourceSearchExtension*>;
define C-pointer-type <CFragResourceSearchExtensionPtr> => <CFragResourceSearchExtension>;
// unnamed enum:
define inline-only constant $kCFragResourceSearchExtensionKind = #x30EE;


define C-struct <CFragResource>
  sealed inline-only slot reservedA-value :: <UInt32>;
  sealed inline-only slot reservedB-value :: <UInt32>;
  sealed inline-only slot reservedC-value :: <UInt16>;
  sealed inline-only slot version-value  :: <UInt16>;
  sealed inline-only slot reservedD-value :: <UInt32>;
  sealed inline-only slot reservedE-value :: <UInt32>;
  sealed inline-only slot reservedF-value :: <UInt32>;
  sealed inline-only slot reservedG-value :: <UInt32>;
  sealed inline-only slot reservedH-value :: <UInt16>;
  sealed inline-only slot memberCount-value :: <UInt16>;
  sealed inline-only slot firstMember-value :: <CFragResourceMember>;
  pack: 2;
  c-name: "struct CFragResource";
end;
define C-pointer-type <CFragResource*> => <CFragResource>;
define C-pointer-type <CFragResource**> => <CFragResource*>;
define C-pointer-type <CFragResourcePtr> => <CFragResource>;
define C-pointer-type <CFragResourceHandle> => <CFragResourcePtr>;
// unnamed enum:
define inline-only constant $kCurrCFragResourceVersion = 1;

define inline constant <CFragConnectionID> = <OpaqueCFragConnectionID*>;
define C-pointer-type <CFragConnectionID*> => <CFragConnectionID>;
define C-pointer-type <CFragConnectionID**> => <CFragConnectionID*>;
define inline constant <CFragClosureID> = <OpaqueCFragClosureID*>;
define C-pointer-type <CFragClosureID*> => <CFragClosureID>;
define C-pointer-type <CFragClosureID**> => <CFragClosureID*>;
define inline constant <CFragContainerID> = <OpaqueCFragContainerID*>;
define C-pointer-type <CFragContainerID*> => <CFragContainerID>;
define C-pointer-type <CFragContainerID**> => <CFragContainerID*>;
define inline constant <CFragContextID> = <OpaqueCFragContextID*>;
define C-pointer-type <CFragContextID*> => <CFragContextID>;
define C-pointer-type <CFragContextID**> => <CFragContextID*>;
define inline constant <CFragLoadOptions> = <UInt32>;
define C-pointer-type <CFragLoadOptions*> => <CFragLoadOptions>;
define C-pointer-type <CFragLoadOptions**> => <CFragLoadOptions*>;
// unnamed enum:
define inline-only constant $kReferenceCFrag           = #x0001;
define inline-only constant $kFindCFrag                = #x0002;
define inline-only constant $kPrivateCFragCopy         = #x0005;

// unnamed enum:
define inline-only constant $kUnresolvedCFragSymbolAddress = 0;

define inline constant <CFragSymbolClass> = <UInt8>;
define C-pointer-type <CFragSymbolClass*> => <CFragSymbolClass>;
define C-pointer-type <CFragSymbolClass**> => <CFragSymbolClass*>;
// unnamed enum:
define inline-only constant $kCodeCFragSymbol          = 0;
define inline-only constant $kDataCFragSymbol          = 1;
define inline-only constant $kTVectorCFragSymbol       = 2;
define inline-only constant $kTOCCFragSymbol           = 3;
define inline-only constant $kGlueCFragSymbol          = 4;


define inline-only C-function GetSharedLibrary
  parameter libName    :: <ConstStr63Param>;
  parameter archType   :: <CFragArchitecture>;
  parameter loadFlags  :: <CFragLoadOptions>;
  parameter connID     :: <CFragConnectionID*>;
  parameter mainAddr   :: <Ptr*>;
  parameter errMessage :: <Str255>;
  result value :: <OSErr>;
  c-name: "GetSharedLibrary";
  c-modifiers: "pascal";
end;

define inline-only C-function GetDiskFragment
  parameter fileSpec   ::  /* const */ <FSSpec*>;
  parameter offset     :: <UInt32>;
  parameter length     :: <UInt32>;
  parameter fragName   :: <ConstStr63Param>;
  parameter loadFlags  :: <CFragLoadOptions>;
  parameter connID     :: <CFragConnectionID*>;
  parameter mainAddr   :: <Ptr*>;
  parameter errMessage :: <Str255>;
  result value :: <OSErr>;
  c-name: "GetDiskFragment";
  c-modifiers: "pascal";
end;

define inline-only C-function GetMemFragment
  parameter memAddr    :: <C-void*>;
  parameter length     :: <UInt32>;
  parameter fragName   :: <ConstStr63Param>;
  parameter loadFlags  :: <CFragLoadOptions>;
  parameter connID     :: <CFragConnectionID*>;
  parameter mainAddr   :: <Ptr*>;
  parameter errMessage :: <Str255>;
  result value :: <OSErr>;
  c-name: "GetMemFragment";
  c-modifiers: "pascal";
end;

define inline-only C-function CloseConnection
  parameter connID     :: <CFragConnectionID*>;
  result value :: <OSErr>;
  c-name: "CloseConnection";
  c-modifiers: "pascal";
end;

define inline-only C-function FindSymbol
  parameter connID     :: <CFragConnectionID>;
  parameter symName    :: <ConstStr255Param>;
  parameter symAddr    :: <Ptr*>;
  parameter symClass   :: <CFragSymbolClass*>;
  result value :: <OSErr>;
  c-name: "FindSymbol";
  c-modifiers: "pascal";
end;

define inline-only C-function CountSymbols
  parameter connID     :: <CFragConnectionID>;
  parameter symCount   :: <C-both-long*>;
  result value :: <OSErr>;
  c-name: "CountSymbols";
  c-modifiers: "pascal";
end;

define inline-only C-function GetIndSymbol
  parameter connID     :: <CFragConnectionID>;
  parameter symIndex   :: <C-both-long>;
  parameter symName    :: <Str255>;
  parameter symAddr    :: <Ptr*>;
  parameter symClass   :: <CFragSymbolClass*>;
  result value :: <OSErr>;
  c-name: "GetIndSymbol";
  c-modifiers: "pascal";
end;

define C-struct <CFragSystem7MemoryLocator>
  sealed inline-only slot address-value  :: <LogicalAddress>;
  sealed inline-only slot length-value   :: <UInt32>;
  sealed inline-only slot inPlace-value  :: <MacBoolean>;
  sealed inline-only slot reservedA-value :: <UInt8>;
  sealed inline-only slot reservedB-value :: <UInt16>;
  pack: 2;
  c-name: "struct CFragSystem7MemoryLocator";
end;
define C-pointer-type <CFragSystem7MemoryLocator*> => <CFragSystem7MemoryLocator>;
define C-pointer-type <CFragSystem7MemoryLocator**> => <CFragSystem7MemoryLocator*>;

define C-struct <CFragSystem7DiskFlatLocator>
  sealed inline-only slot fileSpec-value :: <FSSpecPtr>;
  sealed inline-only slot offset-value   :: <UInt32>;
  sealed inline-only slot length-value   :: <UInt32>;
  pack: 2;
  c-name: "struct CFragSystem7DiskFlatLocator";
end;
define C-pointer-type <CFragSystem7DiskFlatLocator*> => <CFragSystem7DiskFlatLocator>;
define C-pointer-type <CFragSystem7DiskFlatLocator**> => <CFragSystem7DiskFlatLocator*>;

define C-struct <CFragSystem7SegmentedLocator>
  sealed inline-only slot fileSpec-value :: <FSSpecPtr>;
  sealed inline-only slot rsrcType-value :: <OSType>;
  sealed inline-only slot rsrcID-value   :: <SInt16>;
  sealed inline-only slot reservedA-value :: <UInt16>;
  pack: 2;
  c-name: "struct CFragSystem7SegmentedLocator";
end;
define C-pointer-type <CFragSystem7SegmentedLocator*> => <CFragSystem7SegmentedLocator>;
define C-pointer-type <CFragSystem7SegmentedLocator**> => <CFragSystem7SegmentedLocator*>;
define C-union <CFragSystem7Locator%u%1>
  sealed inline-only slot onDisk-value   :: <CFragSystem7DiskFlatLocator>;
  sealed inline-only slot inMem-value    :: <CFragSystem7MemoryLocator>;
  sealed inline-only slot inSegs-value   :: <CFragSystem7SegmentedLocator>;
  pack: 2;
end;

define C-struct <CFragSystem7Locator>
  sealed inline-only slot where-value    :: <SInt32>;
  sealed inline-only slot u-value        :: <CFragSystem7Locator%u%1>;
  pack: 2;
  c-name: "struct CFragSystem7Locator";
end;
define C-pointer-type <CFragSystem7Locator*> => <CFragSystem7Locator>;
define C-pointer-type <CFragSystem7Locator**> => <CFragSystem7Locator*>;
define C-pointer-type <CFragSystem7LocatorPtr> => <CFragSystem7Locator>;

define C-struct <CFragSystem7InitBlock>
  sealed inline-only slot contextID-value :: <CFragContextID>;
  sealed inline-only slot closureID-value :: <CFragClosureID>;
  sealed inline-only slot connectionID-value :: <CFragConnectionID>;
  sealed inline-only slot fragLocator-value :: <CFragSystem7Locator>;
  sealed inline-only slot libName-value  :: <StringPtr>;
  sealed inline-only slot reservedA-value :: <UInt32>;
  pack: 2;
  c-name: "struct CFragSystem7InitBlock";
end;
define C-pointer-type <CFragSystem7InitBlock*> => <CFragSystem7InitBlock>;
define C-pointer-type <CFragSystem7InitBlock**> => <CFragSystem7InitBlock*>;
define C-pointer-type <CFragSystem7InitBlockPtr> => <CFragSystem7InitBlock>;
define inline constant <CFragInitBlock> = <CFragSystem7InitBlock>;
define C-pointer-type <CFragInitBlock*> => <CFragInitBlock>;
define C-pointer-type <CFragInitBlock**> => <CFragInitBlock*>;
define inline constant <CFragInitBlockPtr> = <CFragSystem7InitBlockPtr>;
define C-pointer-type <CFragInitBlockPtr*> => <CFragInitBlockPtr>;
define C-pointer-type <CFragInitBlockPtr**> => <CFragInitBlockPtr*>;
define constant <CFragInitFunction> = <C-function-pointer>;
define constant <CFragTermProcedure> = <C-function-pointer>;
// unnamed enum:
define inline-only constant $kLoadCFrag                = $kReferenceCFrag;


