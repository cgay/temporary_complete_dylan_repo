Module:    gtk-widgets
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "gtkmenufactory.h"; do not edit.

define C-pointer-type <GtkMenuEntry*> => <GtkMenuEntry>;
define C-pointer-type <GtkMenuEntry**> => <GtkMenuEntry*>;
define C-pointer-type <GtkMenuPath*> => <GtkMenuPath>;
define C-pointer-type <GtkMenuPath**> => <GtkMenuPath*>;
define C-pointer-type <GtkMenuFactory*> => <GtkMenuFactory>;
define C-pointer-type <GtkMenuFactory**> => <GtkMenuFactory*>;
define C-pointer-type <GtkMenuCallback*> => <GtkMenuCallback>;
define C-pointer-type <GtkMenuCallback**> => <GtkMenuCallback*>;

define C-struct <_GtkMenuEntry>
  sealed inline-only slot path-value     :: <gchar*>;
  sealed inline-only slot accelerator-value :: <gchar*>;
  sealed inline-only slot callback-value :: <GtkMenuCallback>;
  sealed inline-only slot callback-data-value :: <gpointer>;
  sealed inline-only slot widget-value   :: <GtkWidget*>;
  pointer-type-name: <_GtkMenuEntry*>;
  c-name: "struct _GtkMenuEntry";
end;

define C-struct <_GtkMenuPath>
  sealed inline-only slot path-value     :: <C-string>;
  sealed inline-only slot widget-value   :: <GtkWidget*>;
  pointer-type-name: <_GtkMenuPath*>;
  c-name: "struct _GtkMenuPath";
end;

define C-struct <_GtkMenuFactory>
  sealed inline-only slot path-value     :: <gchar*>;
  sealed inline-only slot type-value     :: <GtkMenuFactoryType>;
  sealed inline-only slot accel-group-value :: <GtkAccelGroup*>;
  sealed inline-only slot widget-value   :: <GtkWidget*>;
  sealed inline-only slot subfactories-value :: <GList*>;
  pointer-type-name: <_GtkMenuFactory*>;
  c-name: "struct _GtkMenuFactory";
end;

define inline-only C-function gtk-menu-factory-new
  parameter type1      :: <GtkMenuFactoryType>;
  result value :: <GtkMenuFactory*>;
  c-name: "gtk_menu_factory_new";
end;

define inline-only C-function gtk-menu-factory-destroy
  parameter factory1   :: <GtkMenuFactory*>;
  c-name: "gtk_menu_factory_destroy";
end;

define inline-only C-function gtk-menu-factory-add-entries
  parameter factory1   :: <GtkMenuFactory*>;
  parameter entries2   :: <GtkMenuEntry*>;
  parameter nentries3  :: <C-int>;
  c-name: "gtk_menu_factory_add_entries";
end;

define inline-only C-function gtk-menu-factory-add-subfactory
  parameter factory1   :: <GtkMenuFactory*>;
  parameter subfactory2 :: <GtkMenuFactory*>;
  parameter path3      ::  /* const */ <C-string>;
  c-name: "gtk_menu_factory_add_subfactory";
end;

define inline-only C-function gtk-menu-factory-remove-paths
  parameter factory1   :: <GtkMenuFactory*>;
  parameter paths2     :: <C-string*>;
  parameter npaths3    :: <C-int>;
  c-name: "gtk_menu_factory_remove_paths";
end;

define inline-only C-function gtk-menu-factory-remove-entries
  parameter factory1   :: <GtkMenuFactory*>;
  parameter entries2   :: <GtkMenuEntry*>;
  parameter nentries3  :: <C-int>;
  c-name: "gtk_menu_factory_remove_entries";
end;

define inline-only C-function gtk-menu-factory-remove-subfactory
  parameter factory1   :: <GtkMenuFactory*>;
  parameter subfactory2 :: <GtkMenuFactory*>;
  parameter path3      ::  /* const */ <C-string>;
  c-name: "gtk_menu_factory_remove_subfactory";
end;

define inline-only C-function gtk-menu-factory-find
  parameter factory1   :: <GtkMenuFactory*>;
  parameter path2      ::  /* const */ <C-string>;
  result value :: <GtkMenuPath*>;
  c-name: "gtk_menu_factory_find";
end;

define inline constant <GtkMenuEntry> = <_GtkMenuEntry>;
define inline constant <GtkMenuPath> = <_GtkMenuPath>;
define inline constant <GtkMenuFactory> = <_GtkMenuFactory>;
define inline constant <GtkMenuCallback> = <C-function-pointer>;
define sealed domain make (singleton(<_GtkMenuEntry*>));
define sealed domain initialize (<_GtkMenuEntry*>);
define sealed domain make (singleton(<_GtkMenuPath*>));
define sealed domain initialize (<_GtkMenuPath*>);
define sealed domain make (singleton(<_GtkMenuFactory*>));
define sealed domain initialize (<_GtkMenuFactory*>);
