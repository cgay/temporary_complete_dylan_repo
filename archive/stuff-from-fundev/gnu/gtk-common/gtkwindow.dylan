Module:    gtk-common
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "gtkwindow.h"; do not edit.

define C-pointer-type <GtkWindow*> => <GtkWindow>;
define C-pointer-type <GtkWindow**> => <GtkWindow*>;
define C-pointer-type <GtkWindowClass*> => <GtkWindowClass>;
define C-pointer-type <GtkWindowClass**> => <GtkWindowClass*>;

define C-struct <_GtkWindow>
  sealed inline-only slot bin-value      :: <GtkBin>;
  sealed inline-only slot title-value    :: <gchar*>;
  sealed inline-only slot wmclass-name-value :: <gchar*>;
  sealed inline-only slot wmclass-class-value :: <gchar*>;
  sealed inline-only slot type-value     :: <GtkWindowType>;
  sealed inline-only slot focus-widget-value :: <GtkWidget*>;
  sealed inline-only slot default-widget-value :: <GtkWidget*>;
  sealed inline-only slot transient-parent-value :: <GtkWindow*>;
  sealed inline-only slot resize-count-value :: <gushort>;
  sealed bitfield slot allow-shrink-value :: <guint>,
    width: 1;
  sealed bitfield slot allow-grow-value  :: <guint>,
    width: 1;
  sealed bitfield slot auto-shrink-value :: <guint>,
    width: 1;
  sealed bitfield slot handling-resize-value ::
	<guint>,
    width: 1;
  sealed bitfield slot position-value    :: <guint>,
    width: 2;
  sealed bitfield slot use-uposition-value :: <guint>,
    width: 1;
  sealed bitfield slot modal-value       :: <guint>,
    width: 1;
  pointer-type-name: <_GtkWindow*>;
  c-name: "struct _GtkWindow";
end;

define C-struct <_GtkWindowClass>
  sealed inline-only slot parent-class-value :: <GtkBinClass>;
  sealed inline-only slot set-focus-value :: <C-function-pointer>;
  pointer-type-name: <_GtkWindowClass*>;
  c-name: "struct _GtkWindowClass";
end;

define inline-only C-function gtk-window-get-type
  result value :: <GtkType>;
  c-name: "gtk_window_get_type";
end;

define inline-only C-function gtk-window-new
  parameter type1      :: <GtkWindowType>;
  result value :: <GtkWidget*>;
  c-name: "gtk_window_new";
end;

define inline-only C-function gtk-window-set-title
  parameter window1    :: <GtkWindow*>;
  parameter title2     ::  /* const */ <gchar*>;
  c-name: "gtk_window_set_title";
end;

define inline-only C-function gtk-window-set-wmclass
  parameter window1    :: <GtkWindow*>;
  parameter wmclass_name2 ::  /* const */ <gchar*>;
  parameter wmclass_class3 ::  /* const */ <gchar*>;
  c-name: "gtk_window_set_wmclass";
end;

define inline-only C-function gtk-window-set-focus
  parameter window1    :: <GtkWindow*>;
  parameter focus2     :: <GtkWidget*>;
  c-name: "gtk_window_set_focus";
end;

define inline-only C-function gtk-window-set-default
  parameter window1    :: <GtkWindow*>;
  parameter defaultw2  :: <GtkWidget*>;
  c-name: "gtk_window_set_default";
end;

define inline-only C-function gtk-window-set-policy
  parameter window1    :: <GtkWindow*>;
  parameter allow_shrink2 :: <gint>;
  parameter allow_grow3 :: <gint>;
  parameter auto_shrink4 :: <gint>;
  c-name: "gtk_window_set_policy";
end;

define inline-only C-function gtk-window-add-accel-group
  parameter window1    :: <GtkWindow*>;
  parameter accel_group2 :: <GtkAccelGroup*>;
  c-name: "gtk_window_add_accel_group";
end;

define inline-only C-function gtk-window-remove-accel-group
  parameter window1    :: <GtkWindow*>;
  parameter accel_group2 :: <GtkAccelGroup*>;
  c-name: "gtk_window_remove_accel_group";
end;

define inline-only C-function gtk-window-set-position
  parameter window1    :: <GtkWindow*>;
  parameter position2  :: <GtkWindowPosition>;
  c-name: "gtk_window_set_position";
end;

define inline-only C-function gtk-window-activate-focus
  parameter window1    :: <GtkWindow*>;
  result value :: <gint>;
  c-name: "gtk_window_activate_focus";
end;

define inline-only C-function gtk-window-activate-default
  parameter window1    :: <GtkWindow*>;
  result value :: <gint>;
  c-name: "gtk_window_activate_default";
end;

define inline-only C-function gtk-window-set-transient-for
  parameter window1    :: <GtkWindow*>;
  parameter parent2    :: <GtkWindow*>;
  c-name: "gtk_window_set_transient_for";
end;

define inline-only C-function gtk-window-set-geometry-hints
  parameter window1    :: <GtkWindow*>;
  parameter geometry_widget2 :: <GtkWidget*>;
  parameter geometry3  :: <GdkGeometry*>;
  parameter geom_mask4 :: <GdkWindowHints>;
  c-name: "gtk_window_set_geometry_hints";
end;

define inline-only C-function gtk-window-set-default-size
  parameter window1    :: <GtkWindow*>;
  parameter width2     :: <gint>;
  parameter height3    :: <gint>;
  c-name: "gtk_window_set_default_size";
end;

define inline-only C-function gtk-window-set-modal
  parameter window1    :: <GtkWindow*>;
  parameter modal2     :: <gboolean>;
  c-name: "gtk_window_set_modal";
end;

define inline-only C-function gtk-window-remove-embedded-xid
  parameter window1    :: <GtkWindow*>;
  parameter xid2       :: <guint>;
  c-name: "gtk_window_remove_embedded_xid";
end;

define inline-only C-function gtk-window-add-embedded-xid
  parameter window1    :: <GtkWindow*>;
  parameter xid2       :: <guint>;
  c-name: "gtk_window_add_embedded_xid";
end;

define inline constant <GtkWindow> = <_GtkWindow>;
define inline constant <GtkWindowClass> = <_GtkWindowClass>;
define sealed domain make (singleton(<_GtkWindow*>));
define sealed domain initialize (<_GtkWindow*>);
define sealed domain make (singleton(<_GtkWindowClass*>));
define sealed domain initialize (<_GtkWindowClass*>);
