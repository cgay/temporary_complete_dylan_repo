Title:     `DUIM-OLE-Server' library description
Author:    David N. Gray
Date:	   August 3, 1996, updated August 7, 1996
Status:    current state of experiment in progress, not a proposal.
Copyright: 1996 Functional Objects, Inc.  All rights reserved.
Hope info: $Header: /scm/cvs/fundev/old/Sources/mini-duim/duim-ole-server/README.text,v 1.1 2004/03/12 00:41:41 cgay Exp $


This is a preliminary experiment on the way to creating a library that
enables using DUIM to create embedded or linked OLE parts.  This is
currently working (see the "ole-scribble" example program and its
"README.text" file), but there will be a lot of redesign before it reaches
its final form.  Everything is subject to change including the exported
functionality.

This currently only implements an embedded local server (with either
in-place or out-of-place activation).  It does not yet support linking or
an in-process server.

The intention is to eventually split this into two libraries, one which is
a high-level interface to OLE, and the other which fills in the
application-dependent parts by using DUIM.  Roughly speaking, the files
divide like this:

  generic framework files:

	declobj
	obj		CSimpSvrObj
	iec		CExternalConnection
	ioo		COleObject
	ioipao		COleInPlaceActiveObject
	ido		CDataObject
	ioipo		COleInPlaceObject
	ips		CPersistStorage

  application-specific files (here implemented as interface to "mini-duim"):

	declapp
	appobj		CSimpSvrObj
	app		CSimpSvrApp
	doc		CSimpSvrDoc
	icf		CClassFactory
	actions
	start

The methods with names of the form "OLE-part-..." are intended to be
implemented by the user of the generic framework, on a subclass of
`<ole-server-framework>'. 

To use this, an application program is written normally using (mini-)DUIM,
with the following differences:

 * Subclass `<ole-server-frame>' instead of `<frame>'.

 * Define methods for `save-frame-to-storage' and
   `load-frame-from-storage'. 

 * Call `ole-data-changed' on the frame when the data needs to be saved.

 * When making the frame, supply a `class-id:' argument whose value is
   created by `make-GUID'. 

 * The application needs to be registered; see the "ole-scribble" program
   for an example registration file.

Execution is initiated by calling `start-frame'.
