Module:    COM
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from winerror.h; do not edit.

define inline-only constant $FACILITY-WINDOWS     =  8;
define inline-only constant $FACILITY-STORAGE     =  3;
define inline-only constant $FACILITY-SSPI        =  9;
define inline-only constant $FACILITY-SETUPAPI    = 15;
define inline-only constant $FACILITY-RPC         =  1;
define inline-only constant $FACILITY-WIN32       =  7;
define inline-only constant $FACILITY-CONTROL     = 10;
define inline-only constant $FACILITY-NULL        =  0;
define inline-only constant $FACILITY-MSMQ        = 14;
define inline-only constant $FACILITY-MEDIASERVER = 13;
define inline-only constant $FACILITY-INTERNET    = 12;
define inline-only constant $FACILITY-ITF         =  4;
define inline-only constant $FACILITY-DISPATCH    =  2;
define inline-only constant $FACILITY-CERT        = 11;

// Catastrophic failure
define inline-only constant $E-UNEXPECTED =
	as(<machine-word>, #x8000FFFF);

// Not implemented
define inline-only constant $E-NOTIMPL =
	as(<machine-word>, #x80004001);

// Ran out of memory
define inline-only constant $E-OUTOFMEMORY =
	as(<machine-word>, #x8007000E);

// One or more arguments are invalid
define inline-only constant $E-INVALIDARG =
	as(<machine-word>, #x80070057);

// No such interface supported
define inline-only constant $E-NOINTERFACE =
	as(<machine-word>, #x80004002);

// Invalid pointer
define inline-only constant $E-POINTER =
	as(<machine-word>, #x80004003);

// Invalid handle
define inline-only constant $E-HANDLE =
	as(<machine-word>, #x80070006);

// Operation aborted
define inline-only constant $E-ABORT = as(<machine-word>, #x80004004);

// Unspecified error
define inline-only constant $E-FAIL  = as(<machine-word>, #x80004005);

// General access denied error
define inline-only constant $E-ACCESSDENIED =
	as(<machine-word>, #x80070005);

// The data necessary to complete this operation is not yet available.
define inline-only constant $E-PENDING =
	as(<machine-word>, #x8000000A);

// Thread local storage failure
define inline-only constant $CO-E-INIT-TLS =
	as(<machine-word>, #x80004006);

// Get shared memory allocator failure
define inline-only constant $CO-E-INIT-SHARED-ALLOCATOR =
	as(<machine-word>, #x80004007);

// Get memory allocator failure
define inline-only constant $CO-E-INIT-MEMORY-ALLOCATOR =
	as(<machine-word>, #x80004008);

// Unable to initialize class cache
define inline-only constant $CO-E-INIT-CLASS-CACHE =
	as(<machine-word>, #x80004009);

// Unable to initialize RPC services
define inline-only constant $CO-E-INIT-RPC-CHANNEL =
	as(<machine-word>, #x8000400A);

// Cannot set thread local storage channel control
define inline-only constant $CO-E-INIT-TLS-SET-CHANNEL-CONTROL =
	as(<machine-word>, #x8000400B);

// Could not allocate thread local storage channel control
define inline-only constant $CO-E-INIT-TLS-CHANNEL-CONTROL =
	as(<machine-word>, #x8000400C);

// The user supplied memory allocator is unacceptable
define inline-only constant $CO-E-INIT-UNACCEPTED-USER-ALLOCATOR =
	as(<machine-word>, #x8000400D);

// The OLE service mutex already exists
define inline-only constant $CO-E-INIT-SCM-MUTEX-EXISTS =
	as(<machine-word>, #x8000400E);

// The OLE service file mapping already exists
define inline-only constant $CO-E-INIT-SCM-FILE-MAPPING-EXISTS =
	as(<machine-word>, #x8000400F);

// Unable to map view of file for OLE service
define inline-only constant $CO-E-INIT-SCM-MAP-VIEW-OF-FILE =
	as(<machine-word>, #x80004010);

// Failure attempting to launch OLE service
define inline-only constant $CO-E-INIT-SCM-EXEC-FAILURE =
	as(<machine-word>, #x80004011);

// There was an attempt to call CoInitialize a second time while single threaded
define inline-only constant $CO-E-INIT-ONLY-SINGLE-THREADED =
	as(<machine-word>, #x80004012);

// A Remote activation was necessary but was not allowed
define inline-only constant $CO-E-CANT-REMOTE =
	as(<machine-word>, #x80004013);

// A Remote activation was necessary but the server name provided was invalid
define inline-only constant $CO-E-BAD-SERVER-NAME =
	as(<machine-word>, #x80004014);

// The class is configured to run as a security id different from the caller
define inline-only constant $CO-E-WRONG-SERVER-IDENTITY =
	as(<machine-word>, #x80004015);

// Use of Ole1 services requiring DDE windows is disabled
define inline-only constant $CO-E-OLE1DDE-DISABLED =
	as(<machine-word>, #x80004016);

// A RunAs specification must be <domain name>\<user name> or simply <user name>
define inline-only constant $CO-E-RUNAS-SYNTAX =
	as(<machine-word>, #x80004017);

// The server process could not be started.  The pathname may be incorrect.
define inline-only constant $CO-E-CREATEPROCESS-FAILURE =
	as(<machine-word>, #x80004018);

// The server process could not be started as the configured identity.  The pathname may be incorrect or unavailable.
define inline-only constant $CO-E-RUNAS-CREATEPROCESS-FAILURE =
	as(<machine-word>, #x80004019);

// The server process could not be started because the configured identity is incorrect.  Check the username and password.
define inline-only constant $CO-E-RUNAS-LOGON-FAILURE =
	as(<machine-word>, #x8000401A);

// The client is not allowed to launch this server.
define inline-only constant $CO-E-LAUNCH-PERMSSION-DENIED =
	as(<machine-word>, #x8000401B);

// The service providing this server could not be started.
define inline-only constant $CO-E-START-SERVICE-FAILURE =
	as(<machine-word>, #x8000401C);

// This computer was unable to communicate with the computer providing the server.
define inline-only constant $CO-E-REMOTE-COMMUNICATION-FAILURE =
	as(<machine-word>, #x8000401D);

// The server did not respond after being launched.
define inline-only constant $CO-E-SERVER-START-TIMEOUT =
	as(<machine-word>, #x8000401E);

// The registration information for this server is inconsistent or incomplete.
define inline-only constant $CO-E-CLSREG-INCONSISTENT =
	as(<machine-word>, #x8000401F);

// The registration information for this interface is inconsistent or incomplete.
define inline-only constant $CO-E-IIDREG-INCONSISTENT =
	as(<machine-word>, #x80004020);

// The operation attempted is not supported.
define inline-only constant $CO-E-NOT-SUPPORTED =
	as(<machine-word>, #x80004021);

// A dll must be loaded.
define inline-only constant $CO-E-RELOAD-DLL =
	as(<machine-word>, #x80004022);

// A Microsoft Software Installer error was encountered.
define inline-only constant $CO-E-MSI-ERROR =
	as(<machine-word>, #x80004023);
define inline-only constant $S-OK    = as(<machine-word>, #x00000000);
define inline-only constant $S-FALSE = as(<machine-word>, #x00000001);

// Class does not support aggregation (or class object is remote)
define inline-only constant $CLASS-E-NOAGGREGATION =
	as(<machine-word>, #x80040110);

// ClassFactory cannot supply requested class
define inline-only constant $CLASS-E-CLASSNOTAVAILABLE =
	as(<machine-word>, #x80040111);

// Class is not licensed for use
define inline-only constant $CLASS-E-NOTLICENSED =
	as(<machine-word>, #x80040112);

// Could not read key from registry
define inline-only constant $REGDB-E-READREGDB =
	as(<machine-word>, #x80040150);

// Could not write key to registry
define inline-only constant $REGDB-E-WRITEREGDB =
	as(<machine-word>, #x80040151);

// Could not find the key in the registry
define inline-only constant $REGDB-E-KEYMISSING =
	as(<machine-word>, #x80040152);

// Invalid value for registry
define inline-only constant $REGDB-E-INVALIDVALUE =
	as(<machine-word>, #x80040153);

// Class not registered
define inline-only constant $REGDB-E-CLASSNOTREG =
	as(<machine-word>, #x80040154);

// Interface not registered
define inline-only constant $REGDB-E-IIDNOTREG =
	as(<machine-word>, #x80040155);

// Moniker needs to be connected manually
define inline-only constant $MK-E-CONNECTMANUALLY =
	as(<machine-word>, #x800401E0);

// Operation exceeded deadline
define inline-only constant $MK-E-EXCEEDEDDEADLINE =
	as(<machine-word>, #x800401E1);

// Moniker needs to be generic
define inline-only constant $MK-E-NEEDGENERIC =
	as(<machine-word>, #x800401E2);

// Operation unavailable
define inline-only constant $MK-E-UNAVAILABLE =
	as(<machine-word>, #x800401E3);

// Invalid syntax
define inline-only constant $MK-E-SYNTAX =
	as(<machine-word>, #x800401E4);

// No object for moniker
define inline-only constant $MK-E-NOOBJECT =
	as(<machine-word>, #x800401E5);

// Bad extension for file
define inline-only constant $MK-E-INVALIDEXTENSION =
	as(<machine-word>, #x800401E6);

// Intermediate operation failed
define inline-only constant $MK-E-INTERMEDIATEINTERFACENOTSUPPORTED =
	as(<machine-word>, #x800401E7);

// Moniker is not bindable
define inline-only constant $MK-E-NOTBINDABLE =
	as(<machine-word>, #x800401E8);

// Moniker is not bound
define inline-only constant $MK-E-NOTBOUND =
	as(<machine-word>, #x800401E9);

// Moniker cannot open file
define inline-only constant $MK-E-CANTOPENFILE =
	as(<machine-word>, #x800401EA);

// User input required for operation to succeed
define inline-only constant $MK-E-MUSTBOTHERUSER =
	as(<machine-word>, #x800401EB);

// Moniker class has no inverse
define inline-only constant $MK-E-NOINVERSE =
	as(<machine-word>, #x800401EC);

// Moniker does not refer to storage
define inline-only constant $MK-E-NOSTORAGE =
	as(<machine-word>, #x800401ED);

// No common prefix
define inline-only constant $MK-E-NOPREFIX =
	as(<machine-word>, #x800401EE);

// Moniker could not be enumerated
define inline-only constant $MK-E-ENUMERATION-FAILED =
	as(<machine-word>, #x800401EF);

// CoInitialize has not been called.
define inline-only constant $CO-E-NOTINITIALIZED =
	as(<machine-word>, #x800401F0);

// CoInitialize has already been called.
define inline-only constant $CO-E-ALREADYINITIALIZED =
	as(<machine-word>, #x800401F1);

// Class of object cannot be determined
define inline-only constant $CO-E-CANTDETERMINECLASS =
	as(<machine-word>, #x800401F2);

// Invalid class string
define inline-only constant $CO-E-CLASSSTRING =
	as(<machine-word>, #x800401F3);

// Invalid interface string
define inline-only constant $CO-E-IIDSTRING =
	as(<machine-word>, #x800401F4);

// Application not found
define inline-only constant $CO-E-APPNOTFOUND =
	as(<machine-word>, #x800401F5);

// Application cannot be run more than once
define inline-only constant $CO-E-APPSINGLEUSE =
	as(<machine-word>, #x800401F6);

// Some error in application program
define inline-only constant $CO-E-ERRORINAPP =
	as(<machine-word>, #x800401F7);

// DLL for class not found
define inline-only constant $CO-E-DLLNOTFOUND =
	as(<machine-word>, #x800401F8);

// Error in the DLL
define inline-only constant $CO-E-ERRORINDLL =
	as(<machine-word>, #x800401F9);

// Wrong OS or OS version for application
define inline-only constant $CO-E-WRONGOSFORAPP =
	as(<machine-word>, #x800401FA);

// Object is not registered
define inline-only constant $CO-E-OBJNOTREG =
	as(<machine-word>, #x800401FB);

// Object is already registered
define inline-only constant $CO-E-OBJISREG =
	as(<machine-word>, #x800401FC);

// Object is not connected to server
define inline-only constant $CO-E-OBJNOTCONNECTED =
	as(<machine-word>, #x800401FD);

// Application was launched but it didn't register a class factory
define inline-only constant $CO-E-APPDIDNTREG =
	as(<machine-word>, #x800401FE);

// Object has been released
define inline-only constant $CO-E-RELEASED =
	as(<machine-word>, #x800401FF);

// Unable to impersonate DCOM client
define inline-only constant $CO-E-FAILEDTOIMPERSONATE =
	as(<machine-word>, #x80040200);

// Unable to obtain server's security context
define inline-only constant $CO-E-FAILEDTOGETSECCTX =
	as(<machine-word>, #x80040201);

// Unable to open the access token of the current thread
define inline-only constant $CO-E-FAILEDTOOPENTHREADTOKEN =
	as(<machine-word>, #x80040202);

// Unable to obtain user info from an access token
define inline-only constant $CO-E-FAILEDTOGETTOKENINFO =
	as(<machine-word>, #x80040203);

// The client who called IAccessControl::IsAccessPermitted was the trustee provided tot he method
define inline-only constant $CO-E-TRUSTEEDOESNTMATCHCLIENT =
	as(<machine-word>, #x80040204);

// Unable to obtain the client's security blanket
define inline-only constant $CO-E-FAILEDTOQUERYCLIENTBLANKET =
	as(<machine-word>, #x80040205);

// Unable to set a discretionary ACL into a security descriptor
define inline-only constant $CO-E-FAILEDTOSETDACL =
	as(<machine-word>, #x80040206);

// The system function, AccessCheck, returned false
define inline-only constant $CO-E-ACCESSCHECKFAILED =
	as(<machine-word>, #x80040207);

// Either NetAccessDel or NetAccessAdd returned an error code.
define inline-only constant $CO-E-NETACCESSAPIFAILED =
	as(<machine-word>, #x80040208);

// One of the trustee strings provided by the user did not conform to the <Domain>\<Name> syntax and it was not the "*" string
define inline-only constant $CO-E-WRONGTRUSTEENAMESYNTAX =
	as(<machine-word>, #x80040209);

// One of the security identifiers provided by the user was invalid
define inline-only constant $CO-E-INVALIDSID =
	as(<machine-word>, #x8004020A);

// Unable to convert a wide character trustee string to a multibyte trustee string
define inline-only constant $CO-E-CONVERSIONFAILED =
	as(<machine-word>, #x8004020B);

// Unable to find a security identifier that corresponds to a trustee string provided by the user
define inline-only constant $CO-E-NOMATCHINGSIDFOUND =
	as(<machine-word>, #x8004020C);

// The system function, LookupAccountSID, failed
define inline-only constant $CO-E-LOOKUPACCSIDFAILED =
	as(<machine-word>, #x8004020D);

// Unable to find a trustee name that corresponds to a security identifier provided by the user
define inline-only constant $CO-E-NOMATCHINGNAMEFOUND =
	as(<machine-word>, #x8004020E);

// The system function, LookupAccountName, failed
define inline-only constant $CO-E-LOOKUPACCNAMEFAILED =
	as(<machine-word>, #x8004020F);

// Unable to set or reset a serialization handle
define inline-only constant $CO-E-SETSERLHNDLFAILED =
	as(<machine-word>, #x80040210);

// Unable to obtain the Windows directory
define inline-only constant $CO-E-FAILEDTOGETWINDIR =
	as(<machine-word>, #x80040211);

// Path too long
define inline-only constant $CO-E-PATHTOOLONG =
	as(<machine-word>, #x80040212);

// Unable to generate a uuid.
define inline-only constant $CO-E-FAILEDTOGENUUID =
	as(<machine-word>, #x80040213);

// Unable to create file
define inline-only constant $CO-E-FAILEDTOCREATEFILE =
	as(<machine-word>, #x80040214);

// Unable to close a serialization handle or a file handle.
define inline-only constant $CO-E-FAILEDTOCLOSEHANDLE =
	as(<machine-word>, #x80040215);

// The number of ACEs in an ACL exceeds the system limit
define inline-only constant $CO-E-EXCEEDSYSACLLIMIT =
	as(<machine-word>, #x80040216);

// Not all the DENY_ACCESS ACEs are arranged in front of the GRANT_ACCESS ACEs in the stream
define inline-only constant $CO-E-ACESINWRONGORDER =
	as(<machine-word>, #x80040217);

// The version of ACL format in the stream is not supported by this implementation of IAccessControl
define inline-only constant $CO-E-INCOMPATIBLESTREAMVERSION =
	as(<machine-word>, #x80040218);

// Unable to open the access token of the server process
define inline-only constant $CO-E-FAILEDTOOPENPROCESSTOKEN =
	as(<machine-word>, #x80040219);

// Unable to decode the ACL in the stream provided by the user
define inline-only constant $CO-E-DECODEFAILED =
	as(<machine-word>, #x8004021A);

// The COM IAccessControl object is not initialized
define inline-only constant $CO-E-ACNOTINITIALIZED =
	as(<machine-word>, #x8004021B);
define inline-only constant $MK-S-REDUCED-TO-SELF =
	as(<machine-word>, #x000401E2);
define inline-only constant $MK-S-ME = as(<machine-word>, #x000401E4);
define inline-only constant $MK-S-HIM =
	as(<machine-word>, #x000401E5);
define inline-only constant $MK-S-US = as(<machine-word>, #x000401E6);
define inline-only constant $MK-S-MONIKERALREADYREGISTERED =
	as(<machine-word>, #x000401E7);

// Attempt to create a class object failed
define inline-only constant $CO-E-CLASS-CREATE-FAILED =
	as(<machine-word>, #x80080001);

// OLE service could not bind object
define inline-only constant $CO-E-SCM-ERROR =
	as(<machine-word>, #x80080002);

// RPC communication failed with OLE service
define inline-only constant $CO-E-SCM-RPC-FAILURE =
	as(<machine-word>, #x80080003);

// Bad path to object
define inline-only constant $CO-E-BAD-PATH =
	as(<machine-word>, #x80080004);

// Server execution failed
define inline-only constant $CO-E-SERVER-EXEC-FAILURE =
	as(<machine-word>, #x80080005);

// OLE service could not communicate with the object server
define inline-only constant $CO-E-OBJSRV-RPC-FAILURE =
	as(<machine-word>, #x80080006);

// Moniker path could not be normalized
define inline-only constant $MK-E-NO-NORMALIZED =
	as(<machine-word>, #x80080007);

// Object server is stopping when OLE service contacts it
define inline-only constant $CO-E-SERVER-STOPPING =
	as(<machine-word>, #x80080008);

// Unable to perform requested operation.
define inline-only constant $STG-E-INVALIDFUNCTION =
	as(<machine-word>, #x80030001);

// %1 could not be found.
define inline-only constant $STG-E-FILENOTFOUND =
	as(<machine-word>, #x80030002);

// The path %1 could not be found.
define inline-only constant $STG-E-PATHNOTFOUND =
	as(<machine-word>, #x80030003);

// There are insufficient resources to open another file.
define inline-only constant $STG-E-TOOMANYOPENFILES =
	as(<machine-word>, #x80030004);

// Access Denied.
define inline-only constant $STG-E-ACCESSDENIED =
	as(<machine-word>, #x80030005);

// Attempted an operation on an invalid object.
define inline-only constant $STG-E-INVALIDHANDLE =
	as(<machine-word>, #x80030006);

// There is insufficient memory available to complete operation.
define inline-only constant $STG-E-INSUFFICIENTMEMORY =
	as(<machine-word>, #x80030008);

// Invalid pointer error.
define inline-only constant $STG-E-INVALIDPOINTER =
	as(<machine-word>, #x80030009);

// There are no more entries to return.
define inline-only constant $STG-E-NOMOREFILES =
	as(<machine-word>, #x80030012);

// Disk is write-protected.
define inline-only constant $STG-E-DISKISWRITEPROTECTED =
	as(<machine-word>, #x80030013);

// An error occurred during a seek operation.
define inline-only constant $STG-E-SEEKERROR =
	as(<machine-word>, #x80030019);

// A disk error occurred during a write operation.
define inline-only constant $STG-E-WRITEFAULT =
	as(<machine-word>, #x8003001D);

// A disk error occurred during a read operation.
define inline-only constant $STG-E-READFAULT =
	as(<machine-word>, #x8003001E);

// A share violation has occurred.
define inline-only constant $STG-E-SHAREVIOLATION =
	as(<machine-word>, #x80030020);

// A lock violation has occurred.
define inline-only constant $STG-E-LOCKVIOLATION =
	as(<machine-word>, #x80030021);

// %1 already exists.
define inline-only constant $STG-E-FILEALREADYEXISTS =
	as(<machine-word>, #x80030050);

// Invalid parameter error.
define inline-only constant $STG-E-INVALIDPARAMETER =
	as(<machine-word>, #x80030057);

// There is insufficient disk space to complete operation.
define inline-only constant $STG-E-MEDIUMFULL =
	as(<machine-word>, #x80030070);

// Illegal write of non-simple property to simple property set.
define inline-only constant $STG-E-PROPSETMISMATCHED =
	as(<machine-word>, #x800300F0);

// An API call exited abnormally.
define inline-only constant $STG-E-ABNORMALAPIEXIT =
	as(<machine-word>, #x800300FA);

// The file %1 is not a valid compound file.
define inline-only constant $STG-E-INVALIDHEADER =
	as(<machine-word>, #x800300FB);

// The name %1 is not valid.
define inline-only constant $STG-E-INVALIDNAME =
	as(<machine-word>, #x800300FC);

// An unexpected error occurred.
define inline-only constant $STG-E-UNKNOWN =
	as(<machine-word>, #x800300FD);

// That function is not implemented.
define inline-only constant $STG-E-UNIMPLEMENTEDFUNCTION =
	as(<machine-word>, #x800300FE);

// Invalid flag error.
define inline-only constant $STG-E-INVALIDFLAG =
	as(<machine-word>, #x800300FF);

// Attempted to use an object that is busy.
define inline-only constant $STG-E-INUSE =
	as(<machine-word>, #x80030100);

// The storage has been changed since the last commit.
define inline-only constant $STG-E-NOTCURRENT =
	as(<machine-word>, #x80030101);

// Attempted to use an object that has ceased to exist.
define inline-only constant $STG-E-REVERTED =
	as(<machine-word>, #x80030102);

// Can't save.
define inline-only constant $STG-E-CANTSAVE =
	as(<machine-word>, #x80030103);

// The compound file %1 was produced with an incompatible version of storage.
define inline-only constant $STG-E-OLDFORMAT =
	as(<machine-word>, #x80030104);

// The compound file %1 was produced with a newer version of storage.
define inline-only constant $STG-E-OLDDLL =
	as(<machine-word>, #x80030105);

// Share.exe or equivalent is required for operation.
define inline-only constant $STG-E-SHAREREQUIRED =
	as(<machine-word>, #x80030106);

// Illegal operation called on non-file based storage.
define inline-only constant $STG-E-NOTFILEBASEDSTORAGE =
	as(<machine-word>, #x80030107);

// Illegal operation called on object with extant marshallings.
define inline-only constant $STG-E-EXTANTMARSHALLINGS =
	as(<machine-word>, #x80030108);

// The docfile has been corrupted.
define inline-only constant $STG-E-DOCFILECORRUPT =
	as(<machine-word>, #x80030109);

// OLE32.DLL has been loaded at the wrong address.
define inline-only constant $STG-E-BADBASEADDRESS =
	as(<machine-word>, #x80030110);

// The file download was aborted abnormally.  The file is incomplete.
define inline-only constant $STG-E-INCOMPLETE =
	as(<machine-word>, #x80030201);

// The file download has been terminated.
define inline-only constant $STG-E-TERMINATED =
	as(<machine-word>, #x80030202);
define inline-only constant $STG-S-CONVERTED =
	as(<machine-word>, #x00030200);
define inline-only constant $STG-S-BLOCK =
	as(<machine-word>, #x00030201);
define inline-only constant $STG-S-RETRYNOW =
	as(<machine-word>, #x00030202);
define inline-only constant $STG-S-MONITORING =
	as(<machine-word>, #x00030203);
define inline-only constant $STG-S-MULTIPLEOPENS =
	as(<machine-word>, #x00030204);
define inline-only constant $STG-S-CONSOLIDATIONFAILED =
	as(<machine-word>, #x00030205);
define inline-only constant $STG-S-CANNOTCONSOLIDATE =
	as(<machine-word>, #x00030206);

// Call was rejected by callee.
define inline-only constant $RPC-E-CALL-REJECTED =
	as(<machine-word>, #x80010001);

// Call was canceled by the message filter.
define inline-only constant $RPC-E-CALL-CANCELED =
	as(<machine-word>, #x80010002);

// The caller is dispatching an intertask SendMessage call and
// cannot call out via PostMessage.
define inline-only constant $RPC-E-CANTPOST-INSENDCALL =
	as(<machine-word>, #x80010003);

// The caller is dispatching an asynchronous call and cannot
// make an outgoing call on behalf of this call.
define inline-only constant $RPC-E-CANTCALLOUT-INASYNCCALL =
	as(<machine-word>, #x80010004);

// It is illegal to call out while inside message filter.
define inline-only constant $RPC-E-CANTCALLOUT-INEXTERNALCALL =
	as(<machine-word>, #x80010005);

// The connection terminated or is in a bogus state
// and cannot be used any more. Other connections
// are still valid.
define inline-only constant $RPC-E-CONNECTION-TERMINATED =
	as(<machine-word>, #x80010006);

// The callee (server [not server application]) is not available
// and disappeared; all connections are invalid.  The call may
// have executed.
define inline-only constant $RPC-E-SERVER-DIED =
	as(<machine-word>, #x80010007);

// The caller (client) disappeared while the callee (server) was
// processing a call.
define inline-only constant $RPC-E-CLIENT-DIED =
	as(<machine-word>, #x80010008);

// The data packet with the marshalled parameter data is incorrect.
define inline-only constant $RPC-E-INVALID-DATAPACKET =
	as(<machine-word>, #x80010009);

// The call was not transmitted properly; the message queue
// was full and was not emptied after yielding.
define inline-only constant $RPC-E-CANTTRANSMIT-CALL =
	as(<machine-word>, #x8001000A);

// The client (caller) cannot marshall the parameter data - low memory, etc.
define inline-only constant $RPC-E-CLIENT-CANTMARSHAL-DATA =
	as(<machine-word>, #x8001000B);

// The client (caller) cannot unmarshall the return data - low memory, etc.
define inline-only constant $RPC-E-CLIENT-CANTUNMARSHAL-DATA =
	as(<machine-word>, #x8001000C);

// The server (callee) cannot marshall the return data - low memory, etc.
define inline-only constant $RPC-E-SERVER-CANTMARSHAL-DATA =
	as(<machine-word>, #x8001000D);

// The server (callee) cannot unmarshall the parameter data - low memory, etc.
define inline-only constant $RPC-E-SERVER-CANTUNMARSHAL-DATA =
	as(<machine-word>, #x8001000E);

// Received data is invalid; could be server or client data.
define inline-only constant $RPC-E-INVALID-DATA =
	as(<machine-word>, #x8001000F);

// A particular parameter is invalid and cannot be (un)marshalled.
define inline-only constant $RPC-E-INVALID-PARAMETER =
	as(<machine-word>, #x80010010);

// There is no second outgoing call on same channel in DDE conversation.
define inline-only constant $RPC-E-CANTCALLOUT-AGAIN =
	as(<machine-word>, #x80010011);

// The callee (server [not server application]) is not available
// and disappeared; all connections are invalid.  The call did not execute.
define inline-only constant $RPC-E-SERVER-DIED-DNE =
	as(<machine-word>, #x80010012);

// System call failed.
define inline-only constant $RPC-E-SYS-CALL-FAILED =
	as(<machine-word>, #x80010100);

// Could not allocate some required resource (memory, events, ...)
define inline-only constant $RPC-E-OUT-OF-RESOURCES =
	as(<machine-word>, #x80010101);

// Attempted to make calls on more than one thread in single threaded mode.
define inline-only constant $RPC-E-ATTEMPTED-MULTITHREAD =
	as(<machine-word>, #x80010102);

// The requested interface is not registered on the server object.
define inline-only constant $RPC-E-NOT-REGISTERED =
	as(<machine-word>, #x80010103);

// RPC could not call the server or could not return the results of calling the server.
define inline-only constant $RPC-E-FAULT =
	as(<machine-word>, #x80010104);

// The server threw an exception.
define inline-only constant $RPC-E-SERVERFAULT =
	as(<machine-word>, #x80010105);

// Cannot change thread mode after it is set.
define inline-only constant $RPC-E-CHANGED-MODE =
	as(<machine-word>, #x80010106);

// The method called does not exist on the server.
define inline-only constant $RPC-E-INVALIDMETHOD =
	as(<machine-word>, #x80010107);

// The object invoked has disconnected from its clients.
define inline-only constant $RPC-E-DISCONNECTED =
	as(<machine-word>, #x80010108);

// The object invoked chose not to process the call now.  Try again later.
define inline-only constant $RPC-E-RETRY =
	as(<machine-word>, #x80010109);

// The message filter indicated that the application is busy.
define inline-only constant $RPC-E-SERVERCALL-RETRYLATER =
	as(<machine-word>, #x8001010A);

// The message filter rejected the call.
define inline-only constant $RPC-E-SERVERCALL-REJECTED =
	as(<machine-word>, #x8001010B);

// A call control interfaces was called with invalid data.
define inline-only constant $RPC-E-INVALID-CALLDATA =
	as(<machine-word>, #x8001010C);

// An outgoing call cannot be made since the application is dispatching an input-synchronous call.
define inline-only constant $RPC-E-CANTCALLOUT-ININPUTSYNCCALL =
	as(<machine-word>, #x8001010D);

// The application called an interface that was marshalled for a different thread.
define inline-only constant $RPC-E-WRONG-THREAD =
	as(<machine-word>, #x8001010E);

// CoInitialize has not been called on the current thread.
define inline-only constant $RPC-E-THREAD-NOT-INIT =
	as(<machine-word>, #x8001010F);

// The version of OLE on the client and server machines does not match.
define inline-only constant $RPC-E-VERSION-MISMATCH =
	as(<machine-word>, #x80010110);

// OLE received a packet with an invalid header.
define inline-only constant $RPC-E-INVALID-HEADER =
	as(<machine-word>, #x80010111);

// OLE received a packet with an invalid extension.
define inline-only constant $RPC-E-INVALID-EXTENSION =
	as(<machine-word>, #x80010112);

// The requested object or interface does not exist.
define inline-only constant $RPC-E-INVALID-IPID =
	as(<machine-word>, #x80010113);

// The requested object does not exist.
define inline-only constant $RPC-E-INVALID-OBJECT =
	as(<machine-word>, #x80010114);
define inline-only constant $RPC-S-CALLPENDING =
	as(<machine-word>, #x80010115);
define inline-only constant $RPC-S-WAITONTIMER =
	as(<machine-word>, #x80010116);

// Call context cannot be accessed after call completed.
define inline-only constant $RPC-E-CALL-COMPLETE =
	as(<machine-word>, #x80010117);

// Impersonate on unsecure calls is not supported.
define inline-only constant $RPC-E-UNSECURE-CALL =
	as(<machine-word>, #x80010118);

// Security must be initialized before any interfaces are marshalled or
// unmarshalled.  It cannot be changed once initialized.
define inline-only constant $RPC-E-TOO-LATE =
	as(<machine-word>, #x80010119);

// No security packages are installed on this machine or the user is not logged
// on or there are no compatible security packages between the client and server.
define inline-only constant $RPC-E-NO-GOOD-SECURITY-PACKAGES =
	as(<machine-word>, #x8001011A);

// Access is denied.
define inline-only constant $RPC-E-ACCESS-DENIED =
	as(<machine-word>, #x8001011B);

// Remote calls are not allowed for this process.
define inline-only constant $RPC-E-REMOTE-DISABLED =
	as(<machine-word>, #x8001011C);

// The marshaled interface data packet (OBJREF) has an invalid or unknown format.
define inline-only constant $RPC-E-INVALID-OBJREF =
	as(<machine-word>, #x8001011D);

// No context is associated with this call.  This happens for some custom
// marshalled calls and on the client side of the call.
define inline-only constant $RPC-E-NO-CONTEXT =
	as(<machine-word>, #x8001011E);

// This operation returned because the timeout period expired.
define inline-only constant $RPC-E-TIMEOUT =
	as(<machine-word>, #x8001011F);

// There are no synchronize objects to wait on.
define inline-only constant $RPC-E-NO-SYNC =
	as(<machine-word>, #x80010120);

// An internal error occurred.
define inline-only constant $RPC-E-UNEXPECTED =
	as(<machine-word>, #x8001FFFF);
