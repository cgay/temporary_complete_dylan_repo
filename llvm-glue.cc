#include <llvm/BasicBlock.h>#include <llvm/Module.h>namespace d2c{  struct Obj  {    struct Class* c;  };    template <typename PREFIX, typename ELEM>  struct ArrayObject : PREFIX  {    std::size_t elems;    ELEM arr[];  };  struct ByteString : ArrayObject<Obj, unsigned char>  {  };  struct Symbol : Obj  {    ByteString* print_name;  };  struct Class : Obj  {    Symbol* name;  };}using namespace llvm;using namespace d2c;extern "C" void* make_llvm_BasicBlock(void){  return new BasicBlock();}extern "C" void delete_llvm_Value(Value* v){  delete v;}extern "C" void* make_llvm_Module(ByteString* name){  return new Module("TEST");}extern "C" void delete_llvm_Module(Module* m){  delete m;}extern "C" void* make_llvm_Function(FunctionType* type, void* name, Module* module){  return new Function(type, GlobalValue::ExternalLinkage, "TEST", module);}