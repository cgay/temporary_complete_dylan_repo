Module:    gtk-common
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "gtkaccelgroup.h"; do not edit.

define C-pointer-type <GtkAccelGroup*> => <GtkAccelGroup>;
define C-pointer-type <GtkAccelGroup**> => <GtkAccelGroup*>;
define C-pointer-type <GtkAccelEntry*> => <GtkAccelEntry>;
define C-pointer-type <GtkAccelEntry**> => <GtkAccelEntry*>;
// enum GtkAccelFlags:
define C-pointer-type <GtkAccelFlags*> => <GtkAccelFlags>;
define C-pointer-type <GtkAccelFlags**> => <GtkAccelFlags*>;
define inline-only constant $GTK-ACCEL-VISIBLE = ash(1,0);
define inline-only constant $GTK-ACCEL-SIGNAL-VISIBLE = ash(1,1);
define inline-only constant $GTK-ACCEL-LOCKED = ash(1,2);
define inline-only constant $GTK-ACCEL-MASK = #x07;


define C-struct <_GtkAccelGroup>
  sealed inline-only slot ref-count-value :: <guint>;
  sealed inline-only slot lock-count-value :: <guint>;
  sealed inline-only slot modifier-mask-value :: <GdkModifierType>;
  sealed inline-only slot attach-objects-value :: <GSList*>;
  pointer-type-name: <_GtkAccelGroup*>;
  c-name: "struct _GtkAccelGroup";
end;

define C-struct <_GtkAccelEntry>
  sealed inline-only slot accel-group-value :: <GtkAccelGroup*>;
  sealed inline-only slot accelerator-key-value :: <guint>;
  sealed inline-only slot accelerator-mods-value :: <GdkModifierType>;
  sealed inline-only slot accel-flags-value :: <C-int>;
  sealed inline-only slot object-value   :: <GtkObject*>;
  sealed inline-only slot signal-id-value :: <guint>;
  pointer-type-name: <_GtkAccelEntry*>;
  c-name: "struct _GtkAccelEntry";
end;

define inline-only C-function gtk-accel-group-new
  result value :: <GtkAccelGroup*>;
  c-name: "gtk_accel_group_new";
end;

define inline-only C-function gtk-accel-group-get-default
  result value :: <GtkAccelGroup*>;
  c-name: "gtk_accel_group_get_default";
end;

define inline-only C-function gtk-accel-group-ref
  parameter accel_group1 :: <GtkAccelGroup*>;
  result value :: <GtkAccelGroup*>;
  c-name: "gtk_accel_group_ref";
end;

define inline-only C-function gtk-accel-group-unref
  parameter accel_group1 :: <GtkAccelGroup*>;
  c-name: "gtk_accel_group_unref";
end;

define inline-only C-function gtk-accel-group-activate
  parameter accel_group1 :: <GtkAccelGroup*>;
  parameter accel_key2 :: <guint>;
  parameter accel_mods3 :: <GdkModifierType>;
  result value :: <gboolean>;
  c-name: "gtk_accel_group_activate";
end;

define inline-only C-function gtk-accel-groups-activate
  parameter object1    :: <GtkObject*>;
  parameter accel_key2 :: <guint>;
  parameter accel_mods3 :: <GdkModifierType>;
  result value :: <gboolean>;
  c-name: "gtk_accel_groups_activate";
end;

define inline-only C-function gtk-accel-group-attach
  parameter accel_group1 :: <GtkAccelGroup*>;
  parameter object2    :: <GtkObject*>;
  c-name: "gtk_accel_group_attach";
end;

define inline-only C-function gtk-accel-group-detach
  parameter accel_group1 :: <GtkAccelGroup*>;
  parameter object2    :: <GtkObject*>;
  c-name: "gtk_accel_group_detach";
end;

define inline-only C-function gtk-accel-group-lock
  parameter accel_group1 :: <GtkAccelGroup*>;
  c-name: "gtk_accel_group_lock";
end;

define inline-only C-function gtk-accel-group-unlock
  parameter accel_group1 :: <GtkAccelGroup*>;
  c-name: "gtk_accel_group_unlock";
end;

define inline-only C-function gtk-accel-group-get-entry
  parameter accel_group1 :: <GtkAccelGroup*>;
  parameter accel_key2 :: <guint>;
  parameter accel_mods3 :: <GdkModifierType>;
  result value :: <GtkAccelEntry*>;
  c-name: "gtk_accel_group_get_entry";
end;

define inline-only C-function gtk-accel-group-lock-entry
  parameter accel_group1 :: <GtkAccelGroup*>;
  parameter accel_key2 :: <guint>;
  parameter accel_mods3 :: <GdkModifierType>;
  c-name: "gtk_accel_group_lock_entry";
end;

define inline-only C-function gtk-accel-group-unlock-entry
  parameter accel_group1 :: <GtkAccelGroup*>;
  parameter accel_key2 :: <guint>;
  parameter accel_mods3 :: <GdkModifierType>;
  c-name: "gtk_accel_group_unlock_entry";
end;

define inline-only C-function gtk-accel-group-add
  parameter accel_group1 :: <GtkAccelGroup*>;
  parameter accel_key2 :: <guint>;
  parameter accel_mods3 :: <GdkModifierType>;
  parameter accel_flags4 :: <C-int>;
  parameter object5    :: <GtkObject*>;
  parameter accel_signal6 ::  /* const */ <gchar*>;
  c-name: "gtk_accel_group_add";
end;

define inline-only C-function gtk-accel-group-remove
  parameter accel_group1 :: <GtkAccelGroup*>;
  parameter accel_key2 :: <guint>;
  parameter accel_mods3 :: <GdkModifierType>;
  parameter object4    :: <GtkObject*>;
  c-name: "gtk_accel_group_remove";
end;

define inline-only C-function gtk-accel-group-handle-add
  parameter object1    :: <GtkObject*>;
  parameter accel_signal_id2 :: <guint>;
  parameter accel_group3 :: <GtkAccelGroup*>;
  parameter accel_key4 :: <guint>;
  parameter accel_mods5 :: <GdkModifierType>;
  parameter accel_flags6 :: <C-int>;
  c-name: "gtk_accel_group_handle_add";
end;

define inline-only C-function gtk-accel-group-handle-remove
  parameter object1    :: <GtkObject*>;
  parameter accel_group2 :: <GtkAccelGroup*>;
  parameter accel_key3 :: <guint>;
  parameter accel_mods4 :: <GdkModifierType>;
  c-name: "gtk_accel_group_handle_remove";
end;

define inline-only C-function gtk-accel-group-create-add
  parameter class_type1 :: <GtkType>;
  parameter signal_flags2 :: <GtkSignalRunType>;
  parameter handler_offset3 :: <guint>;
  result value :: <guint>;
  c-name: "gtk_accel_group_create_add";
end;

define inline-only C-function gtk-accel-group-create-remove
  parameter class_type1 :: <GtkType>;
  parameter signal_flags2 :: <GtkSignalRunType>;
  parameter handler_offset3 :: <guint>;
  result value :: <guint>;
  c-name: "gtk_accel_group_create_remove";
end;

define inline-only C-function gtk-accel-group-marshal-add
  parameter object1    :: <GtkObject*>;
  parameter func2      :: <GtkSignalFunc>;
  parameter func_data3 :: <gpointer>;
  parameter args4      :: <GtkArg*>;
  c-name: "gtk_accel_group_marshal_add";
end;

define inline-only C-function gtk-accel-group-marshal-remove
  parameter object1    :: <GtkObject*>;
  parameter func2      :: <GtkSignalFunc>;
  parameter func_data3 :: <gpointer>;
  parameter args4      :: <GtkArg*>;
  c-name: "gtk_accel_group_marshal_remove";
end;

define inline-only C-function gtk-accel-groups-from-object
  parameter object1    :: <GtkObject*>;
  result value :: <GSList*>;
  c-name: "gtk_accel_groups_from_object";
end;

define inline-only C-function gtk-accel-group-entries-from-object
  parameter object1    :: <GtkObject*>;
  result value :: <GSList*>;
  c-name: "gtk_accel_group_entries_from_object";
end;

define inline-only C-function gtk-accelerator-valid
  parameter keyval1    :: <guint>;
  parameter modifiers2 :: <GdkModifierType>;
  result value :: <gboolean>;
  c-name: "gtk_accelerator_valid";
end;

define inline-only C-function gtk-accelerator-parse
  parameter accelerator1 ::  /* const */ <gchar*>;
  parameter accelerator_key2 :: <guint*>;
  parameter accelerator_mods3 :: <GdkModifierType*>;
  c-name: "gtk_accelerator_parse";
end;

define inline-only C-function gtk-accelerator-name
  parameter accelerator_key1 :: <guint>;
  parameter accelerator_mods2 :: <GdkModifierType>;
  result value :: <gchar*>;
  c-name: "gtk_accelerator_name";
end;

define inline-only C-function gtk-accelerator-set-default-mod-mask
  parameter default_mod_mask1 :: <GdkModifierType>;
  c-name: "gtk_accelerator_set_default_mod_mask";
end;

define inline-only C-function gtk-accelerator-get-default-mod-mask
  result value :: <guint>;
  c-name: "gtk_accelerator_get_default_mod_mask";
end;

define inline constant <GtkAccelGroup> = <_GtkAccelGroup>;
define inline constant <GtkAccelEntry> = <_GtkAccelEntry>;
define inline constant <GtkAccelFlags> = <c-signed-int>;
define sealed domain make (singleton(<_GtkAccelGroup*>));
define sealed domain initialize (<_GtkAccelGroup*>);
define sealed domain make (singleton(<_GtkAccelEntry*>));
define sealed domain initialize (<_GtkAccelEntry*>);
