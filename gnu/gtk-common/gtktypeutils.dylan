Module:    gtk-common
Copyright:    Original Code is Copyright (c) 1995-2004 Functional Objects, Inc.
              All rights reserved.
License:      Functional Objects Library Public License Version 1.0
Dual-license: GNU Lesser General Public License
Warranty:     Distributed WITHOUT WARRANTY OF ANY KIND

// This file is automatically generated from "gtktypeutils.h"; do not edit.

// enum GtkFundamentalType:
define C-pointer-type <GtkFundamentalType*> => <GtkFundamentalType>;
define C-pointer-type <GtkFundamentalType**> => <GtkFundamentalType*>;
define inline-only constant $GTK-TYPE-INVALID = -1 + 1;
define inline-only constant $GTK-TYPE-NONE = $GTK-TYPE-INVALID + 1;
define inline-only constant $GTK-TYPE-CHAR = $GTK-TYPE-NONE + 1;
define inline-only constant $GTK-TYPE-UCHAR = $GTK-TYPE-CHAR + 1;
define inline-only constant $GTK-TYPE-BOOL = $GTK-TYPE-UCHAR + 1;
define inline-only constant $GTK-TYPE-INT = $GTK-TYPE-BOOL + 1;
define inline-only constant $GTK-TYPE-UINT = $GTK-TYPE-INT + 1;
define inline-only constant $GTK-TYPE-LONG = $GTK-TYPE-UINT + 1;
define inline-only constant $GTK-TYPE-ULONG = $GTK-TYPE-LONG + 1;
define inline-only constant $GTK-TYPE-FLOAT = $GTK-TYPE-ULONG + 1;
define inline-only constant $GTK-TYPE-DOUBLE = $GTK-TYPE-FLOAT + 1;
define inline-only constant $GTK-TYPE-STRING = $GTK-TYPE-DOUBLE + 1;
define inline-only constant $GTK-TYPE-ENUM = $GTK-TYPE-STRING + 1;
define inline-only constant $GTK-TYPE-FLAGS = $GTK-TYPE-ENUM + 1;
define inline-only constant $GTK-TYPE-BOXED = $GTK-TYPE-FLAGS + 1;
define inline-only constant $GTK-TYPE-POINTER = $GTK-TYPE-BOXED + 1;
define inline-only constant $GTK-TYPE-SIGNAL = $GTK-TYPE-POINTER + 1;
define inline-only constant $GTK-TYPE-ARGS = $GTK-TYPE-SIGNAL + 1;
define inline-only constant $GTK-TYPE-CALLBACK = $GTK-TYPE-ARGS + 1;
define inline-only constant $GTK-TYPE-C-CALLBACK = $GTK-TYPE-CALLBACK + 1;
define inline-only constant $GTK-TYPE-FOREIGN = $GTK-TYPE-C-CALLBACK + 1;
define inline-only constant $GTK-TYPE-OBJECT = $GTK-TYPE-FOREIGN + 1;

define inline-only constant $GTK-TYPE-FUNDAMENTAL-MAX      =   32;
define C-pointer-type <GtkType*> => <GtkType>;
define C-pointer-type <GtkType**> => <GtkType*>;
define C-pointer-type <GtkTypeObject*> => <GtkTypeObject>;
define C-pointer-type <GtkTypeObject**> => <GtkTypeObject*>;
define C-pointer-type <GtkTypeClass*> => <GtkTypeClass>;
define C-pointer-type <GtkTypeClass**> => <GtkTypeClass*>;

define inline-only C-function gtk-identifier-get-type
  result value :: <GtkType>;
  c-name: "gtk_identifier_get_type";
end;
define C-pointer-type <GtkArg*> => <GtkArg>;
define C-pointer-type <GtkArg**> => <GtkArg*>;
define C-pointer-type <GtkObject*> => <GtkObject>;
define C-pointer-type <GtkObject**> => <GtkObject*>;
define C-pointer-type <GtkTypeInfo*> => <GtkTypeInfo>;
define C-pointer-type <GtkTypeInfo**> => <GtkTypeInfo*>;
define C-pointer-type <GtkTypeQuery*> => <GtkTypeQuery>;
define C-pointer-type <GtkTypeQuery**> => <GtkTypeQuery*>;
define C-pointer-type <GtkEnumValue*> => <GtkEnumValue>;
define C-pointer-type <GtkEnumValue**> => <GtkEnumValue*>;
define C-pointer-type <GtkFlagValue*> => <GtkFlagValue>;
define C-pointer-type <GtkFlagValue**> => <GtkFlagValue*>;
define C-pointer-type <GtkClassInitFunc*> => <GtkClassInitFunc>;
define C-pointer-type <GtkClassInitFunc**> => <GtkClassInitFunc*>;
define C-pointer-type <GtkObjectInitFunc*> => <GtkObjectInitFunc>;
define C-pointer-type <GtkObjectInitFunc**> => <GtkObjectInitFunc*>;
define C-pointer-type <GtkSignalFunc*> => <GtkSignalFunc>;
define C-pointer-type <GtkSignalFunc**> => <GtkSignalFunc*>;
define C-pointer-type <GtkFunction*> => <GtkFunction>;
define C-pointer-type <GtkFunction**> => <GtkFunction*>;
define C-pointer-type <GtkDestroyNotify*> => <GtkDestroyNotify>;
define C-pointer-type <GtkDestroyNotify**> => <GtkDestroyNotify*>;
define C-pointer-type <GtkCallbackMarshal*> => <GtkCallbackMarshal>;
define C-pointer-type <GtkCallbackMarshal**> => <GtkCallbackMarshal*>;
define C-pointer-type <GtkSignalMarshaller*> => <GtkSignalMarshaller>;
define C-pointer-type <GtkSignalMarshaller**> => <GtkSignalMarshaller*>;
define C-pointer-type <GtkArgGetFunc*> => <GtkArgGetFunc>;
define C-pointer-type <GtkArgGetFunc**> => <GtkArgGetFunc*>;
define C-pointer-type <GtkArgSetFunc*> => <GtkArgSetFunc>;
define C-pointer-type <GtkArgSetFunc**> => <GtkArgSetFunc*>;

define C-struct <_GtkTypeObject>
  sealed inline-only slot klass-value    :: <GtkTypeClass*>;
  pointer-type-name: <_GtkTypeObject*>;
  c-name: "struct _GtkTypeObject";
end;

define C-struct <_GtkTypeClass>
  sealed inline-only slot type-value     :: <GtkType>;
  pointer-type-name: <_GtkTypeClass*>;
  c-name: "struct _GtkTypeClass";
end;
define C-struct <signal_data%1>
  sealed inline-only slot f-value        :: <GtkSignalFunc>;
  sealed inline-only slot d-value        :: <gpointer>;
end;
define C-struct <args_data%2>
  sealed inline-only slot n-args-value   :: <gint>;
  sealed inline-only slot args-value     :: <GtkArg*>;
end;
define C-struct <callback_data%3>
  sealed inline-only slot marshal-value  :: <GtkCallbackMarshal>;
  sealed inline-only slot data-value     :: <gpointer>;
  sealed inline-only slot notify-value   :: <GtkDestroyNotify>;
end;
define C-struct <c_callback_data%4>
  sealed inline-only slot func-value     :: <GtkFunction>;
  sealed inline-only slot func-data-value :: <gpointer>;
end;
define C-struct <foreign_data%5>
  sealed inline-only slot data-value     :: <gpointer>;
  sealed inline-only slot notify-value   :: <GtkDestroyNotify>;
end;
define C-struct <signal_data%6>
  sealed inline-only slot f-value        :: <GtkSignalFunc>;
  sealed inline-only slot d-value        :: <gpointer>;
end;
define C-struct <args_data%7>
  sealed inline-only slot n-args-value   :: <gint>;
  sealed inline-only slot args-value     :: <GtkArg*>;
end;
define C-struct <callback_data%8>
  sealed inline-only slot marshal-value  :: <GtkCallbackMarshal>;
  sealed inline-only slot data-value     :: <gpointer>;
  sealed inline-only slot notify-value   :: <GtkDestroyNotify>;
end;
define C-struct <c_callback_data%9>
  sealed inline-only slot func-value     :: <GtkFunction>;
  sealed inline-only slot func-data-value :: <gpointer>;
end;
define C-struct <foreign_data%10>
  sealed inline-only slot data-value     :: <gpointer>;
  sealed inline-only slot notify-value   :: <GtkDestroyNotify>;
end;
define C-union <d%11>
  sealed inline-only slot char-data-value :: <gchar>;
  sealed inline-only slot uchar-data-value :: <guchar>;
  sealed inline-only slot bool-data-value :: <gboolean>;
  sealed inline-only slot int-data-value :: <gint>;
  sealed inline-only slot uint-data-value :: <guint>;
  sealed inline-only slot long-data-value :: <glong>;
  sealed inline-only slot ulong-data-value :: <gulong>;
  sealed inline-only slot float-data-value :: <gfloat>;
  sealed inline-only slot double-data-value :: <gdouble>;
  sealed inline-only slot string-data-value :: <gchar*>;
  sealed inline-only slot pointer-data-value :: <gpointer>;
  sealed inline-only slot object-data-value :: <GtkObject*>;
  sealed inline-only slot signal-data-value :: <signal_data%6>, setter: #f;
  sealed inline-only slot args-data-value :: <args_data%7>, setter: #f;
  sealed inline-only slot callback-data-value :: <callback_data%8>, setter: #f;
  sealed inline-only slot c-callback-data-value :: <c_callback_data%9>, setter: #f;
  sealed inline-only slot foreign-data-value :: <foreign_data%10>, setter: #f;
end;

define C-struct <_GtkArg>
  sealed inline-only slot type-value     :: <GtkType>;
  sealed inline-only slot name-value     :: <gchar*>;
  sealed inline-only slot d-value        :: <d%11>;
  pointer-type-name: <_GtkArg*>;
  c-name: "struct _GtkArg";
end;

define C-struct <_GtkTypeInfo>
  sealed inline-only slot type-name-value :: <gchar*>;
  sealed inline-only slot object-size-value :: <guint>;
  sealed inline-only slot class-size-value :: <guint>;
  sealed inline-only slot class-init-func-value :: <GtkClassInitFunc>;
  sealed inline-only slot object-init-func-value :: <GtkObjectInitFunc>;
  sealed inline-only slot reserved-1-value :: <gpointer>;
  sealed inline-only slot reserved-2-value :: <gpointer>;
  sealed inline-only slot base-class-init-func-value :: <GtkClassInitFunc>;
  pointer-type-name: <_GtkTypeInfo*>;
  c-name: "struct _GtkTypeInfo";
end;

define C-struct <_GtkTypeQuery>
  sealed inline-only slot type-value     :: <GtkType>;
  sealed inline-only slot type-name-value ::  /* const */ <gchar*>;
  sealed inline-only slot object-size-value :: <guint>;
  sealed inline-only slot class-size-value :: <guint>;
  pointer-type-name: <_GtkTypeQuery*>;
  c-name: "struct _GtkTypeQuery";
end;

define C-struct <_GtkEnumValue>
  sealed inline-only slot value-value    :: <guint>;
  sealed inline-only slot value-name-value :: <gchar*>;
  sealed inline-only slot value-nick-value :: <gchar*>;
  pointer-type-name: <_GtkEnumValue*>;
  c-name: "struct _GtkEnumValue";
end;

define inline-only C-function gtk-type-init
  c-name: "gtk_type_init";
end;

define inline-only C-function gtk-type-unique
  parameter parent_type1 :: <GtkType>;
  parameter type_info2 ::  /* const */ <GtkTypeInfo*>;
  result value :: <GtkType>;
  c-name: "gtk_type_unique";
end;

define inline-only C-function gtk-type-set-chunk-alloc
  parameter type1      :: <GtkType>;
  parameter n_chunks2  :: <guint>;
  c-name: "gtk_type_set_chunk_alloc";
end;

define inline-only C-function gtk-type-name
  parameter type1      :: <guint>;
  result value :: <gchar*>;
  c-name: "gtk_type_name";
end;

define inline-only C-function gtk-type-from-name
  parameter name1      ::  /* const */ <gchar*>;
  result value :: <GtkType>;
  c-name: "gtk_type_from_name";
end;

define inline-only C-function gtk-type-parent
  parameter type1      :: <GtkType>;
  result value :: <GtkType>;
  c-name: "gtk_type_parent";
end;

define inline-only C-function gtk-type-class
  parameter type1      :: <GtkType>;
  result value :: <gpointer>;
  c-name: "gtk_type_class";
end;

define inline-only C-function gtk-type-parent-class
  parameter type1      :: <GtkType>;
  result value :: <gpointer>;
  c-name: "gtk_type_parent_class";
end;

define inline-only C-function gtk-type-children-types
  parameter type1      :: <GtkType>;
  result value :: <GList*>;
  c-name: "gtk_type_children_types";
end;

define inline-only C-function gtk-type-new
  parameter type1      :: <GtkType>;
  result value :: <gpointer>;
  c-name: "gtk_type_new";
end;

define inline-only C-function gtk-type-free
  parameter type1      :: <GtkType>;
  parameter mem2       :: <gpointer>;
  c-name: "gtk_type_free";
end;

define inline-only C-function gtk-type-describe-heritage
  parameter type1      :: <GtkType>;
  c-name: "gtk_type_describe_heritage";
end;

define inline-only C-function gtk-type-describe-tree
  parameter type1      :: <GtkType>;
  parameter show_size2 :: <gboolean>;
  c-name: "gtk_type_describe_tree";
end;

define inline-only C-function gtk-type-is-a
  parameter type1      :: <GtkType>;
  parameter is_a_type2 :: <GtkType>;
  result value :: <gboolean>;
  c-name: "gtk_type_is_a";
end;

define inline-only C-function gtk-type-check-object-cast
  parameter type_object1 :: <GtkTypeObject*>;
  parameter cast_type2 :: <GtkType>;
  result value :: <GtkTypeObject*>;
  c-name: "gtk_type_check_object_cast";
end;

define inline-only C-function gtk-type-check-class-cast
  parameter klass1     :: <GtkTypeClass*>;
  parameter cast_type2 :: <GtkType>;
  result value :: <GtkTypeClass*>;
  c-name: "gtk_type_check_class_cast";
end;

define inline-only C-function gtk-type-register-enum
  parameter type_name1 ::  /* const */ <gchar*>;
  parameter values2    :: <GtkEnumValue*>;
  result value :: <GtkType>;
  c-name: "gtk_type_register_enum";
end;

define inline-only C-function gtk-type-register-flags
  parameter type_name1 ::  /* const */ <gchar*>;
  parameter values2    :: <GtkFlagValue*>;
  result value :: <GtkType>;
  c-name: "gtk_type_register_flags";
end;

define inline-only C-function gtk-type-enum-get-values
  parameter enum_type1 :: <GtkType>;
  result value :: <GtkEnumValue*>;
  c-name: "gtk_type_enum_get_values";
end;

define inline-only C-function gtk-type-flags-get-values
  parameter flags_type1 :: <GtkType>;
  result value :: <GtkFlagValue*>;
  c-name: "gtk_type_flags_get_values";
end;

define inline-only C-function gtk-type-enum-find-value
  parameter enum_type1 :: <GtkType>;
  parameter value_name2 ::  /* const */ <gchar*>;
  result value :: <GtkEnumValue*>;
  c-name: "gtk_type_enum_find_value";
end;

define inline-only C-function gtk-type-flags-find-value
  parameter flag_type1 :: <GtkType>;
  parameter value_name2 ::  /* const */ <gchar*>;
  result value :: <GtkFlagValue*>;
  c-name: "gtk_type_flags_find_value";
end;

define inline-only C-function gtk-type-set-varargs-type
  parameter foreign_type1 :: <GtkType>;
  parameter varargs_type2 :: <GtkType>;
  c-name: "gtk_type_set_varargs_type";
end;

define inline-only C-function gtk-type-get-varargs-type
  parameter foreign_type1 :: <GtkType>;
  result value :: <GtkType>;
  c-name: "gtk_type_get_varargs_type";
end;

define inline-only C-function gtk-type-query
  parameter type1      :: <GtkType>;
  result value :: <GtkTypeQuery*>;
  c-name: "gtk_type_query";
end;

define inline constant <GtkFundamentalType> = <c-signed-int>;
define inline-only constant $GTK-TYPE-FLAT-FIRST = $GTK-TYPE-CHAR;
define inline-only constant $GTK-TYPE-FLAT-LAST = $GTK-TYPE-POINTER;
define inline-only constant $GTK-TYPE-STRUCTURED-FIRST =
	$GTK-TYPE-SIGNAL;
define inline-only constant $GTK-TYPE-STRUCTURED-LAST =
	$GTK-TYPE-FOREIGN;
define inline-only constant $GTK-TYPE-FUNDAMENTAL-LAST =
	$GTK-TYPE-OBJECT;
define inline constant <GtkType> = <guint>;
define inline constant <GtkTypeObject> = <_GtkTypeObject>;
define inline constant <GtkTypeClass> = <_GtkTypeClass>;
define inline constant <GtkArg> = <_GtkArg>;
define inline constant <GtkObject> = <_GtkObject>;
define inline constant <GtkTypeInfo> = <_GtkTypeInfo>;
define inline constant <GtkTypeQuery> = <_GtkTypeQuery>;
define inline constant <GtkEnumValue> = <_GtkEnumValue>;
define inline constant <GtkFlagValue> = <_GtkEnumValue>;
define inline constant <GtkClassInitFunc> = <C-function-pointer>;
define inline constant <GtkObjectInitFunc> = <C-function-pointer>;
define inline constant <GtkSignalFunc> = <C-function-pointer>;
define inline constant <GtkFunction> = <C-function-pointer>;
define inline constant <GtkDestroyNotify> = <C-function-pointer>;
define inline constant <GtkCallbackMarshal> = <C-function-pointer>;
define inline constant <GtkSignalMarshaller> = <C-function-pointer>;
define inline constant <GtkArgGetFunc> = <C-function-pointer>;
define inline constant <GtkArgSetFunc> = <C-function-pointer>;
define sealed domain make (singleton(<_GtkTypeObject*>));
define sealed domain initialize (<_GtkTypeObject*>);
define sealed domain make (singleton(<_GtkTypeClass*>));
define sealed domain initialize (<_GtkTypeClass*>);
define sealed domain make (singleton(<_GtkArg*>));
define sealed domain initialize (<_GtkArg*>);
define sealed domain make (singleton(<_GtkTypeInfo*>));
define sealed domain initialize (<_GtkTypeInfo*>);
define sealed domain make (singleton(<_GtkTypeQuery*>));
define sealed domain initialize (<_GtkTypeQuery*>);
define sealed domain make (singleton(<_GtkEnumValue*>));
define sealed domain initialize (<_GtkEnumValue*>);
